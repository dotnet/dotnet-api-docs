<Window x:Class="SimpleStyles.Window1"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    >
  <Canvas Margin="10">

    <Canvas.Resources>


      <!-- 
      ===================================================================
      Simple Style for Button
      ===================================================================
      -->

      <!-- Button Style -->
      <!--<Snippet1>-->
      <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="Silver" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="FontSize" Value="8pt" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border 
                x:Name="OuterBorder" 
                Margin="1" 
                CornerRadius="2" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                Background="{TemplateBinding Background}" 
                BorderThickness="{TemplateBinding BorderThickness}">
                <Border 
                  x:Name="InnerBorder" 
                  CornerRadius="2" 
                  Padding="{TemplateBinding Padding}">
                  <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                      <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0" Color="Transparent"/>
                        <GradientStop Offset="1" Color="#33000000"/>
                      </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                  </Border.Background>
                  <ContentPresenter 
                    x:Name="ContentSite" 
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Border>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger 
                  Property="IsFocused" 
                  Value="true">
                  <Setter 
                    TargetName="OuterBorder" 
                    Property="BorderBrush" 
                    Value="Black" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                  <Setter 
                    TargetName="InnerBorder"  
                    Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                          <LinearGradientBrush.GradientStops>
                            <GradientStop Offset="0" Color="#88FFFFFF"/>
                            <GradientStop Offset="1" Color="#20000000"/>
                          </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Setter.Value>
                  </Setter>
                  <Setter 
                    TargetName="OuterBorder" 
                    Property="BorderBrush" 
                    Value="Gray" />
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                  <Setter 
                    TargetName="InnerBorder"  
                    Property="Background">
                    <Setter.Value>
                      <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                          <GradientStop Offset="0" Color="#10000000"/>
                          <GradientStop Offset="1" Color="#20000000"/>
                        </LinearGradientBrush.GradientStops>
                      </LinearGradientBrush>
                    </Setter.Value>
                  </Setter>
                </Trigger>
                <Trigger Property="IsDefaulted" Value="true">
                  <Setter 
                    TargetName="OuterBorder" 
                    Property="BorderBrush" 
                    Value="Black" />
                </Trigger>
      <!--<SnippetIsEnabledTrigger>-->
                <Trigger Property="IsEnabled" Value="false">
                  <Setter 
                    TargetName="InnerBorder" 
                    Property="Background" 
                    Value="#EEEEEE"  />
                  <Setter Property="BorderBrush" Value="Silver"  />
                </Trigger>
      <!--</SnippetIsEnabledTrigger>-->
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="Gray" />
          </Trigger>
          <Trigger Property="Width" Value="Auto">
            <Setter Property="MinWidth" Value="75" />
          </Trigger>
          <Trigger Property="Height" Value="Auto">
            <Setter Property="MinHeight" Value="23" />
          </Trigger>
        </Style.Triggers>
      </Style>

      <!--</Snippet1>-->

      <!-- 
      ===================================================================
      Simple Style for ScrollBar
      ===================================================================
      -->
      <!--<Snippet2>-->
      <!-- ScrollBar Resources -->

      <Style x:Key="ScrollBar_LineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Border x:Name="Border" CornerRadius="2" BorderBrush="Silver" 
                      BorderThickness="1">
                <Border.Background>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <LinearGradientBrush.GradientStops>
                      <GradientStop Offset="0" Color="White"/>
                      <GradientStop Offset="1" Color="#CDCDCD"/>
                    </LinearGradientBrush.GradientStops>
                  </LinearGradientBrush>
                </Border.Background>
                <Path HorizontalAlignment="Center" VerticalAlignment="Center" 
                      Fill="Gray" 
                      Data="{Binding Path=Content,
                             RelativeSource={RelativeSource TemplatedParent}}" />
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                  <Setter TargetName="Border" Property="Background">
                    <Setter.Value>
                      <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                          <GradientStop Offset="0" Color="White"/>
                          <GradientStop Offset="1" Color="#E0E0E0"/>
                        </LinearGradientBrush.GradientStops>
                      </LinearGradientBrush>
                    </Setter.Value>
                  </Setter>
                  <Setter TargetName="Border" Property="BorderBrush" 
                          Value="Gray" />
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                  <Setter TargetName="Border" Property="Background">
                    <Setter.Value>
                      <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                          <GradientStop Offset="0" Color="#EEEEEE"/>
                          <GradientStop Offset="1" Color="#DFDFDF"/>
                        </LinearGradientBrush.GradientStops>
                      </LinearGradientBrush>
                    </Setter.Value>
                  </Setter>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="ScrollBar_PageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Rectangle Fill="Transparent" />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="ScrollBar_Thumb" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
              <Border CornerRadius="3" BorderBrush="Silver" BorderThickness="1">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                      <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0" Color="White"/>
                        <GradientStop Offset="1" Color="#E4E4E4"/>
                      </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Border.Background>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <!-- ScrollBar Style -->

      <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Background" Value="#FBFBFB" />
        <Setter Property="Width" Value="16" />
        <Setter Property="MinWidth" Value="16" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="16" />
                  <RowDefinition Height="*"/>
                  <RowDefinition Height="16" />
                </Grid.RowDefinitions>
                <RepeatButton Grid.Row="0" 
                              Style="{DynamicResource ScrollBar_LineButton}"                               Command="ScrollBar.LineUpCommand" 
                              Content="M 0 4 L 7 4 L 3.5 0 Z" />
                <Border Grid.Row="1" BorderBrush="Silver" BorderThickness="1"                    Background="{TemplateBinding Background}" CornerRadius="2" />
                <!--<SnippetRepeatButtonStyle_a_lileib>-->
                <Track Grid.Row="1" Name="PART_Track" IsDirectionReversed="true">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBar_PageButton}" 
                                  Command="ScrollBar.PageUpCommand"/>
                   </Track.DecreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBar_Thumb}" 
                        MinHeight="4"/>
                  </Track.Thumb>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBar_PageButton}" 
                                      Command="ScrollBar.PageDownCommand"/>
                  </Track.IncreaseRepeatButton>
                </Track>
                <!--</SnippetRepeatButtonStyle_a_lileib>-->
                <RepeatButton Grid.Row="2" 
                              Style="{DynamicResource ScrollBar_LineButton}"                                                    Command="ScrollBar.LineDownCommand" 
                              Content="M 0 0 L 3.5 4 L 7 0 Z" />
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="Orientation" Value="Horizontal">
            <Setter Property="Width" Value="Auto" />
            <Setter Property="MinWidth" Value="0" />
            <Setter Property="Height" Value="16" />
            <Setter Property="MinHeight" Value="16" />
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                  <Grid Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="16" />
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="16" />
                    </Grid.ColumnDefinitions>
                    
                    <RepeatButton Grid.Column="0" 
                       Style="{DynamicResource ScrollBar_LineButton}"   
                       Command="ScrollBar.LineLeftCommand" 
                       Content="M 0 4 L 4 8 L 4 0 Z" />
                    <Border Grid.Column="1" BorderBrush="Silver" 
                            BorderThickness="1" 
                            Background="{TemplateBinding Background}" 
                            CornerRadius="2" />
                    <Track Grid.Column="1" Name="PART_Track" IsDirectionReversed="true">
                      <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBar_PageButton}" 
                                      Command="ScrollBar.PageLeftCommand"/>
                      </Track.DecreaseRepeatButton>
                      <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBar_Thumb}"
                               MinWidth="4"/>
                      </Track.Thumb>
                      <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBar_PageButton}" 
                                           Command="ScrollBar.PageRightCommand"/>
                      </Track.IncreaseRepeatButton>
                    </Track>
                    <RepeatButton Grid.Column="2" 
                         Style="{DynamicResource ScrollBar_LineButton}" 
                         Command="ScrollBar.LineRightCommand" 
                         Content="M 0 0 L 0 8 L 4 4 Z" />
                  </Grid>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Trigger>
        </Style.Triggers>
      </Style>
      <!--</Snippet2>-->
      <!-- 
      ===================================================================
      Simple Style for ListBox
      ===================================================================
      -->
      
      <!-- ListBox Style -->
      <!--<Snippet3>-->
      <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Silver" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="FontSize" Value="8pt" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListBox}">
              <Border 
                CornerRadius="2" 
                Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}"
              >
                <ScrollViewer 
                  CanContentScroll="true" 
                  Margin="1" 
                  HorizontalScrollBarVisibility="{TemplateBinding            
                  ScrollViewer.HorizontalScrollBarVisibility}"                                     VerticalScrollBarVisibility="{TemplateBinding
                    ScrollViewer.VerticalScrollBarVisibility}" 
                  Padding="{TemplateBinding Padding}"
                >
                  <ItemsPresenter />
                </ScrollViewer>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>

      <!--<SnippetMultiTriggerExample1>-->
        <Style.Triggers>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Background" Value="#EEEEEE" />
          </Trigger>

          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Property="HasItems" Value="false" />
              <Condition Property="Width" Value="Auto" />
            </MultiTrigger.Conditions>
            <Setter Property="MinWidth" Value="120"/>
          </MultiTrigger>

          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Property="HasItems" Value="false" />
              <Condition Property="Height" Value="Auto" />
            </MultiTrigger.Conditions>
            <Setter Property="MinHeight" Value="95"/>
          </MultiTrigger>
        </Style.Triggers>
      <!--</SnippetMultiTriggerExample1>-->

      </Style>
      <!--</Snippet3>-->
      <!-- ListBoxItem Style -->
      <!--<Snippet4>-->
      <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListBoxItem}">
              <Border 
                Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Padding="{TemplateBinding Padding}"
              >
                <ContentPresenter x:Name="ContentSite" 
                  HorizontalAlignment="{TemplateBinding 
                                        HorizontalContentAlignment}" 
                  VerticalAlignment="{TemplateBinding 
                                      VerticalContentAlignment}" 
                />
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsSelected" Value="true">
                  <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                          <LinearGradientBrush.GradientStops>
                            <GradientStop Offset="0" Color="#F9F9F9"/>
                            <GradientStop Offset="1" Color="#E9E9E9"/>
                          </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Setter.Value>
                  </Setter>
                  <Setter Property="BorderBrush" Value="Silver" />
                </Trigger>
                <MultiTrigger>
                  <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" 
                               Value="false" />
                  </MultiTrigger.Conditions>
                  <Setter Property="Background" Value="#F8F8F8" />
                  <Setter Property="BorderBrush" Value="#E0E0E0" />
                </MultiTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="Gray" />
          </Trigger>
        </Style.Triggers>
      </Style>
      <!--</Snippet4>-->
      <!-- 
      ===================================================================
      Simple Style for ComboBox
      ===================================================================
      -->
      <!--<Snippet5>-->
      <!-- ComboBox Resources -->

      <Style x:Key="ComboBox_Button" TargetType="{x:Type ToggleButton}" 
             BasedOn="{x:Null}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <Border x:Name="Border" CornerRadius="2" BorderBrush="Silver" 
                  BorderThickness="1">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                      <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0" Color="White"/>
                        <GradientStop Offset="1" Color="#CDCDCD"/>
                      </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </Border.Background>
                <Path HorizontalAlignment="Center" VerticalAlignment="Center" 
                       Fill="Gray" Data="M 0 0 L 3.5 4 L 7 0 Z" />
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                  <Setter TargetName="Border" Property="Background">
                    <Setter.Value>
                      <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                          <GradientStop Offset="0" Color="White"/>
                          <GradientStop Offset="1" Color="#E0E0E0"/>
                        </LinearGradientBrush.GradientStops>
                      </LinearGradientBrush>
                    </Setter.Value>
                  </Setter>
                  <Setter TargetName="Border" Property="BorderBrush" Value="Gray" />
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                  <Setter TargetName="Border" Property="Background">
                    <Setter.Value>
                      <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                          <GradientStop Offset="0" Color="#EEEEEE"/>
                          <GradientStop Offset="1" Color="#DFDFDF"/>
                        </LinearGradientBrush.GradientStops>
                      </LinearGradientBrush>
                    </Setter.Value>
                  </Setter>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <!--<SnippetComboBoxStyle>-->
      <!-- ComboBox Style -->
      <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}" 
             BasedOn="{x:Null}">

        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Silver" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="FontSize" Value="8pt" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" 
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" 
                Value="Auto" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ComboBox}">
              <Border BorderThickness="{TemplateBinding BorderThickness}"
                      BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="2">
                <Grid Margin="1">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="16" />
                  </Grid.ColumnDefinitions>
                  <!--<SnippetComboBoxSelectionBox>-->
                  <Border x:Name="ContentItemBorder" 
                          Margin="{TemplateBinding Padding}" >
                    <ContentPresenter x:Name="ContentSite" 
                         Content="{TemplateBinding SelectionBoxItem}" 
                         ContentTemplate="{TemplateBinding 
                                           SelectionBoxItemTemplate}" 
                         ContentTemplateSelector="{TemplateBinding 
                                          ItemTemplateSelector}" 
                         VerticalAlignment="Center" />
                  </Border>
                  <!--</SnippetComboBoxSelectionBox>-->
                  <ToggleButton Grid.ColumnSpan="2" Focusable="false" 
                       IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,
                          RelativeSource={RelativeSource TemplatedParent}}" 
                          ClickMode="Press"
                          OverridesDefaultStyle="true" Style="{x:Null}">
                    <ToggleButton.Template>
                      <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Rectangle Fill="Transparent" />
                      </ControlTemplate>
                    </ToggleButton.Template>
                  </ToggleButton>
                  <Border x:Name="EditableItemBorder" 
                          Margin="{TemplateBinding Padding}" Visibility="Collapsed" >
                    <TextBox x:Name="PART_EditableTextBox" 
                       OverridesDefaultStyle="true" MinWidth="0" MinHeight="0"
                       Background="Transparent" 
                       IsReadOnly="{Binding Path=IsReadOnly,
                         RelativeSource={RelativeSource TemplatedParent}}" >
                      <TextBox.Template>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                          <Border x:Name="PART_ContentHost" Focusable="false" 
                              Background="{TemplateBinding Background}" />
                        </ControlTemplate>
                      </TextBox.Template>
                    </TextBox>
                  </Border>
                  <ToggleButton Grid.Column="1" 
                        IsChecked="{Binding  Path=IsDropDownOpen,Mode=TwoWay,
                        RelativeSource={RelativeSource TemplatedParent}}" 
                        Style="{DynamicResource ComboBox_Button}">
                  </ToggleButton>
                  <Popup Placement="Bottom" VerticalOffset="2"  
                         IsOpen="{TemplateBinding IsDropDownOpen}" 
                         Focusable="False" 
                         MinWidth="{TemplateBinding ActualWidth}" 
                         MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="DropDownBorder" 
                            Background="{TemplateBinding Background}" 
                            BorderThickness="{TemplateBinding BorderThickness}"                              BorderBrush="{TemplateBinding BorderBrush}" >
                      <ScrollViewer CanContentScroll="true" Margin="2" >
                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                      </ScrollViewer>
                    </Border>
                  </Popup>
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <MultiTrigger>
                  <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="true" />
                    <Condition Property="IsDropDownOpen" Value="false" />
                  </MultiTrigger.Conditions>
                  <Setter TargetName="ContentItemBorder" Property="Background" 
                          Value="Gray" />
                </MultiTrigger>
                <Trigger Property="HasItems" Value="false">
                  <Setter TargetName="DropDownBorder" Property="MinHeight" 
                          Value="95" />
                </Trigger>
                <Trigger Property="IsEditable" Value="true">
                  <Setter TargetName="ContentItemBorder" Property="Visibility" 
                          Value="Collapsed" />
                  <Setter TargetName="EditableItemBorder" Property="Visibility" 
                          Value="Visible" />
                  <Setter Property="IsTabStop" Value="false" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="Gray" />
            <Setter Property="Background" Value="Silver" />
          </Trigger>
          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Property="IsKeyboardFocusWithin" Value="true" />
              <Condition Property="IsDropDownOpen" Value="false" />
            </MultiTrigger.Conditions>
            <Setter Property="Foreground" Value="White" />
          </MultiTrigger>
          <Trigger Property="Width" Value="Auto">
            <Setter Property="MinWidth" Value="150" />
          </Trigger>
          <Trigger Property="Height" Value="Auto">
            <Setter Property="MinHeight" Value="20" />
          </Trigger>
        </Style.Triggers>
      </Style>
      <!--</SnippetComboBoxStyle>-->

      <!--</Snippet5>-->

      <!--<Snippet6>-->
      <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
              <Border 
                Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Padding="{TemplateBinding Padding}"
              >
                <ContentPresenter x:Name="ContentSite" 
                  HorizontalAlignment="{TemplateBinding 
                                         HorizontalContentAlignment}" 
                  VerticalAlignment="{TemplateBinding 
                                         VerticalContentAlignment}" 
                />
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsHighlighted" Value="true">
                  <Setter Property="Background">
                    <Setter.Value>
                      <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                          <GradientStop Offset="0" Color="#F9F9F9"/>
                          <GradientStop Offset="1" Color="#E9E9E9"/>
                        </LinearGradientBrush.GradientStops>
                      </LinearGradientBrush>
                    </Setter.Value>
                  </Setter>
                  <Setter Property="BorderBrush" Value="Silver" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="Gray" />
          </Trigger>
        </Style.Triggers>
      </Style>

      <!--</Snippet6>-->
      <!-- 
      ===================================================================
      Simple Style for Menu
      ===================================================================
      -->
      <!--<Snippet7>-->
      <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="Silver" />
        <Setter Property="FontFamily" Value="Tahoma" />
        <Setter Property="FontSize" Value="8pt" />
        <Setter Property="Foreground" Value="#333333" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Menu}">
              <Border Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" >
                <ItemsPresenter KeyboardNavigation.TabNavigation="Cycle" 
                  Margin="{TemplateBinding Padding}" />
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <!--</Snippet7>-->
      <!-- ContextMenu Style -->
      <!--<Snippet8>-->
      <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="Silver" />
        <Setter Property="BorderBrush" Value="Silver" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="Tahoma" />
        <Setter Property="FontSize" Value="8pt" />
        <Setter Property="Foreground" Value="#333333" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ContextMenu}">
              <Border Background="#F4F4F4" 
                  BorderBrush="{TemplateBinding BorderBrush}" 
                  BorderThickness="{TemplateBinding BorderThickness}">
                <ItemsPresenter Margin="{TemplateBinding Padding}" 
                  KeyboardNavigation.DirectionalNavigation="Cycle" />
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <!--</Snippet8>-->
      <!--<Snippet9>-->
      <!-- MenuItem Resources -->



      <!-- TopLevelItem -->
      <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" 
             TargetType="{x:Type MenuItem}">
        <Border x:Name="ClassicBorder" 
                Background="{TemplateBinding Background}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                BorderBrush="{TemplateBinding BorderBrush}">
          <DockPanel x:Name="ContentPanel" Margin="1">
            <ContentPresenter x:Name="Icon" Margin="2" 
                VerticalAlignment="Center" ContentSource="Icon" />
            <Border x:Name="CheckMark" Margin="2" Visibility="Collapsed" 
                VerticalAlignment="Center" 
                Background="{TemplateBinding Foreground}" 
                CornerRadius="1" Width="8" Height="8" />
            <ContentPresenter x:Name="HeaderHost" ContentSource="Header" 
                Margin="{TemplateBinding Padding}"  RecognizesAccessKey="True" />
          </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="Icon" Value="{x:Null}">
            <Setter TargetName="Icon" Property="Visibility" 
                Value="Collapsed" />
          </Trigger>
          <Trigger Property="IsChecked" Value="true">
            <Setter TargetName="CheckMark" Property="Visibility" 
                 Value="Visible" />
            <Setter TargetName="Icon" Property="Visibility" 
                 Value="Collapsed" />
          </Trigger>
          <Trigger Property="IsHighlighted" Value="True">
            <Setter Property="Background">
              <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                  <LinearGradientBrush.GradientStops>
                    <GradientStop Offset="0" Color="#F9F9F9"/>
                    <GradientStop Offset="1" Color="#E9E9E9"/>
                  </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
              </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Silver" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>

      <!-- TopLevelHeader-->
                        <!--<SnippetTopLevelHeader>-->
      <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" 
           TargetType="{x:Type MenuItem}">
        <Border x:Name="ClassicBorder" Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}" 
                BorderBrush="{TemplateBinding BorderBrush}">
          <DockPanel x:Name="ContentPanel" Margin="1">
            <ContentPresenter x:Name="Icon" Margin="2" 
                VerticalAlignment="Center" ContentSource="Icon" />
            <Border x:Name="CheckMark" Margin="2" 
                   Visibility="Collapsed" VerticalAlignment="Center" 
                   Background="{TemplateBinding Foreground}" 
                   CornerRadius="1" Width="6" Height="6" />
            <ContentPresenter x:Name="HeaderHost" 
                ContentSource="Header" 
                Margin="{TemplateBinding Padding}"  
                RecognizesAccessKey="True" />
            <Popup x:Name="SubMenuPopup" Placement="Bottom" 
                IsOpen="{Binding Path=IsSubmenuOpen,
                          RelativeSource={RelativeSource TemplatedParent}}" 
                Focusable="false" >
              <Border Background="White" BorderBrush="Silver" BorderThickness="1">
                <ItemsPresenter Margin="{TemplateBinding Padding}" 
                      KeyboardNavigation.DirectionalNavigation="Cycle" />
              </Border>
            </Popup>
          </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="Icon" Value="{x:Null}">
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
          </Trigger>
          <Trigger Property="IsChecked" Value="true">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
          </Trigger>
          <Trigger Property="IsHighlighted" Value="True">
            <Setter Property="Background">
              <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                  <LinearGradientBrush.GradientStops>
                    <GradientStop Offset="0" Color="#F9F9F9"/>
                    <GradientStop Offset="1" Color="#E9E9E9"/>
                  </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
              </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Silver" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>
                        <!--</SnippetTopLevelHeader>-->

      <!-- SubMenuItem -->
      <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" 
             TargetType="{x:Type MenuItem}">
        <Border Background="{TemplateBinding Background}" 
            BorderThickness="{TemplateBinding BorderThickness}" 
            BorderBrush="{TemplateBinding BorderBrush}">
          <Grid Margin="{TemplateBinding Padding}">
            <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="12" Width="Auto" 
                SharedSizeGroup="IconGroup" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" 
                SharedSizeGroup="InputGestureTextGroup" />
            <ColumnDefinition Width="12" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="Icon" Grid.Column="0" Margin="2" 
                VerticalAlignment="Center" ContentSource="Icon" />
            <Border x:Name="CheckMark" Grid.Column="0" Margin="2" 
                VerticalAlignment="Center" Visibility="Collapsed" 
                Background="{TemplateBinding Foreground}" 
                CornerRadius="1" Width="6" Height="6" />
            <ContentPresenter x:Name="Header" Grid.Column="1" 
                Margin="2" VerticalAlignment="Center" 
                ContentSource="Header" RecognizesAccessKey="True" />
            <TextBlock x:Name="InputGestureText" Grid.Column="2" 
                Margin="2" VerticalAlignment="Center" 
               Text="{TemplateBinding InputGestureText}" />
          </Grid>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="Icon" Value="{x:Null}">
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
          </Trigger>
          <Trigger Property="IsChecked" Value="true">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
          </Trigger>
          <Trigger Property="IsHighlighted" Value="True">
            <Setter Property="Background">
              <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                  <LinearGradientBrush.GradientStops>
                    <GradientStop Offset="0" Color="#F9F9F9"/>
                    <GradientStop Offset="1" Color="#E9E9E9"/>
                  </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
              </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Silver" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>

      <!-- SubMenuHeader -->
      <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" 
            TargetType="{x:Type MenuItem}">
        <Border Background="{TemplateBinding Background}" 
            BorderThickness="{TemplateBinding BorderThickness}" 
            BorderBrush="{TemplateBinding BorderBrush}">
          <Grid Margin="{TemplateBinding Padding}">
            <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="12" Width="Auto" 
              SharedSizeGroup="IconGroup" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" 
              SharedSizeGroup="InputGestureTextGroup" />
            <ColumnDefinition Width="12" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="Icon" Grid.Column="0" 
               Margin="2" VerticalAlignment="Center" ContentSource="Icon" />
            <Border x:Name="CheckMark" Grid.Column="0" Margin="2" 
               VerticalAlignment="Center" Visibility="Collapsed" 
               Background="{TemplateBinding Foreground}" 
               CornerRadius="1" Width="8" Height="8" />
            <ContentPresenter x:Name="Header" Grid.Column="1" 
               Margin="2" VerticalAlignment="Center" 
               ContentSource="Header" RecognizesAccessKey="True" />
            <TextBlock x:Name="InputGestureText" Grid.Column="2" 
               Margin="2" VerticalAlignment="Center" 
               Text="{TemplateBinding InputGestureText}" />
            <Path x:Name="Arrow" Grid.Column="3" Margin="2" 
                VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" 
                Data="M 0 0L 0 8 L 4 4 Z" />
            <Popup x:Name="SubMenuPopup" Placement="Right" 
                IsOpen="{Binding Path=IsSubmenuOpen,
                    RelativeSource={RelativeSource TemplatedParent}}" 
                Focusable="false" >
              <Border Background="White" BorderBrush="Silver" 
                  BorderThickness="1">
                <ItemsPresenter Margin="{TemplateBinding Padding}"                      KeyboardNavigation.DirectionalNavigation="Cycle" />
              </Border>
            </Popup>
          </Grid>
        </Border>
        <ControlTemplate.Triggers>
          <Trigger Property="Icon" Value="{x:Null}">
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
          </Trigger>
          <Trigger Property="IsChecked" Value="true">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
          </Trigger>
          <Trigger Property="IsHighlighted" Value="True">
            <Setter Property="Background">
              <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                  <LinearGradientBrush.GradientStops>
                    <GradientStop Offset="0" Color="#F9F9F9"/>
                    <GradientStop Offset="1" Color="#E9E9E9"/>
                  </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
              </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="Silver" />
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>

      <!-- MenuItem Style -->

      <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="#333333" />
        <Style.Triggers>
          <Trigger Property="Role" Value="TopLevelHeader">
            <Setter Property="Template" 
                Value="{DynamicResource 
                       {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
          </Trigger>
          <Trigger Property="Role" Value="TopLevelItem">
            <Setter Property="Template" 
                Value="{DynamicResource 
                       {x:Static MenuItem.TopLevelItemTemplateKey}}" />
          </Trigger>
          <Trigger Property="Role" 
                Value="SubmenuHeader">
            <Setter Property="Template"  
                Value="{DynamicResource 
                       {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
          </Trigger>
          <Trigger Property="Role" Value="SubmenuItem">
            <Setter Property="DockPanel.Dock" Value="Top" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground"   
                Value="{DynamicResource 
                {x:Static SystemColors.GrayTextBrushKey}}" />
          </Trigger>
        </Style.Triggers>
      </Style>

      <!--</Snippet9>-->
      <!-- 
      ===================================================================
      Simple Style for Slider
      ===================================================================
      -->
      <!--<Snippet10>-->
      <!-- Slider Resources -->
      <Style x:Key="Slider_RepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Border Background="Transparent" />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="Slider_Thumb" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
              <Ellipse Stroke="Silver" StrokeThickness="1">
                <Ellipse.Fill>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <LinearGradientBrush.GradientStops>
                      <GradientStop Offset="0" Color="White"/>
                      <GradientStop Offset="1" Color="#CDCDCD"/>
                    </LinearGradientBrush.GradientStops>
                  </LinearGradientBrush>
                </Ellipse.Fill>
              </Ellipse>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="IsDragging" Value="true">
            <Setter Property="Background">
              <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                  <LinearGradientBrush.GradientStops>
                    <GradientStop Offset="0" Color="White"/>
                    <GradientStop Offset="1" Color="#E0E0E0"/>
                  </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
              </Setter.Value>
            </Setter>
          </Trigger>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Background" Value="#E4E4E4" />
          </Trigger>
        </Style.Triggers>
      </Style>

      <!-- Slider Style -->

      <Style x:Key="{x:Type Slider}" TargetType="{x:Type Slider}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="#E4E4E4" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Silver" />
        <Setter Property="Foreground" Value="Gray" />
        <Setter Property="MinWidth" Value="11" />
        <Setter Property="MinHeight" Value="24" />
        <Setter Property="Width" Value="104" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Slider}">
              <Grid ClipToBounds="false">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" 
                   MinHeight="{TemplateBinding Slider.MinHeight}" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                  </Grid.RowDefinitions>
                <TickBar x:Name="TopTick" Grid.Row="0" Placement="Top" 
                    Fill="{TemplateBinding Foreground}" 
                    Height="4" Visibility="Collapsed" />
                <Border Height="4" Grid.Row="1" CornerRadius="2" 
                     Background="{TemplateBinding Background}" 
                     BorderBrush="{TemplateBinding BorderBrush}" 
                     BorderThickness="{TemplateBinding BorderThickness}" 
                     Width="{TemplateBinding Width}"/>
                <Canvas Grid.Row="1" VerticalAlignment="Center" Height="4">
                  <Rectangle x:Name="PART_SelectionRange" Canvas.Top="1" 
                      Fill="{TemplateBinding Foreground}" Height="2.0" 
                      Visibility="Hidden" />
                </Canvas>
                <Track Grid.Row="1" Name="PART_Track">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource Slider_RepeatButton}" 
                        Command="Slider.DecreaseLarge" />
                  </Track.DecreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{DynamicResource Slider_Thumb}"/>
                  </Track.Thumb>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource Slider_RepeatButton}" 
                           Command="Slider.IncreaseLarge"/>
                  </Track.IncreaseRepeatButton>
                </Track>
                <TickBar x:Name="BottomTick" Grid.Row="2" 
                      Fill="{TemplateBinding Foreground}" Placement="Bottom" 
                      Height="4" Visibility="Collapsed"  />
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="TickPlacement" Value="TopLeft">
                  <Setter TargetName="TopTick" Property="Visibility" 
                     Value="Visible" />
                </Trigger>
                <Trigger Property="TickPlacement" 
                     Value="BottomRight">
                  <Setter TargetName="BottomTick" Property="Visibility" 
                     Value="Visible" />
                </Trigger>
                <Trigger Property="TickPlacement" Value="Both">
                  <Setter TargetName="TopTick" Property="Visibility" 
                      Value="Visible" />
                  <Setter TargetName="BottomTick" Property="Visibility" 
                      Value="Visible" />
                </Trigger>
                <Trigger Property="IsSelectionRangeEnabled" 
                      Value="true">
                  <Setter TargetName="PART_SelectionRange" 
                      Property="Visibility" Value="Visible" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="Orientation" Value="Vertical">
            <Setter Property="MinHeight" Value="11" />
            <Setter Property="Height" Value="104" />
            <Setter Property="MinWidth" Value="24" />
            <Setter Property="Width" Value="Auto" />
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                  <Grid ClipToBounds="false">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" 
                          MinWidth="{TemplateBinding Slider.MinHeight}" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <TickBar x:Name="LeftTick" Grid.Column="0" 
                        Placement="Left" Fill="{TemplateBinding Foreground}" 
                        Width="4" Visibility="Collapsed" />
                    <Border Width="4" Grid.Column="1" CornerRadius="2" 
                         Background="{TemplateBinding Background}" 
                         BorderBrush="{TemplateBinding BorderBrush}" 
                         BorderThickness="{TemplateBinding BorderThickness}" 
                         Height="{TemplateBinding Height}"/>
                    <Canvas Grid.Column="1" HorizontalAlignment="Center" Width="4">
                      <Rectangle x:Name="PART_SelectionRange" Canvas.Right="1" 
                         Fill="{TemplateBinding Foreground}" Width="2" 
                         Visibility="Hidden" />
                    </Canvas>
                    <Track Grid.Column="1" Name="PART_Track">
                      <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource Slider_RepeatButton}" 
                          Command="Slider.DecreaseLarge"/>
                      </Track.DecreaseRepeatButton>
                      <Track.Thumb>
                        <Thumb Style="{DynamicResource Slider_Thumb}"/>
                      </Track.Thumb>
                      <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource Slider_RepeatButton}" 
                          Command="Slider.IncreaseLarge"/>
                      </Track.IncreaseRepeatButton>
                    </Track>
                    <TickBar x:Name="RightTick" Grid.Column="2" 
                          Fill="{TemplateBinding Foreground}" 
                          Placement="Right" Width="4" Visibility="Collapsed"  />
                  </Grid>
                  <ControlTemplate.Triggers>
                    <Trigger Property="TickPlacement" Value="TopLeft">
                      <Setter TargetName="LeftTick" Property="Visibility"   
                         Value="Visible" />
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="BottomRight">
                      <Setter TargetName="RightTick" Property="Visibility" 
                         Value="Visible" />
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="Both">
                      <Setter TargetName="LeftTick" Property="Visibility" 
                         Value="Visible" />
                      <Setter TargetName="RightTick" Property="Visibility" 
                         Value="Visible" />
                    </Trigger>
                    <Trigger Property="IsSelectionRangeEnabled" Value="true">
                      <Setter TargetName="PART_SelectionRange" 
                          Property="Visibility" Value="Visible" />
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Trigger>
        </Style.Triggers>
      </Style>
      <!--</Snippet10>-->
      <!-- 
      ===================================================================
      Simple Style for CheckBox
      ===================================================================
      -->

      <!-- CheckBox Style -->
      <!--<Snippet11>-->
      <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">

        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background">
          <Setter.Value>
            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
              <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0" Color="White"/>
                <GradientStop Offset="1" Color="#CDCDCD"/>
              </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="Silver" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="FontSize" Value="8pt" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Padding" Value="3,1,0,0" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type CheckBox}">
                <BulletDecorator Background="Transparent">
                    <BulletDecorator.Bullet>
                      <Decorator>
                        <Grid>
                          <Rectangle x:Name="OuterRectangle" Width="12" 
                            Height="12" Fill="{TemplateBinding Background}" 
                            StrokeThickness="1" Stroke="{TemplateBinding BorderBrush}" 
                             RadiusX="1" RadiusY="1" />
                          <Rectangle x:Name="InnerRectangle" Width="6"  
                             Height="6" Fill="Gray" RadiusX="1" RadiusY="1" />
                        </Grid>
                        </Decorator>
                     </BulletDecorator.Bullet>
                  <ContentPresenter Margin="{TemplateBinding Padding}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            RecognizesAccessKey="True"/>
                  </BulletDecorator>
                   <ControlTemplate.Triggers>
                <Trigger Property="IsChecked" Value="false">
                  <Setter TargetName="InnerRectangle" Property="Visibility" 
                     Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsChecked" Value="{x:Null}">
                  <Setter TargetName="InnerRectangle" Property="Fill" 
                     Value="Silver" />
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                  <Setter TargetName="OuterRectangle" Property="Fill" 
                     Value="#F4F4F4" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                  <Setter TargetName="OuterRectangle" Property="Fill" 
                     Value="Silver" />
                  <Setter TargetName="InnerRectangle" Property="Fill" 
                     Value="Silver" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" 
               Value="{DynamicResource 
                      {x:Static SystemColors.ControlDarkBrushKey}}" />
          </Trigger>
        </Style.Triggers>
      </Style>
      <!--</Snippet11>-->
      <!-- 
      ===================================================================
      Simple Style for RadioButton
      ===================================================================
      -->

      <!-- RadioButton Style -->
      <!--<Snippet12>-->
      <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background">
          <Setter.Value>
            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
              <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0" Color="White"/>
                <GradientStop Offset="1" Color="#CDCDCD"/>
              </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="Silver" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="FontSize" Value="8pt" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Padding" Value="3,1,0,0" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RadioButton}">
              <BulletDecorator Background="Transparent">
                <BulletDecorator.Bullet>
                  <Decorator>
                    <Grid>
                      <Ellipse x:Name="OuterCircle" Width="12" Height="12" 
                            Fill="{TemplateBinding Background}" 
                            StrokeThickness="1" 
                            Stroke="{TemplateBinding BorderBrush}" />
                      <Ellipse x:Name="InnerCircle" Width="6"  
                               Height="6" Fill="Gray" />
                    </Grid>
                  </Decorator>
                </BulletDecorator.Bullet>
                <ContentPresenter Margin="{TemplateBinding Padding}"
                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                   RecognizesAccessKey="True" />
              </BulletDecorator>
              <ControlTemplate.Triggers>
                  <Trigger Property="IsChecked" Value="false">
                    <Setter TargetName="InnerCircle" Property="Visibility" 
                        Value="Collapsed" />
                  </Trigger>
                  <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="OuterCircle" Property="Fill" 
                        Value="#F4F4F4" />
                  </Trigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter TargetName="OuterCircle" Property="Fill" 
                        Value="Silver" />
                    <Setter TargetName="InnerCircle" Property="Fill" 
                        Value="Silver" />
                  </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="Silver" />
          </Trigger>
        </Style.Triggers>
      </Style>
      <!--</Snippet12>-->
      
     <!--
      ===================================================================
      Simple Style for TextBox
      ===================================================================
      -->
      <!--<Snippet15>-->
      <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBoxBase}">

        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Silver" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="FontSize" Value="8pt" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TextBox}">
              <Border CornerRadius="2" Background="{TemplateBinding Background}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                BorderBrush="{TemplateBinding BorderBrush}"  x:Name="TextBoxBorder">
                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" />
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Background" 
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            <Setter Property="Foreground" 
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
          </Trigger>
          <!-- Width -->
          <Trigger Property="Width" Value="Auto">
            <Setter Property="MinWidth" Value="100" />
          </Trigger>
          <!-- Height -->
          <Trigger Property="Height" Value="Auto">
            <Setter Property="MinHeight" Value="20" />
          </Trigger>
        </Style.Triggers>
      </Style>

      <Style x:Key="ControlTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Segoe"  />
        <Setter Property="FontWeight" Value="Bold"  />
      </Style>
      
    <!--</Snippet15>-->  
    </Canvas.Resources>


    <!-- BUTTON -->

    <TextBlock Canvas.Top="40" Canvas.Left="20" Style="{StaticResource ControlTextBlock}">Button</TextBlock>

    <Button Canvas.Top="70" Canvas.Left="20" IsDefault="true">OK</Button>
    <Button Canvas.Top="70" Canvas.Left="100">Cancel</Button>

    <!-- SLIDER -->

    <TextBlock Canvas.Top="120" Canvas.Left="20" 
           Style="{StaticResource ControlTextBlock}" >Slider</TextBlock>

    <Slider Width="150" Value="5" Canvas.Top="140" Canvas.Left="20"
             TickPlacement="BottomRight" />

    <!-- CHECKBOX -->

    <TextBlock Canvas.Top="190" Canvas.Left="20" 
           Style="{StaticResource ControlTextBlock}">CheckBox</TextBlock>

    <StackPanel Canvas.Top="220" Canvas.Left="20" Width="200">
      <CheckBox>One</CheckBox>
      <CheckBox>Two (this is a long one)</CheckBox>
      <CheckBox>Three</CheckBox>
    </StackPanel>


    <!-- RADIOBUTTON -->

    <TextBlock Canvas.Top="280" Canvas.Left="20" 
           Style="{StaticResource ControlTextBlock}">RadioButton</TextBlock>

    <StackPanel Canvas.Top="310" Canvas.Left="20" Width="200">
      <RadioButton>One</RadioButton>
      <RadioButton>Two (this is a long one)</RadioButton>
      <RadioButton>Three</RadioButton>
    </StackPanel>

      <!-- TEXTBOX -->
    <TextBlock Canvas.Top="370" Canvas.Left="20" 
            Style="{StaticResource ControlTextBlock}">TextBox</TextBlock>

    <TextBox Canvas.Top="400" Canvas.Left="20" Width="160" />


    <!-- LISTBOX -->

    <TextBlock Canvas.Top="40" Canvas.Left="300" 
            Style="{StaticResource ControlTextBlock}">ListBox</TextBlock>

    <ListBox Canvas.Top="70" Canvas.Left="300" Width="185" Height="80">
      <ListBoxItem>Select an item 1</ListBoxItem>
      <ListBoxItem>Select an item 2</ListBoxItem>
      <ListBoxItem>Select an item 3</ListBoxItem>
      <ListBoxItem>Select an item 4</ListBoxItem>
      <ListBoxItem>Select an item 5</ListBoxItem>
      <ListBoxItem>Select an item 6</ListBoxItem>
      <ListBoxItem>Select an item 7</ListBoxItem>
      <ListBoxItem>Select an item 8</ListBoxItem>
    </ListBox>


    <!-- COMBOBOX-->

    <TextBlock Canvas.Top="170" Canvas.Left="300" Style="{StaticResource ControlTextBlock}">ComboBox</TextBlock>

    <ComboBox Canvas.Top="200" Canvas.Left="300">
      <ComboBoxItem>Select Me! 1</ComboBoxItem>
      <ComboBoxItem>Select Me! 2</ComboBoxItem>
      <ComboBoxItem>Select Me! 3</ComboBoxItem>
      <ComboBoxItem>Select Me! 4</ComboBoxItem>
      <ComboBoxItem>Select Me! 5</ComboBoxItem>
      <ComboBoxItem>Select Me! 6</ComboBoxItem>
      <ComboBoxItem>Select Me! 7</ComboBoxItem>
      <ComboBoxItem>Select Me! 8</ComboBoxItem>
    </ComboBox>

    <ComboBox Canvas.Top="240" Canvas.Left="300" IsEditable="true">
      <ComboBoxItem>Select Me! 1</ComboBoxItem>
      <ComboBoxItem>Select Me! 2</ComboBoxItem>
      <ComboBoxItem>Select Me! 3</ComboBoxItem>
      <ComboBoxItem>Select Me! 4</ComboBoxItem>
      <ComboBoxItem>Select Me! 5</ComboBoxItem>
      <ComboBoxItem>Select Me! 6</ComboBoxItem>
      <ComboBoxItem>Select Me! 7</ComboBoxItem>
      <ComboBoxItem>Select Me! 8</ComboBoxItem>
    </ComboBox>


    <!-- MENU / CONTEXT MENU -->

    <TextBlock Canvas.Top="280" Canvas.Left="300" 
            Style="{StaticResource ControlTextBlock}">Menu / ContextMenu</TextBlock>

    <Menu Canvas.Top="310" Canvas.Left="300" Width="180" Background="#F4F4F4">
      <MenuItem Header="View">
        <MenuItem IsCheckable="true"  Header="Status"/>
        <MenuItem IsCheckable="true" Header="Color Box"/>
        <MenuItem IsCheckable="true" Header="Status Bar"/>
        <MenuItem IsCheckable="true" IsEnabled="false" Header="TextBlock ToolBar"/>
        <Separator/>
        <MenuItem Header="Zoom">
          <MenuItem Header="Four"/>
          <MenuItem Header="Five"/>
          <MenuItem Header="Six"/>
        </MenuItem>
        <MenuItem Header="View Bitmap"/>
      </MenuItem>
      <MenuItem Header="Edit">
        <MenuItem IsCheckable="true" Header="Add to"/>
        <MenuItem IsCheckable="true" Header="Organize Favorites"/>
        <Separator/>
        <MenuItem IsCheckable="true" Header="Yahoo"/>
        <MenuItem IsCheckable="true" Header="Amazon"/>
        <MenuItem IsCheckable="true" Header="Search"/>
      </MenuItem>

    </Menu>

    <Label Canvas.Top="330" Canvas.Left="300">
      <Label.ContextMenu>
        <ContextMenu>
          <MenuItem Header="File">
            <MenuItem Header="One"/>
            <MenuItem Header="Two"/>
            <MenuItem Header="Three">
              <MenuItem Header="Four"/>
              <MenuItem Header="Five"/>
              <MenuItem Header="Six"/>
            </MenuItem>
            <Separator/>
            <MenuItem Header="Seven"/>
          </MenuItem>

          <MenuItem Header="Edit">
          </MenuItem>
        </ContextMenu>
      </Label.ContextMenu>
      Right click to see a ContextMenu.
    </Label>

  </Canvas>
</Window>
