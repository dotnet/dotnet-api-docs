#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.Serialization;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="NORTHWND")]
public partial class NorthwindDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertEmployee(Employee instance);
  partial void UpdateEmployee(Employee instance);
  partial void DeleteEmployee(Employee instance);
  #endregion
	
	public NorthwindDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NorthwindConnection"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public NorthwindDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public NorthwindDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public NorthwindDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public NorthwindDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
}

[Table(Name="dbo.Employees")]
[DataContract()]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EmployeeID;
	
	private string _LastName;
	
	private string _FirstName;
	
	private string _Title;
	
	private string _TitleOfCourtesy;
	
	private System.Nullable<System.DateTime> _BirthDate;
	
	private System.Nullable<System.DateTime> _HireDate;
	
	private string _Address;
	
	private string _City;
	
	private string _Region;
	
	private string _PostalCode;
	
	private string _Country;
	
	private string _HomePhone;
	
	private string _Extension;
	
	private System.Data.Linq.Binary _Photo;
	
	private string _Notes;
	
	private System.Nullable<int> _ReportsTo;
	
	private string _PhotoPath;
	
	private EntitySet<Employee> _Employees;
	
	private EntityRef<Employee> _Employee1;
	
	private bool serializing;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTitleOfCourtesyChanging(string value);
    partial void OnTitleOfCourtesyChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnHireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHireDateChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnReportsToChanging(System.Nullable<int> value);
    partial void OnReportsToChanged();
    partial void OnPhotoPathChanging(string value);
    partial void OnPhotoPathChanged();
    #endregion
	
	public Employee()
	{
		this.Initialize();
	}
	
	[Column(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=1)]
	public int EmployeeID
	{
		get
		{
			return this._EmployeeID;
		}
		set
		{
			if ((this._EmployeeID != value))
			{
				this.OnEmployeeIDChanging(value);
				this.SendPropertyChanging();
				this._EmployeeID = value;
				this.SendPropertyChanged("EmployeeID");
				this.OnEmployeeIDChanged();
			}
		}
	}
	
	[Column(Storage="_LastName", DbType="NVarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=2)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[Column(Storage="_FirstName", DbType="NVarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=3)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=4)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_TitleOfCourtesy", DbType="NVarChar(25)", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=5)]
	public string TitleOfCourtesy
	{
		get
		{
			return this._TitleOfCourtesy;
		}
		set
		{
			if ((this._TitleOfCourtesy != value))
			{
				this.OnTitleOfCourtesyChanging(value);
				this.SendPropertyChanging();
				this._TitleOfCourtesy = value;
				this.SendPropertyChanged("TitleOfCourtesy");
				this.OnTitleOfCourtesyChanged();
			}
		}
	}
	
	[Column(Storage="_BirthDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=6)]
	public System.Nullable<System.DateTime> BirthDate
	{
		get
		{
			return this._BirthDate;
		}
		set
		{
			if ((this._BirthDate != value))
			{
				this.OnBirthDateChanging(value);
				this.SendPropertyChanging();
				this._BirthDate = value;
				this.SendPropertyChanged("BirthDate");
				this.OnBirthDateChanged();
			}
		}
	}
	
	[Column(Storage="_HireDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=7)]
	public System.Nullable<System.DateTime> HireDate
	{
		get
		{
			return this._HireDate;
		}
		set
		{
			if ((this._HireDate != value))
			{
				this.OnHireDateChanging(value);
				this.SendPropertyChanging();
				this._HireDate = value;
				this.SendPropertyChanged("HireDate");
				this.OnHireDateChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(60)", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=8)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_City", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=9)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[Column(Storage="_Region", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=10)]
	public string Region
	{
		get
		{
			return this._Region;
		}
		set
		{
			if ((this._Region != value))
			{
				this.OnRegionChanging(value);
				this.SendPropertyChanging();
				this._Region = value;
				this.SendPropertyChanged("Region");
				this.OnRegionChanged();
			}
		}
	}
	
	[Column(Storage="_PostalCode", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=11)]
	public string PostalCode
	{
		get
		{
			return this._PostalCode;
		}
		set
		{
			if ((this._PostalCode != value))
			{
				this.OnPostalCodeChanging(value);
				this.SendPropertyChanging();
				this._PostalCode = value;
				this.SendPropertyChanged("PostalCode");
				this.OnPostalCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Country", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=12)]
	public string Country
	{
		get
		{
			return this._Country;
		}
		set
		{
			if ((this._Country != value))
			{
				this.OnCountryChanging(value);
				this.SendPropertyChanging();
				this._Country = value;
				this.SendPropertyChanged("Country");
				this.OnCountryChanged();
			}
		}
	}
	
	[Column(Storage="_HomePhone", DbType="NVarChar(24)", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=13)]
	public string HomePhone
	{
		get
		{
			return this._HomePhone;
		}
		set
		{
			if ((this._HomePhone != value))
			{
				this.OnHomePhoneChanging(value);
				this.SendPropertyChanging();
				this._HomePhone = value;
				this.SendPropertyChanged("HomePhone");
				this.OnHomePhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Extension", DbType="NVarChar(4)", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=14)]
	public string Extension
	{
		get
		{
			return this._Extension;
		}
		set
		{
			if ((this._Extension != value))
			{
				this.OnExtensionChanging(value);
				this.SendPropertyChanging();
				this._Extension = value;
				this.SendPropertyChanged("Extension");
				this.OnExtensionChanged();
			}
		}
	}
	
	[Column(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=15)]
	public System.Data.Linq.Binary Photo
	{
		get
		{
			return this._Photo;
		}
		set
		{
			if ((this._Photo != value))
			{
				this.OnPhotoChanging(value);
				this.SendPropertyChanging();
				this._Photo = value;
				this.SendPropertyChanged("Photo");
				this.OnPhotoChanged();
			}
		}
	}
	
	[Column(Storage="_Notes", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=16)]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[Column(Storage="_ReportsTo", DbType="Int", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=17)]
	public System.Nullable<int> ReportsTo
	{
		get
		{
			return this._ReportsTo;
		}
		set
		{
			if ((this._ReportsTo != value))
			{
				if (this._Employee1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReportsToChanging(value);
				this.SendPropertyChanging();
				this._ReportsTo = value;
				this.SendPropertyChanged("ReportsTo");
				this.OnReportsToChanged();
			}
		}
	}
	
	[Column(Storage="_PhotoPath", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=18)]
	public string PhotoPath
	{
		get
		{
			return this._PhotoPath;
		}
		set
		{
			if ((this._PhotoPath != value))
			{
				this.OnPhotoPathChanging(value);
				this.SendPropertyChanging();
				this._PhotoPath = value;
				this.SendPropertyChanged("PhotoPath");
				this.OnPhotoPathChanged();
			}
		}
	}
	
	[Association(Name="Employee_Employee", Storage="_Employees", OtherKey="ReportsTo")]
	[DataMember(Order=19, EmitDefaultValue=false)]
	public EntitySet<Employee> Employees
	{
		get
		{
			if ((this.serializing 
						&& (this._Employees.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._Employees;
		}
		set
		{
			this._Employees.Assign(value);
		}
	}
	
	[Association(Name="Employee_Employee", Storage="_Employee1", ThisKey="ReportsTo", IsForeignKey=true)]
	public Employee Employee1
	{
		get
		{
			return this._Employee1.Entity;
		}
		set
		{
			Employee previousValue = this._Employee1.Entity;
			if (((previousValue != value) 
						|| (this._Employee1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee1.Entity = null;
					previousValue.Employees.Remove(this);
				}
				this._Employee1.Entity = value;
				if ((value != null))
				{
					value.Employees.Add(this);
					this._ReportsTo = value.EmployeeID;
				}
				else
				{
					this._ReportsTo = default(Nullable<int>);
				}
				this.SendPropertyChanged("Employee1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Employee1 = this;
	}
	
	private void detach_Employees(Employee entity)
	{
		this.SendPropertyChanging();
		entity.Employee1 = null;
	}
	
	private void Initialize()
	{
		this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
		this._Employee1 = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
	
	[OnSerializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnSerializing(StreamingContext context)
	{
		this.serializing = true;
	}
	
	[OnSerialized()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnSerialized(StreamingContext context)
	{
		this.serializing = false;
	}
}
#pragma warning restore 1591
