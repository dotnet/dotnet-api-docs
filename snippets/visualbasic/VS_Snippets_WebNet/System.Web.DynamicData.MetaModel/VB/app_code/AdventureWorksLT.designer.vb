'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorksLT_Data")>  _
Partial Public Class AdventureWorksLTDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSalesOrderHeader(instance As SalesOrderHeader)
    End Sub
  Partial Private Sub UpdateSalesOrderHeader(instance As SalesOrderHeader)
    End Sub
  Partial Private Sub DeleteSalesOrderHeader(instance As SalesOrderHeader)
    End Sub
  Partial Private Sub InsertErrorLog(instance As ErrorLog)
    End Sub
  Partial Private Sub UpdateErrorLog(instance As ErrorLog)
    End Sub
  Partial Private Sub DeleteErrorLog(instance As ErrorLog)
    End Sub
  Partial Private Sub InsertAddress(instance As Address)
    End Sub
  Partial Private Sub UpdateAddress(instance As Address)
    End Sub
  Partial Private Sub DeleteAddress(instance As Address)
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertCustomerAddress(instance As CustomerAddress)
    End Sub
  Partial Private Sub UpdateCustomerAddress(instance As CustomerAddress)
    End Sub
  Partial Private Sub DeleteCustomerAddress(instance As CustomerAddress)
    End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  Partial Private Sub InsertProductCategory(instance As ProductCategory)
    End Sub
  Partial Private Sub UpdateProductCategory(instance As ProductCategory)
    End Sub
  Partial Private Sub DeleteProductCategory(instance As ProductCategory)
    End Sub
  Partial Private Sub InsertProductDescription(instance As ProductDescription)
    End Sub
  Partial Private Sub UpdateProductDescription(instance As ProductDescription)
    End Sub
  Partial Private Sub DeleteProductDescription(instance As ProductDescription)
    End Sub
  Partial Private Sub InsertProductModel(instance As ProductModel)
    End Sub
  Partial Private Sub UpdateProductModel(instance As ProductModel)
    End Sub
  Partial Private Sub DeleteProductModel(instance As ProductModel)
    End Sub
  Partial Private Sub InsertProductModelProductDescription(instance As ProductModelProductDescription)
    End Sub
  Partial Private Sub UpdateProductModelProductDescription(instance As ProductModelProductDescription)
    End Sub
  Partial Private Sub DeleteProductModelProductDescription(instance As ProductModelProductDescription)
    End Sub
  Partial Private Sub InsertSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
  Partial Private Sub UpdateSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
  Partial Private Sub DeleteSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("AdventureWorksLT_DataConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property BuildVersions() As System.Data.Linq.Table(Of BuildVersion)
		Get
			Return Me.GetTable(Of BuildVersion)
		End Get
	End Property
	
	Public ReadOnly Property SalesOrderHeaders() As System.Data.Linq.Table(Of SalesOrderHeader)
		Get
			Return Me.GetTable(Of SalesOrderHeader)
		End Get
	End Property
	
	Public ReadOnly Property ErrorLogs() As System.Data.Linq.Table(Of ErrorLog)
		Get
			Return Me.GetTable(Of ErrorLog)
		End Get
	End Property
	
	Public ReadOnly Property Addresses() As System.Data.Linq.Table(Of Address)
		Get
			Return Me.GetTable(Of Address)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property CustomerAddresses() As System.Data.Linq.Table(Of CustomerAddress)
		Get
			Return Me.GetTable(Of CustomerAddress)
		End Get
	End Property
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
	
	Public ReadOnly Property ProductCategories() As System.Data.Linq.Table(Of ProductCategory)
		Get
			Return Me.GetTable(Of ProductCategory)
		End Get
	End Property
	
	Public ReadOnly Property ProductDescriptions() As System.Data.Linq.Table(Of ProductDescription)
		Get
			Return Me.GetTable(Of ProductDescription)
		End Get
	End Property
	
	Public ReadOnly Property ProductModels() As System.Data.Linq.Table(Of ProductModel)
		Get
			Return Me.GetTable(Of ProductModel)
		End Get
	End Property
	
	Public ReadOnly Property ProductModelProductDescriptions() As System.Data.Linq.Table(Of ProductModelProductDescription)
		Get
			Return Me.GetTable(Of ProductModelProductDescription)
		End Get
	End Property
	
	Public ReadOnly Property SalesOrderDetails() As System.Data.Linq.Table(Of SalesOrderDetail)
		Get
			Return Me.GetTable(Of SalesOrderDetail)
		End Get
	End Property
End Class

<Table(Name:="dbo.BuildVersion")>  _
Partial Public Class BuildVersion
	
	Private _SystemInformationID As Byte
	
	Private _Database_Version As String
	
	Private _VersionDate As Date
	
	Private _ModifiedDate As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_SystemInformationID", AutoSync:=AutoSync.Always, DbType:="TinyInt NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SystemInformationID() As Byte
		Get
			Return Me._SystemInformationID
		End Get
		Set
			If ((Me._SystemInformationID = value)  _
						= false) Then
				Me._SystemInformationID = value
			End If
		End Set
	End Property
	
	<Column(Name:="[Database Version]", Storage:="_Database_Version", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Database_Version() As String
		Get
			Return Me._Database_Version
		End Get
		Set
			If (String.Equals(Me._Database_Version, value) = false) Then
				Me._Database_Version = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_VersionDate", DbType:="DateTime NOT NULL")>  _
	Public Property VersionDate() As Date
		Get
			Return Me._VersionDate
		End Get
		Set
			If ((Me._VersionDate = value)  _
						= false) Then
				Me._VersionDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me._ModifiedDate = value
			End If
		End Set
	End Property
End Class

<Table(Name:="SalesLT.SalesOrderHeader")>  _
Partial Public Class SalesOrderHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SalesOrderID As Integer
	
	Private _RevisionNumber As Byte
	
	Private _OrderDate As Date
	
	Private _DueDate As Date
	
	Private _ShipDate As System.Nullable(Of Date)
	
	Private _Status As Byte
	
	Private _OnlineOrderFlag As Boolean
	
	Private _SalesOrderNumber As String
	
	Private _PurchaseOrderNumber As String
	
	Private _AccountNumber As String
	
	Private _CustomerID As Integer
	
	Private _ShipToAddressID As System.Nullable(Of Integer)
	
	Private _BillToAddressID As System.Nullable(Of Integer)
	
	Private _ShipMethod As String
	
	Private _CreditCardApprovalCode As String
	
	Private _SubTotal As Decimal
	
	Private _TaxAmt As Decimal
	
	Private _Freight As Decimal
	
	Private _TotalDue As Decimal
	
	Private _Comment As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _SalesOrderDetails As EntitySet(Of SalesOrderDetail)
	
	Private _Address As EntityRef(Of Address)
	
	Private _Address1 As EntityRef(Of Address)
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSalesOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalesOrderIDChanged()
    End Sub
    Partial Private Sub OnRevisionNumberChanging(value As Byte)
    End Sub
    Partial Private Sub OnRevisionNumberChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As Date)
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    Partial Private Sub OnDueDateChanging(value As Date)
    End Sub
    Partial Private Sub OnDueDateChanged()
    End Sub
    Partial Private Sub OnShipDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnShipDateChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Byte)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnOnlineOrderFlagChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOnlineOrderFlagChanged()
    End Sub
    Partial Private Sub OnSalesOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnSalesOrderNumberChanged()
    End Sub
    Partial Private Sub OnPurchaseOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPurchaseOrderNumberChanged()
    End Sub
    Partial Private Sub OnAccountNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNumberChanged()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnShipToAddressIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnShipToAddressIDChanged()
    End Sub
    Partial Private Sub OnBillToAddressIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBillToAddressIDChanged()
    End Sub
    Partial Private Sub OnShipMethodChanging(value As String)
    End Sub
    Partial Private Sub OnShipMethodChanged()
    End Sub
    Partial Private Sub OnCreditCardApprovalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCreditCardApprovalCodeChanged()
    End Sub
    Partial Private Sub OnSubTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSubTotalChanged()
    End Sub
    Partial Private Sub OnTaxAmtChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTaxAmtChanged()
    End Sub
    Partial Private Sub OnFreightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnFreightChanged()
    End Sub
    Partial Private Sub OnTotalDueChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotalDueChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SalesOrderDetails = New EntitySet(Of SalesOrderDetail)(AddressOf Me.attach_SalesOrderDetails, AddressOf Me.detach_SalesOrderDetails)
		Me._Address = CType(Nothing, EntityRef(Of Address))
		Me._Address1 = CType(Nothing, EntityRef(Of Address))
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Column(Storage:="_SalesOrderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SalesOrderID() As Integer
		Get
			Return Me._SalesOrderID
		End Get
		Set
			If ((Me._SalesOrderID = value)  _
						= false) Then
				Me.OnSalesOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrderID = value
				Me.SendPropertyChanged("SalesOrderID")
				Me.OnSalesOrderIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RevisionNumber", DbType:="TinyInt NOT NULL")>  _
	Public Property RevisionNumber() As Byte
		Get
			Return Me._RevisionNumber
		End Get
		Set
			If ((Me._RevisionNumber = value)  _
						= false) Then
				Me.OnRevisionNumberChanging(value)
				Me.SendPropertyChanging
				Me._RevisionNumber = value
				Me.SendPropertyChanged("RevisionNumber")
				Me.OnRevisionNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OrderDate", DbType:="DateTime NOT NULL")>  _
	Public Property OrderDate() As Date
		Get
			Return Me._OrderDate
		End Get
		Set
			If ((Me._OrderDate = value)  _
						= false) Then
				Me.OnOrderDateChanging(value)
				Me.SendPropertyChanging
				Me._OrderDate = value
				Me.SendPropertyChanged("OrderDate")
				Me.OnOrderDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DueDate", DbType:="DateTime NOT NULL")>  _
	Public Property DueDate() As Date
		Get
			Return Me._DueDate
		End Get
		Set
			If ((Me._DueDate = value)  _
						= false) Then
				Me.OnDueDateChanging(value)
				Me.SendPropertyChanging
				Me._DueDate = value
				Me.SendPropertyChanged("DueDate")
				Me.OnDueDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ShipDate", DbType:="DateTime")>  _
	Public Property ShipDate() As System.Nullable(Of Date)
		Get
			Return Me._ShipDate
		End Get
		Set
			If (Me._ShipDate.Equals(value) = false) Then
				Me.OnShipDateChanging(value)
				Me.SendPropertyChanging
				Me._ShipDate = value
				Me.SendPropertyChanged("ShipDate")
				Me.OnShipDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="TinyInt NOT NULL")>  _
	Public Property Status() As Byte
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OnlineOrderFlag", DbType:="Bit NOT NULL")>  _
	Public Property OnlineOrderFlag() As Boolean
		Get
			Return Me._OnlineOrderFlag
		End Get
		Set
			If ((Me._OnlineOrderFlag = value)  _
						= false) Then
				Me.OnOnlineOrderFlagChanging(value)
				Me.SendPropertyChanging
				Me._OnlineOrderFlag = value
				Me.SendPropertyChanged("OnlineOrderFlag")
				Me.OnOnlineOrderFlagChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SalesOrderNumber", AutoSync:=AutoSync.Always, DbType:="NVarChar(25) NOT NULL", CanBeNull:=false, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SalesOrderNumber() As String
		Get
			Return Me._SalesOrderNumber
		End Get
		Set
			If (String.Equals(Me._SalesOrderNumber, value) = false) Then
				Me.OnSalesOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrderNumber = value
				Me.SendPropertyChanged("SalesOrderNumber")
				Me.OnSalesOrderNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PurchaseOrderNumber", DbType:="NVarChar(25)")>  _
	Public Property PurchaseOrderNumber() As String
		Get
			Return Me._PurchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._PurchaseOrderNumber, value) = false) Then
				Me.OnPurchaseOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._PurchaseOrderNumber = value
				Me.SendPropertyChanged("PurchaseOrderNumber")
				Me.OnPurchaseOrderNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AccountNumber", DbType:="NVarChar(15)")>  _
	Public Property AccountNumber() As String
		Get
			Return Me._AccountNumber
		End Get
		Set
			If (String.Equals(Me._AccountNumber, value) = false) Then
				Me.OnAccountNumberChanging(value)
				Me.SendPropertyChanging
				Me._AccountNumber = value
				Me.SendPropertyChanged("AccountNumber")
				Me.OnAccountNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CustomerID", DbType:="Int NOT NULL")>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ShipToAddressID", DbType:="Int")>  _
	Public Property ShipToAddressID() As System.Nullable(Of Integer)
		Get
			Return Me._ShipToAddressID
		End Get
		Set
			If (Me._ShipToAddressID.Equals(value) = false) Then
				If Me._Address1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnShipToAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._ShipToAddressID = value
				Me.SendPropertyChanged("ShipToAddressID")
				Me.OnShipToAddressIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BillToAddressID", DbType:="Int")>  _
	Public Property BillToAddressID() As System.Nullable(Of Integer)
		Get
			Return Me._BillToAddressID
		End Get
		Set
			If (Me._BillToAddressID.Equals(value) = false) Then
				If Me._Address.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnBillToAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._BillToAddressID = value
				Me.SendPropertyChanged("BillToAddressID")
				Me.OnBillToAddressIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ShipMethod", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ShipMethod() As String
		Get
			Return Me._ShipMethod
		End Get
		Set
			If (String.Equals(Me._ShipMethod, value) = false) Then
				Me.OnShipMethodChanging(value)
				Me.SendPropertyChanging
				Me._ShipMethod = value
				Me.SendPropertyChanged("ShipMethod")
				Me.OnShipMethodChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreditCardApprovalCode", DbType:="VarChar(15)")>  _
	Public Property CreditCardApprovalCode() As String
		Get
			Return Me._CreditCardApprovalCode
		End Get
		Set
			If (String.Equals(Me._CreditCardApprovalCode, value) = false) Then
				Me.OnCreditCardApprovalCodeChanging(value)
				Me.SendPropertyChanging
				Me._CreditCardApprovalCode = value
				Me.SendPropertyChanged("CreditCardApprovalCode")
				Me.OnCreditCardApprovalCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SubTotal", DbType:="Money NOT NULL")>  _
	Public Property SubTotal() As Decimal
		Get
			Return Me._SubTotal
		End Get
		Set
			If ((Me._SubTotal = value)  _
						= false) Then
				Me.OnSubTotalChanging(value)
				Me.SendPropertyChanging
				Me._SubTotal = value
				Me.SendPropertyChanged("SubTotal")
				Me.OnSubTotalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TaxAmt", DbType:="Money NOT NULL")>  _
	Public Property TaxAmt() As Decimal
		Get
			Return Me._TaxAmt
		End Get
		Set
			If ((Me._TaxAmt = value)  _
						= false) Then
				Me.OnTaxAmtChanging(value)
				Me.SendPropertyChanging
				Me._TaxAmt = value
				Me.SendPropertyChanged("TaxAmt")
				Me.OnTaxAmtChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Freight", DbType:="Money NOT NULL")>  _
	Public Property Freight() As Decimal
		Get
			Return Me._Freight
		End Get
		Set
			If ((Me._Freight = value)  _
						= false) Then
				Me.OnFreightChanging(value)
				Me.SendPropertyChanging
				Me._Freight = value
				Me.SendPropertyChanged("Freight")
				Me.OnFreightChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalDue", AutoSync:=AutoSync.Always, DbType:="Money NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TotalDue() As Decimal
		Get
			Return Me._TotalDue
		End Get
		Set
			If ((Me._TotalDue = value)  _
						= false) Then
				Me.OnTotalDueChanging(value)
				Me.SendPropertyChanging
				Me._TotalDue = value
				Me.SendPropertyChanged("TotalDue")
				Me.OnTotalDueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comment", DbType:="NVarChar(MAX)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="SalesOrderHeader_SalesOrderDetail", Storage:="_SalesOrderDetails", OtherKey:="SalesOrderID")>  _
	Public Property SalesOrderDetails() As EntitySet(Of SalesOrderDetail)
		Get
			Return Me._SalesOrderDetails
		End Get
		Set
			Me._SalesOrderDetails.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Address_SalesOrderHeader", Storage:="_Address", ThisKey:="BillToAddressID", IsForeignKey:=true)>  _
	Public Property Address() As Address
		Get
			Return Me._Address.Entity
		End Get
		Set
			Dim previousValue As Address = Me._Address.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Address.Entity = Nothing
					previousValue.SalesOrderHeaders.Remove(Me)
				End If
				Me._Address.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SalesOrderHeaders.Add(Me)
					Me._BillToAddressID = value.AddressID
				Else
					Me._BillToAddressID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Address")
			End If
		End Set
	End Property
	
	<Association(Name:="Address_SalesOrderHeader1", Storage:="_Address1", ThisKey:="ShipToAddressID", IsForeignKey:=true)>  _
	Public Property Address1() As Address
		Get
			Return Me._Address1.Entity
		End Get
		Set
			Dim previousValue As Address = Me._Address1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Address1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Address1.Entity = Nothing
					previousValue.SalesOrderHeaders1.Remove(Me)
				End If
				Me._Address1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SalesOrderHeaders1.Add(Me)
					Me._ShipToAddressID = value.AddressID
				Else
					Me._ShipToAddressID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Address1")
			End If
		End Set
	End Property
	
	<Association(Name:="Customer_SalesOrderHeader", Storage:="_Customer", ThisKey:="CustomerID", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.SalesOrderHeaders.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SalesOrderHeaders.Add(Me)
					Me._CustomerID = value.CustomerID
				Else
					Me._CustomerID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SalesOrderDetails(ByVal entity As SalesOrderDetail)
		Me.SendPropertyChanging
		entity.SalesOrderHeader = Me
	End Sub
	
	Private Sub detach_SalesOrderDetails(ByVal entity As SalesOrderDetail)
		Me.SendPropertyChanging
		entity.SalesOrderHeader = Nothing
	End Sub
End Class

<Table(Name:="dbo.ErrorLog")>  _
Partial Public Class ErrorLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ErrorLogID As Integer
	
	Private _ErrorTime As Date
	
	Private _UserName As String
	
	Private _ErrorNumber As Integer
	
	Private _ErrorSeverity As System.Nullable(Of Integer)
	
	Private _ErrorState As System.Nullable(Of Integer)
	
	Private _ErrorProcedure As String
	
	Private _ErrorLine As System.Nullable(Of Integer)
	
	Private _ErrorMessage As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnErrorLogIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnErrorLogIDChanged()
    End Sub
    Partial Private Sub OnErrorTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnErrorTimeChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnErrorNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnErrorNumberChanged()
    End Sub
    Partial Private Sub OnErrorSeverityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnErrorSeverityChanged()
    End Sub
    Partial Private Sub OnErrorStateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnErrorStateChanged()
    End Sub
    Partial Private Sub OnErrorProcedureChanging(value As String)
    End Sub
    Partial Private Sub OnErrorProcedureChanged()
    End Sub
    Partial Private Sub OnErrorLineChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnErrorLineChanged()
    End Sub
    Partial Private Sub OnErrorMessageChanging(value As String)
    End Sub
    Partial Private Sub OnErrorMessageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ErrorLogID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ErrorLogID() As Integer
		Get
			Return Me._ErrorLogID
		End Get
		Set
			If ((Me._ErrorLogID = value)  _
						= false) Then
				Me.OnErrorLogIDChanging(value)
				Me.SendPropertyChanging
				Me._ErrorLogID = value
				Me.SendPropertyChanged("ErrorLogID")
				Me.OnErrorLogIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ErrorTime", DbType:="DateTime NOT NULL")>  _
	Public Property ErrorTime() As Date
		Get
			Return Me._ErrorTime
		End Get
		Set
			If ((Me._ErrorTime = value)  _
						= false) Then
				Me.OnErrorTimeChanging(value)
				Me.SendPropertyChanging
				Me._ErrorTime = value
				Me.SendPropertyChanged("ErrorTime")
				Me.OnErrorTimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UserName", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ErrorNumber", DbType:="Int NOT NULL")>  _
	Public Property ErrorNumber() As Integer
		Get
			Return Me._ErrorNumber
		End Get
		Set
			If ((Me._ErrorNumber = value)  _
						= false) Then
				Me.OnErrorNumberChanging(value)
				Me.SendPropertyChanging
				Me._ErrorNumber = value
				Me.SendPropertyChanged("ErrorNumber")
				Me.OnErrorNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ErrorSeverity", DbType:="Int")>  _
	Public Property ErrorSeverity() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorSeverity
		End Get
		Set
			If (Me._ErrorSeverity.Equals(value) = false) Then
				Me.OnErrorSeverityChanging(value)
				Me.SendPropertyChanging
				Me._ErrorSeverity = value
				Me.SendPropertyChanged("ErrorSeverity")
				Me.OnErrorSeverityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ErrorState", DbType:="Int")>  _
	Public Property ErrorState() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorState
		End Get
		Set
			If (Me._ErrorState.Equals(value) = false) Then
				Me.OnErrorStateChanging(value)
				Me.SendPropertyChanging
				Me._ErrorState = value
				Me.SendPropertyChanged("ErrorState")
				Me.OnErrorStateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ErrorProcedure", DbType:="NVarChar(126)")>  _
	Public Property ErrorProcedure() As String
		Get
			Return Me._ErrorProcedure
		End Get
		Set
			If (String.Equals(Me._ErrorProcedure, value) = false) Then
				Me.OnErrorProcedureChanging(value)
				Me.SendPropertyChanging
				Me._ErrorProcedure = value
				Me.SendPropertyChanged("ErrorProcedure")
				Me.OnErrorProcedureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ErrorLine", DbType:="Int")>  _
	Public Property ErrorLine() As System.Nullable(Of Integer)
		Get
			Return Me._ErrorLine
		End Get
		Set
			If (Me._ErrorLine.Equals(value) = false) Then
				Me.OnErrorLineChanging(value)
				Me.SendPropertyChanging
				Me._ErrorLine = value
				Me.SendPropertyChanged("ErrorLine")
				Me.OnErrorLineChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ErrorMessage", DbType:="NVarChar(4000) NOT NULL", CanBeNull:=false)>  _
	Public Property ErrorMessage() As String
		Get
			Return Me._ErrorMessage
		End Get
		Set
			If (String.Equals(Me._ErrorMessage, value) = false) Then
				Me.OnErrorMessageChanging(value)
				Me.SendPropertyChanging
				Me._ErrorMessage = value
				Me.SendPropertyChanged("ErrorMessage")
				Me.OnErrorMessageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="SalesLT.Address")>  _
Partial Public Class Address
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AddressID As Integer
	
	Private _AddressLine1 As String
	
	Private _AddressLine2 As String
	
	Private _City As String
	
	Private _StateProvince As String
	
	Private _CountryRegion As String
	
	Private _PostalCode As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _SalesOrderHeaders As EntitySet(Of SalesOrderHeader)
	
	Private _SalesOrderHeaders1 As EntitySet(Of SalesOrderHeader)
	
	Private _CustomerAddresses As EntitySet(Of CustomerAddress)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAddressIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAddressIDChanged()
    End Sub
    Partial Private Sub OnAddressLine1Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine1Changed()
    End Sub
    Partial Private Sub OnAddressLine2Changing(value As String)
    End Sub
    Partial Private Sub OnAddressLine2Changed()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateProvinceChanging(value As String)
    End Sub
    Partial Private Sub OnStateProvinceChanged()
    End Sub
    Partial Private Sub OnCountryRegionChanging(value As String)
    End Sub
    Partial Private Sub OnCountryRegionChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SalesOrderHeaders = New EntitySet(Of SalesOrderHeader)(AddressOf Me.attach_SalesOrderHeaders, AddressOf Me.detach_SalesOrderHeaders)
		Me._SalesOrderHeaders1 = New EntitySet(Of SalesOrderHeader)(AddressOf Me.attach_SalesOrderHeaders1, AddressOf Me.detach_SalesOrderHeaders1)
		Me._CustomerAddresses = New EntitySet(Of CustomerAddress)(AddressOf Me.attach_CustomerAddresses, AddressOf Me.detach_CustomerAddresses)
		OnCreated
	End Sub
	
	<Column(Storage:="_AddressID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AddressID() As Integer
		Get
			Return Me._AddressID
		End Get
		Set
			If ((Me._AddressID = value)  _
						= false) Then
				Me.OnAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._AddressID = value
				Me.SendPropertyChanged("AddressID")
				Me.OnAddressIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AddressLine1", DbType:="NVarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property AddressLine1() As String
		Get
			Return Me._AddressLine1
		End Get
		Set
			If (String.Equals(Me._AddressLine1, value) = false) Then
				Me.OnAddressLine1Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine1 = value
				Me.SendPropertyChanged("AddressLine1")
				Me.OnAddressLine1Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_AddressLine2", DbType:="NVarChar(60)")>  _
	Public Property AddressLine2() As String
		Get
			Return Me._AddressLine2
		End Get
		Set
			If (String.Equals(Me._AddressLine2, value) = false) Then
				Me.OnAddressLine2Changing(value)
				Me.SendPropertyChanging
				Me._AddressLine2 = value
				Me.SendPropertyChanged("AddressLine2")
				Me.OnAddressLine2Changed
			End If
		End Set
	End Property
	
	<Column(Storage:="_City", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StateProvince", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StateProvince() As String
		Get
			Return Me._StateProvince
		End Get
		Set
			If (String.Equals(Me._StateProvince, value) = false) Then
				Me.OnStateProvinceChanging(value)
				Me.SendPropertyChanging
				Me._StateProvince = value
				Me.SendPropertyChanged("StateProvince")
				Me.OnStateProvinceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CountryRegion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CountryRegion() As String
		Get
			Return Me._CountryRegion
		End Get
		Set
			If (String.Equals(Me._CountryRegion, value) = false) Then
				Me.OnCountryRegionChanging(value)
				Me.SendPropertyChanging
				Me._CountryRegion = value
				Me.SendPropertyChanged("CountryRegion")
				Me.OnCountryRegionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PostalCode", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, value) = false) Then
				Me.OnPostalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostalCode = value
				Me.SendPropertyChanged("PostalCode")
				Me.OnPostalCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Address_SalesOrderHeader", Storage:="_SalesOrderHeaders", OtherKey:="BillToAddressID")>  _
	Public Property SalesOrderHeaders() As EntitySet(Of SalesOrderHeader)
		Get
			Return Me._SalesOrderHeaders
		End Get
		Set
			Me._SalesOrderHeaders.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Address_SalesOrderHeader1", Storage:="_SalesOrderHeaders1", OtherKey:="ShipToAddressID")>  _
	Public Property SalesOrderHeaders1() As EntitySet(Of SalesOrderHeader)
		Get
			Return Me._SalesOrderHeaders1
		End Get
		Set
			Me._SalesOrderHeaders1.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Address_CustomerAddress", Storage:="_CustomerAddresses", OtherKey:="AddressID")>  _
	Public Property CustomerAddresses() As EntitySet(Of CustomerAddress)
		Get
			Return Me._CustomerAddresses
		End Get
		Set
			Me._CustomerAddresses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SalesOrderHeaders(ByVal entity As SalesOrderHeader)
		Me.SendPropertyChanging
		entity.Address = Me
	End Sub
	
	Private Sub detach_SalesOrderHeaders(ByVal entity As SalesOrderHeader)
		Me.SendPropertyChanging
		entity.Address = Nothing
	End Sub
	
	Private Sub attach_SalesOrderHeaders1(ByVal entity As SalesOrderHeader)
		Me.SendPropertyChanging
		entity.Address1 = Me
	End Sub
	
	Private Sub detach_SalesOrderHeaders1(ByVal entity As SalesOrderHeader)
		Me.SendPropertyChanging
		entity.Address1 = Nothing
	End Sub
	
	Private Sub attach_CustomerAddresses(ByVal entity As CustomerAddress)
		Me.SendPropertyChanging
		entity.Address = Me
	End Sub
	
	Private Sub detach_CustomerAddresses(ByVal entity As CustomerAddress)
		Me.SendPropertyChanging
		entity.Address = Nothing
	End Sub
End Class

<Table(Name:="SalesLT.Customer")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerID As Integer
	
	Private _NameStyle As Boolean
	
	Private _Title As String
	
	Private _FirstName As String
	
	Private _MiddleName As String
	
	Private _LastName As String
	
	Private _Suffix As String
	
	Private _CompanyName As String
	
	Private _SalesPerson As String
	
	Private _EmailAddress As String
	
	Private _Phone As String
	
	Private _PasswordHash As String
	
	Private _PasswordSalt As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _SalesOrderHeaders As EntitySet(Of SalesOrderHeader)
	
	Private _CustomerAddresses As EntitySet(Of CustomerAddress)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnNameStyleChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNameStyleChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnSuffixChanging(value As String)
    End Sub
    Partial Private Sub OnSuffixChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnSalesPersonChanging(value As String)
    End Sub
    Partial Private Sub OnSalesPersonChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnPasswordHashChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordHashChanged()
    End Sub
    Partial Private Sub OnPasswordSaltChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordSaltChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SalesOrderHeaders = New EntitySet(Of SalesOrderHeader)(AddressOf Me.attach_SalesOrderHeaders, AddressOf Me.detach_SalesOrderHeaders)
		Me._CustomerAddresses = New EntitySet(Of CustomerAddress)(AddressOf Me.attach_CustomerAddresses, AddressOf Me.detach_CustomerAddresses)
		OnCreated
	End Sub
	
	<Column(Storage:="_CustomerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_NameStyle", DbType:="Bit NOT NULL")>  _
	Public Property NameStyle() As Boolean
		Get
			Return Me._NameStyle
		End Get
		Set
			If ((Me._NameStyle = value)  _
						= false) Then
				Me.OnNameStyleChanging(value)
				Me.SendPropertyChanging
				Me._NameStyle = value
				Me.SendPropertyChanged("NameStyle")
				Me.OnNameStyleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="NVarChar(8)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MiddleName", DbType:="NVarChar(50)")>  _
	Public Property MiddleName() As String
		Get
			Return Me._MiddleName
		End Get
		Set
			If (String.Equals(Me._MiddleName, value) = false) Then
				Me.OnMiddleNameChanging(value)
				Me.SendPropertyChanging
				Me._MiddleName = value
				Me.SendPropertyChanged("MiddleName")
				Me.OnMiddleNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Suffix", DbType:="NVarChar(10)")>  _
	Public Property Suffix() As String
		Get
			Return Me._Suffix
		End Get
		Set
			If (String.Equals(Me._Suffix, value) = false) Then
				Me.OnSuffixChanging(value)
				Me.SendPropertyChanging
				Me._Suffix = value
				Me.SendPropertyChanged("Suffix")
				Me.OnSuffixChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CompanyName", DbType:="NVarChar(128)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SalesPerson", DbType:="NVarChar(256)")>  _
	Public Property SalesPerson() As String
		Get
			Return Me._SalesPerson
		End Get
		Set
			If (String.Equals(Me._SalesPerson, value) = false) Then
				Me.OnSalesPersonChanging(value)
				Me.SendPropertyChanging
				Me._SalesPerson = value
				Me.SendPropertyChanged("SalesPerson")
				Me.OnSalesPersonChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Phone", DbType:="NVarChar(25)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PasswordHash", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PasswordHash() As String
		Get
			Return Me._PasswordHash
		End Get
		Set
			If (String.Equals(Me._PasswordHash, value) = false) Then
				Me.OnPasswordHashChanging(value)
				Me.SendPropertyChanging
				Me._PasswordHash = value
				Me.SendPropertyChanged("PasswordHash")
				Me.OnPasswordHashChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PasswordSalt", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property PasswordSalt() As String
		Get
			Return Me._PasswordSalt
		End Get
		Set
			If (String.Equals(Me._PasswordSalt, value) = false) Then
				Me.OnPasswordSaltChanging(value)
				Me.SendPropertyChanging
				Me._PasswordSalt = value
				Me.SendPropertyChanged("PasswordSalt")
				Me.OnPasswordSaltChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Customer_SalesOrderHeader", Storage:="_SalesOrderHeaders", OtherKey:="CustomerID")>  _
	Public Property SalesOrderHeaders() As EntitySet(Of SalesOrderHeader)
		Get
			Return Me._SalesOrderHeaders
		End Get
		Set
			Me._SalesOrderHeaders.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Customer_CustomerAddress", Storage:="_CustomerAddresses", OtherKey:="CustomerID")>  _
	Public Property CustomerAddresses() As EntitySet(Of CustomerAddress)
		Get
			Return Me._CustomerAddresses
		End Get
		Set
			Me._CustomerAddresses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SalesOrderHeaders(ByVal entity As SalesOrderHeader)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_SalesOrderHeaders(ByVal entity As SalesOrderHeader)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
	
	Private Sub attach_CustomerAddresses(ByVal entity As CustomerAddress)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_CustomerAddresses(ByVal entity As CustomerAddress)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class

<Table(Name:="SalesLT.CustomerAddress")>  _
Partial Public Class CustomerAddress
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerID As Integer
	
	Private _AddressID As Integer
	
	Private _AddressType As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _Address As EntityRef(Of Address)
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnAddressIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAddressIDChanged()
    End Sub
    Partial Private Sub OnAddressTypeChanging(value As String)
    End Sub
    Partial Private Sub OnAddressTypeChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Address = CType(Nothing, EntityRef(Of Address))
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Column(Storage:="_CustomerID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AddressID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AddressID() As Integer
		Get
			Return Me._AddressID
		End Get
		Set
			If ((Me._AddressID = value)  _
						= false) Then
				If Me._Address.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._AddressID = value
				Me.SendPropertyChanged("AddressID")
				Me.OnAddressIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AddressType", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AddressType() As String
		Get
			Return Me._AddressType
		End Get
		Set
			If (String.Equals(Me._AddressType, value) = false) Then
				Me.OnAddressTypeChanging(value)
				Me.SendPropertyChanging
				Me._AddressType = value
				Me.SendPropertyChanged("AddressType")
				Me.OnAddressTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Address_CustomerAddress", Storage:="_Address", ThisKey:="AddressID", IsForeignKey:=true)>  _
	Public Property Address() As Address
		Get
			Return Me._Address.Entity
		End Get
		Set
			Dim previousValue As Address = Me._Address.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Address.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Address.Entity = Nothing
					previousValue.CustomerAddresses.Remove(Me)
				End If
				Me._Address.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CustomerAddresses.Add(Me)
					Me._AddressID = value.AddressID
				Else
					Me._AddressID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Address")
			End If
		End Set
	End Property
	
	<Association(Name:="Customer_CustomerAddress", Storage:="_Customer", ThisKey:="CustomerID", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.CustomerAddresses.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CustomerAddresses.Add(Me)
					Me._CustomerID = value.CustomerID
				Else
					Me._CustomerID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="SalesLT.Product")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductID As Integer
	
	Private _Name As String
	
	Private _ProductNumber As String
	
	Private _Color As String
	
	Private _StandardCost As Decimal
	
	Private _ListPrice As Decimal
	
	Private _Size As String
	
	Private _Weight As System.Nullable(Of Decimal)
	
	Private _ProductCategoryID As System.Nullable(Of Integer)
	
	Private _ProductModelID As System.Nullable(Of Integer)
	
	Private _SellStartDate As Date
	
	Private _SellEndDate As System.Nullable(Of Date)
	
	Private _DiscontinuedDate As System.Nullable(Of Date)
	
	Private _ThumbNailPhoto As System.Data.Linq.Binary
	
	Private _ThumbnailPhotoFileName As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _SalesOrderDetails As EntitySet(Of SalesOrderDetail)
	
	Private _ProductCategory As EntityRef(Of ProductCategory)
	
	Private _ProductModel As EntityRef(Of ProductModel)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnProductNumberChanging(value As String)
    End Sub
    Partial Private Sub OnProductNumberChanged()
    End Sub
    Partial Private Sub OnColorChanging(value As String)
    End Sub
    Partial Private Sub OnColorChanged()
    End Sub
    Partial Private Sub OnStandardCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnStandardCostChanged()
    End Sub
    Partial Private Sub OnListPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnListPriceChanged()
    End Sub
    Partial Private Sub OnSizeChanging(value As String)
    End Sub
    Partial Private Sub OnSizeChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    Partial Private Sub OnProductCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductCategoryIDChanged()
    End Sub
    Partial Private Sub OnProductModelIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductModelIDChanged()
    End Sub
    Partial Private Sub OnSellStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnSellStartDateChanged()
    End Sub
    Partial Private Sub OnSellEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSellEndDateChanged()
    End Sub
    Partial Private Sub OnDiscontinuedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDiscontinuedDateChanged()
    End Sub
    Partial Private Sub OnThumbNailPhotoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnThumbNailPhotoChanged()
    End Sub
    Partial Private Sub OnThumbnailPhotoFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnThumbnailPhotoFileNameChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SalesOrderDetails = New EntitySet(Of SalesOrderDetail)(AddressOf Me.attach_SalesOrderDetails, AddressOf Me.detach_SalesOrderDetails)
		Me._ProductCategory = CType(Nothing, EntityRef(Of ProductCategory))
		Me._ProductModel = CType(Nothing, EntityRef(Of ProductModel))
		OnCreated
	End Sub
	
	<Column(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductNumber", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductNumber() As String
		Get
			Return Me._ProductNumber
		End Get
		Set
			If (String.Equals(Me._ProductNumber, value) = false) Then
				Me.OnProductNumberChanging(value)
				Me.SendPropertyChanging
				Me._ProductNumber = value
				Me.SendPropertyChanged("ProductNumber")
				Me.OnProductNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Color", DbType:="NVarChar(15)")>  _
	Public Property Color() As String
		Get
			Return Me._Color
		End Get
		Set
			If (String.Equals(Me._Color, value) = false) Then
				Me.OnColorChanging(value)
				Me.SendPropertyChanging
				Me._Color = value
				Me.SendPropertyChanged("Color")
				Me.OnColorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StandardCost", DbType:="Money NOT NULL")>  _
	Public Property StandardCost() As Decimal
		Get
			Return Me._StandardCost
		End Get
		Set
			If ((Me._StandardCost = value)  _
						= false) Then
				Me.OnStandardCostChanging(value)
				Me.SendPropertyChanging
				Me._StandardCost = value
				Me.SendPropertyChanged("StandardCost")
				Me.OnStandardCostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ListPrice", DbType:="Money NOT NULL")>  _
	Public Property ListPrice() As Decimal
		Get
			Return Me._ListPrice
		End Get
		Set
			If ((Me._ListPrice = value)  _
						= false) Then
				Me.OnListPriceChanging(value)
				Me.SendPropertyChanging
				Me._ListPrice = value
				Me.SendPropertyChanged("ListPrice")
				Me.OnListPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Size", DbType:="NVarChar(5)")>  _
	Public Property Size() As String
		Get
			Return Me._Size
		End Get
		Set
			If (String.Equals(Me._Size, value) = false) Then
				Me.OnSizeChanging(value)
				Me.SendPropertyChanging
				Me._Size = value
				Me.SendPropertyChanged("Size")
				Me.OnSizeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Weight", DbType:="Decimal(8,2)")>  _
	Public Property Weight() As System.Nullable(Of Decimal)
		Get
			Return Me._Weight
		End Get
		Set
			If (Me._Weight.Equals(value) = false) Then
				Me.OnWeightChanging(value)
				Me.SendPropertyChanging
				Me._Weight = value
				Me.SendPropertyChanged("Weight")
				Me.OnWeightChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductCategoryID", DbType:="Int")>  _
	Public Property ProductCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._ProductCategoryID
		End Get
		Set
			If (Me._ProductCategoryID.Equals(value) = false) Then
				If Me._ProductCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProductCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductCategoryID = value
				Me.SendPropertyChanged("ProductCategoryID")
				Me.OnProductCategoryIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductModelID", DbType:="Int")>  _
	Public Property ProductModelID() As System.Nullable(Of Integer)
		Get
			Return Me._ProductModelID
		End Get
		Set
			If (Me._ProductModelID.Equals(value) = false) Then
				If Me._ProductModel.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProductModelIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductModelID = value
				Me.SendPropertyChanged("ProductModelID")
				Me.OnProductModelIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SellStartDate", DbType:="DateTime NOT NULL")>  _
	Public Property SellStartDate() As Date
		Get
			Return Me._SellStartDate
		End Get
		Set
			If ((Me._SellStartDate = value)  _
						= false) Then
				Me.OnSellStartDateChanging(value)
				Me.SendPropertyChanging
				Me._SellStartDate = value
				Me.SendPropertyChanged("SellStartDate")
				Me.OnSellStartDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SellEndDate", DbType:="DateTime")>  _
	Public Property SellEndDate() As System.Nullable(Of Date)
		Get
			Return Me._SellEndDate
		End Get
		Set
			If (Me._SellEndDate.Equals(value) = false) Then
				Me.OnSellEndDateChanging(value)
				Me.SendPropertyChanging
				Me._SellEndDate = value
				Me.SendPropertyChanged("SellEndDate")
				Me.OnSellEndDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DiscontinuedDate", DbType:="DateTime")>  _
	Public Property DiscontinuedDate() As System.Nullable(Of Date)
		Get
			Return Me._DiscontinuedDate
		End Get
		Set
			If (Me._DiscontinuedDate.Equals(value) = false) Then
				Me.OnDiscontinuedDateChanging(value)
				Me.SendPropertyChanging
				Me._DiscontinuedDate = value
				Me.SendPropertyChanged("DiscontinuedDate")
				Me.OnDiscontinuedDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ThumbNailPhoto", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ThumbNailPhoto() As System.Data.Linq.Binary
		Get
			Return Me._ThumbNailPhoto
		End Get
		Set
			If (Object.Equals(Me._ThumbNailPhoto, value) = false) Then
				Me.OnThumbNailPhotoChanging(value)
				Me.SendPropertyChanging
				Me._ThumbNailPhoto = value
				Me.SendPropertyChanged("ThumbNailPhoto")
				Me.OnThumbNailPhotoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ThumbnailPhotoFileName", DbType:="NVarChar(50)")>  _
	Public Property ThumbnailPhotoFileName() As String
		Get
			Return Me._ThumbnailPhotoFileName
		End Get
		Set
			If (String.Equals(Me._ThumbnailPhotoFileName, value) = false) Then
				Me.OnThumbnailPhotoFileNameChanging(value)
				Me.SendPropertyChanging
				Me._ThumbnailPhotoFileName = value
				Me.SendPropertyChanged("ThumbnailPhotoFileName")
				Me.OnThumbnailPhotoFileNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Product_SalesOrderDetail", Storage:="_SalesOrderDetails", OtherKey:="ProductID")>  _
	Public Property SalesOrderDetails() As EntitySet(Of SalesOrderDetail)
		Get
			Return Me._SalesOrderDetails
		End Get
		Set
			Me._SalesOrderDetails.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ProductCategory_Product", Storage:="_ProductCategory", ThisKey:="ProductCategoryID", IsForeignKey:=true)>  _
	Public Property ProductCategory() As ProductCategory
		Get
			Return Me._ProductCategory.Entity
		End Get
		Set
			Dim previousValue As ProductCategory = Me._ProductCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductCategory.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._ProductCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._ProductCategoryID = value.ProductCategoryID
				Else
					Me._ProductCategoryID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ProductCategory")
			End If
		End Set
	End Property
	
	<Association(Name:="ProductModel_Product", Storage:="_ProductModel", ThisKey:="ProductModelID", IsForeignKey:=true)>  _
	Public Property ProductModel() As ProductModel
		Get
			Return Me._ProductModel.Entity
		End Get
		Set
			Dim previousValue As ProductModel = Me._ProductModel.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductModel.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductModel.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._ProductModel.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._ProductModelID = value.ProductModelID
				Else
					Me._ProductModelID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ProductModel")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SalesOrderDetails(ByVal entity As SalesOrderDetail)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_SalesOrderDetails(ByVal entity As SalesOrderDetail)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
End Class

<Table(Name:="SalesLT.ProductCategory")>  _
Partial Public Class ProductCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductCategoryID As Integer
	
	Private _ParentProductCategoryID As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _Products As EntitySet(Of Product)
	
	Private _ProductCategories As EntitySet(Of ProductCategory)
	
	Private _ProductCategory As EntityRef(Of ProductCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductCategoryIDChanged()
    End Sub
    Partial Private Sub OnParentProductCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentProductCategoryIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._ProductCategories = New EntitySet(Of ProductCategory)(AddressOf Me.attach_ProductCategories, AddressOf Me.detach_ProductCategories)
		Me._ProductCategory = CType(Nothing, EntityRef(Of ProductCategory))
		OnCreated
	End Sub
	
	<Column(Storage:="_ProductCategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProductCategoryID() As Integer
		Get
			Return Me._ProductCategoryID
		End Get
		Set
			If ((Me._ProductCategoryID = value)  _
						= false) Then
				Me.OnProductCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductCategoryID = value
				Me.SendPropertyChanged("ProductCategoryID")
				Me.OnProductCategoryIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ParentProductCategoryID", DbType:="Int")>  _
	Public Property ParentProductCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentProductCategoryID
		End Get
		Set
			If (Me._ParentProductCategoryID.Equals(value) = false) Then
				If Me._ProductCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnParentProductCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentProductCategoryID = value
				Me.SendPropertyChanged("ParentProductCategoryID")
				Me.OnParentProductCategoryIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProductCategory_Product", Storage:="_Products", OtherKey:="ProductCategoryID")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ProductCategory_ProductCategory", Storage:="_ProductCategories", OtherKey:="ParentProductCategoryID")>  _
	Public Property ProductCategories() As EntitySet(Of ProductCategory)
		Get
			Return Me._ProductCategories
		End Get
		Set
			Me._ProductCategories.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ProductCategory_ProductCategory", Storage:="_ProductCategory", ThisKey:="ParentProductCategoryID", IsForeignKey:=true)>  _
	Public Property ProductCategory() As ProductCategory
		Get
			Return Me._ProductCategory.Entity
		End Get
		Set
			Dim previousValue As ProductCategory = Me._ProductCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductCategory.Entity = Nothing
					previousValue.ProductCategories.Remove(Me)
				End If
				Me._ProductCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductCategories.Add(Me)
					Me._ParentProductCategoryID = value.ProductCategoryID
				Else
					Me._ParentProductCategoryID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ProductCategory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.ProductCategory = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.ProductCategory = Nothing
	End Sub
	
	Private Sub attach_ProductCategories(ByVal entity As ProductCategory)
		Me.SendPropertyChanging
		entity.ProductCategory = Me
	End Sub
	
	Private Sub detach_ProductCategories(ByVal entity As ProductCategory)
		Me.SendPropertyChanging
		entity.ProductCategory = Nothing
	End Sub
End Class

<Table(Name:="SalesLT.ProductDescription")>  _
Partial Public Class ProductDescription
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductDescriptionID As Integer
	
	Private _Description As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _ProductModelProductDescriptions As EntitySet(Of ProductModelProductDescription)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductDescriptionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductDescriptionIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductModelProductDescriptions = New EntitySet(Of ProductModelProductDescription)(AddressOf Me.attach_ProductModelProductDescriptions, AddressOf Me.detach_ProductModelProductDescriptions)
		OnCreated
	End Sub
	
	<Column(Storage:="_ProductDescriptionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProductDescriptionID() As Integer
		Get
			Return Me._ProductDescriptionID
		End Get
		Set
			If ((Me._ProductDescriptionID = value)  _
						= false) Then
				Me.OnProductDescriptionIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductDescriptionID = value
				Me.SendPropertyChanged("ProductDescriptionID")
				Me.OnProductDescriptionIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(400) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProductDescription_ProductModelProductDescription", Storage:="_ProductModelProductDescriptions", OtherKey:="ProductDescriptionID")>  _
	Public Property ProductModelProductDescriptions() As EntitySet(Of ProductModelProductDescription)
		Get
			Return Me._ProductModelProductDescriptions
		End Get
		Set
			Me._ProductModelProductDescriptions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProductModelProductDescriptions(ByVal entity As ProductModelProductDescription)
		Me.SendPropertyChanging
		entity.ProductDescription = Me
	End Sub
	
	Private Sub detach_ProductModelProductDescriptions(ByVal entity As ProductModelProductDescription)
		Me.SendPropertyChanging
		entity.ProductDescription = Nothing
	End Sub
End Class

<Table(Name:="SalesLT.ProductModel")>  _
Partial Public Class ProductModel
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductModelID As Integer
	
	Private _Name As String
	
	Private _CatalogDescription As System.Xml.Linq.XElement
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _Products As EntitySet(Of Product)
	
	Private _ProductModelProductDescriptions As EntitySet(Of ProductModelProductDescription)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductModelIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductModelIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnCatalogDescriptionChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnCatalogDescriptionChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._ProductModelProductDescriptions = New EntitySet(Of ProductModelProductDescription)(AddressOf Me.attach_ProductModelProductDescriptions, AddressOf Me.detach_ProductModelProductDescriptions)
		OnCreated
	End Sub
	
	<Column(Storage:="_ProductModelID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProductModelID() As Integer
		Get
			Return Me._ProductModelID
		End Get
		Set
			If ((Me._ProductModelID = value)  _
						= false) Then
				Me.OnProductModelIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductModelID = value
				Me.SendPropertyChanged("ProductModelID")
				Me.OnProductModelIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CatalogDescription", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CatalogDescription() As System.Xml.Linq.XElement
		Get
			Return Me._CatalogDescription
		End Get
		Set
			If (Object.Equals(Me._CatalogDescription, value) = false) Then
				Me.OnCatalogDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._CatalogDescription = value
				Me.SendPropertyChanged("CatalogDescription")
				Me.OnCatalogDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProductModel_Product", Storage:="_Products", OtherKey:="ProductModelID")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ProductModel_ProductModelProductDescription", Storage:="_ProductModelProductDescriptions", OtherKey:="ProductModelID")>  _
	Public Property ProductModelProductDescriptions() As EntitySet(Of ProductModelProductDescription)
		Get
			Return Me._ProductModelProductDescriptions
		End Get
		Set
			Me._ProductModelProductDescriptions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.ProductModel = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.ProductModel = Nothing
	End Sub
	
	Private Sub attach_ProductModelProductDescriptions(ByVal entity As ProductModelProductDescription)
		Me.SendPropertyChanging
		entity.ProductModel = Me
	End Sub
	
	Private Sub detach_ProductModelProductDescriptions(ByVal entity As ProductModelProductDescription)
		Me.SendPropertyChanging
		entity.ProductModel = Nothing
	End Sub
End Class

<Table(Name:="SalesLT.ProductModelProductDescription")>  _
Partial Public Class ProductModelProductDescription
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductModelID As Integer
	
	Private _ProductDescriptionID As Integer
	
	Private _Culture As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _ProductDescription As EntityRef(Of ProductDescription)
	
	Private _ProductModel As EntityRef(Of ProductModel)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductModelIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductModelIDChanged()
    End Sub
    Partial Private Sub OnProductDescriptionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductDescriptionIDChanged()
    End Sub
    Partial Private Sub OnCultureChanging(value As String)
    End Sub
    Partial Private Sub OnCultureChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductDescription = CType(Nothing, EntityRef(Of ProductDescription))
		Me._ProductModel = CType(Nothing, EntityRef(Of ProductModel))
		OnCreated
	End Sub
	
	<Column(Storage:="_ProductModelID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProductModelID() As Integer
		Get
			Return Me._ProductModelID
		End Get
		Set
			If ((Me._ProductModelID = value)  _
						= false) Then
				If Me._ProductModel.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProductModelIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductModelID = value
				Me.SendPropertyChanged("ProductModelID")
				Me.OnProductModelIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductDescriptionID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProductDescriptionID() As Integer
		Get
			Return Me._ProductDescriptionID
		End Get
		Set
			If ((Me._ProductDescriptionID = value)  _
						= false) Then
				If Me._ProductDescription.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProductDescriptionIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductDescriptionID = value
				Me.SendPropertyChanged("ProductDescriptionID")
				Me.OnProductDescriptionIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Culture", DbType:="NChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Culture() As String
		Get
			Return Me._Culture
		End Get
		Set
			If (String.Equals(Me._Culture, value) = false) Then
				Me.OnCultureChanging(value)
				Me.SendPropertyChanging
				Me._Culture = value
				Me.SendPropertyChanged("Culture")
				Me.OnCultureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProductDescription_ProductModelProductDescription", Storage:="_ProductDescription", ThisKey:="ProductDescriptionID", IsForeignKey:=true)>  _
	Public Property ProductDescription() As ProductDescription
		Get
			Return Me._ProductDescription.Entity
		End Get
		Set
			Dim previousValue As ProductDescription = Me._ProductDescription.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductDescription.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductDescription.Entity = Nothing
					previousValue.ProductModelProductDescriptions.Remove(Me)
				End If
				Me._ProductDescription.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductModelProductDescriptions.Add(Me)
					Me._ProductDescriptionID = value.ProductDescriptionID
				Else
					Me._ProductDescriptionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProductDescription")
			End If
		End Set
	End Property
	
	<Association(Name:="ProductModel_ProductModelProductDescription", Storage:="_ProductModel", ThisKey:="ProductModelID", IsForeignKey:=true)>  _
	Public Property ProductModel() As ProductModel
		Get
			Return Me._ProductModel.Entity
		End Get
		Set
			Dim previousValue As ProductModel = Me._ProductModel.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductModel.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductModel.Entity = Nothing
					previousValue.ProductModelProductDescriptions.Remove(Me)
				End If
				Me._ProductModel.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductModelProductDescriptions.Add(Me)
					Me._ProductModelID = value.ProductModelID
				Else
					Me._ProductModelID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProductModel")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="SalesLT.SalesOrderDetail")>  _
Partial Public Class SalesOrderDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SalesOrderID As Integer
	
	Private _SalesOrderDetailID As Integer
	
	Private _OrderQty As Short
	
	Private _ProductID As Integer
	
	Private _UnitPrice As Decimal
	
	Private _UnitPriceDiscount As Decimal
	
	Private _LineTotal As Decimal
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _Product As EntityRef(Of Product)
	
	Private _SalesOrderHeader As EntityRef(Of SalesOrderHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSalesOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalesOrderIDChanged()
    End Sub
    Partial Private Sub OnSalesOrderDetailIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalesOrderDetailIDChanged()
    End Sub
    Partial Private Sub OnOrderQtyChanging(value As Short)
    End Sub
    Partial Private Sub OnOrderQtyChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnUnitPriceDiscountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitPriceDiscountChanged()
    End Sub
    Partial Private Sub OnLineTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLineTotalChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Product = CType(Nothing, EntityRef(Of Product))
		Me._SalesOrderHeader = CType(Nothing, EntityRef(Of SalesOrderHeader))
		OnCreated
	End Sub
	
	<Column(Storage:="_SalesOrderID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SalesOrderID() As Integer
		Get
			Return Me._SalesOrderID
		End Get
		Set
			If ((Me._SalesOrderID = value)  _
						= false) Then
				If Me._SalesOrderHeader.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnSalesOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrderID = value
				Me.SendPropertyChanged("SalesOrderID")
				Me.OnSalesOrderIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SalesOrderDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SalesOrderDetailID() As Integer
		Get
			Return Me._SalesOrderDetailID
		End Get
		Set
			If ((Me._SalesOrderDetailID = value)  _
						= false) Then
				Me.OnSalesOrderDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrderDetailID = value
				Me.SendPropertyChanged("SalesOrderDetailID")
				Me.OnSalesOrderDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OrderQty", DbType:="SmallInt NOT NULL")>  _
	Public Property OrderQty() As Short
		Get
			Return Me._OrderQty
		End Get
		Set
			If ((Me._OrderQty = value)  _
						= false) Then
				Me.OnOrderQtyChanging(value)
				Me.SendPropertyChanging
				Me._OrderQty = value
				Me.SendPropertyChanged("OrderQty")
				Me.OnOrderQtyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitPrice", DbType:="Money NOT NULL")>  _
	Public Property UnitPrice() As Decimal
		Get
			Return Me._UnitPrice
		End Get
		Set
			If ((Me._UnitPrice = value)  _
						= false) Then
				Me.OnUnitPriceChanging(value)
				Me.SendPropertyChanging
				Me._UnitPrice = value
				Me.SendPropertyChanged("UnitPrice")
				Me.OnUnitPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitPriceDiscount", DbType:="Money NOT NULL")>  _
	Public Property UnitPriceDiscount() As Decimal
		Get
			Return Me._UnitPriceDiscount
		End Get
		Set
			If ((Me._UnitPriceDiscount = value)  _
						= false) Then
				Me.OnUnitPriceDiscountChanging(value)
				Me.SendPropertyChanging
				Me._UnitPriceDiscount = value
				Me.SendPropertyChanged("UnitPriceDiscount")
				Me.OnUnitPriceDiscountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LineTotal", AutoSync:=AutoSync.Always, DbType:="Decimal(38,6) NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LineTotal() As Decimal
		Get
			Return Me._LineTotal
		End Get
		Set
			If ((Me._LineTotal = value)  _
						= false) Then
				Me.OnLineTotalChanging(value)
				Me.SendPropertyChanging
				Me._LineTotal = value
				Me.SendPropertyChanged("LineTotal")
				Me.OnLineTotalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Product_SalesOrderDetail", Storage:="_Product", ThisKey:="ProductID", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.SalesOrderDetails.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SalesOrderDetails.Add(Me)
					Me._ProductID = value.ProductID
				Else
					Me._ProductID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	<Association(Name:="SalesOrderHeader_SalesOrderDetail", Storage:="_SalesOrderHeader", ThisKey:="SalesOrderID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property SalesOrderHeader() As SalesOrderHeader
		Get
			Return Me._SalesOrderHeader.Entity
		End Get
		Set
			Dim previousValue As SalesOrderHeader = Me._SalesOrderHeader.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SalesOrderHeader.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SalesOrderHeader.Entity = Nothing
					previousValue.SalesOrderDetails.Remove(Me)
				End If
				Me._SalesOrderHeader.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SalesOrderDetails.Add(Me)
					Me._SalesOrderID = value.SalesOrderID
				Else
					Me._SalesOrderID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SalesOrderHeader")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
