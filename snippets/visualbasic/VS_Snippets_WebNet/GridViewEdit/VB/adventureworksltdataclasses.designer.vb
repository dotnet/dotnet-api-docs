'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorksLT")>  _
Partial Public Class AdventureWorksLTDataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
  Partial Private Sub UpdateSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
  Partial Private Sub DeleteSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("AdventureWorksLTConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property SalesOrderDetails() As System.Data.Linq.Table(Of SalesOrderDetail)
		Get
			Return Me.GetTable(Of SalesOrderDetail)
		End Get
	End Property
End Class

<Table(Name:="SalesLT.SalesOrderDetail")>  _
Partial Public Class SalesOrderDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SalesOrderID As Integer
	
	Private _SalesOrderDetailID As Integer
	
	Private _OrderQty As Short
	
	Private _ProductID As Integer
	
	Private _UnitPrice As Decimal
	
	Private _UnitPriceDiscount As Decimal
	
	Private _LineTotal As Decimal
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSalesOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalesOrderIDChanged()
    End Sub
    Partial Private Sub OnSalesOrderDetailIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalesOrderDetailIDChanged()
    End Sub
    Partial Private Sub OnOrderQtyChanging(value As Short)
    End Sub
    Partial Private Sub OnOrderQtyChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnUnitPriceDiscountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitPriceDiscountChanged()
    End Sub
    Partial Private Sub OnLineTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLineTotalChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_SalesOrderID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SalesOrderID() As Integer
		Get
			Return Me._SalesOrderID
		End Get
		Set
			If ((Me._SalesOrderID = value)  _
						= false) Then
				Me.OnSalesOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrderID = value
				Me.SendPropertyChanged("SalesOrderID")
				Me.OnSalesOrderIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SalesOrderDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SalesOrderDetailID() As Integer
		Get
			Return Me._SalesOrderDetailID
		End Get
		Set
			If ((Me._SalesOrderDetailID = value)  _
						= false) Then
				Me.OnSalesOrderDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrderDetailID = value
				Me.SendPropertyChanged("SalesOrderDetailID")
				Me.OnSalesOrderDetailIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OrderQty", DbType:="SmallInt NOT NULL")>  _
	Public Property OrderQty() As Short
		Get
			Return Me._OrderQty
		End Get
		Set
			If ((Me._OrderQty = value)  _
						= false) Then
				Me.OnOrderQtyChanging(value)
				Me.SendPropertyChanging
				Me._OrderQty = value
				Me.SendPropertyChanged("OrderQty")
				Me.OnOrderQtyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitPrice", DbType:="Money NOT NULL")>  _
	Public Property UnitPrice() As Decimal
		Get
			Return Me._UnitPrice
		End Get
		Set
			If ((Me._UnitPrice = value)  _
						= false) Then
				Me.OnUnitPriceChanging(value)
				Me.SendPropertyChanging
				Me._UnitPrice = value
				Me.SendPropertyChanged("UnitPrice")
				Me.OnUnitPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitPriceDiscount", DbType:="Money NOT NULL")>  _
	Public Property UnitPriceDiscount() As Decimal
		Get
			Return Me._UnitPriceDiscount
		End Get
		Set
			If ((Me._UnitPriceDiscount = value)  _
						= false) Then
				Me.OnUnitPriceDiscountChanging(value)
				Me.SendPropertyChanging
				Me._UnitPriceDiscount = value
				Me.SendPropertyChanged("UnitPriceDiscount")
				Me.OnUnitPriceDiscountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LineTotal", AutoSync:=AutoSync.Always, DbType:="Decimal(38,6) NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LineTotal() As Decimal
		Get
			Return Me._LineTotal
		End Get
		Set
			If ((Me._LineTotal = value)  _
						= false) Then
				Me.OnLineTotalChanging(value)
				Me.SendPropertyChanging
				Me._LineTotal = value
				Me.SendPropertyChanged("LineTotal")
				Me.OnLineTotalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
