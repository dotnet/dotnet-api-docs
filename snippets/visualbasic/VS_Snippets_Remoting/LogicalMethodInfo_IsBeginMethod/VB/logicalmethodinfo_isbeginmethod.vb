' System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(MethodInfo) 
' System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(MethodInfo)

'The following example demonstrates 'IsBeginMethod' and 'IsEndMethod' methods of 'System.Web.Services.Protocols.LogicalMethodInfo' class. The type information of methods of Math web service is taken in a varible of type MethodInfo. Then 'IsBeginMethod' and 'IsEndMethod' is used to query on created MethodInfo variable to find whether the method is begin and end method for asynchronous invocation or not.
'Note:  The below MyMath class is a proxy class generated by the Wsdl.exe utility for the Math Web Service. This class can be found in SoapHttpClientProtocol Class example also. 


Imports System.Reflection
Imports System.Web.Services.Protocols
Imports System.Diagnostics
Imports System.Xml.Serialization
Imports System.Web.Services

Public Class IsBeginMethodClass

   Public Shared Sub Main()
' <Snippet1>
' <Snippet2>

      ' Get the type for the proxy class MyMath Web service.
      ' Note: The MyMath class is a proxy class generated by the Wsdl.exe 
      ' utility for the Math Web service. This class can also be found in 
      ' the SoapHttpClientProtocol Class example. 
      Dim myType As Type = GetType(MyMath.MyMath)

      Dim myBeginMethod As MethodInfo = myType.GetMethod("BeginAdd")
      Dim myEndMethod As MethodInfo = myType.GetMethod("EndAdd")
      Dim myMethod As MethodInfo = myType.GetMethod("Add")

      Console.WriteLine(("Is 'BeginAdd' a Begin Method : " & _
         LogicalMethodInfo.IsBeginMethod(myBeginMethod).ToString()))
      Console.WriteLine(("Is 'Add' a Begin Method : " & _
         LogicalMethodInfo.IsBeginMethod(myMethod).ToString()))
      Console.WriteLine(("Is 'EndAdd' an End Method : " & _
         LogicalMethodInfo.IsEndMethod(myEndMethod).ToString()))

' </Snippet1>
' </Snippet2>
   End Sub

End Class

' Automatically generated proxy class for Math Web service.
' This class can also be found in SoapHttpClientProtocol class example.
Namespace MyMath

   <System.Web.Services.WebServiceBindingAttribute(Name:="MyMathSoap", _
      [Namespace]:="http://tempuri.org/")> _
   Public Class MyMath
      Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

      Public Sub New()
         Me.Url = "http://localhost/Math.asmx"
      End Sub


      <System.Web.Services.Protocols.SoapDocumentMethodAttribute( _
         "http://tempuri.org/Add", _
         Use:=System.Web.Services.Description.SoapBindingUse.Literal, _
         ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
      Public Function Add(ByVal x As Integer, ByVal y As Integer) As Integer
         Dim results As Object() = Me.Invoke("Add", New Object() {x, y})
         Return CInt(results(0))
      End Function 'Add


      Public Function BeginAdd(ByVal x As Integer, ByVal y As Integer, _
         ByVal callback As System.AsyncCallback, _
         ByVal asyncState As Object) As System.IAsyncResult
         Return Me.BeginInvoke("Add", New Object() {x, y}, callback, asyncState)
      End Function 'BeginAdd


      Public Function EndAdd(ByVal asyncResult As System.IAsyncResult) As Integer
         Dim results As Object() = Me.EndInvoke(asyncResult)
         Return CInt(results(0))
      End Function 'EndAdd
   End Class
End Namespace 'MyMath