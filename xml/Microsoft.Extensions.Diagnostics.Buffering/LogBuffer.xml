<Type Name="LogBuffer" FullName="Microsoft.Extensions.Diagnostics.Buffering.LogBuffer">
  <TypeSignature Language="C#" Value="public abstract class LogBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit LogBuffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Diagnostics.Buffering.LogBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class LogBuffer" />
  <TypeSignature Language="F#" Value="type LogBuffer = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogBuffer abstract" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>9.5.0.0</AssemblyVersion>
    <AssemblyVersion>9.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0003", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0003", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Buffers logs into circular buffers and drops them after some time if not flushed.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LogBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Buffering.LogBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; LogBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>9.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Buffering.LogBuffer.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit" Usage="logBuffer.Flush " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>9.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Flushes the buffer and emits all buffered logs.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEnqueue&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public abstract bool TryEnqueue&lt;TState&gt; (Microsoft.Extensions.Logging.Abstractions.IBufferedLogger bufferedLogger, in Microsoft.Extensions.Logging.Abstractions.LogEntry&lt;TState&gt; logEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryEnqueue&lt;TState&gt;(class Microsoft.Extensions.Logging.Abstractions.IBufferedLogger bufferedLogger, [in]valuetype Microsoft.Extensions.Logging.Abstractions.LogEntry`1&lt;!!TState&gt; logEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Buffering.LogBuffer.TryEnqueue``1(Microsoft.Extensions.Logging.Abstractions.IBufferedLogger,Microsoft.Extensions.Logging.Abstractions.LogEntry{``0}@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryEnqueue(Of TState) (bufferedLogger As IBufferedLogger, logEntry As LogEntry(Of TState)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryEnqueue : Microsoft.Extensions.Logging.Abstractions.IBufferedLogger * LogEntry -&gt; bool" Usage="logBuffer.TryEnqueue (bufferedLogger, logEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; abstract bool TryEnqueue(Microsoft::Extensions::Logging::Abstractions::IBufferedLogger ^ bufferedLogger, Microsoft::Extensions::Logging::Abstractions::LogEntry&lt;TState&gt; ^ logEntry);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>9.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="bufferedLogger" Type="Microsoft.Extensions.Logging.Abstractions.IBufferedLogger" />
        <Parameter Name="logEntry" Type="Microsoft.Extensions.Logging.Abstractions.LogEntry&lt;TState&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TState">Type of the log state in the <paramref name="logEntry" /> instance.</typeparam>
        <param name="bufferedLogger">A logger capable of logging buffered log records.</param>
        <param name="logEntry">A log entry to be buffered.</param>
        <summary>
            Enqueues a log record in the underlying buffer, if available.
            </summary>
        <returns>
          <see langword="true" /> if the log record was buffered; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
