<Type Name="ChatMessageExtensions" FullName="Microsoft.Extensions.AI.Evaluation.ChatMessageExtensions">
  <TypeSignature Language="C#" Value="public static class ChatMessageExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ChatMessageExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.Evaluation.ChatMessageExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ChatMessageExtensions" />
  <TypeSignature Language="F#" Value="type ChatMessageExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChatMessageExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Evaluation</AssemblyName>
    <AssemblyVersion>9.4.0.0</AssemblyVersion>
    <AssemblyVersion>9.5.0.0</AssemblyVersion>
    <AssemblyVersion>9.6.0.0</AssemblyVersion>
    <AssemblyVersion>9.7.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.AI.ChatMessage" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="RenderText">
      <MemberSignature Language="C#" Value="public static string RenderText (this Microsoft.Extensions.AI.ChatMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RenderText(class Microsoft.Extensions.AI.ChatMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.ChatMessageExtensions.RenderText(Microsoft.Extensions.AI.ChatMessage)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RenderText (message As ChatMessage) As String" />
      <MemberSignature Language="F#" Value="static member RenderText : Microsoft.Extensions.AI.ChatMessage -&gt; string" Usage="Microsoft.Extensions.AI.Evaluation.ChatMessageExtensions.RenderText message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ RenderText(Microsoft::Extensions::AI::ChatMessage ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation</AssemblyName>
        <AssemblyVersion>9.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="Microsoft.Extensions.AI.ChatMessage" RefType="this" />
      </Parameters>
      <Docs>
        <param name="message">The <see cref="T:Microsoft.Extensions.AI.ChatMessage" /> that is to be rendered.</param>
        <summary>
            Renders the supplied <paramref name="message" /> to a <see langword="string" />. The returned
            <see langword="string" /> can used as part of constructing an evaluation prompt to evaluate a conversation
            that includes the supplied <paramref name="message" />.
            </summary>
        <returns>A <see langword="string" /> containing the rendered <paramref name="message" />.</returns>
        <remarks>
          <para>
            This function only considers the <see cref="P:Microsoft.Extensions.AI.ChatMessage.Text" /> and ignores any <see cref="T:Microsoft.Extensions.AI.AIContent" />s
            (present within the <see cref="P:Microsoft.Extensions.AI.ChatMessage.Contents" /> of the <paramref name="message" />) that are not
            <see cref="T:Microsoft.Extensions.AI.TextContent" />s. If the <paramref name="message" /> does not contain any <see cref="T:Microsoft.Extensions.AI.TextContent" />s
            then this function returns an empty string.
            </para>
          <para>
            The returned string is prefixed with the <see cref="P:Microsoft.Extensions.AI.ChatMessage.Role" /> and
            <see cref="P:Microsoft.Extensions.AI.ChatMessage.AuthorName" /> (if available). The returned string also always has a new line character
            at the end.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderText">
      <MemberSignature Language="C#" Value="public static string RenderText (this System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt; messages);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RenderText(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt; messages) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.ChatMessageExtensions.RenderText(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RenderText (messages As IEnumerable(Of ChatMessage)) As String" />
      <MemberSignature Language="F#" Value="static member RenderText : seq&lt;Microsoft.Extensions.AI.ChatMessage&gt; -&gt; string" Usage="Microsoft.Extensions.AI.Evaluation.ChatMessageExtensions.RenderText messages" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ RenderText(System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::AI::ChatMessage ^&gt; ^ messages);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation</AssemblyName>
        <AssemblyVersion>9.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="messages">The <see cref="T:Microsoft.Extensions.AI.ChatMessage" />s that are to be rendered.</param>
        <summary>
            Renders the supplied <paramref name="messages" /> to a <see langword="string" />.The returned
            <see langword="string" /> can used as part of constructing an evaluation prompt to evaluate a conversation
            that includes the supplied <paramref name="messages" />.
            </summary>
        <returns>A <see langword="string" /> containing the rendered <paramref name="messages" />.</returns>
        <remarks>
          <para>
            This function only considers the <see cref="P:Microsoft.Extensions.AI.ChatMessage.Text" /> and ignores any <see cref="T:Microsoft.Extensions.AI.AIContent" />s
            (present within the <see cref="P:Microsoft.Extensions.AI.ChatMessage.Contents" /> of the <paramref name="messages" />) that are not
            <see cref="T:Microsoft.Extensions.AI.TextContent" />s. Any <paramref name="messages" /> that contain no <see cref="T:Microsoft.Extensions.AI.TextContent" />s will be
            skipped and will not be rendered. If none of the <paramref name="messages" /> include any
            <see cref="T:Microsoft.Extensions.AI.TextContent" />s then this function will return an empty string.
            </para>
          <para>
            The rendered <paramref name="messages" /> are each prefixed with the <see cref="P:Microsoft.Extensions.AI.ChatMessage.Role" /> and
            <see cref="P:Microsoft.Extensions.AI.ChatMessage.AuthorName" /> (if available) in the returned string. The rendered
            <see cref="T:Microsoft.Extensions.AI.ChatMessage" />s are also always separated by new line characters in the returned string.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetUserRequest">
      <MemberSignature Language="C#" Value="public static bool TryGetUserRequest (this System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt; messages, out Microsoft.Extensions.AI.ChatMessage? userRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetUserRequest(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt; messages, [out] class Microsoft.Extensions.AI.ChatMessage&amp; userRequest) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.ChatMessageExtensions.TryGetUserRequest(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatMessage@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetUserRequest (messages As IEnumerable(Of ChatMessage), ByRef userRequest As ChatMessage) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryGetUserRequest : seq&lt;Microsoft.Extensions.AI.ChatMessage&gt; * ChatMessage -&gt; bool" Usage="Microsoft.Extensions.AI.Evaluation.ChatMessageExtensions.TryGetUserRequest (messages, userRequest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetUserRequest(System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::AI::ChatMessage ^&gt; ^ messages, [Runtime::InteropServices::Out] Microsoft::Extensions::AI::ChatMessage ^ % userRequest);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation</AssemblyName>
        <AssemblyVersion>9.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt;" RefType="this" />
        <Parameter Name="userRequest" Type="Microsoft.Extensions.AI.ChatMessage" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="messages">
            A collection of <see cref="T:Microsoft.Extensions.AI.ChatMessage" />s representing an LLM chat conversation history.
            </param>
        <param name="userRequest">
            Returns the last <see cref="T:Microsoft.Extensions.AI.ChatMessage" /> in the supplied collection of <paramref name="messages" /> if this
            last <see cref="T:Microsoft.Extensions.AI.ChatMessage" /> has <see cref="P:Microsoft.Extensions.AI.ChatMessage.Role" /> set to <see cref="P:Microsoft.Extensions.AI.ChatRole.User" />;
            <see langword="null" /> otherwise.
            </param>
        <summary>
            Given a collection of <paramref name="messages" /> representing an LLM chat conversation, returns a
            single <see cref="T:Microsoft.Extensions.AI.ChatMessage" /> representing the last <paramref name="userRequest" /> in this conversation.
            </summary>
        <returns>
          <see langword="true" /> if the last <see cref="T:Microsoft.Extensions.AI.ChatMessage" /> in the supplied collection of
            <paramref name="messages" /> has <see cref="P:Microsoft.Extensions.AI.ChatMessage.Role" /> set to <see cref="P:Microsoft.Extensions.AI.ChatRole.User" />;
            <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetUserRequest">
      <MemberSignature Language="C#" Value="public static bool TryGetUserRequest (this System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt; messages, out Microsoft.Extensions.AI.ChatMessage? userRequest, out System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.ChatMessage&gt; remainingMessages);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetUserRequest(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt; messages, [out] class Microsoft.Extensions.AI.ChatMessage&amp; userRequest, [out] class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt;&amp; remainingMessages) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.ChatMessageExtensions.TryGetUserRequest(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatMessage@,System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.AI.ChatMessage}@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetUserRequest (messages As IEnumerable(Of ChatMessage), ByRef userRequest As ChatMessage, ByRef remainingMessages As IReadOnlyList(Of ChatMessage)) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryGetUserRequest : seq&lt;Microsoft.Extensions.AI.ChatMessage&gt; * ChatMessage * IReadOnlyList -&gt; bool" Usage="Microsoft.Extensions.AI.Evaluation.ChatMessageExtensions.TryGetUserRequest (messages, userRequest, remainingMessages)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetUserRequest(System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::AI::ChatMessage ^&gt; ^ messages, [Runtime::InteropServices::Out] Microsoft::Extensions::AI::ChatMessage ^ % userRequest, [Runtime::InteropServices::Out] System::Collections::Generic::IReadOnlyList&lt;Microsoft::Extensions::AI::ChatMessage ^&gt; ^ % remainingMessages);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation</AssemblyName>
        <AssemblyVersion>9.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt;" RefType="this" />
        <Parameter Name="userRequest" Type="Microsoft.Extensions.AI.ChatMessage" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="remainingMessages" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.ChatMessage&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="messages">
            A collection of <see cref="T:Microsoft.Extensions.AI.ChatMessage" />s representing an LLM chat conversation history.
            </param>
        <param name="userRequest">
            Returns the last <see cref="T:Microsoft.Extensions.AI.ChatMessage" /> in the supplied collection of <paramref name="messages" /> if this
            last <see cref="T:Microsoft.Extensions.AI.ChatMessage" /> has <see cref="P:Microsoft.Extensions.AI.ChatMessage.Role" /> set to <see cref="P:Microsoft.Extensions.AI.ChatRole.User" />;
            <see langword="null" /> otherwise.
            </param>
        <param name="remainingMessages">
            Returns the remaining <see cref="T:Microsoft.Extensions.AI.ChatMessage" />s in the conversation history excluding
            <paramref name="userRequest" />.
            </param>
        <summary>
            Decomposes the supplied collection of <paramref name="messages" /> representing an LLM chat conversation into a
            single <see cref="T:Microsoft.Extensions.AI.ChatMessage" /> representing the last <paramref name="userRequest" /> in this conversation and
            a collection of <paramref name="remainingMessages" /> representing the rest of the conversation history.
            </summary>
        <returns>
          <see langword="true" /> if the last <see cref="T:Microsoft.Extensions.AI.ChatMessage" /> in the supplied collection of
            <paramref name="messages" /> has <see cref="P:Microsoft.Extensions.AI.ChatMessage.Role" /> set to <see cref="P:Microsoft.Extensions.AI.ChatRole.User" />;
            <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
