<Type Name="EnumStringsAttribute" FullName="Microsoft.Extensions.EnumStrings.EnumStringsAttribute">
  <TypeSignature Language="C#" Value="public sealed class EnumStringsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnumStringsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.EnumStrings.EnumStringsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EnumStringsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type EnumStringsAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class EnumStringsAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.EnumStrings</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Enum, AllowMultiple=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Enum, AllowMultiple=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Provides information to guide the production of an extension method to efficiently convert an enum value into string form.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumStringsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.EnumStrings.EnumStringsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnumStringsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.EnumStrings</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.EnumStrings.EnumStringsAttribute" /> class.
            </summary>
        <remarks>
            Use this overload when directly annotating an enum type.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumStringsAttribute (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.EnumStrings.EnumStringsAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enumType As Type)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.EnumStrings.EnumStringsAttribute : Type -&gt; Microsoft.Extensions.EnumStrings.EnumStringsAttribute" Usage="new Microsoft.Extensions.EnumStrings.EnumStringsAttribute enumType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnumStringsAttribute(Type ^ enumType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.EnumStrings</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType">The type of the enum to work with.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.EnumStrings.EnumStringsAttribute" /> class.
            </summary>
        <remarks>
            Use this overload when applying the attribute at the assembly-level when working with an enum declared in a
            different assembly.
            </remarks>
        <example>
          <code>
            [assembly: EnumStrings(typeof(System.ConsoleKey))]
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="EnumType">
      <MemberSignature Language="C#" Value="public Type? EnumType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EnumType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.EnumStrings.EnumStringsAttribute.EnumType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnumType As Type" />
      <MemberSignature Language="F#" Value="member this.EnumType : Type" Usage="Microsoft.Extensions.EnumStrings.EnumStringsAttribute.EnumType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ EnumType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.EnumStrings</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the type of the enum to annotate.
            </summary>
        <value>To be added.</value>
        <remarks>
            This is <see langword="null" /> when the attribute is applied directly to an enum type.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtensionClassModifiers">
      <MemberSignature Language="C#" Value="public string ExtensionClassModifiers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExtensionClassModifiers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.EnumStrings.EnumStringsAttribute.ExtensionClassModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtensionClassModifiers As String" />
      <MemberSignature Language="F#" Value="member this.ExtensionClassModifiers : string with get, set" Usage="Microsoft.Extensions.EnumStrings.EnumStringsAttribute.ExtensionClassModifiers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExtensionClassModifiers { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.EnumStrings</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the modifiers to apply to the generated class.
            </summary>
        <value>To be added.</value>
        <remarks>
            Defaults to <c>internal static</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtensionClassName">
      <MemberSignature Language="C#" Value="public string? ExtensionClassName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExtensionClassName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.EnumStrings.EnumStringsAttribute.ExtensionClassName" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtensionClassName As String" />
      <MemberSignature Language="F#" Value="member this.ExtensionClassName : string with get, set" Usage="Microsoft.Extensions.EnumStrings.EnumStringsAttribute.ExtensionClassName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExtensionClassName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.EnumStrings</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the name of the generated class.
            </summary>
        <value>To be added.</value>
        <remarks>
            If this is <see langword="null" />, then the class name is generated by appending <c>Extensions</c> to the enum type name.
            Defaults to <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtensionMethodName">
      <MemberSignature Language="C#" Value="public string ExtensionMethodName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExtensionMethodName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.EnumStrings.EnumStringsAttribute.ExtensionMethodName" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtensionMethodName As String" />
      <MemberSignature Language="F#" Value="member this.ExtensionMethodName : string with get, set" Usage="Microsoft.Extensions.EnumStrings.EnumStringsAttribute.ExtensionMethodName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExtensionMethodName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.EnumStrings</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the name of the generated extension method.
            </summary>
        <value>To be added.</value>
        <remarks>
            Defaults to <c>ToInvariantString</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtensionNamespace">
      <MemberSignature Language="C#" Value="public string? ExtensionNamespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExtensionNamespace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.EnumStrings.EnumStringsAttribute.ExtensionNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtensionNamespace As String" />
      <MemberSignature Language="F#" Value="member this.ExtensionNamespace : string with get, set" Usage="Microsoft.Extensions.EnumStrings.EnumStringsAttribute.ExtensionNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExtensionNamespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.EnumStrings</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the namespace of the generated class.
            </summary>
        <value>To be added.</value>
        <remarks>
            If this is <see langword="null" />, then the class is generated in the same namespace as the enum.
            Defaults to <see langword="null" />.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
