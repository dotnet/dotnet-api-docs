<Type Name="PemEncoding" FullName="System.Security.Cryptography.PemEncoding">
  <TypeSignature Language="C#" Value="public static class PemEncoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit PemEncoding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PemEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class PemEncoding" />
  <TypeSignature Language="F#" Value="type PemEncoding = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class PemEncoding abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Security.Cryptography.Encoding" FromVersion="10.0.0.0" To="System.Security.Cryptography" ToVersion="10.0.0.0" FrameworkAlternate="net-10.0" />
    <TypeForwarding From="System.Security.Cryptography.Encoding" FromVersion="7.0.0.0" To="System.Security.Cryptography" ToVersion="7.0.0.0" FrameworkAlternate="net-7.0" />
    <TypeForwarding From="System.Security.Cryptography.Encoding" FromVersion="8.0.0.0" To="System.Security.Cryptography" ToVersion="8.0.0.0" FrameworkAlternate="net-8.0" />
    <TypeForwarding From="System.Security.Cryptography.Encoding" FromVersion="9.0.0.0" To="System.Security.Cryptography" ToVersion="9.0.0.0" FrameworkAlternate="net-9.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides methods for reading and writing the IETF RFC 7468 subset of PEM (Privacy-Enhanced Mail) textual encodings.
 This class cannot be inherited.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.PemFields Find (ReadOnlySpan&lt;char&gt; pemData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Security.Cryptography.PemFields Find(valuetype System.ReadOnlySpan`1&lt;char&gt; pemData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.Find(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Find (pemData As ReadOnlySpan(Of Char)) As PemFields" />
      <MemberSignature Language="F#" Value="static member Find : ReadOnlySpan&lt;char&gt; -&gt; System.Security.Cryptography.PemFields" Usage="System.Security.Cryptography.PemEncoding.Find pemData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::PemFields Find(ReadOnlySpan&lt;char&gt; pemData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.PemFields</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pemData" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="pemData">The text containing the PEM-encoded data.</param>
        <summary>Finds the first PEM-encoded data.</summary>
        <returns>A value that specifies the location, label, and data location of the encoded data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

IETF RFC 7468 permits different decoding rules. This method always uses lax rules.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pemData" /> does not contain a well-formed PEM-encoded value.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindUtf8">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.PemFields FindUtf8 (ReadOnlySpan&lt;byte&gt; pemData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Security.Cryptography.PemFields FindUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; pemData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.FindUtf8(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUtf8 (pemData As ReadOnlySpan(Of Byte)) As PemFields" />
      <MemberSignature Language="F#" Value="static member FindUtf8 : ReadOnlySpan&lt;byte&gt; -&gt; System.Security.Cryptography.PemFields" Usage="System.Security.Cryptography.PemEncoding.FindUtf8 pemData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::PemFields FindUtf8(ReadOnlySpan&lt;System::Byte&gt; pemData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.PemFields</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pemData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="pemData">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEncodedSize">
      <MemberSignature Language="C#" Value="public static int GetEncodedSize (int labelLength, int dataLength);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetEncodedSize(int32 labelLength, int32 dataLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.GetEncodedSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncodedSize (labelLength As Integer, dataLength As Integer) As Integer" />
      <MemberSignature Language="F#" Value="static member GetEncodedSize : int * int -&gt; int" Usage="System.Security.Cryptography.PemEncoding.GetEncodedSize (labelLength, dataLength)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetEncodedSize(int labelLength, int dataLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelLength" Type="System.Int32" />
        <Parameter Name="dataLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="labelLength">The length of the label, in characters.</param>
        <param name="dataLength">The length of the data, in bytes.</param>
        <summary>Determines the length of a PEM-encoded value, in characters, given the length of a label and binary data.</summary>
        <returns>The number of characters in the encoded PEM.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="labelLength" /> is a negative value.

-or-

<paramref name="dataLength" /> is a negative value.

-or-

<paramref name="labelLength" /> exceeds the maximum possible label length.

-or-

<paramref name="dataLength" /> exceeds the maximum possible encoded data length.</exception>
        <exception cref="T:System.ArgumentException">The length of the PEM-encoded value is larger than <see cref="F:System.Int32.MaxValue">Int32.MaxValue</see>.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryFind">
      <MemberSignature Language="C#" Value="public static bool TryFind (ReadOnlySpan&lt;char&gt; pemData, out System.Security.Cryptography.PemFields fields);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFind(valuetype System.ReadOnlySpan`1&lt;char&gt; pemData, [out] valuetype System.Security.Cryptography.PemFields&amp; fields) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.TryFind(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PemFields@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFind (pemData As ReadOnlySpan(Of Char), ByRef fields As PemFields) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFind : ReadOnlySpan&lt;char&gt; * PemFields -&gt; bool" Usage="System.Security.Cryptography.PemEncoding.TryFind (pemData, fields)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFind(ReadOnlySpan&lt;char&gt; pemData, [Runtime::InteropServices::Out] System::Security::Cryptography::PemFields % fields);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pemData" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="fields" Type="System.Security.Cryptography.PemFields" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pemData">The text containing the PEM-encoded data.</param>
        <param name="fields">When this method returns, contains a value that specifies the location, label, and data location of the encoded data; or, if no PEM-encoded data is found, a value that specifies those locations as empty.

          This parameter is treated as uninitialized.</param>
        <summary>Attempts to find the first PEM-encoded data.</summary>
        <returns>
          <see langword="true" /> if PEM-encoded data was found; otherwise <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

IETF RFC 7468 permits different decoding rules. This method always uses lax rules.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFindUtf8">
      <MemberSignature Language="C#" Value="public static bool TryFindUtf8 (ReadOnlySpan&lt;byte&gt; pemData, out System.Security.Cryptography.PemFields fields);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFindUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; pemData, [out] valuetype System.Security.Cryptography.PemFields&amp; fields) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.TryFindUtf8(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PemFields@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFindUtf8 (pemData As ReadOnlySpan(Of Byte), ByRef fields As PemFields) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryFindUtf8 : ReadOnlySpan&lt;byte&gt; * PemFields -&gt; bool" Usage="System.Security.Cryptography.PemEncoding.TryFindUtf8 (pemData, fields)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFindUtf8(ReadOnlySpan&lt;System::Byte&gt; pemData, [Runtime::InteropServices::Out] System::Security::Cryptography::PemFields % fields);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pemData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="fields" Type="System.Security.Cryptography.PemFields" RefType="out" Index="1" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="pemData">To be added.</param>
        <param name="fields">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWrite">
      <MemberSignature Language="C#" Value="public static bool TryWrite (ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;byte&gt; data, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite(valuetype System.ReadOnlySpan`1&lt;char&gt; label, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.TryWrite(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite (label As ReadOnlySpan(Of Char), data As ReadOnlySpan(Of Byte), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryWrite : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; * int -&gt; bool" Usage="System.Security.Cryptography.PemEncoding.TryWrite (label, data, destination, charsWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWrite(ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="label">The label to write.</param>
        <param name="data">The data to write.</param>
        <param name="destination">The buffer to receive the PEM-encoded text.</param>
        <param name="charsWritten">When this method returns, this parameter contains the number of characters written to <paramref name="destination" />. This parameter is treated as uninitialized.</param>
        <summary>Tries to write the provided data and label as PEM-encoded data into a provided buffer.</summary>
        <returns>
          <see langword="true" /> if <paramref name="destination" /> is large enough to contain the PEM-encoded text, otherwise <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method always wraps the base-64 encoded text to 64 characters, per the recommended wrapping of IETF RFC 7468. Unix-style line endings are used for line breaks.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="label" /> exceeds the maximum possible label length.

-or-

<paramref name="data" /> exceeds the maximum possible encoded data length.</exception>
        <exception cref="T:System.ArgumentException">The resulting PEM-encoded text is larger than <see cref="F:System.Int32.MaxValue">Int32.MaxValue</see>.

-or-

<paramref name="label" /> contains invalid characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryWriteUtf8">
      <MemberSignature Language="C#" Value="public static bool TryWriteUtf8 (ReadOnlySpan&lt;byte&gt; utf8Label, ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWriteUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Label, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.TryWriteUtf8(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWriteUtf8 (utf8Label As ReadOnlySpan(Of Byte), data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryWriteUtf8 : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int -&gt; bool" Usage="System.Security.Cryptography.PemEncoding.TryWriteUtf8 (utf8Label, data, destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryWriteUtf8(ReadOnlySpan&lt;System::Byte&gt; utf8Label, ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Label" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="2" FrameworkAlternate="net-10.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="utf8Label">To be added.</param>
        <param name="data">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static char[] Write (ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] Write(valuetype System.ReadOnlySpan`1&lt;char&gt; label, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.Write(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Write (label As ReadOnlySpan(Of Char), data As ReadOnlySpan(Of Byte)) As Char()" />
      <MemberSignature Language="F#" Value="static member Write : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; char[]" Usage="System.Security.Cryptography.PemEncoding.Write (label, data)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ Write(ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;System::Byte&gt; data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="label">The label to encode.</param>
        <param name="data">The data to encode.</param>
        <summary>Creates an encoded PEM with the given label and data.</summary>
        <returns>A character array of the encoded PEM.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method always wraps the base-64 encoded text to 64 characters, per the recommended wrapping of RFC-7468. Unix-style line endings are used for line breaks.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="label" /> exceeds the maximum possible label length.

-or-

<paramref name="data" /> exceeds the maximum possible encoded data length.</exception>
        <exception cref="T:System.ArgumentException">The resulting PEM-encoded text is larger than <see cref="F:System.Int32.MaxValue">Int32.MaxValue</see>.

-or-

<paramref name="label" /> contains invalid characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public static string WriteString (ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; label, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WriteString (label As ReadOnlySpan(Of Char), data As ReadOnlySpan(Of Byte)) As String" />
      <MemberSignature Language="F#" Value="static member WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; string" Usage="System.Security.Cryptography.PemEncoding.WriteString (label, data)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ WriteString(ReadOnlySpan&lt;char&gt; label, ReadOnlySpan&lt;System::Byte&gt; data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-10.0;net-7.0;net-8.0;net-9.0" />
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-10.0;net-7.0;net-8.0;net-9.0" />
      </Parameters>
      <Docs>
        <param name="label">The label to encode.</param>
        <param name="data">The data to encode.</param>
        <summary>Creates an encoded PEM with the given label and data.</summary>
        <returns>A string of the encoded PEM.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method always wraps the base-64 encoded text to 64 characters, per the
               recommended wrapping of RFC-7468. Unix-style line endings are used for line breaks.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="label" /> exceeds the maximum possible label length.

-or-

<paramref name="data" /> exceeds the maximum possible encoded data length.</exception>
        <exception cref="T:System.ArgumentException">The resulting PEM-encoded text is larger than <see cref="F:System.Int32.MaxValue" />.

-or-

<paramref name="label" /> contains invalid characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUtf8">
      <MemberSignature Language="C#" Value="public static byte[] WriteUtf8 (ReadOnlySpan&lt;byte&gt; utf8Label, ReadOnlySpan&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] WriteUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Label, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PemEncoding.WriteUtf8(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WriteUtf8 (utf8Label As ReadOnlySpan(Of Byte), data As ReadOnlySpan(Of Byte)) As Byte()" />
      <MemberSignature Language="F#" Value="static member WriteUtf8 : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; byte[]" Usage="System.Security.Cryptography.PemEncoding.WriteUtf8 (utf8Label, data)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ WriteUtf8(ReadOnlySpan&lt;System::Byte&gt; utf8Label, ReadOnlySpan&lt;System::Byte&gt; data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Label" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="1" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="utf8Label">To be added.</param>
        <param name="data">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
