<Type Name="Shake128" FullName="System.Security.Cryptography.Shake128">
  <TypeSignature Language="C#" Value="public sealed class Shake128 : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Shake128 extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Shake128" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Shake128&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type Shake128 = class&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Shake128 sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Computes the SHAKE128 hash for the input data.</summary>
    <remarks>This algorithm is specified by FIPS 202. The SHAKE algorithm family is an extendable-output function (XOF) which allows the output to be extended to any length. The size of the XOF indicates the security strength of the algorithm, not the output size.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Shake128 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Shake128();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Shake128" /> class.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">The platform does not support SHAKE128. Callers can use the <see cref="P:System.Security.Cryptography.Shake128.IsSupported" /> property
              to determine if the platform supports SHAKE128.</exception>
      </Docs>
    </Member>
    <Member MemberName="AppendData">
      <MemberSignature Language="C#" Value="public void AppendData (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendData(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.AppendData(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendData (data As Byte())" />
      <MemberSignature Language="F#" Value="member this.AppendData : byte[] -&gt; unit" Usage="shake128.AppendData data" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendData(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">The data to process.</param>
        <summary>Appends the specified data to the data already processed in the hash.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="AppendData">
      <MemberSignature Language="C#" Value="public void AppendData (ReadOnlySpan&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.AppendData(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendData (data As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="F#" Value="member this.AppendData : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="shake128.AppendData data" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendData(ReadOnlySpan&lt;System::Byte&gt; data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The data to process.</param>
        <summary>Appends the specified data to the data already processed in the hash.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Shake128 Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.Shake128 Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Shake128" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Security.Cryptography.Shake128" Usage="shake128.Clone " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::Shake128 ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Shake128</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of <see cref="T:System.Security.Cryptography.Shake128" /> with the existing appended data preserved.</summary>
        <returns>A clone of the current instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error has occurred during the operation.</exception>
        <exception cref="T:System.InvalidOperationException">The current instance is being read from and cannot be cloned.</exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="shake128.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentHash">
      <MemberSignature Language="C#" Value="public byte[] GetCurrentHash (int outputLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetCurrentHash(int32 outputLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.GetCurrentHash(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentHash (outputLength As Integer) As Byte()" />
      <MemberSignature Language="F#" Value="member this.GetCurrentHash : int -&gt; byte[]" Usage="shake128.GetCurrentHash outputLength" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetCurrentHash(int outputLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="outputLength">The size of the hash to produce.</param>
        <summary>Retrieves the hash for the data accumulated from prior calls to the <c>AppendData</c> methods, without resetting the object to its initial state.</summary>
        <returns>The computed hash.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="outputLength" /> is negative.</exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentHash">
      <MemberSignature Language="C#" Value="public void GetCurrentHash (Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetCurrentHash(valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.GetCurrentHash(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetCurrentHash (destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="member this.GetCurrentHash : Span&lt;byte&gt; -&gt; unit" Usage="shake128.GetCurrentHash destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetCurrentHash(Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer to fill with the hash.</param>
        <summary>Fills the buffer with the hash for the data accumulated from prior calls to the <c>AppendData</c> methods, without resetting the object to its initial state.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashAndReset">
      <MemberSignature Language="C#" Value="public byte[] GetHashAndReset (int outputLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetHashAndReset(int32 outputLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.GetHashAndReset(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashAndReset (outputLength As Integer) As Byte()" />
      <MemberSignature Language="F#" Value="member this.GetHashAndReset : int -&gt; byte[]" Usage="shake128.GetHashAndReset outputLength" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetHashAndReset(int outputLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="outputLength">The size of the hash to produce.</param>
        <summary>Retrieves the hash for the data accumulated from prior calls to the <c>AppendData</c> methods, and resets the object to its initial state.</summary>
        <returns>The computed hash.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="outputLength" /> is negative.</exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashAndReset">
      <MemberSignature Language="C#" Value="public void GetHashAndReset (Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetHashAndReset(valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.GetHashAndReset(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetHashAndReset (destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="member this.GetHashAndReset : Span&lt;byte&gt; -&gt; unit" Usage="shake128.GetHashAndReset destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetHashAndReset(Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer to fill with the hash.</param>
        <summary>Fills the buffer with the hash for the data accumulated from prior calls to the <c>AppendData</c> methods, and resets the object to its initial state.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="public static byte[] HashData (byte[] source, int outputLength);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] HashData(unsigned int8[] source, int32 outputLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.HashData(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HashData (source As Byte(), outputLength As Integer) As Byte()" />
      <MemberSignature Language="F#" Value="static member HashData : byte[] * int -&gt; byte[]" Usage="System.Security.Cryptography.Shake128.HashData (source, outputLength)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ HashData(cli::array &lt;System::Byte&gt; ^ source, int outputLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Byte[]" />
        <Parameter Name="outputLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The data to hash.</param>
        <param name="outputLength">The size of the hash to produce.</param>
        <summary>Computes the hash of data using the SHAKE128 algorithm.</summary>
        <returns>The hash of the data.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="outputLength" /> is negative.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform does not support SHAKE128. Callers can use the <see cref="P:System.Security.Cryptography.Shake128.IsSupported" /> property
              to determine if the platform supports SHAKE128.</exception>
      </Docs>
    </Member>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="public static byte[] HashData (System.IO.Stream source, int outputLength);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] HashData(class System.IO.Stream source, int32 outputLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.HashData(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HashData (source As Stream, outputLength As Integer) As Byte()" />
      <MemberSignature Language="F#" Value="static member HashData : System.IO.Stream * int -&gt; byte[]" Usage="System.Security.Cryptography.Shake128.HashData (source, outputLength)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ HashData(System::IO::Stream ^ source, int outputLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="outputLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The stream to hash.</param>
        <param name="outputLength">The size of the hash to produce.</param>
        <summary>Computes the hash of a stream using the SHAKE128 algorithm.</summary>
        <returns>The hash of the data.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> does not support reading.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="outputLength" /> is negative.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform does not support SHAKE128. Callers can use the <see cref="P:System.Security.Cryptography.Shake128.IsSupported" /> property
              to determine if the platform supports SHAKE128.</exception>
      </Docs>
    </Member>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="public static void HashData (System.IO.Stream source, Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HashData(class System.IO.Stream source, valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.HashData(System.IO.Stream,System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HashData (source As Stream, destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="static member HashData : System.IO.Stream * Span&lt;byte&gt; -&gt; unit" Usage="System.Security.Cryptography.Shake128.HashData (source, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void HashData(System::IO::Stream ^ source, Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The stream to hash.</param>
        <param name="destination">The buffer to fill with the hash.</param>
        <summary>Computes the hash of a stream using the SHAKE128 algorithm.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> does not support reading.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform does not support SHAKE128. Callers can use the <see cref="P:System.Security.Cryptography.Shake128.IsSupported" /> property
              to determine if the platform supports SHAKE128.</exception>
      </Docs>
    </Member>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="public static byte[] HashData (ReadOnlySpan&lt;byte&gt; source, int outputLength);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] HashData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, int32 outputLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.HashData(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HashData (source As ReadOnlySpan(Of Byte), outputLength As Integer) As Byte()" />
      <MemberSignature Language="F#" Value="static member HashData : ReadOnlySpan&lt;byte&gt; * int -&gt; byte[]" Usage="System.Security.Cryptography.Shake128.HashData (source, outputLength)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ HashData(ReadOnlySpan&lt;System::Byte&gt; source, int outputLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="outputLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The data to hash.</param>
        <param name="outputLength">The size of the hash to produce.</param>
        <summary>Computes the hash of data using the SHAKE128 algorithm.</summary>
        <returns>The hash of the data.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="outputLength" /> is negative.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform does not support SHAKE128. Callers can use the <see cref="P:System.Security.Cryptography.Shake128.IsSupported" /> property
              to determine if the platform supports SHAKE128.</exception>
      </Docs>
    </Member>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="public static void HashData (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HashData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub HashData (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="static member HashData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; -&gt; unit" Usage="System.Security.Cryptography.Shake128.HashData (source, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void HashData(ReadOnlySpan&lt;System::Byte&gt; source, Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The data to hash.</param>
        <param name="destination">The buffer to fill with the hash.</param>
        <summary>Computes the hash of data using the SHAKE128 algorithm.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">The platform does not support SHAKE128. Callers can use the <see cref="P:System.Security.Cryptography.Shake128.IsSupported" /> property
              to determine if the platform supports SHAKE128.</exception>
      </Docs>
    </Member>
    <Member MemberName="HashDataAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;byte[]&gt; HashDataAsync (System.IO.Stream source, int outputLength, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;unsigned int8[]&gt; HashDataAsync(class System.IO.Stream source, int32 outputLength, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.HashDataAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HashDataAsync (source As Stream, outputLength As Integer, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Byte())" />
      <MemberSignature Language="F#" Value="static member HashDataAsync : System.IO.Stream * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;byte[]&gt;" Usage="System.Security.Cryptography.Shake128.HashDataAsync (source, outputLength, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Byte[]&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="outputLength" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">The stream to hash.</param>
        <param name="outputLength">The size of the hash to produce.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests.
              The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously computes the hash of a stream using the SHAKE128 algorithm.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1" /> that completes with the computed hash.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> does not support reading.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="outputLength" /> is negative.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="cancellationToken" /> has been canceled.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform does not support SHAKE128. Callers can use the <see cref="P:System.Security.Cryptography.Shake128.IsSupported" /> property
              to determine if the platform supports SHAKE128.</exception>
      </Docs>
    </Member>
    <Member MemberName="HashDataAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask HashDataAsync (System.IO.Stream source, Memory&lt;byte&gt; destination, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask HashDataAsync(class System.IO.Stream source, valuetype System.Memory`1&lt;unsigned int8&gt; destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.HashDataAsync(System.IO.Stream,System.Memory{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HashDataAsync (source As Stream, destination As Memory(Of Byte), Optional cancellationToken As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="static member HashDataAsync : System.IO.Stream * Memory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="System.Security.Cryptography.Shake128.HashDataAsync (source, destination, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="destination" Type="System.Memory&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">The stream to hash.</param>
        <param name="destination">The buffer to fill with the hash.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests.
              The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously computes the hash of a stream using the SHAKE128 algorithm.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> does not support reading.</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="cancellationToken" /> has been canceled.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform does not support SHAKE128. Callers can use the <see cref="P:System.Security.Cryptography.Shake128.IsSupported" /> property
              to determine if the platform supports SHAKE128.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Shake128.IsSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsSupported As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSupported : bool" Usage="System.Security.Cryptography.Shake128.IsSupported" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsSupported { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the algorithm is supported on the current platform.</summary>
        <value>
          <see langword="true" /> if the algorithm is supported; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read (int outputLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read(int32 outputLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.Read(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (outputLength As Integer) As Byte()" />
      <MemberSignature Language="F#" Value="member this.Read : int -&gt; byte[]" Usage="shake128.Read outputLength" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read(int outputLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputLength" Type="System.Int32" Index="0" FrameworkAlternate="net-9.0" />
      </Parameters>
      <Docs>
        <param name="outputLength">The size of the hash to produce.</param>
        <summary>Retrieves the hash for the data accumulated from prior calls to the <c>AppendData</c> methods without resetting the object to its initial state and allowing additional calls to continue retrieving the hash.</summary>
        <returns>The computed hash.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="outputLength" /> is negative.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error has occurred during the operation.</exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform does not support multiple reads of the hash. <see cref="M:System.Security.Cryptography.Shake128.GetHashAndReset(System.Int32)" /> can be used
              to perform a single operation.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Read(valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.Read(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="member this.Read : Span&lt;byte&gt; -&gt; unit" Usage="shake128.Read destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-9.0" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer to fill with the hash.</param>
        <summary>Fills the buffer with the hash for the data accumulated from prior calls to the <c>AppendData</c> methods without resetting the object to its initial state and allowing additional calls to continue retrieving the hash.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error has occurred during the operation.</exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The platform does not support multiple reads of the hash. <see cref="M:System.Security.Cryptography.Shake128.GetHashAndReset(System.Span{System.Byte})" /> can be used
              to perform a single operation.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Shake128.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="shake128.Reset " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the instance back to its initial state.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error has occurred during the operation.</exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
