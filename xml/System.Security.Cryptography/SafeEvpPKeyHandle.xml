<Type Name="SafeEvpPKeyHandle" FullName="System.Security.Cryptography.SafeEvpPKeyHandle">
  <TypeSignature Language="C#" Value="public sealed class SafeEvpPKeyHandle : System.Runtime.InteropServices.SafeHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SafeEvpPKeyHandle extends System.Runtime.InteropServices.SafeHandle" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.SafeEvpPKeyHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SafeEvpPKeyHandle&#xA;Inherits SafeHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class SafeEvpPKeyHandle sealed : System::Runtime::InteropServices::SafeHandle" />
  <TypeSignature Language="F#" Value="type SafeEvpPKeyHandle = class&#xA;    inherit SafeHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.InteropServices.SafeHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the <see langword="EVP_PKEY*" /> pointer type from OpenSSL.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

 Before using <xref:System.Security.Cryptography.SafeEvpPKeyHandle> to perform interop with OpenSSL a caller must ensure that the version of OpenSSL they are calling is the same as the version the .NET runtime is calling, and not a side-by-side version. The version of OpenSSL that the runtime is calling can be determined by <xref:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion>.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SafeEvpPKeyHandle (IntPtr handle, bool ownsHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, bool ownsHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SafeEvpPKeyHandle.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr, ownsHandle As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SafeEvpPKeyHandle(IntPtr handle, bool ownsHandle);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.SafeEvpPKeyHandle : nativeint * bool -&gt; System.Security.Cryptography.SafeEvpPKeyHandle" Usage="new System.Security.Cryptography.SafeEvpPKeyHandle (handle, ownsHandle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">The handle value to represent.</param>
        <param name="ownsHandle">
          <see langword="true" /> to reliably let <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" /> release the handle during the finalization phase; otherwise, <see langword="false" /> (not recommended).</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SafeEvpPKeyHandle" /> class with the specified handle value.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DuplicateHandle">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.SafeEvpPKeyHandle DuplicateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.Cryptography.SafeEvpPKeyHandle DuplicateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SafeEvpPKeyHandle.DuplicateHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function DuplicateHandle () As SafeEvpPKeyHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::Cryptography::SafeEvpPKeyHandle ^ DuplicateHandle();" />
      <MemberSignature Language="F#" Value="member this.DuplicateHandle : unit -&gt; System.Security.Cryptography.SafeEvpPKeyHandle" Usage="safeEvpPKeyHandle.DuplicateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SafeEvpPKeyHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates another instance of this type which has an independent lifetime but tracks the same resource.</summary>
        <returns>Another instance of this type which has an independent lifetime but tracks the same resource.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">This handle is invalid.</exception>
        <altmember cref="P:System.Security.Cryptography.SafeEvpPKeyHandle.IsInvalid" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalid">
      <MemberSignature Language="C#" Value="public override bool IsInvalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInvalid" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.SafeEvpPKeyHandle.IsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsInvalid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsInvalid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInvalid : bool" Usage="System.Security.Cryptography.SafeEvpPKeyHandle.IsInvalid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the handle value is invalid.</summary>
        <value>
          <see langword="true" /> if the handle value is invalid; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenSslVersion">
      <MemberSignature Language="C#" Value="public static long OpenSslVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 OpenSslVersion" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OpenSslVersion As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long OpenSslVersion { long get(); };" />
      <MemberSignature Language="F#" Value="member this.OpenSslVersion : int64" Usage="System.Security.Cryptography.SafeEvpPKeyHandle.OpenSslVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value representing the version number as reported by the loaded version of OpenSSL.</summary>
        <value>A value representing the version number as reported by the loaded version of OpenSSL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

 Before using <xref:System.Security.Cryptography.SafeEvpPKeyHandle> to perform interop with OpenSSL a caller must ensure that the version of OpenSSL they are calling is the same as the version the .NET runtime is calling, and not a side-by-side version.

 For OpenSSL 1.1.0 and newer, this value is reported from the `OpenSSL_version_num()` function. When an older version of OpenSSL is in use, this value is reported from the `SSLeay()` function.

 Callers are encouraged to only perform an equality check with this value.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="protected override bool ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SafeEvpPKeyHandle.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ReleaseHandle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ReleaseHandle();" />
      <MemberSignature Language="F#" Value="override this.ReleaseHandle : unit -&gt; bool" Usage="safeEvpPKeyHandle.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.OpenSsl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executes the code required to free the handle.</summary>
        <returns>
          <see langword="true" /> in all cases.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
