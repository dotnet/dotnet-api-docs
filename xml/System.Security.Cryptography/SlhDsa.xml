<Type Name="SlhDsa" FullName="System.Security.Cryptography.SlhDsa">
  <TypeSignature Language="C#" Value="public abstract class SlhDsa : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SlhDsa extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.SlhDsa" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SlhDsa&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type SlhDsa = class&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SlhDsa abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("SYSLIB5006", UrlFormat="https://aka.ms/dotnet-warnings/{0}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("SYSLIB5006", UrlFormat="https://aka.ms/dotnet-warnings/{0}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an SLH-DSA key.</summary>
    <remarks><para>This algorithm is specified by FIPS-205.</para><para>Developers are encouraged to program against the <see cref="T:System.Security.Cryptography.SlhDsa" /> base class, rather than any specific derived class.</para><para>The derived classes are intended for interop with the underlying system cryptographic libraries.</para></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SlhDsa (System.Security.Cryptography.SlhDsaAlgorithm algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.SlhDsaAlgorithm algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.#ctor(System.Security.Cryptography.SlhDsaAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (algorithm As SlhDsaAlgorithm)" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.SlhDsa : System.Security.Cryptography.SlhDsaAlgorithm -&gt; System.Security.Cryptography.SlhDsa" Usage="new System.Security.Cryptography.SlhDsa algorithm" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SlhDsa(System::Security::Cryptography::SlhDsaAlgorithm ^ algorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="algorithm" Type="System.Security.Cryptography.SlhDsaAlgorithm" />
      </Parameters>
      <Docs>
        <param name="algorithm">The specific SLH-DSA algorithm for this key.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SlhDsa" /> class.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="algorithm" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Algorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.SlhDsaAlgorithm Algorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.SlhDsaAlgorithm Algorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.SlhDsa.Algorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Algorithm As SlhDsaAlgorithm" />
      <MemberSignature Language="F#" Value="member this.Algorithm : System.Security.Cryptography.SlhDsaAlgorithm" Usage="System.Security.Cryptography.SlhDsa.Algorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::SlhDsaAlgorithm ^ Algorithm { System::Security::Cryptography::SlhDsaAlgorithm ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsaAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the specific SLH-DSA algorithm for this key.</summary>
        <value>The specific SLH-DSA algorithm for this key.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="slhDsa.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="slhDsa.Dispose disposing" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>
            <see langword="true" /> to release managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</para>
        </param>
        <summary>
          <para>Called by the <c>Dispose()</c> and <c>Finalize()</c> methods to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.Security.Cryptography.SlhDsa" /> class.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public byte[] ExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), pbeParameters As PbeParameters) As Byte()" />
      <MemberSignature Language="F#" Value="member this.ExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.PbeParameters -&gt; byte[]" Usage="slhDsa.ExportEncryptedPkcs8PrivateKey (passwordBytes, pbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
        <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
        <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a byte-based password.</summary>
        <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para> <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para><para>-or-</para><para> <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para><para>-or-</para><para>This instance only represents a public key.</para><para>-or-</para><para>The private key is not exportable.</para><para>-or-</para><para>An error occurred while exporting the key.</para></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public byte[] ExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), pbeParameters As PbeParameters) As Byte()" />
      <MemberSignature Language="F#" Value="member this.ExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.PbeParameters -&gt; byte[]" Usage="slhDsa.ExportEncryptedPkcs8PrivateKey (password, pbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="password">The password to use when encrypting the key material.</param>
        <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
        <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a char-based password.</summary>
        <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para> <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para><para>-or-</para><para>This instance only represents a public key.</para><para>-or-</para><para>The private key is not exportable.</para><para>-or-</para><para>An error occurred while exporting the key.</para></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public byte[] ExportEncryptedPkcs8PrivateKey (string password, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ExportEncryptedPkcs8PrivateKey(string password, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKey(System.String,System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportEncryptedPkcs8PrivateKey (password As String, pbeParameters As PbeParameters) As Byte()" />
      <MemberSignature Language="F#" Value="member this.ExportEncryptedPkcs8PrivateKey : string * System.Security.Cryptography.PbeParameters -&gt; byte[]" Usage="slhDsa.ExportEncryptedPkcs8PrivateKey (password, pbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ExportEncryptedPkcs8PrivateKey(System::String ^ password, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="pbeParameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExportEncryptedPkcs8PrivateKeyPem">
      <MemberSignature Language="C#" Value="public string ExportEncryptedPkcs8PrivateKeyPem (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ExportEncryptedPkcs8PrivateKeyPem(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportEncryptedPkcs8PrivateKeyPem (passwordBytes As ReadOnlySpan(Of Byte), pbeParameters As PbeParameters) As String" />
      <MemberSignature Language="F#" Value="member this.ExportEncryptedPkcs8PrivateKeyPem : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.PbeParameters -&gt; string" Usage="slhDsa.ExportEncryptedPkcs8PrivateKeyPem (passwordBytes, pbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ExportEncryptedPkcs8PrivateKeyPem(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
        <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
        <summary>
          <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a byte-based password.</para>
        </summary>
        <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para> <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para><para>-or-</para><para> <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para><para>-or-</para><para>This instance only represents a public key.</para><para>-or-</para><para>The private key is not exportable.</para><para>-or-</para><para>An error occurred while exporting the key.</para></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportEncryptedPkcs8PrivateKeyPem">
      <MemberSignature Language="C#" Value="public string ExportEncryptedPkcs8PrivateKeyPem (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ExportEncryptedPkcs8PrivateKeyPem(valuetype System.ReadOnlySpan`1&lt;char&gt; password, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportEncryptedPkcs8PrivateKeyPem (password As ReadOnlySpan(Of Char), pbeParameters As PbeParameters) As String" />
      <MemberSignature Language="F#" Value="member this.ExportEncryptedPkcs8PrivateKeyPem : ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.PbeParameters -&gt; string" Usage="slhDsa.ExportEncryptedPkcs8PrivateKeyPem (password, pbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ExportEncryptedPkcs8PrivateKeyPem(ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="password">The password to use when encrypting the key material.</param>
        <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
        <summary>
          <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a char-based password.</para>
        </summary>
        <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para> <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para><para>-or-</para><para>This instance only represents a public key.</para><para>-or-</para><para>The private key is not exportable.</para><para>-or-</para><para>An error occurred while exporting the key.</para></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportEncryptedPkcs8PrivateKeyPem">
      <MemberSignature Language="C#" Value="public string ExportEncryptedPkcs8PrivateKeyPem (string password, System.Security.Cryptography.PbeParameters pbeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ExportEncryptedPkcs8PrivateKeyPem(string password, class System.Security.Cryptography.PbeParameters pbeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKeyPem(System.String,System.Security.Cryptography.PbeParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportEncryptedPkcs8PrivateKeyPem (password As String, pbeParameters As PbeParameters) As String" />
      <MemberSignature Language="F#" Value="member this.ExportEncryptedPkcs8PrivateKeyPem : string * System.Security.Cryptography.PbeParameters -&gt; string" Usage="slhDsa.ExportEncryptedPkcs8PrivateKeyPem (password, pbeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ExportEncryptedPkcs8PrivateKeyPem(System::String ^ password, System::Security::Cryptography::PbeParameters ^ pbeParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="pbeParameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public byte[] ExportPkcs8PrivateKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ExportPkcs8PrivateKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportPkcs8PrivateKey" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportPkcs8PrivateKey () As Byte()" />
      <MemberSignature Language="F#" Value="member this.ExportPkcs8PrivateKey : unit -&gt; byte[]" Usage="slhDsa.ExportPkcs8PrivateKey " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ExportPkcs8PrivateKey();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exports the current key in the PKCS#8 PrivateKeyInfo format.</summary>
        <returns>A byte array containing the PKCS#8 PrivateKeyInfo representation of the this key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <para>This instance only represents a public key.</para>
          <para>-or-</para>
          <para>The private key is not exportable.</para>
          <para>-or-</para>
          <para>An error occurred while exporting the key.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportPkcs8PrivateKeyPem">
      <MemberSignature Language="C#" Value="public string ExportPkcs8PrivateKeyPem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ExportPkcs8PrivateKeyPem() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportPkcs8PrivateKeyPem" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportPkcs8PrivateKeyPem () As String" />
      <MemberSignature Language="F#" Value="member this.ExportPkcs8PrivateKeyPem : unit -&gt; string" Usage="slhDsa.ExportPkcs8PrivateKeyPem " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ExportPkcs8PrivateKeyPem();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exports the current key in a PEM-encoded representation of the PKCS#8 PrivateKeyInfo format.</summary>
        <returns>A string containing the PEM-encoded representation of the PKCS#8 PrivateKeyInfo.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExportSlhDsaPrivateKey">
      <MemberSignature Language="C#" Value="public byte[] ExportSlhDsaPrivateKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ExportSlhDsaPrivateKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPrivateKey" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportSlhDsaPrivateKey () As Byte()" />
      <MemberSignature Language="F#" Value="member this.ExportSlhDsaPrivateKey : unit -&gt; byte[]" Usage="slhDsa.ExportSlhDsaPrivateKey " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ExportSlhDsaPrivateKey();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exports the current key in the FIPS 205 private key format.</summary>
        <returns>The FIPS 205 private key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <para>The current instance cannot export a private key.</para>
          <para>-or-</para>
          <para>An error occurred while exporting the key.</para>
        </exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExportSlhDsaPrivateKey">
      <MemberSignature Language="C#" Value="public void ExportSlhDsaPrivateKey (Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExportSlhDsaPrivateKey(valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPrivateKey(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExportSlhDsaPrivateKey (destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="member this.ExportSlhDsaPrivateKey : Span&lt;byte&gt; -&gt; unit" Usage="slhDsa.ExportSlhDsaPrivateKey destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExportSlhDsaPrivateKey(Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <para>The buffer to receive the private key. Its length must be exactly <see cref="P:System.Security.Cryptography.SlhDsaAlgorithm.PrivateKeySizeInBytes" />.</para>
        </param>
        <summary>Exports the current key in the FIPS 205 private key format.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destination" /> is the incorrect length to receive the private key.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <para>The current instance cannot export a private key.</para>
          <para>-or-</para>
          <para>An error occurred while exporting the key.</para>
        </exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExportSlhDsaPrivateKeyCore">
      <MemberSignature Language="C#" Value="protected abstract void ExportSlhDsaPrivateKeyCore (Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ExportSlhDsaPrivateKeyCore(valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPrivateKeyCore(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub ExportSlhDsaPrivateKeyCore (destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="abstract member ExportSlhDsaPrivateKeyCore : Span&lt;byte&gt; -&gt; unit" Usage="slhDsa.ExportSlhDsaPrivateKeyCore destination" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void ExportSlhDsaPrivateKeyCore(Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer to receive the private key.</param>
        <summary>When overridden in a derived class, exports the FIPS 205 private key to the specified buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportSlhDsaPublicKey">
      <MemberSignature Language="C#" Value="public byte[] ExportSlhDsaPublicKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ExportSlhDsaPublicKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportSlhDsaPublicKey () As Byte()" />
      <MemberSignature Language="F#" Value="member this.ExportSlhDsaPublicKey : unit -&gt; byte[]" Usage="slhDsa.ExportSlhDsaPublicKey " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ExportSlhDsaPublicKey();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exports the public-key portion of the current key in the FIPS 205 public key format.</summary>
        <returns>The FIPS 205 public key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <para>An error occurred while exporting the key.</para>
        </exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExportSlhDsaPublicKey">
      <MemberSignature Language="C#" Value="public void ExportSlhDsaPublicKey (Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExportSlhDsaPublicKey(valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPublicKey(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExportSlhDsaPublicKey (destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="member this.ExportSlhDsaPublicKey : Span&lt;byte&gt; -&gt; unit" Usage="slhDsa.ExportSlhDsaPublicKey destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExportSlhDsaPublicKey(Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <para>The buffer to receive the public key. Its length must be exactly <see cref="P:System.Security.Cryptography.SlhDsaAlgorithm.PublicKeySizeInBytes" />.</para>
        </param>
        <summary>Exports the public-key portion of the current key in the FIPS 205 public key format.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <paramref name="destination" /> is required to be exactly <see cref="P:System.Security.Cryptography.SlhDsaAlgorithm.PublicKeySizeInBytes" /> in length.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destination" /> is the incorrect length to receive the public key.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <para>An error occurred while exporting the key.</para>
        </exception>
        <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExportSlhDsaPublicKeyCore">
      <MemberSignature Language="C#" Value="protected abstract void ExportSlhDsaPublicKeyCore (Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ExportSlhDsaPublicKeyCore(valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPublicKeyCore(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub ExportSlhDsaPublicKeyCore (destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="abstract member ExportSlhDsaPublicKeyCore : Span&lt;byte&gt; -&gt; unit" Usage="slhDsa.ExportSlhDsaPublicKeyCore destination" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void ExportSlhDsaPublicKeyCore(Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer to receive the public key.</param>
        <summary>When overridden in a derived class, exports the FIPS 205 public key to the specified buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public byte[] ExportSubjectPublicKeyInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ExportSubjectPublicKeyInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportSubjectPublicKeyInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportSubjectPublicKeyInfo () As Byte()" />
      <MemberSignature Language="F#" Value="member this.ExportSubjectPublicKeyInfo : unit -&gt; byte[]" Usage="slhDsa.ExportSubjectPublicKeyInfo " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ExportSubjectPublicKeyInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exports the public-key portion of the current key in the X.509 SubjectPublicKeyInfo format.</summary>
        <returns>A byte array containing the X.509 SubjectPublicKeyInfo representation of the public-key portion of this key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExportSubjectPublicKeyInfoPem">
      <MemberSignature Language="C#" Value="public string ExportSubjectPublicKeyInfoPem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ExportSubjectPublicKeyInfoPem() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ExportSubjectPublicKeyInfoPem" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportSubjectPublicKeyInfoPem () As String" />
      <MemberSignature Language="F#" Value="member this.ExportSubjectPublicKeyInfoPem : unit -&gt; string" Usage="slhDsa.ExportSubjectPublicKeyInfoPem " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ExportSubjectPublicKeyInfoPem();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Exports the public-key portion of the current key in a PEM-encoded representation of the X.509 SubjectPublicKeyInfo format.</para>
        </summary>
        <returns>
          <para>A string containing the PEM-encoded representation of the X.509 SubjectPublicKeyInfo representation of the public-key portion of this key.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa GenerateKey (System.Security.Cryptography.SlhDsaAlgorithm algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa GenerateKey(class System.Security.Cryptography.SlhDsaAlgorithm algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.GenerateKey(System.Security.Cryptography.SlhDsaAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenerateKey (algorithm As SlhDsaAlgorithm) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member GenerateKey : System.Security.Cryptography.SlhDsaAlgorithm -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.GenerateKey algorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ GenerateKey(System::Security::Cryptography::SlhDsaAlgorithm ^ algorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.Security.Cryptography.SlhDsaAlgorithm" />
      </Parameters>
      <Docs>
        <param name="algorithm">An algorithm identifying what kind of SLH-DSA key to generate.</param>
        <summary>Generates a new SLH-DSA key for the specified algorithm.</summary>
        <returns>The generated object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="algorithm" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred generating the SLH-DSA key.</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), source As ReadOnlySpan(Of Byte)) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportEncryptedPkcs8PrivateKey (passwordBytes, source)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
        <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
        <summary>Imports an SLH-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
        <returns>The imported key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para><para>-or-</para><para>The specified password is incorrect.</para><para>-or-</para><para>The EncryptedPrivateKeyInfo indicates the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.</para><para>-or-</para><para>The value does not represent an SLH-DSA key.</para><para>-or-</para><para> <paramref name="source" /> contains trailing data after the ASN.1 structure.</para><para>-or-</para><para>The algorithm-specific import failed.</para></exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), source As ReadOnlySpan(Of Byte)) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportEncryptedPkcs8PrivateKey (password, source)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="password">The password to use when decrypting the key material.</param>
        <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
        <summary>Imports an SLH-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
        <returns>The imported key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para><para>-or-</para><para>The specified password is incorrect.</para><para>-or-</para><para>The value does not represent an SLH-DSA key.</para><para>-or-</para><para> <paramref name="source" /> contains trailing data after the ASN.1 structure.</para><para>-or-</para><para>The algorithm-specific import failed.</para></exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportEncryptedPkcs8PrivateKey (string password, byte[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportEncryptedPkcs8PrivateKey(string password, unsigned int8[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportEncryptedPkcs8PrivateKey(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportEncryptedPkcs8PrivateKey (password As String, source As Byte()) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportEncryptedPkcs8PrivateKey : string * byte[] -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportEncryptedPkcs8PrivateKey (password, source)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportEncryptedPkcs8PrivateKey(System::String ^ password, cli::array &lt;System::Byte&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="source" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="password" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportFromEncryptedPem (ReadOnlySpan&lt;char&gt; source, ReadOnlySpan&lt;byte&gt; passwordBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportFromEncryptedPem(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportFromEncryptedPem (source As ReadOnlySpan(Of Char), passwordBytes As ReadOnlySpan(Of Byte)) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportFromEncryptedPem : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem (source, passwordBytes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportFromEncryptedPem(ReadOnlySpan&lt;char&gt; source, ReadOnlySpan&lt;System::Byte&gt; passwordBytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The PEM text of the encrypted key to import.</param>
        <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
        <summary>Imports an SLH-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
        <returns>To be added.</returns>
        <remarks><para>Unsupported or malformed PEM-encoded objects will be ignored. If multiple supported PEM labels are found, an exception is thrown to prevent importing a key when the key is ambiguous.</para><para>This method supports the &lt;c&gt;ENCRYPTED PRIVATE KEY&lt;/c&gt; PEM label.</para></remarks>
        <exception cref="T:System.ArgumentException"><para> <paramref name="source" /> does not contain a PEM-encoded key with a recognized label.</para><para>-or-</para><para> <paramref name="source" /> contains multiple PEM-encoded keys with a recognized label.</para></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para>The password is incorrect.</para><para>-or-</para><para>The base-64 decoded contents of the PEM text from <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para><para>-or-</para><para>The base-64 decoded contents of the PEM text from <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</para><para>-or-</para><para>The base-64 decoded contents of the PEM text from <paramref name="source" /> represent the key in a format that is not supported.</para><para>-or-</para><para>An error occurred while importing the key.</para></exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportFromEncryptedPem (ReadOnlySpan&lt;char&gt; source, ReadOnlySpan&lt;char&gt; password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportFromEncryptedPem(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.ReadOnlySpan`1&lt;char&gt; password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportFromEncryptedPem (source As ReadOnlySpan(Of Char), password As ReadOnlySpan(Of Char)) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportFromEncryptedPem : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem (source, password)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportFromEncryptedPem(ReadOnlySpan&lt;char&gt; source, ReadOnlySpan&lt;char&gt; password);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The PEM text of the encrypted key to import.</param>
        <param name="password">The password to use for decrypting the key material.</param>
        <summary>Imports an SLH-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
        <returns>To be added.</returns>
        <remarks><para>When the base-64 decoded contents of <paramref name="source" /> indicate an algorithm that uses PBKDF1 (Password-Based Key Derivation Function 1) or PBKDF2 (Password-Based Key Derivation Function 2), the password is converted to bytes via the UTF-8 encoding.</para><para>Unsupported or malformed PEM-encoded objects will be ignored. If multiple supported PEM labels are found, an exception is thrown to prevent importing a key when the key is ambiguous.</para><para>This method supports the &lt;c&gt;ENCRYPTED PRIVATE KEY&lt;/c&gt; PEM label.</para></remarks>
        <exception cref="T:System.ArgumentException"><para> <paramref name="source" /> does not contain a PEM-encoded key with a recognized label.</para><para>-or-</para><para> <paramref name="source" /> contains multiple PEM-encoded keys with a recognized label.</para></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para>The password is incorrect.</para><para>-or-</para><para>The base-64 decoded contents of the PEM text from <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para><para>-or-</para><para>The base-64 decoded contents of the PEM text from <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</para><para>-or-</para><para>The base-64 decoded contents of the PEM text from <paramref name="source" /> represent the key in a format that is not supported.</para><para>-or-</para><para>An error occurred while importing the key.</para></exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportFromEncryptedPem (string source, byte[] passwordBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportFromEncryptedPem(string source, unsigned int8[] passwordBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportFromEncryptedPem (source As String, passwordBytes As Byte()) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportFromEncryptedPem : string * byte[] -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem (source, passwordBytes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportFromEncryptedPem(System::String ^ source, cli::array &lt;System::Byte&gt; ^ passwordBytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="passwordBytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="passwordBytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> or <paramref name="passwordBytes" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromEncryptedPem">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportFromEncryptedPem (string source, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportFromEncryptedPem(string source, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportFromEncryptedPem (source As String, password As String) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportFromEncryptedPem : string * string -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem (source, password)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportFromEncryptedPem(System::String ^ source, System::String ^ password);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="password">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> or <paramref name="password" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromPem">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportFromPem (ReadOnlySpan&lt;char&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportFromPem(valuetype System.ReadOnlySpan`1&lt;char&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportFromPem(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportFromPem (source As ReadOnlySpan(Of Char)) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportFromPem : ReadOnlySpan&lt;char&gt; -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportFromPem source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportFromPem(ReadOnlySpan&lt;char&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The text of the PEM key to import.</param>
        <summary>Imports an SLH-DSA key from an RFC 7468 PEM-encoded string.</summary>
        <returns>The imported SLH-DSA key.</returns>
        <remarks><para>Unsupported or malformed PEM-encoded objects will be ignored. If multiple supported PEM labels are found, an exception is raised to prevent importing a key when the key is ambiguous.</para><para>This method supports the following PEM labels:</para><para><list type="bullet"><item><description>PUBLIC KEY</description></item><item><description>PRIVATE KEY</description></item></list></para></remarks>
        <exception cref="T:System.ArgumentException"><para> <paramref name="source" /> contains an encrypted PEM-encoded key.</para><para>-or-</para><para> <paramref name="source" /> contains multiple PEM-encoded SLH-DSA keys.</para><para>-or-</para><para> <paramref name="source" /> contains no PEM-encoded SLH-DSA keys.</para></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportFromPem">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportFromPem (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportFromPem(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportFromPem(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportFromPem (source As String) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportFromPem : string -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportFromPem source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportFromPem(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.ImportFromPem(System.ReadOnlySpan{System.Char})" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ImportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportPkcs8PrivateKey (byte[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportPkcs8PrivateKey(unsigned int8[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportPkcs8PrivateKey(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportPkcs8PrivateKey (source As Byte()) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportPkcs8PrivateKey : byte[] -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportPkcs8PrivateKey source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportPkcs8PrivateKey(cli::array &lt;System::Byte&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte})" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ImportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportPkcs8PrivateKey (source As ReadOnlySpan(Of Byte)) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportPkcs8PrivateKey source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
        <summary>Imports an SLH-DSA private key from a PKCS#8 PrivateKeyInfo structure.</summary>
        <returns>The imported key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.</para><para>-or-</para><para>The PrivateKeyInfo value does not represent an SLH-DSA key.</para><para>-or-</para><para> <paramref name="source" /> contains trailing data after the ASN.1 structure.</para><para>-or-</para><para>The algorithm-specific import failed.</para></exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportSlhDsaPrivateKey">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportSlhDsaPrivateKey (System.Security.Cryptography.SlhDsaAlgorithm algorithm, byte[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportSlhDsaPrivateKey(class System.Security.Cryptography.SlhDsaAlgorithm algorithm, unsigned int8[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportSlhDsaPrivateKey(System.Security.Cryptography.SlhDsaAlgorithm,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportSlhDsaPrivateKey (algorithm As SlhDsaAlgorithm, source As Byte()) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportSlhDsaPrivateKey : System.Security.Cryptography.SlhDsaAlgorithm * byte[] -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportSlhDsaPrivateKey (algorithm, source)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportSlhDsaPrivateKey(System::Security::Cryptography::SlhDsaAlgorithm ^ algorithm, cli::array &lt;System::Byte&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.Security.Cryptography.SlhDsaAlgorithm" />
        <Parameter Name="source" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algorithm">To be added.</param>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.ImportSlhDsaPrivateKey(System.Security.Cryptography.SlhDsaAlgorithm,System.ReadOnlySpan{System.Byte})" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="algorithm" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ImportSlhDsaPrivateKey">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportSlhDsaPrivateKey (System.Security.Cryptography.SlhDsaAlgorithm algorithm, ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportSlhDsaPrivateKey(class System.Security.Cryptography.SlhDsaAlgorithm algorithm, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportSlhDsaPrivateKey(System.Security.Cryptography.SlhDsaAlgorithm,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportSlhDsaPrivateKey (algorithm As SlhDsaAlgorithm, source As ReadOnlySpan(Of Byte)) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportSlhDsaPrivateKey : System.Security.Cryptography.SlhDsaAlgorithm * ReadOnlySpan&lt;byte&gt; -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportSlhDsaPrivateKey (algorithm, source)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportSlhDsaPrivateKey(System::Security::Cryptography::SlhDsaAlgorithm ^ algorithm, ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.Security.Cryptography.SlhDsaAlgorithm" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="algorithm">The specific SLH-DSA algorithm for this key.</param>
        <param name="source">The bytes of a FIPS 205 private key.</param>
        <summary>Imports an SLH-DSA private key in the FIPS 205 private key format.</summary>
        <returns>The imported key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> has a length that is not valid for the SLH-DSA algorithm.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="algorithm" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportSlhDsaPublicKey">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportSlhDsaPublicKey (System.Security.Cryptography.SlhDsaAlgorithm algorithm, byte[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportSlhDsaPublicKey(class System.Security.Cryptography.SlhDsaAlgorithm algorithm, unsigned int8[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportSlhDsaPublicKey(System.Security.Cryptography.SlhDsaAlgorithm,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportSlhDsaPublicKey (algorithm As SlhDsaAlgorithm, source As Byte()) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportSlhDsaPublicKey : System.Security.Cryptography.SlhDsaAlgorithm * byte[] -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportSlhDsaPublicKey (algorithm, source)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportSlhDsaPublicKey(System::Security::Cryptography::SlhDsaAlgorithm ^ algorithm, cli::array &lt;System::Byte&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.Security.Cryptography.SlhDsaAlgorithm" />
        <Parameter Name="source" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algorithm">To be added.</param>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.ImportSlhDsaPublicKey(System.Security.Cryptography.SlhDsaAlgorithm,System.ReadOnlySpan{System.Byte})" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="algorithm" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ImportSlhDsaPublicKey">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportSlhDsaPublicKey (System.Security.Cryptography.SlhDsaAlgorithm algorithm, ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportSlhDsaPublicKey(class System.Security.Cryptography.SlhDsaAlgorithm algorithm, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportSlhDsaPublicKey(System.Security.Cryptography.SlhDsaAlgorithm,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportSlhDsaPublicKey (algorithm As SlhDsaAlgorithm, source As ReadOnlySpan(Of Byte)) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportSlhDsaPublicKey : System.Security.Cryptography.SlhDsaAlgorithm * ReadOnlySpan&lt;byte&gt; -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportSlhDsaPublicKey (algorithm, source)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportSlhDsaPublicKey(System::Security::Cryptography::SlhDsaAlgorithm ^ algorithm, ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.Security.Cryptography.SlhDsaAlgorithm" />
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="algorithm">The specific SLH-DSA algorithm for this key.</param>
        <param name="source">The bytes of a FIPS 205 public key.</param>
        <summary>Imports an SLH-DSA public key in the FIPS 205 public key format.</summary>
        <returns>The imported key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> has a length that is not valid for the SLH-DSA algorithm.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="algorithm" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportSubjectPublicKeyInfo (byte[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportSubjectPublicKeyInfo(unsigned int8[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportSubjectPublicKeyInfo(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportSubjectPublicKeyInfo (source As Byte()) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportSubjectPublicKeyInfo : byte[] -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportSubjectPublicKeyInfo source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportSubjectPublicKeyInfo(cli::array &lt;System::Byte&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte})" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ImportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.SlhDsa ImportSubjectPublicKeyInfo (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.SlhDsa ImportSubjectPublicKeyInfo(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportSubjectPublicKeyInfo (source As ReadOnlySpan(Of Byte)) As SlhDsa" />
      <MemberSignature Language="F#" Value="static member ImportSubjectPublicKeyInfo : ReadOnlySpan&lt;byte&gt; -&gt; System.Security.Cryptography.SlhDsa" Usage="System.Security.Cryptography.SlhDsa.ImportSubjectPublicKeyInfo source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::SlhDsa ^ ImportSubjectPublicKeyInfo(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SlhDsa</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
        <summary>Imports an SLH-DSA public key from an X.509 SubjectPublicKeyInfo structure.</summary>
        <returns>The imported key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para>The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.</para><para>-or-</para><para>The SubjectPublicKeyInfo value does not represent an SLH-DSA key.</para><para>-or-</para><para> <paramref name="source" /> contains trailing data after the ASN.1 structure.</para><para>-or-</para><para>The algorithm-specific import failed.</para></exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.SlhDsa.IsSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsSupported As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSupported : bool" Usage="System.Security.Cryptography.SlhDsa.IsSupported" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsSupported { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current platform supports SLH-DSA.</summary>
        <value>
          <see langword="true" /> if the current platform supports SLH-DSA; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public byte[] SignData (byte[] data, byte[]? context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignData(unsigned int8[] data, unsigned int8[] context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.SignData(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SignData (data As Byte(), Optional context As Byte() = Nothing) As Byte()" />
      <MemberSignature Language="F#" Value="member this.SignData : byte[] * byte[] -&gt; byte[]" Usage="slhDsa.SignData (data, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="context" Type="System.Byte[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">The data to sign.</param>
        <param name="context">
          <para>An optional context-specific value to limit the scope of the signature.</para>
          <para>The default value is <see langword="null" />.</para>
        </param>
        <summary>Signs the specified data.</summary>
        <returns>To be added.</returns>
        <remarks>A <see langword="null" /> context is treated as empty.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="context" /> has a length in excess of 255 bytes.</exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <para>The instance represents only a public key.</para>
          <para>-or-</para>
          <para>An error occurred while signing the data.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public void SignData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, ReadOnlySpan&lt;byte&gt; context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.SignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), Optional context As ReadOnlySpan(Of Byte) = Nothing)" />
      <MemberSignature Language="F#" Value="member this.SignData : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="slhDsa.SignData (data, destination, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="context" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The data to sign.</param>
        <param name="destination">
          <para>The buffer to receive the signature. Its length must be exactly <see cref="P:System.Security.Cryptography.SlhDsaAlgorithm.SignatureSizeInBytes" />.</para>
        </param>
        <param name="context">
          <para>An optional context-specific value to limit the scope of the signature.</para>
          <para>The default value is an empty buffer.</para>
        </param>
        <summary>Signs the specified data, writing the signature into the provided buffer.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The buffer in <paramref name="destination" /> is the incorrect length to receive the signature.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
        </exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <para>The instance represents only a public key.</para>
          <para>-or-</para>
          <para>An error occurred while signing the data.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignDataCore">
      <MemberSignature Language="C#" Value="protected abstract void SignDataCore (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; context, Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SignDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; context, valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.SignDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub SignDataCore (data As ReadOnlySpan(Of Byte), context As ReadOnlySpan(Of Byte), destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="abstract member SignDataCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; -&gt; unit" Usage="slhDsa.SignDataCore (data, context, destination)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void SignDataCore(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; context, Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="context" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The data to sign.</param>
        <param name="context">The signature context.</param>
        <param name="destination">The buffer to receive the signature, which will always be the exactly correct size for the algorithm.</param>
        <summary>
          <para>When overridden in a derived class, computes the signature of the specified data and context, writing it into the provided buffer.</para>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while signing the data.</exception>
      </Docs>
    </Member>
    <Member MemberName="SignPreHash">
      <MemberSignature Language="C#" Value="public byte[] SignPreHash (byte[] hash, string hashAlgorithmOid, byte[]? context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] SignPreHash(unsigned int8[] hash, string hashAlgorithmOid, unsigned int8[] context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.SignPreHash(System.Byte[],System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SignPreHash (hash As Byte(), hashAlgorithmOid As String, Optional context As Byte() = Nothing) As Byte()" />
      <MemberSignature Language="F#" Value="member this.SignPreHash : byte[] * string * byte[] -&gt; byte[]" Usage="slhDsa.SignPreHash (hash, hashAlgorithmOid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithmOid" Type="System.String" />
        <Parameter Name="context" Type="System.Byte[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="hash">The hash to sign.</param>
        <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
        <param name="context">
          <para>An optional context-specific value to limit the scope of the signature.</para>
          <para>The default value is <see langword="null" />.</para>
        </param>
        <summary>Signs the specified hash using the FIPS 205 pre-hash signing algorithm.</summary>
        <returns>To be added.</returns>
        <remarks>A <see langword="null" /> context is treated as empty.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hash" /> or <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="context" /> has a length in excess of 255 bytes.</exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para> <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para><para>-or-</para><para> <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para><para>-or-</para><para>The instance represents only a public key.</para><para>-or-</para><para>An error occurred while signing the hash.</para></exception>
      </Docs>
    </Member>
    <Member MemberName="SignPreHash">
      <MemberSignature Language="C#" Value="public void SignPreHash (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, string hashAlgorithmOid, ReadOnlySpan&lt;byte&gt; context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignPreHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, string hashAlgorithmOid, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.SignPreHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignPreHash (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithmOid As String, Optional context As ReadOnlySpan(Of Byte) = Nothing)" />
      <MemberSignature Language="F#" Value="member this.SignPreHash : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="slhDsa.SignPreHash (hash, destination, hashAlgorithmOid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithmOid" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="context" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="hash">The hash to sign.</param>
        <param name="destination">
          <para>The buffer to receive the signature. Its length must be exactly <see cref="P:System.Security.Cryptography.SlhDsaAlgorithm.SignatureSizeInBytes" />.</para>
        </param>
        <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
        <param name="context">
          <para>An optional context-specific value to limit the scope of the signature.</para>
          <para>The default value is an empty buffer.</para>
        </param>
        <summary>Signs the specified hash using the FIPS 205 pre-hash signing algorithm, writing the signature into the provided buffer.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The buffer in <paramref name="destination" /> is the incorrect length to receive the signature.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
        </exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para> <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para><para>-or-</para><para> <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para><para>-or-</para><para>The instance represents only a public key.</para><para>-or-</para><para>An error occurred while signing the hash.</para></exception>
      </Docs>
    </Member>
    <Member MemberName="SignPreHashCore">
      <MemberSignature Language="C#" Value="protected abstract void SignPreHashCore (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; context, string hashAlgorithmOid, Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SignPreHashCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; context, string hashAlgorithmOid, valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.SignPreHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub SignPreHashCore (hash As ReadOnlySpan(Of Byte), context As ReadOnlySpan(Of Byte), hashAlgorithmOid As String, destination As Span(Of Byte))" />
      <MemberSignature Language="F#" Value="abstract member SignPreHashCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * string * Span&lt;byte&gt; -&gt; unit" Usage="slhDsa.SignPreHashCore (hash, context, hashAlgorithmOid, destination)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void SignPreHashCore(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; context, System::String ^ hashAlgorithmOid, Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="context" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithmOid" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="hash">The hash to sign.</param>
        <param name="context">The signature context.</param>
        <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
        <param name="destination">The buffer to receive the signature, which will always be the exactly correct size for the algorithm.</param>
        <summary>
          <para>When overridden in a derived class, computes the pre-hash signature of the specified hash and context, writing it into the provided buffer.</para>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while signing the hash.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfDisposed">
      <MemberSignature Language="C#" Value="protected void ThrowIfDisposed ();" FrameworkAlternate="net-10.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ThrowIfDisposed() cil managed" FrameworkAlternate="net-10.0" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.ThrowIfDisposed" FrameworkAlternate="net-10.0" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ThrowIfDisposed ()" FrameworkAlternate="net-10.0" />
      <MemberSignature Language="F#" Value="member this.ThrowIfDisposed : unit -&gt; unit" Usage="slhDsa.ThrowIfDisposed " FrameworkAlternate="net-10.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ThrowIfDisposed();" FrameworkAlternate="net-10.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="net-10.0">System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;byte&gt; passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; passwordBytes, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryExportEncryptedPkcs8PrivateKey (passwordBytes As ReadOnlySpan(Of Byte), pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;byte&gt; * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="slhDsa.TryExportEncryptedPkcs8PrivateKey (passwordBytes, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;System::Byte&gt; passwordBytes, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordBytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
        <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
        <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
        <param name="bytesWritten">
          <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
          <para>This parameter is treated as uninitialized.</para>
        </param>
        <summary>
          <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</para>
        </summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para> <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para><para>-or-</para><para> <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para><para>-or-</para><para>This instance only represents a public key.</para><para>-or-</para><para>The private key is not exportable.</para><para>-or-</para><para>An error occurred while exporting the key.</para></exception>
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public bool TryExportEncryptedPkcs8PrivateKey (ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryExportEncryptedPkcs8PrivateKey(valuetype System.ReadOnlySpan`1&lt;char&gt; password, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryExportEncryptedPkcs8PrivateKey (password As ReadOnlySpan(Of Char), pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryExportEncryptedPkcs8PrivateKey : ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="slhDsa.TryExportEncryptedPkcs8PrivateKey (password, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryExportEncryptedPkcs8PrivateKey(ReadOnlySpan&lt;char&gt; password, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="password">The password to use when encrypting the key material.</param>
        <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
        <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
        <param name="bytesWritten">
          <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
          <para>This parameter is treated as uninitialized.</para>
        </param>
        <summary>
          <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</para>
        </summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para> <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para><para>-or-</para><para>This instance only represents a public key.</para><para>-or-</para><para>The private key is not exportable.</para><para>-or-</para><para>An error occurred while exporting the key.</para></exception>
      </Docs>
    </Member>
    <Member MemberName="TryExportEncryptedPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public bool TryExportEncryptedPkcs8PrivateKey (string password, System.Security.Cryptography.PbeParameters pbeParameters, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryExportEncryptedPkcs8PrivateKey(string password, class System.Security.Cryptography.PbeParameters pbeParameters, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.TryExportEncryptedPkcs8PrivateKey(System.String,System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryExportEncryptedPkcs8PrivateKey (password As String, pbeParameters As PbeParameters, destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryExportEncryptedPkcs8PrivateKey : string * System.Security.Cryptography.PbeParameters * Span&lt;byte&gt; * int -&gt; bool" Usage="slhDsa.TryExportEncryptedPkcs8PrivateKey (password, pbeParameters, destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryExportEncryptedPkcs8PrivateKey(System::String ^ password, System::Security::Cryptography::PbeParameters ^ pbeParameters, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="pbeParameters" Type="System.Security.Cryptography.PbeParameters" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="pbeParameters">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Security.Cryptography.SlhDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryExportPkcs8PrivateKey">
      <MemberSignature Language="C#" Value="public bool TryExportPkcs8PrivateKey (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryExportPkcs8PrivateKey(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryExportPkcs8PrivateKey (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryExportPkcs8PrivateKey : Span&lt;byte&gt; * int -&gt; bool" Usage="slhDsa.TryExportPkcs8PrivateKey (destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryExportPkcs8PrivateKey(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer to receive the PKCS#8 PrivateKeyInfo value.</param>
        <param name="bytesWritten">
          <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
          <para>This parameter is treated as uninitialized.</para>
        </param>
        <summary>
          <para>Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into the provided buffer.</para>
        </summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryExportPkcs8PrivateKeyCore">
      <MemberSignature Language="C#" Value="protected virtual bool TryExportPkcs8PrivateKeyCore (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryExportPkcs8PrivateKeyCore(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.TryExportPkcs8PrivateKeyCore(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryExportPkcs8PrivateKeyCore (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryExportPkcs8PrivateKeyCore : Span&lt;byte&gt; * int -&gt; bool&#xA;override this.TryExportPkcs8PrivateKeyCore : Span&lt;byte&gt; * int -&gt; bool" Usage="slhDsa.TryExportPkcs8PrivateKeyCore (destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryExportPkcs8PrivateKeyCore(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer to receive the PKCS#8 PrivateKeyInfo value.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</param>
        <summary>
          <para>When overridden in a derived class, attempts to export the current key in the PKCS#8 PrivateKeyInfo format into the provided buffer.</para>
        </summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryExportSubjectPublicKeyInfo">
      <MemberSignature Language="C#" Value="public bool TryExportSubjectPublicKeyInfo (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryExportSubjectPublicKeyInfo(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryExportSubjectPublicKeyInfo (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryExportSubjectPublicKeyInfo : Span&lt;byte&gt; * int -&gt; bool" Usage="slhDsa.TryExportSubjectPublicKeyInfo (destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryExportSubjectPublicKeyInfo(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer to receive the X.509 SubjectPublicKeyInfo value.</param>
        <param name="bytesWritten">
          <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
          <para>This parameter is treated as uninitialized.</para>
        </param>
        <summary>
          <para>Attempts to export the public-key portion of the current key in the X.509 SubjectPublicKeyInfo format into the provided buffer.</para>
        </summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, byte[] signature, byte[]? context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, unsigned int8[] signature, unsigned int8[] context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.VerifyData(System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), signature As Byte(), Optional context As Byte() = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifyData : byte[] * byte[] * byte[] -&gt; bool" Usage="slhDsa.VerifyData (data, signature, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="signature" Type="System.Byte[]" />
        <Parameter Name="context" Type="System.Byte[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">The data to verify.</param>
        <param name="signature">The signature to verify.</param>
        <param name="context">
          <para>The context value which was provided during signing.</para>
          <para>The default value is <see langword="null" />.</para>
        </param>
        <summary>Verifies that the specified signature is valid for this key and the provided data.</summary>
        <returns>
          <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
        <remarks>A <see langword="null" /> context is treated as empty.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="context" /> has a length in excess of 255 bytes.</exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <para>An error occurred while verifying the data.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, ReadOnlySpan&lt;byte&gt; context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), Optional context As ReadOnlySpan(Of Byte) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifyData : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="slhDsa.VerifyData (data, signature, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="context" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The data to verify.</param>
        <param name="signature">The signature to verify.</param>
        <param name="context">
          <para>The context value which was provided during signing.</para>
          <para>The default value is an empty buffer.</para>
        </param>
        <summary>Verifies that the specified signature is valid for this key and the provided data.</summary>
        <returns>
          <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
        </exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <para>An error occurred while verifying the data.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyDataCore">
      <MemberSignature Language="C#" Value="protected abstract bool VerifyDataCore (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; context, ReadOnlySpan&lt;byte&gt; signature);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifyDataCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; context, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function VerifyDataCore (data As ReadOnlySpan(Of Byte), context As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member VerifyDataCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="slhDsa.VerifyDataCore (data, context, signature)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool VerifyDataCore(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; context, ReadOnlySpan&lt;System::Byte&gt; signature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="context" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The data to verify.</param>
        <param name="context">The signature context.</param>
        <param name="signature">The signature to verify.</param>
        <summary>When overridden in a derived class, verifies the signature of the specified data and context.</summary>
        <returns>
          <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while verifying the data.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyPreHash">
      <MemberSignature Language="C#" Value="public bool VerifyPreHash (byte[] hash, byte[] signature, string hashAlgorithmOid, byte[]? context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyPreHash(unsigned int8[] hash, unsigned int8[] signature, string hashAlgorithmOid, unsigned int8[] context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.VerifyPreHash(System.Byte[],System.Byte[],System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyPreHash (hash As Byte(), signature As Byte(), hashAlgorithmOid As String, Optional context As Byte() = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifyPreHash : byte[] * byte[] * string * byte[] -&gt; bool" Usage="slhDsa.VerifyPreHash (hash, signature, hashAlgorithmOid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.Byte[]" />
        <Parameter Name="signature" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithmOid" Type="System.String" />
        <Parameter Name="context" Type="System.Byte[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="hash">The hash to verify.</param>
        <param name="signature">The signature to verify.</param>
        <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
        <param name="context">
          <para>The context value which was provided during signing.</para>
          <para>The default value is <see langword="null" />.</para>
        </param>
        <summary>Verifies that the specified FIPS 205 pre-hash signature is valid for this key and the provided hash.</summary>
        <returns>
          <see langword="true" /> if the signature validates the hash; otherwise, <see langword="false" />.</returns>
        <remarks>A <see langword="null" /> context is treated as empty.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hash" /> or <paramref name="signature" /> or <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="context" /> has a length in excess of 255 bytes.</exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para> <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para><para>-or-</para><para> <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para><para>-or-</para><para>An error occurred while verifying the hash.</para></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyPreHash">
      <MemberSignature Language="C#" Value="public bool VerifyPreHash (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature, string hashAlgorithmOid, ReadOnlySpan&lt;byte&gt; context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyPreHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, string hashAlgorithmOid, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.VerifyPreHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyPreHash (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithmOid As String, Optional context As ReadOnlySpan(Of Byte) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.VerifyPreHash : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * string * ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="slhDsa.VerifyPreHash (hash, signature, hashAlgorithmOid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithmOid" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="context" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="hash">The hash to verify.</param>
        <param name="signature">The signature to verify.</param>
        <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
        <param name="context">
          <para>The context value which was provided during signing.</para>
          <para>The default value is an empty buffer.</para>
        </param>
        <summary>Verifies that the specified FIPS 205 pre-hash signature is valid for this key and the provided hash.</summary>
        <returns>
          <see langword="true" /> if the signature validates the hash; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
        </exception>
        <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><para> <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para><para>-or-</para><para> <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para><para>-or-</para><para>An error occurred while verifying the hash.</para></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyPreHashCore">
      <MemberSignature Language="C#" Value="protected abstract bool VerifyPreHashCore (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; context, string hashAlgorithmOid, ReadOnlySpan&lt;byte&gt; signature);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool VerifyPreHashCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; context, string hashAlgorithmOid, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.SlhDsa.VerifyPreHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function VerifyPreHashCore (hash As ReadOnlySpan(Of Byte), context As ReadOnlySpan(Of Byte), hashAlgorithmOid As String, signature As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member VerifyPreHashCore : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * string * ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="slhDsa.VerifyPreHashCore (hash, context, hashAlgorithmOid, signature)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool VerifyPreHashCore(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; context, System::String ^ hashAlgorithmOid, ReadOnlySpan&lt;System::Byte&gt; signature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="context" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithmOid" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="hash">The data to verify.</param>
        <param name="context">The signature context.</param>
        <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
        <param name="signature">The signature to verify.</param>
        <summary>When overridden in a derived class, verifies the pre-hash signature of the specified hash and context.</summary>
        <returns>
          <see langword="true" /> if the signature validates the hash; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while verifying the hash.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
