<Type Name="JsonStringEnumConverter&lt;TEnum&gt;" FullName="System.Text.Json.Serialization.JsonStringEnumConverter&lt;TEnum&gt;">
  <TypeSignature Language="C#" Value="public class JsonStringEnumConverter&lt;TEnum&gt; : System.Text.Json.Serialization.JsonConverterFactory where TEnum : struct" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JsonStringEnumConverter`1&lt;struct .ctor (class System.Enum, class System.ValueType) TEnum&gt; extends System.Text.Json.Serialization.JsonConverterFactory" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonStringEnumConverter`1" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonStringEnumConverter(Of TEnum)&#xA;Inherits JsonConverterFactory" />
  <TypeSignature Language="F#" Value="type JsonStringEnumConverter&lt;'Enum (requires 'Enum : struct)&gt; = class&#xA;    inherit JsonConverterFactory" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEnum&gt;&#xA; where TEnum : value classpublic ref class JsonStringEnumConverter : System::Text::Json::Serialization::JsonConverterFactory" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEnum">
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-8.0-pp;net-9.0;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.Enum</BaseTypeName>
        <BaseTypeName>System.ValueType</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Text.Json.Serialization.JsonConverterFactory</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0;net-8.0-pp;net-9.0;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TEnum">The enum type that this converter targets.</typeparam>
    <summary>Converter to convert enums to and from strings.</summary>
    <remarks>Reading is case insensitive, and writing can be customized via a <see cref="T:System.Text.Json.JsonNamingPolicy" />.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonStringEnumConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonStringEnumConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter`1" /> with the default naming policy and that allows integer values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonStringEnumConverter (System.Text.Json.JsonNamingPolicy? namingPolicy = default, bool allowIntegerValues = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Json.JsonNamingPolicy namingPolicy, bool allowIntegerValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter`1.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional namingPolicy As JsonNamingPolicy = Nothing, Optional allowIntegerValues As Boolean = true)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Serialization.JsonStringEnumConverter&lt;'Enum (requires 'Enum : struct)&gt; : System.Text.Json.JsonNamingPolicy * bool -&gt; System.Text.Json.Serialization.JsonStringEnumConverter&lt;'Enum (requires 'Enum : struct)&gt;" Usage="new System.Text.Json.Serialization.JsonStringEnumConverter&lt;'Enum (requires 'Enum : struct)&gt; (namingPolicy, allowIntegerValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="namingPolicy" Type="System.Text.Json.JsonNamingPolicy" />
        <Parameter Name="allowIntegerValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="namingPolicy">Optional naming policy for writing enum values.</param>
        <param name="allowIntegerValues">
          <see langword="true" /> to allow undefined enum values. When <see langword="true" />, if an enum value isn't defined, it outputs as a number rather than a string.</param>
        <summary>Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter`1" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public override sealed bool CanConvert (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvert(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter`1.CanConvert(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CanConvert (typeToConvert As Type) As Boolean" />
      <MemberSignature Language="F#" Value="override this.CanConvert : Type -&gt; bool" Usage="jsonStringEnumConverter.CanConvert typeToConvert" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvert(Type ^ typeToConvert);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert">The type of the object to check whether it can be converted by this converter instance.</param>
        <summary>When overridden in a derived class, determines whether the converter instance can convert the specified object type.</summary>
        <returns>
          <see langword="true" /> if the instance can convert the specified object type; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CreateConverter">
      <MemberSignature Language="C#" Value="public override sealed System.Text.Json.Serialization.JsonConverter CreateConverter (Type typeToConvert, System.Text.Json.JsonSerializerOptions options);" FrameworkAlternate="net-8.0;net-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Json.Serialization.JsonConverter CreateConverter(class System.Type typeToConvert, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonStringEnumConverter`1.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateConverter (typeToConvert As Type, options As JsonSerializerOptions) As JsonConverter" />
      <MemberSignature Language="F#" Value="override this.CreateConverter : Type * System.Text.Json.JsonSerializerOptions -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonStringEnumConverter.CreateConverter (typeToConvert, options)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Json::Serialization::JsonConverter ^ CreateConverter(Type ^ typeToConvert, System::Text::Json::JsonSerializerOptions ^ options);" />
      <MemberSignature Language="C#" Value="public override sealed System.Text.Json.Serialization.JsonConverter? CreateConverter (Type typeToConvert, System.Text.Json.JsonSerializerOptions options);" FrameworkAlternate="net-8.0-pp;net-9.0-pp;netframework-4.7.1-pp;netframework-4.7.2-pp;netframework-4.7-pp;netframework-4.8.1-pp;netframework-4.8-pp;netstandard-2.0-pp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="typeToConvert">The type handled by the converter.</param>
        <param name="options">The serialization options to use.</param>
        <summary>Creates a converter for a specified type.</summary>
        <returns>A converter for which <typeparamref name="T" /> is compatible with <paramref name="typeToConvert" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
