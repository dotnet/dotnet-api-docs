<Type Name="JsonPolymorphicTypeConfiguration" FullName="System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration">
  <TypeSignature Language="C#" Value="public class JsonPolymorphicTypeConfiguration : System.Collections.Generic.ICollection&lt;(Type, string)&gt;, System.Collections.Generic.IEnumerable&lt;(Type, string)&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JsonPolymorphicTypeConfiguration extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.ValueTuple`2&lt;class System.Type, string&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.ValueTuple`2&lt;class System.Type, string&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonPolymorphicTypeConfiguration&#xA;Implements ICollection(Of ValueTuple(Of Type, String)), IEnumerable(Of ValueTuple(Of Type, String))" />
  <TypeSignature Language="F#" Value="type JsonPolymorphicTypeConfiguration = class&#xA;    interface ICollection&lt;ValueTuple&lt;Type, string&gt;&gt;&#xA;    interface seq&lt;ValueTuple&lt;Type, string&gt;&gt;&#xA;    interface IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonPolymorphicTypeConfiguration : System::Collections::Generic::ICollection&lt;ValueTuple&lt;Type ^, System::String ^&gt;&gt;, System::Collections::Generic::IEnumerable&lt;ValueTuple&lt;Type ^, System::String ^&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonPolymorphicTypeConfiguration (Type baseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type baseType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseType As Type)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration : Type -&gt; System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration" Usage="new System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration baseType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonPolymorphicTypeConfiguration(Type ^ baseType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As Type" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.BaseType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ BaseType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomTypeDiscriminatorPropertyName">
      <MemberSignature Language="C#" Value="public string? CustomTypeDiscriminatorPropertyName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomTypeDiscriminatorPropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.CustomTypeDiscriminatorPropertyName" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomTypeDiscriminatorPropertyName As String" />
      <MemberSignature Language="F#" Value="member this.CustomTypeDiscriminatorPropertyName : string with get, set" Usage="System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.CustomTypeDiscriminatorPropertyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomTypeDiscriminatorPropertyName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreUnrecognizedTypeDiscriminators">
      <MemberSignature Language="C#" Value="public bool IgnoreUnrecognizedTypeDiscriminators { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreUnrecognizedTypeDiscriminators" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.IgnoreUnrecognizedTypeDiscriminators" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreUnrecognizedTypeDiscriminators As Boolean" />
      <MemberSignature Language="F#" Value="member this.IgnoreUnrecognizedTypeDiscriminators : bool with get, set" Usage="System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.IgnoreUnrecognizedTypeDiscriminators" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreUnrecognizedTypeDiscriminators { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.Add" ExplicitInterfaceMemberName="System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;(Type, string)&gt;.Add ((Type DerivedType, string TypeDiscriminatorId) item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Add(valuetype System.ValueTuple`2&lt;class System.Type, string&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.System#Collections#Generic#ICollection&lt;(System#TypeDerivedType,System#StringTypeDiscriminatorId)&gt;#Add(System.ValueTuple{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As ValueTuple(Of Type, String)) Implements ICollection(Of ValueTuple(Of Type, String)).Add" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Add : ValueTuple&lt;Type, string&gt; -&gt; unit&#xA;override this.System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Add : ValueTuple&lt;Type, string&gt; -&gt; unit" Usage="jsonPolymorphicTypeConfiguration.System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Add item" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Add(ValueTuple&lt;Type ^, System::String ^&gt; item) = System::Collections::Generic::ICollection&lt;ValueTuple&lt;Type ^, System::String ^&gt;&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.ValueTuple&lt;System.Type,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DerivedType", "TypeDiscriminatorId" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DerivedType", "TypeDiscriminatorId" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.Clear" ExplicitInterfaceMemberName="System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;(Type, string)&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.System#Collections#Generic#ICollection&lt;(System#TypeDerivedType,System#StringTypeDiscriminatorId)&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of ValueTuple(Of Type, String)).Clear" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Clear : unit -&gt; unit&#xA;override this.System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Clear : unit -&gt; unit" Usage="jsonPolymorphicTypeConfiguration.System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Clear " />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Clear() = System::Collections::Generic::ICollection&lt;ValueTuple&lt;Type ^, System::String ^&gt;&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.Contains" ExplicitInterfaceMemberName="System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;(Type, string)&gt;.Contains ((Type DerivedType, string TypeDiscriminatorId) item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Contains(valuetype System.ValueTuple`2&lt;class System.Type, string&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.System#Collections#Generic#ICollection&lt;(System#TypeDerivedType,System#StringTypeDiscriminatorId)&gt;#Contains(System.ValueTuple{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As ValueTuple(Of Type, String)) As Boolean Implements ICollection(Of ValueTuple(Of Type, String)).Contains" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Contains : ValueTuple&lt;Type, string&gt; -&gt; bool&#xA;override this.System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Contains : ValueTuple&lt;Type, string&gt; -&gt; bool" Usage="jsonPolymorphicTypeConfiguration.System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Contains item" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Contains(ValueTuple&lt;Type ^, System::String ^&gt; item) = System::Collections::Generic::ICollection&lt;ValueTuple&lt;Type ^, System::String ^&gt;&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.ValueTuple&lt;System.Type,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DerivedType", "TypeDiscriminatorId" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DerivedType", "TypeDiscriminatorId" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.CopyTo" ExplicitInterfaceMemberName="System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;(Type, string)&gt;.CopyTo ((Type DerivedType, string TypeDiscriminatorId)[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.CopyTo(valuetype System.ValueTuple`2&lt;class System.Type, string&gt;[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.System#Collections#Generic#ICollection&lt;(System#TypeDerivedType,System#StringTypeDiscriminatorId)&gt;#CopyTo(System.ValueTuple{System.Type,System.String}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As ValueTuple(Of Type, String)(), arrayIndex As Integer) Implements ICollection(Of ValueTuple(Of Type, String)).CopyTo" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.CopyTo : ValueTuple&lt;Type, string&gt;[] * int -&gt; unit&#xA;override this.System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.CopyTo : ValueTuple&lt;Type, string&gt;[] * int -&gt; unit" Usage="jsonPolymorphicTypeConfiguration.System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.CopyTo (array, arrayIndex)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.CopyTo(cli::array &lt;ValueTuple&lt;Type ^, System::String ^&gt;&gt; ^ array, int arrayIndex) = System::Collections::Generic::ICollection&lt;ValueTuple&lt;Type ^, System::String ^&gt;&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.ValueTuple&lt;System.Type,System.String&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DerivedType", "TypeDiscriminatorId" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DerivedType", "TypeDiscriminatorId" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.Count" ExplicitInterfaceMemberName="System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Count">
      <MemberSignature Language="C#" Value="int System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Count" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.System#Collections#Generic#ICollection&lt;(System#TypeDerivedType,System#StringTypeDiscriminatorId)&gt;#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection(Of ValueTuple(Of Type, String)).Count" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.Count : int" Usage="System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::Generic::ICollection&lt;System::ValueTuple&lt;System::Type,System::String&gt;&gt;::Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.IsReadOnly" ExplicitInterfaceMemberName="System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.System#Collections#Generic#ICollection&lt;(System#TypeDerivedType,System#StringTypeDiscriminatorId)&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of ValueTuple(Of Type, String)).IsReadOnly" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.IsReadOnly : bool" Usage="System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;System::ValueTuple&lt;System::Type,System::String&gt;&gt;::IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.Remove" ExplicitInterfaceMemberName="System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;(Type, string)&gt;.Remove ((Type DerivedType, string TypeDiscriminatorId) item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Remove(valuetype System.ValueTuple`2&lt;class System.Type, string&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.System#Collections#Generic#ICollection&lt;(System#TypeDerivedType,System#StringTypeDiscriminatorId)&gt;#Remove(System.ValueTuple{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As ValueTuple(Of Type, String)) As Boolean Implements ICollection(Of ValueTuple(Of Type, String)).Remove" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Remove : ValueTuple&lt;Type, string&gt; -&gt; bool&#xA;override this.System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Remove : ValueTuple&lt;Type, string&gt; -&gt; bool" Usage="jsonPolymorphicTypeConfiguration.System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Remove item" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.Remove(ValueTuple&lt;Type ^, System::String ^&gt; item) = System::Collections::Generic::ICollection&lt;ValueTuple&lt;Type ^, System::String ^&gt;&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.ValueTuple&lt;System.Type,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DerivedType", "TypeDiscriminatorId" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DerivedType", "TypeDiscriminatorId" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;.GetEnumerator" ExplicitInterfaceMemberName="System.Collections.Generic.IEnumerable&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;(Type DerivedType, string TypeDiscriminatorId)&gt; IEnumerable&lt;(Type, string)&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.ValueTuple`2&lt;class System.Type, string&gt;&gt; System.Collections.Generic.IEnumerable&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.System#Collections#Generic#IEnumerable&lt;(System#TypeDerivedType,System#StringTypeDiscriminatorId)&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of ValueTuple(Of Type, String)) Implements IEnumerable(Of ValueTuple(Of Type, String)).GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;ValueTuple&lt;Type, string&gt;&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;ValueTuple&lt;Type, string&gt;&gt;" Usage="jsonPolymorphicTypeConfiguration.System.Collections.Generic.IEnumerable&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;ValueTuple&lt;Type ^, System::String ^&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;(System.TypeDerivedType,System.StringTypeDiscriminatorId)&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;ValueTuple&lt;Type ^, System::String ^&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.ValueTuple&lt;System.Type,System.String&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DerivedType", "TypeDiscriminatorId" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "DerivedType", "TypeDiscriminatorId" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="jsonPolymorphicTypeConfiguration.System.Collections.IEnumerable.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownDerivedTypeHandling">
      <MemberSignature Language="C#" Value="public System.Text.Json.Serialization.JsonUnknownDerivedTypeHandling UnknownDerivedTypeHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.Serialization.JsonUnknownDerivedTypeHandling UnknownDerivedTypeHandling" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.UnknownDerivedTypeHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property UnknownDerivedTypeHandling As JsonUnknownDerivedTypeHandling" />
      <MemberSignature Language="F#" Value="member this.UnknownDerivedTypeHandling : System.Text.Json.Serialization.JsonUnknownDerivedTypeHandling with get, set" Usage="System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.UnknownDerivedTypeHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::Serialization::JsonUnknownDerivedTypeHandling UnknownDerivedTypeHandling { System::Text::Json::Serialization::JsonUnknownDerivedTypeHandling get(); void set(System::Text::Json::Serialization::JsonUnknownDerivedTypeHandling value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonUnknownDerivedTypeHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithDerivedType">
      <MemberSignature Language="C#" Value="public System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration WithDerivedType (Type derivedType, string? typeDiscriminatorId = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration WithDerivedType(class System.Type derivedType, string typeDiscriminatorId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration.WithDerivedType(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithDerivedType (derivedType As Type, Optional typeDiscriminatorId As String = Nothing) As JsonPolymorphicTypeConfiguration" />
      <MemberSignature Language="F#" Value="member this.WithDerivedType : Type * string -&gt; System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration" Usage="jsonPolymorphicTypeConfiguration.WithDerivedType (derivedType, typeDiscriminatorId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonPolymorphicTypeConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="derivedType" Type="System.Type" />
        <Parameter Name="typeDiscriminatorId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="derivedType">To be added.</param>
        <param name="typeDiscriminatorId">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
