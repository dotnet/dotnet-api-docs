<Namespace Name="System.Transactions">
  <Docs>
    <summary>Contains classes that allow you to write your own transactional application and resource manager. Specifically, you can create and participate in a transaction (local or distributed) with one or multiple participants.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

 The `System.Transactions` infrastructure makes transactional programming simple and efficient throughout the platform by supporting transactions initiated in SQL Server, ADO.NET, MSMQ, and the Microsoft Distributed Transaction Coordinator (MSDTC). It provides both an explicit programming model based on the <xref:System.Transactions.Transaction> class, as well as an implicit programming model using the <xref:System.Transactions.TransactionScope> class, in which transactions are automatically managed by the infrastructure. It is highly recommended that you use the easier implicit model for development. To get started, see the [Implementing An Implicit Transaction Using Transaction Scope](/previous-versions/dotnet/netframework-3.0/ms172152(v=vs.85)) topic. For more information on writing a transactional application, see [Writing A Transactional Application](/dotnet/framework/data/transactions/writing-a-transactional-application).

 `System.Transactions` also provides types for you to implement a resource manager. The transaction manager native to the `System.Transactions` infrastructure allows volatile resources or a single durable resource enlistment to commit or roll back efficiently. For more information on implementing a resource manager, see [Implementing A Resource Manager](/previous-versions/dotnet/netframework-3.0/ms229975(v=vs.85)).

 The transaction manager also transparently escalates local transactions to distributed transactions by coordinating through a disk-based transaction manager like the DTC, when an additional durable resource manager enlists itself with a transaction. There are two key ways that the `System.Transactions` infrastructure provides enhanced performance.

- Dynamic Escalation, which means that the `System.Transactions` infrastructure only engages the MSDTC when it is actually required for a transaction. This area is covered in depth in the [Transaction Management Escalation](/previous-versions/dotnet/netframework-3.0/ms229978(v=vs.85)) topic.

- Promotable Enlistments, which allows a resource, such as a database, to take ownership of the transaction if it is the only entity participating in the transaction. Later, if needed, the `System.Transactions` infrastructure can still escalate the management of the transaction to MSDTC. This further reduces the chance of using the MSDTC. This area is covered in depth in the [Optimization Using Single Phase Commit and Promotable Single Phase Notification](/previous-versions/dotnet/netframework-3.0/ms229980(v=vs.85)) topic.

 For more information on how to use the `System.Transactions` namespace, see [Transaction Processing](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.0/w97s6fw4(v=vs.85)).

 ]]></format>
    </remarks>
  </Docs>
</Namespace>
