<Type Name="Activity" FullName="System.Diagnostics.Activity">
  <TypeSignature Language="C#" Value="public class Activity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Activity extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Activity" />
  <TypeSignature Language="VB.NET" Value="Public Class Activity" />
  <TypeSignature Language="C++ CLI" Value="public ref class Activity" />
  <TypeSignature Language="F#" Value="type Activity = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Activity (string operationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string operationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Activity.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (operationName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Activity(System::String ^ operationName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Activity : string -&gt; System.Diagnostics.Activity" Usage="new System.Diagnostics.Activity operationName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operationName">The name of the operation.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Activity" /> class.</summary>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

Note that <xref:System.Diagnostics.Activity> has a "builder" pattern: you call the constructor, a number of `Set*` and `Add*` APIs, and then call <xref:System.Diagnostics.Activity.Start> to build the activity. You **must** call <xref:System.Diagnostics.Activity.Start> before using the new instance.
         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBaggage">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity AddBaggage (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity AddBaggage(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Activity.AddBaggage(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddBaggage (key As String, value As String) As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ AddBaggage(System::String ^ key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddBaggage : string * string -&gt; System.Diagnostics.Activity" Usage="activity.AddBaggage (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The baggage key.</param>
        <param name="value">The baggage value.</param>
        <summary>Updates the <see cref="T:System.Diagnostics.Activity" /> to have a new baggage <see cref="T:System.Collections.Generic.KeyValuePair&lt;string,string&gt;" /> with the specified key and value.</summary>
        <returns><see langword="this" /> for convenient chaining.</returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

This key/value pair is included in the collection returned by the <see cref="P:System.Diagnostics.Activity.Baggage" /> property, and can also be retrieved by the <xref:System.Diagnostics.Activity.GetBaggageItem%2A> method. 

`Baggage` is meant for information that is needed for runtime control. For information  that is useful to show up in the log with the <xref:System.Diagnostics.Activity>, use the <xref:System.Diagnostics.Activity.Tags> property.

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTag">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity AddTag (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity AddTag(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Activity.AddTag(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTag (key As String, value As String) As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ AddTag(System::String ^ key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddTag : string * string -&gt; System.Diagnostics.Activity" Usage="activity.AddTag (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The tag key.</param>
        <param name="value">The tag value.</param>
        <summary>Updates the <see cref="T:System.Diagnostics.Activity" /> to have a new tag with the provided <paramref name="key" /> and <paramref name="value" />. .</summary>
        <returns><see langword="this" /> for convenient chaining.</returns>
<remarks>
   <format type="text/markdown"><![CDATA[

This key/value pair is included in the collection returned by the <see cref="P:System.Diagnostics.Activity.Tags" /> property.

<xref:System.Diagnostics.Activity.Tags> is meant for information that is useful to log with the <xref:System.Diagnostics.Activity>. For information  that is needed for runtime control, use the <xref:System.Diagnostics.Activity.Baggage> property.
  |  
  | ]]></format>
  | </remarks>
      </Docs>
    </Member>
    <Member MemberName="Baggage">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; Baggage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; Baggage" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Activity.Baggage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Baggage As IEnumerable(Of KeyValuePair(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::String ^&gt;&gt; ^ Baggage { System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::String ^&gt;&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Baggage : seq&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt;" Usage="System.Diagnostics.Activity.Baggage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of key/value pairs that represents information that is passed to children of this <see cref="T:System.Diagnostics.Activity" />. </summary>
        <value>An enumeration of string-string key-value pairs.</value>
         <remarks>  
          <format type="text/markdown"><![CDATA[  

`Baggage` is serialized when requests leave the process (along with the ID). Typically, `Baggage` is used for fine-grained control over logging of the activity and any children.  In general, if you are not using the data at runtime, you should be using <xref:System.Diagnostics.Activity.Tags> instead.

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Activity Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.Activity Current" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Activity.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::Activity ^ Current { System::Diagnostics::Activity ^ get(); void set(System::Diagnostics::Activity ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Diagnostics.Activity with get, set" Usage="System.Diagnostics.Activity.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the current operation (<see cref="T:System.Diagnostics.Activity" />) for the current thread.  This flows across async calls.</summary>
        <value>The current operation for the current thread.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Duration" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Activity.Duration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Duration As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Duration { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Duration : TimeSpan" Usage="System.Diagnostics.Activity.Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the duration of the operation.</summary>
        <value>The delta between <see cref="P:System.Diagnostics.Activity.StartTimeUtc" /> and the end time if the <see cref="T:System.Diagnostics.Activity" /> has ended (<see cref="M:System.Diagnostics.Activity.Stop" /> or <see cref="M:System.Diagnostics.Activity.SetEndTime(System.DateTime)" /> was called), or <see cref="F:System.TimeSpan.Zero"/> if the <see cref="T:System.Diagnostics.Activity" /> has not ended and <see cref="M:System.Diagnostics.Activity.SetEndTime(System.Datetime)" /> was not called.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaggageItem">
      <MemberSignature Language="C#" Value="public string GetBaggageItem (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetBaggageItem(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Activity.GetBaggageItem(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBaggageItem (key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetBaggageItem(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.GetBaggageItem : string -&gt; string" Usage="activity.GetBaggageItem key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The baggage key.</param>
        <summary>Returns the value of a key-value pair added to the activity with <see cref="M:System.Diagnostics.Activity.AddBaggage(System.String,System.String)" />.</summary>
        <returns>The value of the key-value-pair item if it exists, or <see langword="null" /> if it does not exist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Activity.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.Diagnostics.Activity.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an identifier that is specific to a particular request.</summary>
For more information, see <see href="https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/ActivityUserGuide.md#id-format">Id Format</see>.</summary>
        <value>The activity ID.</value>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

Filtering to a particular ID ensures that you get only one request that matches.

An ID has a hierarchical structure: `root-id.id1_id2.id3_`. The ID is generated when <xref:System.Diagnostics.Activity.Start> is called by appending a suffix to the `Activity.Parent.Id` or the <xref:System.Diagnostics.Activity.ParentId>. An <xref:System.Diagnostics.Activity> has no ID until it starts. For more information, see [Id Format](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/ActivityUserGuide.md#id-format).
         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationName">
      <MemberSignature Language="C#" Value="public string OperationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OperationName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Activity.OperationName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OperationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OperationName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OperationName : string" Usage="System.Diagnostics.Activity.OperationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the operation name.</summary>
        <value>The name of the operation.</value>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

An operation name is the *coarsest* name that is useful for grouping/filtering. The name is typically a compile-time constant. Names of Rest APIs are reasonable, but arguments (such as specific accounts) should not be in the name but rather in the tags.

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.Activity Parent" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Activity.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::Activity ^ Parent { System::Diagnostics::Activity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Diagnostics.Activity" Usage="System.Diagnostics.Activity.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent <see cref="T:System.Diagnostics.Activity" /> that created this activity. </summary>
        <value>The parent of this <see cref="T:System.Diagnostics.Activity" />, if it is from the same process, or <see langword="null" /> if this instance has no parent (it is a root activity) or if the parent is from outside the process.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentId">
      <MemberSignature Language="C#" Value="public string ParentId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParentId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Activity.ParentId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParentId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParentId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParentId : string" Usage="System.Diagnostics.Activity.ParentId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the ID of this activity's parent. </summary>
        <value>The parent ID, if one exists, or <see langword="null" /> if it does not.</value>
      <remarks>  
          <format type="text/markdown"><![CDATA[  

If the parent for this <xref:System.Diagnostics.Activity> comes from outside the process, the <xref:System.Diagnostics.Activity> does not have a parent but *may* have a parent ID (which was deserialized from the parent).  

This property value can be `null` if this is a root <see cref="T:System.Diagnostics.Activity" /> (i.e. it has no <xref:System.Diagnostics.Activity.Parent>).  See [Id Format](href="https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/ActivityUserGuide.md#id-format) for more details.

         ]]></format>
      </remarks>

      </Docs>
    </Member>
    <Member MemberName="RootId">
      <MemberSignature Language="C#" Value="public string RootId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RootId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Activity.RootId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RootId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RootId : string" Usage="System.Diagnostics.Activity.RootId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the root Id of this <see cref="T:System.Diagnostics.Activity" />. </summary>
        <value>The root Id, or <see langword="null" /> if the current instance has either a <see cref="P:System.Activities.ParentId" /> or an <see cref="P:System.Activities.Id" />.</value>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

The root Id is a substring from the <xref:System.Diagnostics.Activity.Id> or the <xref:System.Diagnostics.Activity.ParentId>) between '|' (or the beginning) and the first `.`. Filtering by root Id allows you to find all activities involved in operation processing. See [Id Format](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/ActivityUserGuide.md#id-format") for more information.

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEndTime">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity SetEndTime (DateTime endTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity SetEndTime(valuetype System.DateTime endTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Activity.SetEndTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetEndTime (endTimeUtc As DateTime) As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ SetEndTime(DateTime endTimeUtc);" />
      <MemberSignature Language="F#" Value="member this.SetEndTime : DateTime -&gt; System.Diagnostics.Activity" Usage="activity.SetEndTime endTimeUtc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="endTimeUtc">The UTC stop time.</param>
        <summary>Updates the <see cref="T:System.Diagnostics.Activity" /> to set its <see cref="P:System.Diagnostics.Activity.Duration" /> as the difference between <see cref="P:System.Diagnostics.Activity.StartTimeUtc" /> and <paramref name="endTimeUtc" />.</summary>
        <returns><see langword="this" /> for convenient chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParentId">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity SetParentId (string parentId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity SetParentId(string parentId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Activity.SetParentId(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetParentId (parentId As String) As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ SetParentId(System::String ^ parentId);" />
      <MemberSignature Language="F#" Value="member this.SetParentId : string -&gt; System.Diagnostics.Activity" Usage="activity.SetParentId parentId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parentId">The id of the parent operation.</param>
        <summary>Updates this <see cref="T:System.Diagnostics.Activity" /> to indicate that the <see cref="T:System.Diagnostics.Activity" /> with an ID of <paramref name="parentId" /> caused this <see cref="T:System.Diagnostics.Activity" />.</summary>
        <returns><see langword="this" /> for convenient chaining.</returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

This property if for use only in 'boundary' scenarios where an <see cref="T:System.Diagnostics.Activity" /> from another process logically started this <see cref="T:System.Diagnostics.Activity" />. The `parentId` brings up the <xref:System.Diagnostics.Activity.Tags> (as well as the <xref:System.Diagnostics.Activity.ParentId> property) and can be used to reconstruct the causal tree.

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStartTime">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity SetStartTime (DateTime startTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity SetStartTime(valuetype System.DateTime startTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Activity.SetStartTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetStartTime (startTimeUtc As DateTime) As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ SetStartTime(DateTime startTimeUtc);" />
      <MemberSignature Language="F#" Value="member this.SetStartTime : DateTime -&gt; System.Diagnostics.Activity" Usage="activity.SetStartTime startTimeUtc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="startTimeUtc">The <see cref="T:System.Diagnostics.Activity" /> start time in UTC.</param>
        <summary>Sets the start time of this <see cref="T:System.Diagnostics.Activity" />.</summary>
        <returns><see langword="this" /> for convenient chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Activity.Start" />
      <MemberSignature Language="VB.NET" Value="Public Function Start () As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; System.Diagnostics.Activity" Usage="activity.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the activity. </summary>
<list type="bullet">
        <returns><see langword="this" /> for convenient chaining.</returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

Calling the `Start` method does the following:
-   Sets <xref:System.Diagnostics.Activity.Parent> to hold <xref:System.Diagnostics.Activity.Current>.
-   Sets <xref:System.Diagnostics.Activity.Current> to this <xref:System.Diagnostics.Activity>.
-   If <xref:System.Diagnostics.Activity.StartTimeUtc> was not set previously, sets it to <xref:System.DateTime.UtcNow?displayProperty=nameWithType>.
-   Generates a unique <xref:System.Diagnostics.Activity.Id> for this activity.</item>

Use <xref:System.Diagnostics.DiagnosticSource.StartActivity%2A?displayProperty=nameWithType> to start the <see cref="T:System.Diagnostics.Activity" /> and write the start event.

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTimeUtc">
      <MemberSignature Language="C#" Value="public DateTime StartTimeUtc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTimeUtc" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Activity.StartTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTimeUtc As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTimeUtc { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.StartTimeUtc : DateTime" Usage="System.Diagnostics.Activity.StartTimeUtc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time when the operation started.  </summary>
        <value>The UTC time that the operation started. </value>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

The `StartTimeUtc property is typically initialized when <xref:System.Diagnostics.Activity.Start> is called, but it can be set at any time by calling <xref:System.Diagnostics.Activity.SetStartTime%2A>.

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Activity.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="activity.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the activity. </summary>
  <item>Sets <see cref="P:System.Diagnostics.Activity.Current" /> to <see cref="P:System.Diagnostics.Activity.Parent" />.</item>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tags">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; Tags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; Tags" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Activity.Tags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tags As IEnumerable(Of KeyValuePair(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::String ^&gt;&gt; ^ Tags { System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::String ^&gt;&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Tags : seq&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt;" Usage="System.Diagnostics.Activity.Tags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tags is a string-string key-value-pair enumeration that represent information that will be logged along with the <see cref="T:System.Diagnostics.Activity" /> to the logging system. This information however is NOT passed on to the children of this <see cref="T:System.Diagnostics.Activity" />.</summary>
        <value>An enumeration of string-string key-value-pairs.</value>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

Calling the `Stop` method:

-   Sets <xref:System.Diagnostics.Activity.Current> to <xref:System.Diagnostics.Activity.Parent>.
-   If the end time was not set previously, sets <xref:System.Diagnostics.Activity.Duration> as the difference between <xref:System.DateTime.UtcNow?displayProperty=nameWithType> and <xref="P:System.Diagnostics.Activity.StartTimeUtc>.

Call<xref:System.Diagnostics.DiagnosticSource.StopActivity%2A?displayProperty=nameWithType> to stop the <xref:System.Diagnostics.Activity> and write the stop event.

         ]]></format>
         </remarks>

      </Docs>
    </Member>
  </Members>
</Type>
