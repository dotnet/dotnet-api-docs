<Type Name="Regex+ValueMatchEnumerator" FullName="System.Text.RegularExpressions.Regex+ValueMatchEnumerator">
  <TypeSignature Language="C#" Value="public ref struct Regex.ValueMatchEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Regex/ValueMatchEnumerator extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Regex.ValueMatchEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Regex.ValueMatchEnumerator" />
  <TypeSignature Language="F#" Value="type Regex.ValueMatchEnumerator = struct" />
  <TypeSignature Language="C++ CLI" Value="public: value class Regex::ValueMatchEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Text.RegularExpressions" ToVersion="7.0.0.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsByRefLike]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsByRefLike&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an enumerator containing the set of successful matches found by iteratively applying a regular expression pattern to the input span.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

The enumerator has no public constructor. The <xref:System.Text.RegularExpressions.Regex.EnumerateMatches(System.ReadOnlySpan{System.Char})> method returns a <xref:System.Text.RegularExpressions.Regex.ValueMatchEnumerator>
             object.The enumerator will lazily iterate over zero or more <xref:System.Text.RegularExpressions.ValueMatch> objects. If there is at least one successful match in the span, then
             <xref:System.Text.RegularExpressions.Regex.ValueMatchEnumerator.MoveNext> returns `true` and <xref:System.Text.RegularExpressions.Regex.ValueMatchEnumerator.Current> will contain the first <xref:System.Text.RegularExpressions.ValueMatch>. If there are no successful matches,
             then <xref:System.Text.RegularExpressions.Regex.ValueMatchEnumerator.MoveNext> returns `false` and <xref:System.Text.RegularExpressions.Regex.ValueMatchEnumerator.Current> throws an <xref:System.InvalidOperationException>.
            
This type is a ref struct since it stores the input span as a field in order to be able to lazily iterate over it.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.ValueMatch Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.ValueMatch Current" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.ValueMatchEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As ValueMatch" />
      <MemberSignature Language="F#" Value="member this.Current : System.Text.RegularExpressions.ValueMatch" Usage="System.Text.RegularExpressions.Regex.ValueMatchEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::ValueMatch Current { System::Text::RegularExpressions::ValueMatch get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.ValueMatch</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Text.RegularExpressions.ValueMatch" /> element at the current position of the enumerator.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Enumeration has either not started or has already finished.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public readonly System.Text.RegularExpressions.Regex.ValueMatchEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.RegularExpressions.Regex/ValueMatchEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ValueMatchEnumerator.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Regex.ValueMatchEnumerator" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Text.RegularExpressions.Regex.ValueMatchEnumerator" Usage="valueMatchEnumerator.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Regex::ValueMatchEnumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Regex+ValueMatchEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides an enumerator that iterates through the matches in the input span.</summary>
        <returns>A copy of this enumerator.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ValueMatchEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="valueMatchEnumerator.MoveNext " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Advances the enumerator to the next match in the span.</summary>
        <returns>
          <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator cannot find additional matches.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
