<Type Name="GeneratedRegexAttribute" FullName="System.Text.RegularExpressions.GeneratedRegexAttribute">
  <TypeSignature Language="C#" Value="public sealed class GeneratedRegexAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GeneratedRegexAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.GeneratedRegexAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GeneratedRegexAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type GeneratedRegexAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class GeneratedRegexAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Instructs the System.Text.RegularExpressions source generator to generate an implementation of the specified regular expression.</summary>
    <remarks>
      <para> The generator associated with this attribute only supports C#.  It only supplies an implementation when applied to static, partial, parameterless, non-generic methods that are typed to return <see cref="T:System.Text.RegularExpressions.Regex" />.
            </para>
      <para> When the <see cref="T:System.Text.RegularExpressions.Regex" /> supports case-insensitive matches (either by passing <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" /> or using the inline `(?i)` switch in the pattern) the regex engines will use an internal casing table to transform the passed in pattern into an equivalent case-sensitive one. For example, given the pattern `abc`, the engines will transform it to the equivalent pattern `[Aa][Bb][Cc]`. The equivalences found in this internal casing table can change over time, for example in the case new characters are added to a new version of Unicode. When using the source generator, this transformation happens at compile time, which means the casing table used to find the equivalences will depend on the target framework at compile time. This differs from the rest of the <see cref="T:System.Text.RegularExpressions.Regex" /> engines, which perform this transformation at run time, meaning they will always use casing table for the current runtime.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeneratedRegexAttribute (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String)" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.GeneratedRegexAttribute : string -&gt; System.Text.RegularExpressions.GeneratedRegexAttribute" Usage="new System.Text.RegularExpressions.GeneratedRegexAttribute pattern" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GeneratedRegexAttribute(System::String ^ pattern);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("Regex")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("Regex")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="pattern">The regular expression pattern to match.</param>
        <summary>Initializes a new instance of <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" /> with the specified pattern.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeneratedRegexAttribute (string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions)" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.GeneratedRegexAttribute : string * System.Text.RegularExpressions.RegexOptions -&gt; System.Text.RegularExpressions.GeneratedRegexAttribute" Usage="new System.Text.RegularExpressions.GeneratedRegexAttribute (pattern, options)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GeneratedRegexAttribute(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("Regex", new System.Object[] { Mono.Cecil.CustomAttributeArgument })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("Regex", new System.Object[] { Mono.Cecil.CustomAttributeArgument })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="pattern">The regular expression pattern to match.</param>
        <param name="options">A bitwise combination of the enumeration values that modify the regular expression.</param>
        <summary>Initializes a new instance of <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" /> with the specified pattern and options.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeneratedRegexAttribute (string pattern, System.Text.RegularExpressions.RegexOptions options, int matchTimeoutMilliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, int32 matchTimeoutMilliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, matchTimeoutMilliseconds As Integer)" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.GeneratedRegexAttribute : string * System.Text.RegularExpressions.RegexOptions * int -&gt; System.Text.RegularExpressions.GeneratedRegexAttribute" Usage="new System.Text.RegularExpressions.GeneratedRegexAttribute (pattern, options, matchTimeoutMilliseconds)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GeneratedRegexAttribute(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, int matchTimeoutMilliseconds);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("Regex", new System.Object[] { Mono.Cecil.CustomAttributeArgument })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("Regex", new System.Object[] { Mono.Cecil.CustomAttributeArgument })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeoutMilliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">The regular expression pattern to match.</param>
        <param name="options">A bitwise combination of the enumeration values that modify the regular expression.</param>
        <param name="matchTimeoutMilliseconds">A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite" /> to indicate that the method should not time out.</param>
        <summary>Initializes a new instance of <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" /> with the specified pattern, options, and time-out value.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeneratedRegexAttribute (string pattern, System.Text.RegularExpressions.RegexOptions options, string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, cultureName As String)" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.GeneratedRegexAttribute : string * System.Text.RegularExpressions.RegexOptions * string -&gt; System.Text.RegularExpressions.GeneratedRegexAttribute" Usage="new System.Text.RegularExpressions.GeneratedRegexAttribute (pattern, options, cultureName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GeneratedRegexAttribute(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ cultureName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("Regex", new System.Object[] { Mono.Cecil.CustomAttributeArgument })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("Regex", new System.Object[] { Mono.Cecil.CustomAttributeArgument })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">The regular expression pattern to match.</param>
        <param name="options">A bitwise combination of the enumeration values that modify the regular expression.</param>
        <param name="cultureName">The name of a culture to be used for case sensitive comparisons. <paramref name="cultureName" /> is not case-sensitive.</param>
        <summary>Initializes a new instance of <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" /> with the specified pattern and options.</summary>
        <remarks>For a list of predefined culture names on Windows systems, see the Language tag column in the <see href="/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c">list of language/region names supported by Windows</see>. Culture names follow the standard defined by <see href="https://tools.ietf.org/html/bcp47">BCP 47</see>. In addition, starting with Windows 10, <paramref name="cultureName" /> can be any valid BCP-47 language tag.
             If <paramref name="cultureName" /> is <see cref="F:System.String.Empty" />, the invariant culture will be used.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GeneratedRegexAttribute (string pattern, System.Text.RegularExpressions.RegexOptions options, int matchTimeoutMilliseconds, string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, int32 matchTimeoutMilliseconds, string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, matchTimeoutMilliseconds As Integer, cultureName As String)" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.GeneratedRegexAttribute : string * System.Text.RegularExpressions.RegexOptions * int * string -&gt; System.Text.RegularExpressions.GeneratedRegexAttribute" Usage="new System.Text.RegularExpressions.GeneratedRegexAttribute (pattern, options, matchTimeoutMilliseconds, cultureName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GeneratedRegexAttribute(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, int matchTimeoutMilliseconds, System::String ^ cultureName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("Regex", new System.Object[] { Mono.Cecil.CustomAttributeArgument })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("Regex", new System.Object[] { Mono.Cecil.CustomAttributeArgument })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeoutMilliseconds" Type="System.Int32" />
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">The regular expression pattern to match.</param>
        <param name="options">A bitwise combination of the enumeration values that modify the regular expression.</param>
        <param name="matchTimeoutMilliseconds">A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite" /> to indicate that the method should not time out.</param>
        <param name="cultureName">The name of a culture to be used for case sensitive comparisons. <paramref name="cultureName" /> is not case-sensitive.</param>
        <summary>Initializes a new instance of <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" /> with the specified pattern, options, time-out value, and culture.</summary>
        <remarks>For a list of predefined culture names on Windows systems, see the Language tag column in the <see href="/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c">list of language/region names supported by Windows</see>. Culture names follow the standard defined by <see href="https://tools.ietf.org/html/bcp47">BCP 47</see>. In addition, starting with Windows 10, <paramref name="cultureName" /> can be any valid BCP-47 language tag.
             If <paramref name="cultureName" /> is <see cref="F:System.String.Empty" />, the invariant culture will be used.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CultureName">
      <MemberSignature Language="C#" Value="public string CultureName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureName" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GeneratedRegexAttribute.CultureName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureName As String" />
      <MemberSignature Language="F#" Value="member this.CultureName : string" Usage="System.Text.RegularExpressions.GeneratedRegexAttribute.CultureName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the culture to be used for case sensitive comparisons.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeoutMilliseconds">
      <MemberSignature Language="C#" Value="public int MatchTimeoutMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MatchTimeoutMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GeneratedRegexAttribute.MatchTimeoutMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MatchTimeoutMilliseconds As Integer" />
      <MemberSignature Language="F#" Value="member this.MatchTimeoutMilliseconds : int" Usage="System.Text.RegularExpressions.GeneratedRegexAttribute.MatchTimeoutMilliseconds" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MatchTimeoutMilliseconds { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite" /> to indicate that the method should not time out.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As RegexOptions" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions" Usage="System.Text.RegularExpressions.GeneratedRegexAttribute.Options" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a bitwise combination of the enumeration values that modify the regular expression.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pattern As String" />
      <MemberSignature Language="F#" Value="member this.Pattern : string" Usage="System.Text.RegularExpressions.GeneratedRegexAttribute.Pattern" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the regular expression pattern to match.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
