<Type Name="MetadataStringDecoder" FullName="System.Reflection.Metadata.MetadataStringDecoder">
  <TypeSignature Language="C#" Value="public class MetadataStringDecoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MetadataStringDecoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.MetadataStringDecoder" />
  <TypeSignature Language="VB.NET" Value="Public Class MetadataStringDecoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataStringDecoder" />
  <TypeSignature Language="F#" Value="type MetadataStringDecoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the <see cref="T:System.Reflection.Metadata.MetadataReader" /> with a custom mechanism for decoding byte sequences in metadata that represent text.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

This type can be used as follows:
 
1. To customize the treatment of invalid input. When no decoder is provided, the <xref:System.Reflection.Metadata.MetadataReader> uses the default fallback replacement with `\uFFFD`.

2. To reuse existing strings instead of allocating a new one for each decoding operation.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataStringDecoder (System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataStringDecoder.#ctor(System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MetadataStringDecoder(System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Metadata.MetadataStringDecoder : System.Text.Encoding -&gt; System.Reflection.Metadata.MetadataStringDecoder" Usage="new System.Reflection.Metadata.MetadataStringDecoder encoding" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="encoding">The encoding to use.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Reflection.Metadata.MetadataStringDecoder" /> class using the given encoding.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

To cache and reuse existing strings, create a derived class and override <xref:System.Reflection.Metadata.MetadataStringDecoder.GetString(System.Byte*,System.Int32)>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultUTF8">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataStringDecoder DefaultUTF8 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Metadata.MetadataStringDecoder DefaultUTF8" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.MetadataStringDecoder.DefaultUTF8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultUTF8 As MetadataStringDecoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Metadata::MetadataStringDecoder ^ DefaultUTF8 { System::Reflection::Metadata::MetadataStringDecoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUTF8 : System.Reflection.Metadata.MetadataStringDecoder" Usage="System.Reflection.Metadata.MetadataStringDecoder.DefaultUTF8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataStringDecoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default decoder used by <see cref="T:System.Reflection.Metadata.MetadataReader" /> to decode UTF-8 when no decoder is provided to the constructor.</summary>
        <value>The default decoder used by <see cref="T:System.Reflection.Metadata.MetadataReader" /> to decode UTF-8.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.MetadataStringDecoder.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Reflection.Metadata.MetadataStringDecoder.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the encoding used by this instance.</summary>
        <value>The encoding used by this instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataStringDecoder.GetString(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="abstract member GetString : nativeptr&lt;byte&gt; * int -&gt; string&#xA;override this.GetString : nativeptr&lt;byte&gt; * int -&gt; string" Usage="metadataStringDecoder.GetString (bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.0.22.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Pointer to bytes to decode.</param>
        <param name="byteCount">Number of bytes to decode.</param>
        <summary>Obtains strings for byte sequences in metadata. Override this to cache strings if required. Otherwise, it is implemented by forwarding straight to <see cref="P:System.Reflection.Metadata.MetadataStringDecoder.Encoding" /> and every call will allocate a new string.</summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
