<Type Name="TypeName" FullName="System.Reflection.Metadata.TypeName">
  <TypeSignature Language="C#" Value="public sealed class TypeName" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TypeName extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.TypeName" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeName" />
  <TypeSignature Language="F#" Value="type TypeName = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeName sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{AssemblyQualifiedName}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{AssemblyQualifiedName}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.AssemblyNameInfo? AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Metadata.AssemblyNameInfo AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As AssemblyNameInfo" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : System.Reflection.Metadata.AssemblyNameInfo" Usage="System.Reflection.Metadata.TypeName.AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Metadata::AssemblyNameInfo ^ AssemblyName { System::Reflection::Metadata::AssemblyNameInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.AssemblyNameInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Returns assembly name that contains this type, or <see langword="null" /> if this <see cref="T:System.Reflection.Metadata.TypeName" /> was not</para>
          <para>created from a fully qualified name.</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Reflection.Metadata.TypeName.AssemblyQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the assembly-qualified name of the type; for example, "System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089".</summary>
        <value>To be added.</value>
        <remarks>If <see cref="P:System.Reflection.Metadata.TypeName.AssemblyName" /> returns <see langword="null" />, simply returns <see cref="P:System.Reflection.Metadata.TypeName.FullName" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.TypeName DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Metadata.TypeName DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As TypeName" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : System.Reflection.Metadata.TypeName" Usage="System.Reflection.Metadata.TypeName.DeclaringType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Metadata::TypeName ^ DeclaringType { System::Reflection::Metadata::TypeName ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.TypeName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>If this type is a nested type (see <see cref="P:System.Reflection.Metadata.TypeName.IsNested" />), gets</para>
          <para>the declaring type. If this type is not a nested type, throws.</para>
        </summary>
        <value>To be added.</value>
        <remarks>For example, given "Namespace.Declaring+Nested", this property unwraps the outermost type and returns "Namespace.Declaring".</remarks>
        <exception cref="T:System.InvalidOperationException">The current type is not a nested type.</exception>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.Metadata.TypeName.FullName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the full name of this type, including namespace, but without the assembly name; for example, "System.Int32".</para>
          <para>Nested types are represented with a '+'; for example, "MyNamespace.MyType+NestedType".</para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>For constructed generic types, the type arguments will be listed using their fully qualified</para>
          <para>names. For example, given "List&lt;int&gt;", the <see cref="P:System.Reflection.Metadata.TypeName.FullName" /> property will return</para>
          <para>"System.Collections.Generic.List`1[[System.Int32, mscorlib, ...]]".</para>
          <para>For open generic types, the convention is to use a backtick ("`") followed by</para>
          <para>the arity of the generic type. For example, given "Dictionary&lt;,&gt;", the <see cref="P:System.Reflection.Metadata.TypeName.FullName" /></para>
          <para>property will return "System.Collections.Generic.Dictionary`2". Given "Dictionary&lt;,&gt;.Enumerator",</para>
          <para>the <see cref="P:System.Reflection.Metadata.TypeName.FullName" /> property will return "System.Collections.Generic.Dictionary`2+Enumerator".</para>
          <para>See ECMA-335, Sec. I.10.7.2 (Type names and arity encoding) for more information.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArrayRank () As Integer" />
      <MemberSignature Language="F#" Value="member this.GetArrayRank : unit -&gt; int" Usage="typeName.GetArrayRank " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetArrayRank();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the number of dimensions in an array.</summary>
        <returns>An integer that contains the number of dimensions in the current type.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The current type is not an array.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.TypeName GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.TypeName GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementType () As TypeName" />
      <MemberSignature Language="F#" Value="member this.GetElementType : unit -&gt; System.Reflection.Metadata.TypeName" Usage="typeName.GetElementType " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::TypeName ^ GetElementType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.TypeName</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the TypeName of the object encompassed or referred to by the current array, pointer, or reference type.</summary>
        <returns>To be added.</returns>
        <remarks>For example, given "int[][]", unwraps the outermost array and returns "int[]".</remarks>
        <exception cref="T:System.InvalidOperationException">The current type is not an array, pointer or reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;System.Reflection.Metadata.TypeName&gt; GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class System.Reflection.Metadata.TypeName&gt; GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGenericArguments () As ImmutableArray(Of TypeName)" />
      <MemberSignature Language="F#" Value="member this.GetGenericArguments : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;System.Reflection.Metadata.TypeName&gt;" Usage="typeName.GetGenericArguments " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;System::Reflection::Metadata::TypeName ^&gt; GetGenericArguments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Reflection.Metadata.TypeName&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>If this <see cref="T:System.Reflection.Metadata.TypeName" /> represents a constructed generic type, returns an array</para>
          <para>of all the generic arguments. Otherwise it returns an empty array.</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>For example, given "Dictionary&lt;string, int&gt;", returns a 2-element array containing</para>
          <para>string and int.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.TypeName GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.TypeName GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGenericTypeDefinition () As TypeName" />
      <MemberSignature Language="F#" Value="member this.GetGenericTypeDefinition : unit -&gt; System.Reflection.Metadata.TypeName" Usage="typeName.GetGenericTypeDefinition " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::TypeName ^ GetGenericTypeDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.TypeName</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a TypeName object that represents a generic type name definition from which the current generic type name can be constructed.</summary>
        <returns>To be added.</returns>
        <remarks>Given "Dictionary&lt;string, int&gt;", this method returns the generic type definition "Dictionary&lt;,&gt;".</remarks>
        <exception cref="T:System.InvalidOperationException">The current type is not a generic type.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeCount">
      <MemberSignature Language="C#" Value="public int GetNodeCount ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetNodeCount() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.GetNodeCount" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNodeCount () As Integer" />
      <MemberSignature Language="F#" Value="member this.GetNodeCount : unit -&gt; int" Usage="typeName.GetNodeCount " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNodeCount();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Gets the total number of <see cref="T:System.Reflection.Metadata.TypeName" /> instances that are used to describe</para>
          <para>this instance, including any generic arguments or underlying types.</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This value is computed every time this method gets called, it's not cached.</para>
          <para>There's not really a parallel concept to this in reflection. Think of it</para>
          <para>as the total number of <see cref="T:System.Reflection.Metadata.TypeName" /> instances that would be created if</para>
          <para>you were to totally deconstruct this instance and visit each intermediate <see cref="T:System.Reflection.Metadata.TypeName" /></para>
          <para>that occurs as part of deconstruction.</para>
          <para>"int" and "Person" each have complexities of 1 because they're standalone types.</para>
          <para>"int[]" has a node count of 2 because to fully inspect it involves inspecting the</para>
          <para>array type itself, <em>plus</em> unwrapping the underlying type ("int") and inspecting that.</para>
          <para>"Dictionary&lt;string, List&lt;int[][]&gt;&gt;" has node count 8 because fully visiting it</para>
          <para>involves inspecting 8 <see cref="T:System.Reflection.Metadata.TypeName" /> instances total:</para>
          <para>
            <list type="bullet">
              <item>Dictionary&lt;string, List&lt;int[][]&gt;&gt; (the original type)</item>
              <item>Dictionary`2 (the generic type definition)</item>
              <item>string (a type argument of Dictionary)</item>
              <item>List&lt;int[][]&gt; (a type argument of Dictionary)</item>
              <item>List`1 (the generic type definition)</item>
              <item>int[][] (a type argument of List)</item>
              <item>int[] (the underlying type of int[][])</item>
              <item>int (the underlying type of int[])</item>
            </list>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Reflection.Metadata.TypeName.IsArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets a value that indicates whether this type represents any kind of array, regardless of the array's</para>
          <para>rank or its bounds.</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Reflection.Metadata.TypeName.IsByRef" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets a value that indicates whether this is a managed pointer type (for example, "ref int").</para>
          <para>Managed pointer types are sometimes called byref types (<see cref="P:System.Type.IsByRef" />).</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Reflection.Metadata.TypeName.IsConstructedGenericType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConstructedGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this type represents a constructed generic type (for example, "List&lt;int&gt;").</summary>
        <value>To be added.</value>
        <remarks>Returns <see langword="false" /> for open generic types (for example, "Dictionary&lt;,&gt;").</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.IsNested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNested As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNested : bool" Usage="System.Reflection.Metadata.TypeName.IsNested" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNested { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets a value that indicates whether this is a nested type (for example, "Namespace.Declaring+Nested").</para>
          <para>For nested types <see cref="P:System.Reflection.Metadata.TypeName.DeclaringType" /> returns their declaring type.</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Reflection.Metadata.TypeName.IsPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets a value that indicates whether this type represents an unmanaged pointer (for example, "int*" or "void*").</para>
          <para>Unmanaged pointer types are often just called pointers (<see cref="P:System.Type.IsPointer" />).</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSimple">
      <MemberSignature Language="C#" Value="public bool IsSimple { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSimple" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.IsSimple" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSimple As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSimple : bool" Usage="System.Reflection.Metadata.TypeName.IsSimple" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSimple { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets a value that indicates whether this is a "plain" type; that is, not an array, not a pointer, not a reference, and</para>
          <para>not a constructed generic type. Examples of elemental types are "System.Int32",</para>
          <para>"System.Uri", and "YourNamespace.YourClass".</para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>This property returning <see langword="true" /> doesn't mean that the type is a primitive like string</para>
          <para>or int; it just means that there's no underlying type.</para>
          <para>This property will return <see langword="true" /> for generic type definitions (for example, "Dictionary&lt;,&gt;").</para>
          <para>This is because determining whether a type truly is a generic type requires loading the type</para>
          <para>and performing a runtime check.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Reflection.Metadata.TypeName.IsSZArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSZArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this type represents a single-dimensional, zero-indexed array (for example, "int[]").</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArrayType">
      <MemberSignature Language="C#" Value="public bool IsVariableBoundArrayType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArrayType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.IsVariableBoundArrayType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVariableBoundArrayType As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArrayType : bool" Usage="System.Reflection.Metadata.TypeName.IsVariableBoundArrayType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVariableBoundArrayType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets a value that indicates whether this type represents a variable-bound array; that is, an array of rank greater</para>
          <para>than 1 (for example, "int[,]") or a single-dimensional array that isn't necessarily zero-indexed.</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeArrayTypeName">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.TypeName MakeArrayTypeName (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.TypeName MakeArrayTypeName(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.MakeArrayTypeName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MakeArrayTypeName (rank As Integer) As TypeName" />
      <MemberSignature Language="F#" Value="member this.MakeArrayTypeName : int -&gt; System.Reflection.Metadata.TypeName" Usage="typeName.MakeArrayTypeName rank" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::TypeName ^ MakeArrayTypeName(int rank);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.TypeName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeByRefTypeName">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.TypeName MakeByRefTypeName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.TypeName MakeByRefTypeName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.MakeByRefTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Function MakeByRefTypeName () As TypeName" />
      <MemberSignature Language="F#" Value="member this.MakeByRefTypeName : unit -&gt; System.Reflection.Metadata.TypeName" Usage="typeName.MakeByRefTypeName " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::TypeName ^ MakeByRefTypeName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.TypeName</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericTypeName">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.TypeName MakeGenericTypeName (System.Collections.Immutable.ImmutableArray&lt;System.Reflection.Metadata.TypeName&gt; typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.TypeName MakeGenericTypeName(valuetype System.Collections.Immutable.ImmutableArray`1&lt;class System.Reflection.Metadata.TypeName&gt; typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.MakeGenericTypeName(System.Collections.Immutable.ImmutableArray{System.Reflection.Metadata.TypeName})" />
      <MemberSignature Language="VB.NET" Value="Public Function MakeGenericTypeName (typeArguments As ImmutableArray(Of TypeName)) As TypeName" />
      <MemberSignature Language="F#" Value="member this.MakeGenericTypeName : System.Collections.Immutable.ImmutableArray&lt;System.Reflection.Metadata.TypeName&gt; -&gt; System.Reflection.Metadata.TypeName" Usage="typeName.MakeGenericTypeName typeArguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::TypeName ^ MakeGenericTypeName(System::Collections::Immutable::ImmutableArray&lt;System::Reflection::Metadata::TypeName ^&gt; typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.TypeName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Collections.Immutable.ImmutableArray&lt;System.Reflection.Metadata.TypeName&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakePointerTypeName">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.TypeName MakePointerTypeName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.TypeName MakePointerTypeName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.MakePointerTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Function MakePointerTypeName () As TypeName" />
      <MemberSignature Language="F#" Value="member this.MakePointerTypeName : unit -&gt; System.Reflection.Metadata.TypeName" Usage="typeName.MakePointerTypeName " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::TypeName ^ MakePointerTypeName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.TypeName</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeSZArrayTypeName">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.TypeName MakeSZArrayTypeName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.TypeName MakeSZArrayTypeName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.MakeSZArrayTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Function MakeSZArrayTypeName () As TypeName" />
      <MemberSignature Language="F#" Value="member this.MakeSZArrayTypeName : unit -&gt; System.Reflection.Metadata.TypeName" Usage="typeName.MakeSZArrayTypeName " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::TypeName ^ MakeSZArrayTypeName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.TypeName</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.TypeName.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Metadata.TypeName.Name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the name of this type, without the namespace and the assembly name; for example, "Int32".</para>
          <para>Nested types are represented without a '+'; for example, "MyNamespace.MyType+NestedType" is just "NestedType".</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.TypeName Parse (ReadOnlySpan&lt;char&gt; typeName, System.Reflection.Metadata.TypeNameParseOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.TypeName Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; typeName, class System.Reflection.Metadata.TypeNameParseOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.Parse(System.ReadOnlySpan{System.Char},System.Reflection.Metadata.TypeNameParseOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (typeName As ReadOnlySpan(Of Char), Optional options As TypeNameParseOptions = Nothing) As TypeName" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Reflection.Metadata.TypeNameParseOptions -&gt; System.Reflection.Metadata.TypeName" Usage="System.Reflection.Metadata.TypeName.Parse (typeName, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.TypeName</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="options" Type="System.Reflection.Metadata.TypeNameParseOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeName">A span containing the characters representing the type name to parse.</param>
        <param name="options">An object that describes optional <see cref="T:System.Reflection.Metadata.TypeNameParseOptions" /> parameters to use.</param>
        <summary>Parses a span of characters into a type name.</summary>
        <returns>Parsed type name.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Provided type name was invalid.</exception>
        <exception cref="T:System.InvalidOperationException">Parsing has exceeded the limit set by <see cref="P:System.Reflection.Metadata.TypeNameParseOptions.MaxNodes" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; typeName, out System.Reflection.Metadata.TypeName? result, System.Reflection.Metadata.TypeNameParseOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; typeName, [out] class System.Reflection.Metadata.TypeName&amp; result, class System.Reflection.Metadata.TypeNameParseOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.TryParse(System.ReadOnlySpan{System.Char},System.Reflection.Metadata.TypeName@,System.Reflection.Metadata.TypeNameParseOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (typeName As ReadOnlySpan(Of Char), ByRef result As TypeName, Optional options As TypeNameParseOptions = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * TypeName * System.Reflection.Metadata.TypeNameParseOptions -&gt; bool" Usage="System.Reflection.Metadata.TypeName.TryParse (typeName, result, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.ReadOnlySpan&lt;System.Char&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="result" Type="System.Reflection.Metadata.TypeName" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Reflection.Metadata.TypeNameParseOptions" />
      </Parameters>
      <Docs>
        <param name="typeName">A span containing the characters representing the type name to parse.</param>
        <param name="result">Contains the result when parsing succeeds.</param>
        <param name="options">An object that describes optional <see cref="T:System.Reflection.Metadata.TypeNameParseOptions" /> parameters to use.</param>
        <summary>Tries to parse a span of characters into a type name.</summary>
        <returns>
          <see langword="true" /> if type name was converted successfully, otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.TypeName WithAssemblyName (System.Reflection.Metadata.AssemblyNameInfo? assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.TypeName WithAssemblyName(class System.Reflection.Metadata.AssemblyNameInfo assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.TypeName.WithAssemblyName(System.Reflection.Metadata.AssemblyNameInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAssemblyName (assemblyName As AssemblyNameInfo) As TypeName" />
      <MemberSignature Language="F#" Value="member this.WithAssemblyName : System.Reflection.Metadata.AssemblyNameInfo -&gt; System.Reflection.Metadata.TypeName" Usage="typeName.WithAssemblyName assemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::TypeName ^ WithAssemblyName(System::Reflection::Metadata::AssemblyNameInfo ^ assemblyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.TypeName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.Metadata.AssemblyNameInfo">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
