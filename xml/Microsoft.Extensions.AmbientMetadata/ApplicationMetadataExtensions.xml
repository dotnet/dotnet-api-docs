<Type Name="ApplicationMetadataExtensions" FullName="Microsoft.Extensions.AmbientMetadata.ApplicationMetadataExtensions">
  <TypeSignature Language="C#" Value="public static class ApplicationMetadataExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ApplicationMetadataExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AmbientMetadata.ApplicationMetadataExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ApplicationMetadataExtensions" />
  <TypeSignature Language="F#" Value="type ApplicationMetadataExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationMetadataExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AmbientMetadata.Application</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions for application metadata.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddApplicationMetadata">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddApplicationMetadata (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfigurationSection section);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddApplicationMetadata(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Extensions.Configuration.IConfigurationSection section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AmbientMetadata.ApplicationMetadataExtensions.AddApplicationMetadata(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationSection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddApplicationMetadata (services As IServiceCollection, section As IConfigurationSection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddApplicationMetadata : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.Configuration.IConfigurationSection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.AmbientMetadata.ApplicationMetadataExtensions.AddApplicationMetadata (services, section)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddApplicationMetadata(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Microsoft::Extensions::Configuration::IConfigurationSection ^ section);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AmbientMetadata.Application</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.AmbientMetadata.ApplicationMetadata))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.AmbientMetadata.ApplicationMetadata))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed with [DynamicDependency]")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed with [DynamicDependency]")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfigurationSection" />
      </Parameters>
      <Docs>
        <param name="services">The dependency injection container to add the instance to.</param>
        <param name="section">The configuration section to bind.</param>
        <summary>
            Adds an instance of <see cref="T:Microsoft.Extensions.AmbientMetadata.ApplicationMetadata" /> to a dependency injection container.
            </summary>
        <returns>The value of <paramref name="services" />&gt;.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="section" /> or <paramref name="section" /> are <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddApplicationMetadata">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddApplicationMetadata (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.AmbientMetadata.ApplicationMetadata&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddApplicationMetadata(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.AmbientMetadata.ApplicationMetadata&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AmbientMetadata.ApplicationMetadataExtensions.AddApplicationMetadata(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.AmbientMetadata.ApplicationMetadata})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddApplicationMetadata (services As IServiceCollection, configure As Action(Of ApplicationMetadata)) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddApplicationMetadata : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Extensions.AmbientMetadata.ApplicationMetadata&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.AmbientMetadata.ApplicationMetadataExtensions.AddApplicationMetadata (services, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddApplicationMetadata(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Action&lt;Microsoft::Extensions::AmbientMetadata::ApplicationMetadata ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AmbientMetadata.Application</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.AmbientMetadata.ApplicationMetadata&gt;" />
      </Parameters>
      <Docs>
        <param name="services">The dependency injection container to add the instance to.</param>
        <param name="configure">The delegate to configure <see cref="T:Microsoft.Extensions.AmbientMetadata.ApplicationMetadata" /> with.</param>
        <summary>
            Adds an instance of <see cref="T:Microsoft.Extensions.AmbientMetadata.ApplicationMetadata" /> to a dependency injection container.
            </summary>
        <returns>The value of <paramref name="services" />&gt;.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="services" /> or <paramref name="configure" /> are <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddApplicationMetadata">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddApplicationMetadata (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Microsoft.Extensions.Hosting.IHostEnvironment hostEnvironment, string sectionName = &quot;ambientmetadata:application&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddApplicationMetadata(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class Microsoft.Extensions.Hosting.IHostEnvironment hostEnvironment, string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AmbientMetadata.ApplicationMetadataExtensions.AddApplicationMetadata(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddApplicationMetadata (builder As IConfigurationBuilder, hostEnvironment As IHostEnvironment, Optional sectionName As String = &quot;ambientmetadata:application&quot;) As IConfigurationBuilder" />
      <MemberSignature Language="F#" Value="static member AddApplicationMetadata : Microsoft.Extensions.Configuration.IConfigurationBuilder * Microsoft.Extensions.Hosting.IHostEnvironment * string -&gt; Microsoft.Extensions.Configuration.IConfigurationBuilder" Usage="Microsoft.Extensions.AmbientMetadata.ApplicationMetadataExtensions.AddApplicationMetadata (builder, hostEnvironment, sectionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AmbientMetadata.Application</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
        <Parameter Name="hostEnvironment" Type="Microsoft.Extensions.Hosting.IHostEnvironment" />
        <Parameter Name="sectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder">The configuration builder.</param>
        <param name="hostEnvironment">An instance of <see cref="T:Microsoft.Extensions.Hosting.IHostEnvironment" />.</param>
        <param name="sectionName">Section name to save configuration into. Default set to "ambientmetadata:application".</param>
        <summary>
            Registers a configuration provider for application metadata.
            </summary>
        <returns>The value of <paramref name="builder" />&gt;.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="builder" /> or <paramref name="hostEnvironment" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">If <paramref name="sectionName" /> is either <see langword="null" />, empty or whitespace.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseApplicationMetadata">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder UseApplicationMetadata (this Microsoft.Extensions.Hosting.IHostBuilder builder, string sectionName = &quot;ambientmetadata:application&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder UseApplicationMetadata(class Microsoft.Extensions.Hosting.IHostBuilder builder, string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AmbientMetadata.ApplicationMetadataExtensions.UseApplicationMetadata(Microsoft.Extensions.Hosting.IHostBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseApplicationMetadata (builder As IHostBuilder, Optional sectionName As String = &quot;ambientmetadata:application&quot;) As IHostBuilder" />
      <MemberSignature Language="F#" Value="static member UseApplicationMetadata : Microsoft.Extensions.Hosting.IHostBuilder * string -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.AmbientMetadata.ApplicationMetadataExtensions.UseApplicationMetadata (builder, sectionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AmbientMetadata.Application</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.AmbientMetadata.ApplicationMetadata))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.AmbientMetadata.ApplicationMetadata))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed with [DynamicDependency]")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed with [DynamicDependency]")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
        <Parameter Name="sectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder">The host builder.</param>
        <param name="sectionName">Section name to bind configuration from. Default set to "ambientmetadata:application".</param>
        <summary>
            Registers a configuration provider for application metadata and binds a model object onto the configuration.
            </summary>
        <returns>The value of <paramref name="builder" />&gt;.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="builder" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">If <paramref name="sectionName" /> is either <see langword="null" />, empty or whitespace.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
