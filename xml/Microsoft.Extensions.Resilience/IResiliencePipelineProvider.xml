<Type Name="IResiliencePipelineProvider" FullName="Microsoft.Extensions.Resilience.IResiliencePipelineProvider">
  <TypeSignature Language="C#" Value="public interface IResiliencePipelineProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IResiliencePipelineProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Resilience.IResiliencePipelineProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IResiliencePipelineProvider" />
  <TypeSignature Language="F#" Value="type IResiliencePipelineProvider = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IResiliencePipelineProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            The resilience pipeline provider creates and caches pipeline instances that are configured using <see cref="T:Microsoft.Extensions.Resilience.IResiliencePipelineBuilder`1" />.
            </summary>
    <remarks>
            Use this interface to create instances of both generic and non-generic resilience pipelines.
            </remarks>
    <altmember cref="T:Microsoft.Extensions.Resilience.IResiliencePipelineBuilder`1" />
    <altmember cref="T:Polly.IAsyncPolicy`1" />
    <altmember cref="T:Polly.IAsyncPolicy" />
  </Docs>
  <Members>
    <Member MemberName="GetPipeline&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public Polly.IAsyncPolicy&lt;TResult&gt; GetPipeline&lt;TResult&gt; (string pipelineName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Polly.IAsyncPolicy`1&lt;!!TResult&gt; GetPipeline&lt;TResult&gt;(string pipelineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Resilience.IResiliencePipelineProvider.GetPipeline``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPipeline(Of TResult) (pipelineName As String) As IAsyncPolicy(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member GetPipeline : string -&gt; Polly.IAsyncPolicy&lt;'Result&gt;" Usage="iResiliencePipelineProvider.GetPipeline pipelineName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Polly::IAsyncPolicy&lt;TResult&gt; ^ GetPipeline(System::String ^ pipelineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Polly.IAsyncPolicy&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="pipelineName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the result returned by the action executed by the policies.</typeparam>
        <param name="pipelineName">A pipeline name.</param>
        <summary>Gets the pipeline instance.</summary>
        <returns>The pipeline instance.</returns>
        <remarks>
            Make sure that the pipeline identified by <paramref name="pipelineName" /> is configured, otherwise the provider won't be able to create
            it and throws an error.
            </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="pipelineName" /> cannot be an empty string.</exception>
        <exception cref="T:Microsoft.Extensions.Options.OptionsValidationException">The pipeline identified by <paramref name="pipelineName" /> is invalid or not configured.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPipeline&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public Polly.IAsyncPolicy&lt;TResult&gt; GetPipeline&lt;TResult&gt; (string pipelineName, string pipelineKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Polly.IAsyncPolicy`1&lt;!!TResult&gt; GetPipeline&lt;TResult&gt;(string pipelineName, string pipelineKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Resilience.IResiliencePipelineProvider.GetPipeline``1(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPipeline(Of TResult) (pipelineName As String, pipelineKey As String) As IAsyncPolicy(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member GetPipeline : string * string -&gt; Polly.IAsyncPolicy&lt;'Result&gt;" Usage="iResiliencePipelineProvider.GetPipeline (pipelineName, pipelineKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Polly::IAsyncPolicy&lt;TResult&gt; ^ GetPipeline(System::String ^ pipelineName, System::String ^ pipelineKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Polly.IAsyncPolicy&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="pipelineName" Type="System.String" />
        <Parameter Name="pipelineKey" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the result returned by the action executed by the policies.</typeparam>
        <param name="pipelineName">A pipeline name.</param>
        <param name="pipelineKey">The pipeline key associated with a cached instance of a <paramref name="pipelineName" /> pipeline.</param>
        <summary>Gets a <paramref name="pipelineName" /> pipeline instance cached by <paramref name="pipelineKey" />. If the target pipeline is not cached yet,
            the provider creates and caches it and then returns the instance.</summary>
        <returns>The pipeline instance.</returns>
        <remarks>
            This method enables to have multiple instances of the same <paramref name="pipelineName" /> pipeline that are cached by the <paramref name="pipelineKey" />.
            Make sure that the pipeline identified by <paramref name="pipelineName" /> is configured, otherwise the provider won't be able to create
            it and throws an error.
            </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="pipelineName" /> cannot be an empty string.</exception>
        <exception cref="T:Microsoft.Extensions.Options.OptionsValidationException">The pipeline identified by <paramref name="pipelineName" /> is invalid or not configured.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
