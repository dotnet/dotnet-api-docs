<Type Name="IAlternateEqualityComparer&lt;TAlternate,T&gt;" FullName="System.Collections.Generic.IAlternateEqualityComparer&lt;TAlternate,T&gt;">
  <TypeSignature Language="C#" Value="public interface IAlternateEqualityComparer&lt;in TAlternate,T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IAlternateEqualityComparer`2&lt;- TAlternate, T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IAlternateEqualityComparer`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAlternateEqualityComparer(Of In TAlternate, T)" />
  <TypeSignature Language="F#" Value="type IAlternateEqualityComparer&lt;'Alternate, 'T&gt; = interface" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TAlternate, typename T&gt;&#xA;public interface class IAlternateEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TAlternate">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TAlternate">The alternate type to compare.</typeparam>
    <typeparam name="T">The type to compare.</typeparam>
    <summary>Implemented by an <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to support comparing a <typeparamref name="TAlternate" /> instance with a <typeparamref name="T" /> instance.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public T Create (TAlternate alternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T Create(!TAlternate alternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IAlternateEqualityComparer`2.Create(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Create (alternate As TAlternate) As T" />
      <MemberSignature Language="F#" Value="abstract member Create : 'Alternate -&gt; 'T" Usage="iAlternateEqualityComparer.Create alternate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternate" Type="TAlternate" />
      </Parameters>
      <Docs>
        <param name="alternate">The instance of type <typeparamref name="TAlternate" /> for which an equal <typeparamref name="T" /> is required.</param>
        <summary>Creates a <typeparamref name="T" /> that is considered by <see cref="M:System.Collections.Generic.IAlternateEqualityComparer`2.Equals(`0,`1)" /> to be equal to the specified <paramref name="alternate" />.</summary>
        <returns>A <typeparamref name="T" /> considered equal to the specified <paramref name="alternate" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TAlternate alternate, T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!TAlternate alternate, !T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IAlternateEqualityComparer`2.Equals(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (alternate As TAlternate, other As T) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'Alternate * 'T -&gt; bool" Usage="iAlternateEqualityComparer.Equals (alternate, other)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternate" Type="TAlternate" />
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="alternate">The instance of type <typeparamref name="TAlternate" /> to compare.</param>
        <param name="other">The instance of type <typeparamref name="T" /> to compare.</param>
        <summary>Determines whether the specified <paramref name="alternate" /> equals the specified <paramref name="other" />.</summary>
        <returns>
          <see langword="true" /> if the specified instances are equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (TAlternate alternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(!TAlternate alternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IAlternateEqualityComparer`2.GetHashCode(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (alternate As TAlternate) As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : 'Alternate -&gt; int" Usage="iAlternateEqualityComparer.GetHashCode alternate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternate" Type="TAlternate" />
      </Parameters>
      <Docs>
        <param name="alternate">The instance of type <typeparamref name="TAlternate" /> for which to get a hash code.</param>
        <summary>Returns a hash code for the specified alternate instance.</summary>
        <returns>A hash code for the specified instance.</returns>
        <remarks>This interface is intended to be implemented on a type that also implements <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
 The result of this method should return the same hash code as would invoking the <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" /> method on any <typeparamref name="T" /> for which <see cref="M:System.Collections.Generic.IAlternateEqualityComparer`2.Equals(`0,`1)" /> returns <see langword="true" />.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
