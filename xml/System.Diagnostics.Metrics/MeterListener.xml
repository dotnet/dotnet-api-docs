<Type Name="MeterListener" FullName="System.Diagnostics.Metrics.MeterListener">
  <TypeSignature Language="C#" Value="public sealed class MeterListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MeterListener extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Metrics.MeterListener" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MeterListener&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type MeterListener = class&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MeterListener sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>The MeterListener is class used to listen to the metrics instrument measurements recording.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MeterListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Metrics.MeterListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MeterListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Metrics.MeterListener" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableMeasurementEvents">
      <MemberSignature Language="C#" Value="public object? DisableMeasurementEvents (System.Diagnostics.Metrics.Instrument instrument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DisableMeasurementEvents(class System.Diagnostics.Metrics.Instrument instrument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Metrics.MeterListener.DisableMeasurementEvents(System.Diagnostics.Metrics.Instrument)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableMeasurementEvents (instrument As Instrument) As Object" />
      <MemberSignature Language="F#" Value="member this.DisableMeasurementEvents : System.Diagnostics.Metrics.Instrument -&gt; obj" Usage="meterListener.DisableMeasurementEvents instrument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DisableMeasurementEvents(System::Diagnostics::Metrics::Instrument ^ instrument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instrument" Type="System.Diagnostics.Metrics.Instrument" />
      </Parameters>
      <Docs>
        <param name="instrument">The instrument to stop listening to.</param>
        <summary>Stops listening to a specific instrument measurement recording.</summary>
        <returns>The state object originally passed to <see cref="M:System.Diagnostics.Metrics.MeterListener.EnableMeasurementEvents(System.Diagnostics.Metrics.Instrument,System.Object)" /> method.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Metrics.MeterListener.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="meterListener.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the listeners which will stop it from listening to any instrument.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableMeasurementEvents">
      <MemberSignature Language="C#" Value="public void EnableMeasurementEvents (System.Diagnostics.Metrics.Instrument instrument, object? state = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableMeasurementEvents(class System.Diagnostics.Metrics.Instrument instrument, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Metrics.MeterListener.EnableMeasurementEvents(System.Diagnostics.Metrics.Instrument,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnableMeasurementEvents (instrument As Instrument, Optional state As Object = Nothing)" />
      <MemberSignature Language="F#" Value="member this.EnableMeasurementEvents : System.Diagnostics.Metrics.Instrument * obj -&gt; unit" Usage="meterListener.EnableMeasurementEvents (instrument, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instrument" Type="System.Diagnostics.Metrics.Instrument" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instrument">The instrument to listen to.</param>
        <param name="state">A state object that will be passed back to the callback getting measurements events.</param>
        <summary>Starts listening to a specific instrument measurement recording.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstrumentPublished">
      <MemberSignature Language="C#" Value="public Action&lt;System.Diagnostics.Metrics.Instrument,System.Diagnostics.Metrics.MeterListener&gt;? InstrumentPublished { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`2&lt;class System.Diagnostics.Metrics.Instrument, class System.Diagnostics.Metrics.MeterListener&gt; InstrumentPublished" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Metrics.MeterListener.InstrumentPublished" />
      <MemberSignature Language="VB.NET" Value="Public Property InstrumentPublished As Action(Of Instrument, MeterListener)" />
      <MemberSignature Language="F#" Value="member this.InstrumentPublished : Action&lt;System.Diagnostics.Metrics.Instrument, System.Diagnostics.Metrics.MeterListener&gt; with get, set" Usage="System.Diagnostics.Metrics.MeterListener.InstrumentPublished" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Action&lt;System::Diagnostics::Metrics::Instrument ^, System::Diagnostics::Metrics::MeterListener ^&gt; ^ InstrumentPublished { Action&lt;System::Diagnostics::Metrics::Instrument ^, System::Diagnostics::Metrics::MeterListener ^&gt; ^ get(); void set(Action&lt;System::Diagnostics::Metrics::Instrument ^, System::Diagnostics::Metrics::MeterListener ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Diagnostics.Metrics.Instrument,System.Diagnostics.Metrics.MeterListener&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the callback to get notified when an instrument is published.</summary>
        <value>The callback to get notified when an instrument is published.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasurementsCompleted">
      <MemberSignature Language="C#" Value="public Action&lt;System.Diagnostics.Metrics.Instrument,object?&gt;? MeasurementsCompleted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`2&lt;class System.Diagnostics.Metrics.Instrument, object&gt; MeasurementsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Metrics.MeterListener.MeasurementsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Property MeasurementsCompleted As Action(Of Instrument, Object)" />
      <MemberSignature Language="F#" Value="member this.MeasurementsCompleted : Action&lt;System.Diagnostics.Metrics.Instrument, obj&gt; with get, set" Usage="System.Diagnostics.Metrics.MeterListener.MeasurementsCompleted" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Action&lt;System::Diagnostics::Metrics::Instrument ^, System::Object ^&gt; ^ MeasurementsCompleted { Action&lt;System::Diagnostics::Metrics::Instrument ^, System::Object ^&gt; ^ get(); void set(Action&lt;System::Diagnostics::Metrics::Instrument ^, System::Object ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Diagnostics.Metrics.Instrument,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the callback to get notified when the measurement is stopped on some instrument.
            This can happen when the Meter or the Listener is disposed or calling <see cref="M:System.Diagnostics.Metrics.MeterListener.Dispose" /> on the listener.</summary>
        <value>The callback to get notified when the measurement is stopped on some instrument.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecordObservableInstruments">
      <MemberSignature Language="C#" Value="public void RecordObservableInstruments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecordObservableInstruments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Metrics.MeterListener.RecordObservableInstruments" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecordObservableInstruments ()" />
      <MemberSignature Language="F#" Value="member this.RecordObservableInstruments : unit -&gt; unit" Usage="meterListener.RecordObservableInstruments " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecordObservableInstruments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calls all Observable instruments that the listener is listening to, and calls <see cref="M:System.Diagnostics.Metrics.MeterListener.SetMeasurementEventCallback``1(System.Diagnostics.Metrics.MeasurementCallback{``0})" /> with every collected measurement.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMeasurementEventCallback&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void SetMeasurementEventCallback&lt;T&gt; (System.Diagnostics.Metrics.MeasurementCallback&lt;T&gt;? measurementCallback) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMeasurementEventCallback&lt;struct .ctor (class System.ValueType) T&gt;(class System.Diagnostics.Metrics.MeasurementCallback`1&lt;!!T&gt; measurementCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Metrics.MeterListener.SetMeasurementEventCallback``1(System.Diagnostics.Metrics.MeasurementCallback{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetMeasurementEventCallback(Of T As Structure) (measurementCallback As MeasurementCallback(Of T))" />
      <MemberSignature Language="F#" Value="member this.SetMeasurementEventCallback : System.Diagnostics.Metrics.MeasurementCallback&lt;'T (requires 'T : struct)&gt; -&gt; unit (requires 'T : struct)" Usage="meterListener.SetMeasurementEventCallback measurementCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class void SetMeasurementEventCallback(System::Diagnostics::Metrics::MeasurementCallback&lt;T&gt; ^ measurementCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="measurementCallback" Type="System.Diagnostics.Metrics.MeasurementCallback&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the numeric measurement.</typeparam>
        <param name="measurementCallback">The callback which can be used to get measurement recording of numeric type T.</param>
        <summary>Sets a callback for a specific numeric type to get the measurement recording notification from all instruments which enabled listening and was created with the same specified numeric type.
            If a measurement of type T is recorded and a callback of type T is registered, that callback will be used.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Metrics.MeterListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="meterListener.Start " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enables the listener to start listening to instruments measurement recording.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
