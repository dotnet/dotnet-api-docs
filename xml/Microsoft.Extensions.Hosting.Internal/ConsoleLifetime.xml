<Type Name="ConsoleLifetime" FullName="Microsoft.Extensions.Hosting.Internal.ConsoleLifetime">
  <TypeSignature Language="C#" Value="public class ConsoleLifetime : IDisposable, Microsoft.Extensions.Hosting.IHostLifetime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleLifetime extends System.Object implements class Microsoft.Extensions.Hosting.IHostLifetime, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleLifetime&#xA;Implements IDisposable, IHostLifetime" />
  <TypeSignature Language="F#" Value="type ConsoleLifetime = class&#xA;    interface IHostLifetime&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleLifetime : IDisposable, Microsoft::Extensions::Hosting::IHostLifetime" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Hosting.IHostLifetime</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("android")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("android")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("browser")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("browser")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("ios")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("ios")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("tvos")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("tvos")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Listens for Ctrl+C or SIGTERM and initiates shutdown.
            </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

This API supports the .NET infrastructure and is not intended to be used directly from your code.

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleLifetime (Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; options, Microsoft.Extensions.Hosting.IHostEnvironment environment, Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime, Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.HostOptions&gt; hostOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; options, class Microsoft.Extensions.Hosting.IHostEnvironment environment, class Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime, class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.Extensions.Hosting.HostOptions&gt; hostOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.ConsoleLifetimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.HostOptions})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As IOptions(Of ConsoleLifetimeOptions), environment As IHostEnvironment, applicationLifetime As IHostApplicationLifetime, hostOptions As IOptions(Of HostOptions))" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Hosting.Internal.ConsoleLifetime : Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; * Microsoft.Extensions.Hosting.IHostEnvironment * Microsoft.Extensions.Hosting.IHostApplicationLifetime * Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.HostOptions&gt; -&gt; Microsoft.Extensions.Hosting.Internal.ConsoleLifetime" Usage="new Microsoft.Extensions.Hosting.Internal.ConsoleLifetime (options, environment, applicationLifetime, hostOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleLifetime(Microsoft::Extensions::Options::IOptions&lt;Microsoft::Extensions::Hosting::ConsoleLifetimeOptions ^&gt; ^ options, Microsoft::Extensions::Hosting::IHostEnvironment ^ environment, Microsoft::Extensions::Hosting::IHostApplicationLifetime ^ applicationLifetime, Microsoft::Extensions::Options::IOptions&lt;Microsoft::Extensions::Hosting::HostOptions ^&gt; ^ hostOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt;" />
        <Parameter Name="environment" Type="Microsoft.Extensions.Hosting.IHostEnvironment" />
        <Parameter Name="applicationLifetime" Type="Microsoft.Extensions.Hosting.IHostApplicationLifetime" />
        <Parameter Name="hostOptions" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.HostOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="options">An object used to retrieve <see cref="T:Microsoft.Extensions.Hosting.ConsoleLifetimeOptions" /> instances.</param>
        <param name="environment">An object that contains information about the hosting environment an application is running in.</param>
        <param name="applicationLifetime">An object that allows consumers to be notified of application lifetime events.</param>
        <param name="hostOptions">An object used to retrieve <see cref="P:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.HostOptions" /> instances.</param>
        <summary>
            Initializes a <see cref="T:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime" /> instance using the specified console lifetime options, host environment, host application lifetime and host options.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> or <paramref name="environment" /> or <paramref name="applicationLifetime" /> or <paramref name="hostOptions" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleLifetime (Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; options, Microsoft.Extensions.Hosting.IHostEnvironment environment, Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime, Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.HostOptions&gt; hostOptions, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; options, class Microsoft.Extensions.Hosting.IHostEnvironment environment, class Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime, class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.Extensions.Hosting.HostOptions&gt; hostOptions, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.ConsoleLifetimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.HostOptions},Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As IOptions(Of ConsoleLifetimeOptions), environment As IHostEnvironment, applicationLifetime As IHostApplicationLifetime, hostOptions As IOptions(Of HostOptions), loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Hosting.Internal.ConsoleLifetime : Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; * Microsoft.Extensions.Hosting.IHostEnvironment * Microsoft.Extensions.Hosting.IHostApplicationLifetime * Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.HostOptions&gt; * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.Extensions.Hosting.Internal.ConsoleLifetime" Usage="new Microsoft.Extensions.Hosting.Internal.ConsoleLifetime (options, environment, applicationLifetime, hostOptions, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleLifetime(Microsoft::Extensions::Options::IOptions&lt;Microsoft::Extensions::Hosting::ConsoleLifetimeOptions ^&gt; ^ options, Microsoft::Extensions::Hosting::IHostEnvironment ^ environment, Microsoft::Extensions::Hosting::IHostApplicationLifetime ^ applicationLifetime, Microsoft::Extensions::Options::IOptions&lt;Microsoft::Extensions::Hosting::HostOptions ^&gt; ^ hostOptions, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt;" />
        <Parameter Name="environment" Type="Microsoft.Extensions.Hosting.IHostEnvironment" />
        <Parameter Name="applicationLifetime" Type="Microsoft.Extensions.Hosting.IHostApplicationLifetime" />
        <Parameter Name="hostOptions" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.Extensions.Hosting.HostOptions&gt;" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="options">An object used to retrieve <see cref="T:Microsoft.Extensions.Hosting.ConsoleLifetimeOptions" /> instances</param>
        <param name="environment">An object that contains information about the hosting environment an application is running in.</param>
        <param name="applicationLifetime">An object that allows consumers to be notified of application lifetime events.</param>
        <param name="hostOptions">An object used to retrieve <see cref="P:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.HostOptions" /> instances.</param>
        <param name="loggerFactory">An object to configure the logging system and create instances of <see cref="T:Microsoft.Extensions.Logging.ILogger" /> from the registered <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</param>
        <summary>
            Initializes a <see cref="T:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime" /> instance using the specified console lifetime options, host environment, host options and logger factory.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> or <paramref name="environment" /> or <paramref name="applicationLifetime" /> or <paramref name="hostOptions" /> or <paramref name="loggerFactory" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="consoleLifetime.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Unregisters the shutdown handlers and disposes the application start and application stop registrations.
            </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This API supports the .NET infrastructure and is not intended to be used directly from your code.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StopAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.StopAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function StopAsync (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member StopAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.StopAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="consoleLifetime.StopAsync cancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ StopAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostLifetime.StopAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A cancellation token instance.</param>
        <summary>
            This method does nothing.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents a completed task.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This API supports the .NET infrastructure and is not intended to be used directly from your code.

]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForStartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitForStartAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WaitForStartAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime.WaitForStartAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForStartAsync (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member WaitForStartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WaitForStartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="consoleLifetime.WaitForStartAsync cancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WaitForStartAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>
            Registers the application start, application stop and shutdown handlers for this application.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous registration operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This API supports the .NET infrastructure and is not intended to be used directly from your code.

]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
