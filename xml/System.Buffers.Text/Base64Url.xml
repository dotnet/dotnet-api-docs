<Type Name="Base64Url" FullName="System.Buffers.Text.Base64Url">
  <TypeSignature Language="C#" Value="public static class Base64Url" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Base64Url extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Text.Base64Url" />
  <TypeSignature Language="VB.NET" Value="Public Class Base64Url" />
  <TypeSignature Language="F#" Value="type Base64Url = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class Base64Url abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Converts between binary data and URL-safe ASCII encoded text that's represented in Base64Url characters.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DecodeFromChars">
      <MemberSignature Language="C#" Value="public static byte[] DecodeFromChars (ReadOnlySpan&lt;char&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] DecodeFromChars(valuetype System.ReadOnlySpan`1&lt;char&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.DecodeFromChars(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromChars (source As ReadOnlySpan(Of Char)) As Byte()" />
      <MemberSignature Language="F#" Value="static member DecodeFromChars : ReadOnlySpan&lt;char&gt; -&gt; byte[]" Usage="System.Buffers.Text.Base64Url.DecodeFromChars source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ DecodeFromChars(ReadOnlySpan&lt;char&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains ASCII chars in Base64Url that needs to be decoded.</param>
        <summary>Decodes the span of unicode ASCII chars represented as Base64Url into binary data.</summary>
        <returns>A byte array which contains the result of the decoding operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="source" /> contains a invalid Base64Url character,</para>
          <para>more than two padding characters, or a non white space character among the padding characters.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromChars">
      <MemberSignature Language="C#" Value="public static int DecodeFromChars (ReadOnlySpan&lt;char&gt; source, Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DecodeFromChars(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.DecodeFromChars(System.ReadOnlySpan{System.Char},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromChars (source As ReadOnlySpan(Of Char), destination As Span(Of Byte)) As Integer" />
      <MemberSignature Language="F#" Value="static member DecodeFromChars : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; -&gt; int" Usage="System.Buffers.Text.Base64Url.DecodeFromChars (source, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DecodeFromChars(ReadOnlySpan&lt;char&gt; source, Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains ASCII chars in Base64Url that needs to be decoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the decoded binary data.</param>
        <summary>Decodes the span of unicode ASCII chars represented as Base64Url into binary data.</summary>
        <returns>The number of bytes written into the output span. This can be used to slice the output for subsequent calls, if necessary.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">The buffer in <paramref name="destination" /> is too small to hold the encoded output.</exception>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="source" /> contains a invalid Base64Url character,</para>
          <para>more than two padding characters, or a non white space character among the padding characters.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromChars">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeFromChars (ReadOnlySpan&lt;char&gt; source, Span&lt;byte&gt; destination, out int charsConsumed, out int bytesWritten, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeFromChars(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; charsConsumed, [out] int32&amp; bytesWritten, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.DecodeFromChars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromChars (source As ReadOnlySpan(Of Char), destination As Span(Of Byte), ByRef charsConsumed As Integer, ByRef bytesWritten As Integer, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="static member DecodeFromChars : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; * int * int * bool -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64Url.DecodeFromChars (source, destination, charsConsumed, bytesWritten, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="charsConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains unicode ASCII chars in Base64Url that needs to be decoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the decoded binary data.</param>
        <param name="charsConsumed">When this method returns, contains the number of input chars consumed during the operation. This can be used to slice the input for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written into the output span. This can be used to slice the output for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <param name="isFinalBlock">
          <para>
            <see langword="true" /> when the input span contains the entirety of data to encode; <see langword="false" /> when more data may follow,</para>
          <para>such as when calling in a loop. Calls with <see langword="false" /> should be followed up with another call where this parameter is <see langword="true" /> call. The default is <see langword="true" />.</para>
        </param>
        <summary>Decodes the span of unicode ASCII chars represented as Base64Url into binary data.</summary>
        <returns>One of the enumeration values that indicates the success or failure of the operation.</returns>
        <remarks>
          <para>As padding is optional for Base64Url the <paramref name="source" /> length not required to be a multiple of 4 even if <paramref name="isFinalBlock" /> is <see langword="true" />.</para>
          <para>If the <paramref name="source" /> length is not a multiple of 4 and <paramref name="isFinalBlock" /> is <see langword="true" /> the remainders decoded accordingly:</para>
          <para>- Remainder of 3 chars - decoded into 2 bytes data, decoding succeeds.</para>
          <para>- Remainder of 2 chars - decoded into 1 byte data. decoding succeeds.</para>
          <para>- Remainder of 1 char - will cause OperationStatus.InvalidData result.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromUtf8">
      <MemberSignature Language="C#" Value="public static byte[] DecodeFromUtf8 (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] DecodeFromUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.DecodeFromUtf8(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf8 (source As ReadOnlySpan(Of Byte)) As Byte()" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf8 : ReadOnlySpan&lt;byte&gt; -&gt; byte[]" Usage="System.Buffers.Text.Base64Url.DecodeFromUtf8 source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ DecodeFromUtf8(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains UTF-8 encoded text in Base64Url that needs to be decoded.</param>
        <summary>Decodes the span of UTF-8 encoded text represented as Base64Url into binary data.</summary>
        <returns>&gt;A byte array which contains the result of the decoding operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="source" /> contains an invalid Base64Url character,</para>
          <para>more than two padding characters, or a non white space character among the padding characters.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromUtf8">
      <MemberSignature Language="C#" Value="public static int DecodeFromUtf8 (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DecodeFromUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf8 (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte)) As Integer" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; -&gt; int" Usage="System.Buffers.Text.Base64Url.DecodeFromUtf8 (source, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DecodeFromUtf8(ReadOnlySpan&lt;System::Byte&gt; source, Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains UTF-8 encoded text in Base64Url that needs to be decoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the decoded binary data.</param>
        <summary>Decodes the span of UTF-8 encoded text represented as Base64Url into binary data.</summary>
        <returns>The number of bytes written into <paramref name="destination" />. This can be used to slice the output for subsequent calls, if necessary.</returns>
        <remarks>
          <para>As padding is optional for Base64Url the <paramref name="source" /> length not required to be a multiple of 4.</para>
          <para>If the <paramref name="source" /> length is not a multiple of 4 the remainders decoded accordingly:</para>
          <para>- Remainder of 3 bytes - decoded into 2 bytes data, decoding succeeds.</para>
          <para>- Remainder of 2 bytes - decoded into 1 byte data. decoding succeeds.</para>
          <para>- Remainder of 1 byte - is invalid input, causes FormatException.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">The buffer in <paramref name="destination" /> is too small to hold the encoded output.</exception>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="source" /> contains an invalid Base64Url character,</para>
          <para>more than two padding characters, or a non white space character among the padding characters.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromUtf8">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus DecodeFromUtf8 (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus DecodeFromUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesConsumed, [out] int32&amp; bytesWritten, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf8 (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesConsumed As Integer, ByRef bytesWritten As Integer, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int * int * bool -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64Url.DecodeFromUtf8 (source, destination, bytesConsumed, bytesWritten, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains UTF-8 encoded text in Base64Url that needs to be decoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the decoded binary data.</param>
        <param name="bytesConsumed">When this method returns, contains the number of input bytes consumed during the operation. This can be used to slice the input for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written into the output span. This can be used to slice the output for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <param name="isFinalBlock">
          <para>
            <see langword="true" /> when the input span contains the entirety of data to encode; <see langword="false" /> when more data may follow,</para>
          <para>such as when calling in a loop. Calls with <see langword="false" /> should be followed up with another call where this parameter is <see langword="true" /> call. The default is <see langword="true" />.</para>
        </param>
        <summary>Decodes the span of UTF-8 encoded text represented as Base64Url into binary data.</summary>
        <returns>One of the enumeration values that indicates the success or failure of the operation.</returns>
        <remarks>
          <para>As padding is optional for Base64Url the <paramref name="source" /> length not required to be a multiple of 4 even if <paramref name="isFinalBlock" /> is <see langword="true" />.</para>
          <para>If the <paramref name="source" /> length is not a multiple of 4 and <paramref name="isFinalBlock" /> is <see langword="true" /> the remainders decoded accordingly:</para>
          <para>- Remainder of 3 bytes - decoded into 2 bytes data, decoding succeeds.</para>
          <para>- Remainder of 2 bytes - decoded into 1 byte data. decoding succeeds.</para>
          <para>- Remainder of 1 byte - will cause OperationStatus.InvalidData result.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecodeFromUtf8InPlace">
      <MemberSignature Language="C#" Value="public static int DecodeFromUtf8InPlace (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DecodeFromUtf8InPlace(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.DecodeFromUtf8InPlace(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecodeFromUtf8InPlace (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="F#" Value="static member DecodeFromUtf8InPlace : Span&lt;byte&gt; -&gt; int" Usage="System.Buffers.Text.Base64Url.DecodeFromUtf8InPlace buffer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DecodeFromUtf8InPlace(Span&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">The input span which contains the base 64 text data that needs to be decoded.</param>
        <summary>
          <para>Decodes the span of UTF-8 encoded text in Base64Url into binary data, in-place.</para>
          <para>The decoded binary output is smaller than the text data contained in the input (the operation deflates the data).</para>
        </summary>
        <returns>The number of bytes written into <paramref name="buffer" />. This can be used to slice the output for subsequent calls, if necessary.</returns>
        <remarks>
          <para>As padding is optional for Base64Url the <paramref name="buffer" /> length not required to be a multiple of 4.</para>
          <para>If the <paramref name="buffer" /> length is not a multiple of 4 the remainders decoded accordingly:</para>
          <para>- Remainder of 3 bytes - decoded into 2 bytes data, decoding succeeds.</para>
          <para>- Remainder of 2 bytes - decoded into 1 byte data. decoding succeeds.</para>
          <para>- Remainder of 1 byte - is invalid input, causes FormatException.</para>
        </remarks>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="buffer" /> contains an invalid Base64Url character,</para>
          <para>more than two padding characters, or a non white space character among the padding characters.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EncodeToChars">
      <MemberSignature Language="C#" Value="public static char[] EncodeToChars (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] EncodeToChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.EncodeToChars(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToChars (source As ReadOnlySpan(Of Byte)) As Char()" />
      <MemberSignature Language="F#" Value="static member EncodeToChars : ReadOnlySpan&lt;byte&gt; -&gt; char[]" Usage="System.Buffers.Text.Base64Url.EncodeToChars source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ EncodeToChars(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains binary data that needs to be encoded.</param>
        <summary>Encodes the span of binary data into unicode ASCII chars represented as Base64Url.</summary>
        <returns>A char array which contains the result of the operation, i.e. the ASCII chars in Base64Url.</returns>
        <remarks>This implementation of the base64url encoding omits the optional padding characters.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToChars">
      <MemberSignature Language="C#" Value="public static int EncodeToChars (ReadOnlySpan&lt;byte&gt; source, Span&lt;char&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 EncodeToChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;char&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.EncodeToChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToChars (source As ReadOnlySpan(Of Byte), destination As Span(Of Char)) As Integer" />
      <MemberSignature Language="F#" Value="static member EncodeToChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; -&gt; int" Usage="System.Buffers.Text.Base64Url.EncodeToChars (source, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int EncodeToChars(ReadOnlySpan&lt;System::Byte&gt; source, Span&lt;char&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains binary data that needs to be encoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the ASCII chars in Base64Url.</param>
        <summary>Encodes the span of binary data into unicode ASCII chars represented as Base64Url.</summary>
        <returns>The number of bytes written into the destination span. This can be used to slice the output for subsequent calls, if necessary.</returns>
        <remarks>This implementation of the base64url encoding omits the optional padding characters.</remarks>
        <exception cref="T:System.ArgumentException">The buffer in <paramref name="destination" /> is too small to hold the encoded output.</exception>
      </Docs>
    </Member>
    <Member MemberName="EncodeToChars">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus EncodeToChars (ReadOnlySpan&lt;byte&gt; source, Span&lt;char&gt; destination, out int bytesConsumed, out int charsWritten, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus EncodeToChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; bytesConsumed, [out] int32&amp; charsWritten, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.EncodeToChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToChars (source As ReadOnlySpan(Of Byte), destination As Span(Of Char), ByRef bytesConsumed As Integer, ByRef charsWritten As Integer, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="static member EncodeToChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; * int * int * bool -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64Url.EncodeToChars (source, destination, bytesConsumed, charsWritten, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains binary data that needs to be encoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the ASCII chars in Base64Url.</param>
        <param name="bytesConsumed">&gt;When this method returns, contains the number of input bytes consumed during the operation. This can be used to slice the input for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <param name="charsWritten">&gt;When this method returns, contains the number of chars written into the output span. This can be used to slice the output for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <param name="isFinalBlock">
          <para>
            <see langword="true" /> when the input span contains the entirety of data to encode; <see langword="false" /> when more data may follow,</para>
          <para>such as when calling in a loop, subsequent calls with <see langword="false" /> should end with <see langword="true" /> call. The default is <see langword="true" />.</para>
        </param>
        <summary>Encodes the span of binary data into unicode ASCII chars represented as Base64Url.</summary>
        <returns>One of the enumeration values that indicates the success or failure of the operation.</returns>
        <remarks>This implementation of the base64url encoding omits the optional padding characters.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToString">
      <MemberSignature Language="C#" Value="public static string EncodeToString (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string EncodeToString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.EncodeToString(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToString (source As ReadOnlySpan(Of Byte)) As String" />
      <MemberSignature Language="F#" Value="static member EncodeToString : ReadOnlySpan&lt;byte&gt; -&gt; string" Usage="System.Buffers.Text.Base64Url.EncodeToString source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ EncodeToString(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains binary data that needs to be encoded.</param>
        <summary>Encodes the span of binary data into unicode string represented as Base64Url ASCII chars.</summary>
        <returns>A string which contains the result of the operation, i.e. the ASCII string in Base64Url.</returns>
        <remarks>This implementation of the base64url encoding omits the optional padding characters.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf8">
      <MemberSignature Language="C#" Value="public static byte[] EncodeToUtf8 (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] EncodeToUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.EncodeToUtf8(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToUtf8 (source As ReadOnlySpan(Of Byte)) As Byte()" />
      <MemberSignature Language="F#" Value="static member EncodeToUtf8 : ReadOnlySpan&lt;byte&gt; -&gt; byte[]" Usage="System.Buffers.Text.Base64Url.EncodeToUtf8 source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ EncodeToUtf8(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains binary data that needs to be encoded.</param>
        <summary>Encodes the span of binary data into UTF-8 encoded text represented as Base64Url.</summary>
        <returns>The output byte array which contains the result of the operation, i.e. the UTF-8 encoded text in Base64Url.</returns>
        <remarks>This implementation of the base64url encoding omits the optional padding characters.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf8">
      <MemberSignature Language="C#" Value="public static int EncodeToUtf8 (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 EncodeToUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToUtf8 (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte)) As Integer" />
      <MemberSignature Language="F#" Value="static member EncodeToUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; -&gt; int" Usage="System.Buffers.Text.Base64Url.EncodeToUtf8 (source, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int EncodeToUtf8(ReadOnlySpan&lt;System::Byte&gt; source, Span&lt;System::Byte&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains binary data that needs to be encoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the UTF-8 encoded text in Base64Url.</param>
        <summary>Encodes the span of binary data into UTF-8 encoded text represented as Base64Url.</summary>
        <returns>The number of bytes written into the destination span. This can be used to slice the output for subsequent calls, if necessary.</returns>
        <remarks>This implementation of the base64url encoding omits the optional padding characters.</remarks>
        <exception cref="T:System.ArgumentException">The buffer in <paramref name="destination" /> is too small to hold the encoded output.</exception>
      </Docs>
    </Member>
    <Member MemberName="EncodeToUtf8">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus EncodeToUtf8 (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus EncodeToUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesConsumed, [out] int32&amp; bytesWritten, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EncodeToUtf8 (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesConsumed As Integer, ByRef bytesWritten As Integer, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="static member EncodeToUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int * int * bool -&gt; System.Buffers.OperationStatus" Usage="System.Buffers.Text.Base64Url.EncodeToUtf8 (source, destination, bytesConsumed, bytesWritten, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains binary data that needs to be encoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the UTF-8 encoded text in Base64Url.</param>
        <param name="bytesConsumed">When this method returns, contains the number of input bytes consumed during the operation. This can be used to slice the input for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written into the output span. This can be used to slice the output for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <param name="isFinalBlock">
          <para>
            <see langword="true" /> when the input span contains the entirety of data to encode; <see langword="false" /> when more data may follow,</para>
          <para>such as when calling in a loop, subsequent calls with <see langword="false" /> should end with <see langword="true" /> call. The default is <see langword="true" />.</para>
        </param>
        <summary>Encodes the span of binary data into UTF-8 encoded text represented as Base64Url.</summary>
        <returns>One of the enumeration values that indicates the success or failure of the operation.</returns>
        <remarks>This implementation of the base64url encoding omits the optional padding characters.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEncodedLength">
      <MemberSignature Language="C#" Value="public static int GetEncodedLength (int bytesLength);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetEncodedLength(int32 bytesLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.GetEncodedLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEncodedLength (bytesLength As Integer) As Integer" />
      <MemberSignature Language="F#" Value="static member GetEncodedLength : int -&gt; int" Usage="System.Buffers.Text.Base64Url.GetEncodedLength bytesLength" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetEncodedLength(int bytesLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytesLength">The size of the input span.</param>
        <summary>Returns the length (in bytes) of the result if you were to encode binary data within a byte span of size <paramref name="bytesLength" />.</summary>
        <returns>The length (in bytes) of the encoded result.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bytesLength" /> is less than 0 or greater than 1610612733.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMaxDecodedLength">
      <MemberSignature Language="C#" Value="public static int GetMaxDecodedLength (int base64Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetMaxDecodedLength(int32 base64Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.GetMaxDecodedLength(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMaxDecodedLength (base64Length As Integer) As Integer" />
      <MemberSignature Language="F#" Value="static member GetMaxDecodedLength : int -&gt; int" Usage="System.Buffers.Text.Base64Url.GetMaxDecodedLength base64Length" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetMaxDecodedLength(int base64Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base64Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="base64Length">The size of the input span.</param>
        <summary>Returns the maximum length (in bytes) of the result if you were to decode base 64 encoded text from a span of size <paramref name="base64Length" />.</summary>
        <returns>The maximum length (in bytes) of the decoded result.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="base64Length" /> is less than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (ReadOnlySpan&lt;byte&gt; utf8Base64UrlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Base64UrlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.IsValid(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValid (utf8Base64UrlText As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsValid : ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="System.Buffers.Text.Base64Url.IsValid utf8Base64UrlText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(ReadOnlySpan&lt;System::Byte&gt; utf8Base64UrlText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Base64UrlText" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Base64UrlText">A span of UTF-8 text to validate.</param>
        <summary>Validates that the specified span of UTF-8 text is comprised of valid base-64 encoded data.</summary>
        <returns>
          <see langword="true" /> if <paramref name="utf8Base64UrlText" /> contains a valid, decodable sequence of base-64 encoded data; otherwise, <see langword="false" />.</returns>
        <remarks>where whitespace is defined as the characters ' ', '\t', '\r', or '\n' (as bytes).</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (ReadOnlySpan&lt;char&gt; base64UrlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(valuetype System.ReadOnlySpan`1&lt;char&gt; base64UrlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.IsValid(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValid (base64UrlText As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsValid : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.Buffers.Text.Base64Url.IsValid base64UrlText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(ReadOnlySpan&lt;char&gt; base64UrlText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base64UrlText" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="base64UrlText">A span of text to validate.</param>
        <summary>Validates that the specified span of text is comprised of valid base-64 encoded data.</summary>
        <returns>
          <see langword="true" /> if <paramref name="base64UrlText" /> contains a valid, decodable sequence of base-64 encoded data; otherwise, <see langword="false" />.</returns>
        <remarks>
          <para>If the method returns <see langword="true" />, the same text passed to <see cref="M:System.Buffers.Text.Base64Url.DecodeFromChars(System.ReadOnlySpan{System.Char})" /> and</para>
          <para>
            <see cref="M:System.Buffers.Text.Base64Url.TryDecodeFromChars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)" /> would successfully decode (in the case</para>
          <para>of <see cref="M:System.Buffers.Text.Base64Url.TryDecodeFromChars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)" /> assuming sufficient output space).</para>
          <para>Any amount of whitespace is allowed anywhere in the input, where whitespace is defined as the characters ' ', '\t', '\r', or '\n'.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (ReadOnlySpan&lt;byte&gt; utf8Base64UrlText, out int decodedLength);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Base64UrlText, [out] int32&amp; decodedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.IsValid(System.ReadOnlySpan{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValid (utf8Base64UrlText As ReadOnlySpan(Of Byte), ByRef decodedLength As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsValid : ReadOnlySpan&lt;byte&gt; * int -&gt; bool" Usage="System.Buffers.Text.Base64Url.IsValid (utf8Base64UrlText, decodedLength)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(ReadOnlySpan&lt;System::Byte&gt; utf8Base64UrlText, [Runtime::InteropServices::Out] int % decodedLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Base64UrlText" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="decodedLength" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="utf8Base64UrlText">A span of UTF-8 text to validate.</param>
        <param name="decodedLength">If the method returns <see langword="true" />, the number of decoded bytes that will result from decoding the input UTF-8 text.</param>
        <summary>Validates that the specified span of UTF-8 text is comprised of valid base-64 encoded data.</summary>
        <returns>
          <see langword="true" /> if <paramref name="utf8Base64UrlText" /> contains a valid, decodable sequence of base-64 encoded data; otherwise, <see langword="false" />.</returns>
        <remarks>where whitespace is defined as the characters ' ', '\t', '\r', or '\n' (as bytes).</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (ReadOnlySpan&lt;char&gt; base64UrlText, out int decodedLength);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(valuetype System.ReadOnlySpan`1&lt;char&gt; base64UrlText, [out] int32&amp; decodedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.IsValid(System.ReadOnlySpan{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValid (base64UrlText As ReadOnlySpan(Of Char), ByRef decodedLength As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsValid : ReadOnlySpan&lt;char&gt; * int -&gt; bool" Usage="System.Buffers.Text.Base64Url.IsValid (base64UrlText, decodedLength)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(ReadOnlySpan&lt;char&gt; base64UrlText, [Runtime::InteropServices::Out] int % decodedLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base64UrlText" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="decodedLength" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="base64UrlText">A span of text to validate.</param>
        <param name="decodedLength">If the method returns <see langword="true" />, the number of decoded bytes that will result from decoding the input text.</param>
        <summary>Validates that the specified span of text is comprised of valid base-64 encoded data.</summary>
        <returns>
          <see langword="true" /> if <paramref name="base64UrlText" /> contains a valid, decodable sequence of base-64 encoded data; otherwise, <see langword="false" />.</returns>
        <remarks>
          <para>If the method returns <see langword="true" />, the same text passed to <see cref="M:System.Buffers.Text.Base64Url.DecodeFromChars(System.ReadOnlySpan{System.Char})" /> and</para>
          <para>
            <see cref="M:System.Buffers.Text.Base64Url.TryDecodeFromChars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)" /> would successfully decode (in the case</para>
          <para>of <see cref="M:System.Buffers.Text.Base64Url.TryDecodeFromChars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)" /> assuming sufficient output space).</para>
          <para>Any amount of whitespace is allowed anywhere in the input, where whitespace is defined as the characters ' ', '\t', '\r', or '\n'.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDecodeFromChars">
      <MemberSignature Language="C#" Value="public static bool TryDecodeFromChars (ReadOnlySpan&lt;char&gt; source, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDecodeFromChars(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.TryDecodeFromChars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDecodeFromChars (source As ReadOnlySpan(Of Char), destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryDecodeFromChars : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; * int -&gt; bool" Usage="System.Buffers.Text.Base64Url.TryDecodeFromChars (source, destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryDecodeFromChars(ReadOnlySpan&lt;char&gt; source, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains ASCII chars in Base64Url that needs to be decoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the decoded binary data.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written into the output span. This can be used to slice the output for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <summary>Decodes the span of unicode ASCII chars represented as Base64Url into binary data.</summary>
        <returns>
          <see langword="true" /> if bytes decoded successfully, otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="source" /> contains an invalid Base64Url character,</para>
          <para>more than two padding characters, or a non white space character among the padding characters.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryDecodeFromUtf8">
      <MemberSignature Language="C#" Value="public static bool TryDecodeFromUtf8 (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDecodeFromUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.TryDecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDecodeFromUtf8 (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryDecodeFromUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int -&gt; bool" Usage="System.Buffers.Text.Base64Url.TryDecodeFromUtf8 (source, destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryDecodeFromUtf8(ReadOnlySpan&lt;System::Byte&gt; source, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains UTF-8 encoded text in Base64Url that needs to be decoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the decoded binary data.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written into the output span. This can be used to slice the output for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <summary>Decodes the span of UTF-8 encoded text represented as Base64Url into binary data.</summary>
        <returns>
          <see langword="true" /> if bytes decoded successfully, otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">
          <para>
            <paramref name="source" /> contains an invalid Base64Url character,</para>
          <para>more than two padding characters, or a non white space character among the padding characters.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEncodeToChars">
      <MemberSignature Language="C#" Value="public static bool TryEncodeToChars (ReadOnlySpan&lt;byte&gt; source, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEncodeToChars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.TryEncodeToChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEncodeToChars (source As ReadOnlySpan(Of Byte), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryEncodeToChars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; * int -&gt; bool" Usage="System.Buffers.Text.Base64Url.TryEncodeToChars (source, destination, charsWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEncodeToChars(ReadOnlySpan&lt;System::Byte&gt; source, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains binary data that needs to be encoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the ASCII chars in Base64Url.</param>
        <param name="charsWritten">When this method returns, contains the number of chars written into the output span. This can be used to slice the output for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <summary>Encodes the span of binary data into unicode ASCII chars represented as Base64Url.</summary>
        <returns>
          <see langword="true" /> if chars encoded successfully, otherwise <see langword="false" />.</returns>
        <remarks>This implementation of the base64url encoding omits the optional padding characters.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEncodeToUtf8">
      <MemberSignature Language="C#" Value="public static bool TryEncodeToUtf8 (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEncodeToUtf8(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.TryEncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEncodeToUtf8 (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryEncodeToUtf8 : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * int -&gt; bool" Usage="System.Buffers.Text.Base64Url.TryEncodeToUtf8 (source, destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEncodeToUtf8(ReadOnlySpan&lt;System::Byte&gt; source, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">The input span which contains binary data that needs to be encoded.</param>
        <param name="destination">The output span which contains the result of the operation, i.e. the UTF-8 encoded text in Base64Url.</param>
        <param name="bytesWritten">When this method returns, contains the number of chars written into the output span. This can be used to slice the output for subsequent calls, if necessary. This parameter is treated as uninitialized.</param>
        <summary>Encodes the span of binary data into UTF-8 encoded chars represented as Base64Url.</summary>
        <returns>
          <see langword="true" /> if bytes encoded successfully, otherwise <see langword="false" />.</returns>
        <remarks>This implementation of the base64url encoding omits the optional padding characters.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEncodeToUtf8InPlace">
      <MemberSignature Language="C#" Value="public static bool TryEncodeToUtf8InPlace (Span&lt;byte&gt; buffer, int dataLength, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEncodeToUtf8InPlace(valuetype System.Span`1&lt;unsigned int8&gt; buffer, int32 dataLength, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Base64Url.TryEncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEncodeToUtf8InPlace (buffer As Span(Of Byte), dataLength As Integer, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryEncodeToUtf8InPlace : Span&lt;byte&gt; * int * int -&gt; bool" Usage="System.Buffers.Text.Base64Url.TryEncodeToUtf8InPlace (buffer, dataLength, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEncodeToUtf8InPlace(Span&lt;System::Byte&gt; buffer, int dataLength, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="dataLength" Type="System.Int32" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <para>The input span which contains binary data that needs to be encoded.</para>
          <para>It needs to be large enough to fit the result of the operation.</para>
        </param>
        <param name="dataLength">
          <para>The amount of binary data contained within the buffer that needs to be encoded</para>
          <para>(and needs to be smaller than the buffer length).</para>
        </param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written into the buffer. This parameter is treated as uninitialized.</param>
        <summary>
          <para>Encodes the span of binary data (in-place) into UTF-8 encoded text represented as base 64.</para>
          <para>The encoded text output is larger than the binary data contained in the input (the operation inflates the data).</para>
        </summary>
        <returns>
          <see langword="true" /> if bytes encoded successfully, otherwise <see langword="false" />.</returns>
        <remarks>This implementation of the base64url encoding omits the optional padding characters.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
