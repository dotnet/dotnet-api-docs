<Type Name="DependencyInjectionExtensions" FullName="Microsoft.Extensions.DependencyInjection.Pools.DependencyInjectionExtensions">
  <TypeSignature Language="C#" Value="public static class DependencyInjectionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DependencyInjectionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.Pools.DependencyInjectionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DependencyInjectionExtensions" />
  <TypeSignature Language="F#" Value="type DependencyInjectionExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyInjectionExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.DependencyInjection.Pools</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods for adding <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1" /> to DI container.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddPool&lt;TDefinition&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddPool&lt;TDefinition&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.DependencyInjection.Pools.PoolOptions&gt;? configure = default) where TDefinition : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddPool&lt;class TDefinition&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.DependencyInjection.Pools.PoolOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Pools.DependencyInjectionExtensions.AddPool``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.Pools.PoolOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddPool(Of TDefinition As Class) (services As IServiceCollection, Optional configure As Action(Of PoolOptions) = Nothing) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddPool : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Extensions.DependencyInjection.Pools.PoolOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Definition : null)" Usage="Microsoft.Extensions.DependencyInjection.Pools.DependencyInjectionExtensions.AddPool (services, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Pools</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDefinition">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.DependencyInjection.Pools.PoolOptions&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDefinition">The type of objects to pool.</typeparam>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add to.</param>
        <param name="configure">The action used to configure the options of the pool.</param>
        <summary>
            Adds an <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1" /> and lets DI return scoped instances of T.
            </summary>
        <returns>Provided service collection.</returns>
        <remarks>
            The default capacity is 1024.
            The pooled type instances are obtainable the same way like any other type instances from the DI container.
            </remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="services" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddPool&lt;TDefinition,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddPool&lt;TDefinition,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.DependencyInjection.Pools.PoolOptions&gt;? configure = default) where TDefinition : class where TImplementation : class, TDefinition;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddPool&lt;class TDefinition, class (!!TDefinition) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.DependencyInjection.Pools.PoolOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Pools.DependencyInjectionExtensions.AddPool``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.Pools.PoolOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddPool(Of TDefinition As Class, TImplementation As Class) (services As IServiceCollection, Optional configure As Action(Of PoolOptions) = Nothing) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddPool : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Extensions.DependencyInjection.Pools.PoolOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Definition : null)" Usage="Microsoft.Extensions.DependencyInjection.Pools.DependencyInjectionExtensions.AddPool (services, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Pools</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDefinition">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TDefinition</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.DependencyInjection.Pools.PoolOptions&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDefinition">The type of objects to pool.</typeparam>
        <typeparam name="TImplementation">The type of the implementation to use.</typeparam>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add to.</param>
        <param name="configure">Configuration of the pool.</param>
        <summary>
            Adds an <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1" /> and let DI return scoped instances of T.
            </summary>
        <returns>Provided service collection.</returns>
        <remarks>
            The default capacity is 1024.
            The pooled type instances are obtainable the same way like any other type instances from the DI container.
            </remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="services" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConfigurePools">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigurePools (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfigurationSection section);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigurePools(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Extensions.Configuration.IConfigurationSection section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Pools.DependencyInjectionExtensions.ConfigurePools(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationSection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigurePools (services As IServiceCollection, section As IConfigurationSection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member ConfigurePools : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.Configuration.IConfigurationSection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.DependencyInjection.Pools.DependencyInjectionExtensions.ConfigurePools (services, section)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ ConfigurePools(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Microsoft::Extensions::Configuration::IConfigurationSection ^ section);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Pools</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.DependencyInjection.Pools.PoolOptions))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.DependencyInjection.Pools.PoolOptions))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed by [DynamicDependency]")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed by [DynamicDependency]")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfigurationSection" />
      </Parameters>
      <Docs>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add to.</param>
        <param name="section">The configuration section to bind.</param>
        <summary>
            Configures DI pools.
            </summary>
        <returns>Provided service collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
