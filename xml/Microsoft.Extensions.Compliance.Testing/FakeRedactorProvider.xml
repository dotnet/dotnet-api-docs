<Type Name="FakeRedactorProvider" FullName="Microsoft.Extensions.Compliance.Testing.FakeRedactorProvider">
  <TypeSignature Language="C#" Value="public class FakeRedactorProvider : Microsoft.Extensions.Compliance.Redaction.IRedactorProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FakeRedactorProvider extends System.Object implements class Microsoft.Extensions.Compliance.Redaction.IRedactorProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Compliance.Testing.FakeRedactorProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class FakeRedactorProvider&#xA;Implements IRedactorProvider" />
  <TypeSignature Language="F#" Value="type FakeRedactorProvider = class&#xA;    interface IRedactorProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class FakeRedactorProvider : Microsoft::Extensions::Compliance::Redaction::IRedactorProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Compliance.Redaction.IRedactorProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A provider of fake redactors.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FakeRedactorProvider (Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions? options = default, Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector? eventCollector = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions options, class Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector eventCollector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.FakeRedactorProvider.#ctor(Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions,Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional options As FakeRedactorOptions = Nothing, Optional eventCollector As FakeRedactionCollector = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Compliance.Testing.FakeRedactorProvider : Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions * Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector -&gt; Microsoft.Extensions.Compliance.Testing.FakeRedactorProvider" Usage="new Microsoft.Extensions.Compliance.Testing.FakeRedactorProvider (options, eventCollector)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions" />
        <Parameter Name="eventCollector" Type="Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector" />
      </Parameters>
      <Docs>
        <param name="options">Fake redactor options.</param>
        <param name="eventCollector">Collects information about redactor requests.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Compliance.Testing.FakeRedactorProvider" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Collector">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector Collector { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector Collector" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Compliance.Testing.FakeRedactorProvider.Collector" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Collector As FakeRedactionCollector" />
      <MemberSignature Language="F#" Value="member this.Collector : Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector" Usage="Microsoft.Extensions.Compliance.Testing.FakeRedactorProvider.Collector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Compliance::Testing::FakeRedactionCollector ^ Collector { Microsoft::Extensions::Compliance::Testing::FakeRedactionCollector ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the collector that stores data about usage of fake redaction classes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedactor">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Compliance.Redaction.Redactor GetRedactor (Microsoft.Extensions.Compliance.Classification.DataClassification classification);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Compliance.Redaction.Redactor GetRedactor(valuetype Microsoft.Extensions.Compliance.Classification.DataClassification classification) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.FakeRedactorProvider.GetRedactor(Microsoft.Extensions.Compliance.Classification.DataClassification)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRedactor (classification As DataClassification) As Redactor" />
      <MemberSignature Language="F#" Value="abstract member GetRedactor : Microsoft.Extensions.Compliance.Classification.DataClassification -&gt; Microsoft.Extensions.Compliance.Redaction.Redactor&#xA;override this.GetRedactor : Microsoft.Extensions.Compliance.Classification.DataClassification -&gt; Microsoft.Extensions.Compliance.Redaction.Redactor" Usage="fakeRedactorProvider.GetRedactor classification" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::Compliance::Redaction::Redactor ^ GetRedactor(Microsoft::Extensions::Compliance::Classification::DataClassification classification);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Compliance.Redaction.IRedactorProvider.GetRedactor(Microsoft.Extensions.Compliance.Classification.DataClassification)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Redaction.Redactor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classification" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
      </Parameters>
      <Docs>
        <param name="classification">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
