<Type Name="RedactorRequested" FullName="Microsoft.Extensions.Compliance.Testing.RedactorRequested">
  <TypeSignature Language="C#" Value="public readonly struct RedactorRequested : IEquatable&lt;Microsoft.Extensions.Compliance.Testing.RedactorRequested&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit RedactorRequested extends System.ValueType implements class System.IEquatable`1&lt;valuetype Microsoft.Extensions.Compliance.Testing.RedactorRequested&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Compliance.Testing.RedactorRequested" />
  <TypeSignature Language="VB.NET" Value="Public Structure RedactorRequested&#xA;Implements IEquatable(Of RedactorRequested)" />
  <TypeSignature Language="F#" Value="type RedactorRequested = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class RedactorRequested : IEquatable&lt;Microsoft::Extensions::Compliance::Testing::RedactorRequested&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.Extensions.Compliance.Testing.RedactorRequested&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            State representing a single request for a redactor.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RedactorRequested (Microsoft.Extensions.Compliance.Classification.DataClassification classification, int sequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Extensions.Compliance.Classification.DataClassification classification, int32 sequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.RedactorRequested.#ctor(Microsoft.Extensions.Compliance.Classification.DataClassification,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (classification As DataClassification, sequenceNumber As Integer)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Compliance.Testing.RedactorRequested : Microsoft.Extensions.Compliance.Classification.DataClassification * int -&gt; Microsoft.Extensions.Compliance.Testing.RedactorRequested" Usage="new Microsoft.Extensions.Compliance.Testing.RedactorRequested (classification, sequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RedactorRequested(Microsoft::Extensions::Compliance::Classification::DataClassification classification, int sequenceNumber);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="classification" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
        <Parameter Name="sequenceNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="classification">Data class for which redactor was used.</param>
        <param name="sequenceNumber">Order in which the request was used.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Compliance.Testing.RedactorRequested" /> struct.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataClassification">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Compliance.Classification.DataClassification DataClassification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Extensions.Compliance.Classification.DataClassification DataClassification" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Compliance.Testing.RedactorRequested.DataClassification" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataClassification As DataClassification" />
      <MemberSignature Language="F#" Value="member this.DataClassification : Microsoft.Extensions.Compliance.Classification.DataClassification" Usage="Microsoft.Extensions.Compliance.Testing.RedactorRequested.DataClassification" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Compliance::Classification::DataClassification DataClassification { Microsoft::Extensions::Compliance::Classification::DataClassification get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Classification.DataClassification</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the the data classification for which the redactor was returned.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.Extensions.Compliance.Testing.RedactorRequested other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.Extensions.Compliance.Testing.RedactorRequested other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.RedactorRequested.Equals(Microsoft.Extensions.Compliance.Testing.RedactorRequested)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As RedactorRequested) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.Extensions.Compliance.Testing.RedactorRequested -&gt; bool" Usage="redactorRequested.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::Extensions::Compliance::Testing::RedactorRequested other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.Extensions.Compliance.Testing.RedactorRequested" />
      </Parameters>
      <Docs>
        <param name="other">Instance to check for equality.</param>
        <summary>
            Checks if object is equal to this instance of <see cref="T:Microsoft.Extensions.Compliance.Testing.RedactorRequested" />.
            </summary>
        <returns>
          <see langword="true" /> if object instances are equal <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.RedactorRequested.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="redactorRequested.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Object to check for equality.</param>
        <summary>
            Checks if object is equal to this instance of <see cref="T:System.Object" />.
            </summary>
        <returns>
          <see langword="true" /> if object instances are equal <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.RedactorRequested.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="redactorRequested.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Get hashcode of given <see cref="T:Microsoft.Extensions.Compliance.Testing.RedactorRequested" />.
            </summary>
        <returns>Hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.Extensions.Compliance.Testing.RedactorRequested left, Microsoft.Extensions.Compliance.Testing.RedactorRequested right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype Microsoft.Extensions.Compliance.Testing.RedactorRequested left, valuetype Microsoft.Extensions.Compliance.Testing.RedactorRequested right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.RedactorRequested.op_Equality(Microsoft.Extensions.Compliance.Testing.RedactorRequested,Microsoft.Extensions.Compliance.Testing.RedactorRequested)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As RedactorRequested, right As RedactorRequested) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : Microsoft.Extensions.Compliance.Testing.RedactorRequested * Microsoft.Extensions.Compliance.Testing.RedactorRequested -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Microsoft::Extensions::Compliance::Testing::RedactorRequested left, Microsoft::Extensions::Compliance::Testing::RedactorRequested right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.Extensions.Compliance.Testing.RedactorRequested" />
        <Parameter Name="right" Type="Microsoft.Extensions.Compliance.Testing.RedactorRequested" />
      </Parameters>
      <Docs>
        <param name="left">Left argument of the comparison.</param>
        <param name="right">Right argument of the comparison.</param>
        <summary>
            Compares two instances.
            </summary>
        <returns>
          <see langword="true" /> when equal, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.Extensions.Compliance.Testing.RedactorRequested left, Microsoft.Extensions.Compliance.Testing.RedactorRequested right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype Microsoft.Extensions.Compliance.Testing.RedactorRequested left, valuetype Microsoft.Extensions.Compliance.Testing.RedactorRequested right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.RedactorRequested.op_Inequality(Microsoft.Extensions.Compliance.Testing.RedactorRequested,Microsoft.Extensions.Compliance.Testing.RedactorRequested)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As RedactorRequested, right As RedactorRequested) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Microsoft.Extensions.Compliance.Testing.RedactorRequested * Microsoft.Extensions.Compliance.Testing.RedactorRequested -&gt; bool" Usage="Microsoft.Extensions.Compliance.Testing.RedactorRequested.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Microsoft::Extensions::Compliance::Testing::RedactorRequested left, Microsoft::Extensions::Compliance::Testing::RedactorRequested right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.Extensions.Compliance.Testing.RedactorRequested" />
        <Parameter Name="right" Type="Microsoft.Extensions.Compliance.Testing.RedactorRequested" />
      </Parameters>
      <Docs>
        <param name="left">Left argument of the comparison.</param>
        <param name="right">Right argument of the comparison.</param>
        <summary>
            Compares two instances.
            </summary>
        <returns>
          <see langword="true" /> when not equal, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceNumber">
      <MemberSignature Language="C#" Value="public int SequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SequenceNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Compliance.Testing.RedactorRequested.SequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SequenceNumber As Integer" />
      <MemberSignature Language="F#" Value="member this.SequenceNumber : int" Usage="Microsoft.Extensions.Compliance.Testing.RedactorRequested.SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SequenceNumber { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the order in which the redactor was requested.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
