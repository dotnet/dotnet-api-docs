<Type Name="FakeRedactionExtensions" FullName="Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions">
  <TypeSignature Language="C#" Value="public static class FakeRedactionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit FakeRedactionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module FakeRedactionExtensions" />
  <TypeSignature Language="F#" Value="type FakeRedactionExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class FakeRedactionExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions that allow registering a fake redactor in the application.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddFakeRedaction">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddFakeRedaction (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddFakeRedaction(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.AddFakeRedaction(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFakeRedaction (services As IServiceCollection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddFakeRedaction : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.AddFakeRedaction services" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddFakeRedaction(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
      </Parameters>
      <Docs>
        <param name="services">Container used to register fake redaction classes.</param>
        <summary>
            Registers the fake redactor provider that always returns fake redactor instances.
            </summary>
        <returns>The value of <paramref name="services" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="services" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddFakeRedaction">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddFakeRedaction (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddFakeRedaction(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.AddFakeRedaction(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFakeRedaction (services As IServiceCollection, configure As Action(Of FakeRedactorOptions)) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddFakeRedaction : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.AddFakeRedaction (services, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddFakeRedaction(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Action&lt;Microsoft::Extensions::Compliance::Testing::FakeRedactorOptions ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="services">Container used to register fake redaction classes.</param>
        <param name="configure">Configures fake redactor.</param>
        <summary>
            Registers the fake redactor provider that always returns fake redactor instances.
            </summary>
        <returns>The value of <paramref name="services" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="services" /> or <paramref name="configure" />&gt; are <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFakeRedactionCollector">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector GetFakeRedactionCollector (this IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector GetFakeRedactionCollector(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.GetFakeRedactionCollector(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFakeRedactionCollector (serviceProvider As IServiceProvider) As FakeRedactionCollector" />
      <MemberSignature Language="F#" Value="static member GetFakeRedactionCollector : IServiceProvider -&gt; Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector" Usage="Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.GetFakeRedactionCollector serviceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Compliance::Testing::FakeRedactionCollector ^ GetFakeRedactionCollector(IServiceProvider ^ serviceProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" RefType="this" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Container used to obtain collector instance.</param>
        <summary>
            Gets the fake redacton collector instance from the dependency injection container.
            </summary>
        <returns>Obtained collector.</returns>
        <remarks>
          <see cref="T:Microsoft.Extensions.Compliance.Testing.FakeRedactionCollector" /> should be registered and used only with fake redaction implementation.
            </remarks>
        <exception cref="T:System.InvalidOperationException">When collector is not in the container.</exception>
        <exception cref="T:System.ArgumentNullException">When <paramref name="serviceProvider" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetFakeRedactor">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder SetFakeRedactor (this Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder builder, params Microsoft.Extensions.Compliance.Classification.DataClassification[] classifications);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder SetFakeRedactor(class Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder builder, valuetype Microsoft.Extensions.Compliance.Classification.DataClassification[] classifications) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.SetFakeRedactor(Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder,Microsoft.Extensions.Compliance.Classification.DataClassification[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetFakeRedactor (builder As IRedactionBuilder, ParamArray classifications As DataClassification()) As IRedactionBuilder" />
      <MemberSignature Language="F#" Value="static member SetFakeRedactor : Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder * Microsoft.Extensions.Compliance.Classification.DataClassification[] -&gt; Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder" Usage="Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.SetFakeRedactor (builder, classifications)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Compliance::Redaction::IRedactionBuilder ^ SetFakeRedactor(Microsoft::Extensions::Compliance::Redaction::IRedactionBuilder ^ builder, ... cli::array &lt;Microsoft::Extensions::Compliance::Classification::DataClassification&gt; ^ classifications);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder" RefType="this" />
        <Parameter Name="classifications" Type="Microsoft.Extensions.Compliance.Classification.DataClassification[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="builder">The builder to attach the redactorr to.</param>
        <param name="classifications">The data classes for which the redactor type should be used.</param>
        <summary>
            Sets the fake redactor to use for a set of data classes.
            </summary>
        <returns>The value of <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="builder" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetFakeRedactor">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder SetFakeRedactor (this Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder builder, Microsoft.Extensions.Configuration.IConfigurationSection section, params Microsoft.Extensions.Compliance.Classification.DataClassification[] classifications);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder SetFakeRedactor(class Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder builder, class Microsoft.Extensions.Configuration.IConfigurationSection section, valuetype Microsoft.Extensions.Compliance.Classification.DataClassification[] classifications) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.SetFakeRedactor(Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder,Microsoft.Extensions.Configuration.IConfigurationSection,Microsoft.Extensions.Compliance.Classification.DataClassification[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetFakeRedactor (builder As IRedactionBuilder, section As IConfigurationSection, ParamArray classifications As DataClassification()) As IRedactionBuilder" />
      <MemberSignature Language="F#" Value="static member SetFakeRedactor : Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder * Microsoft.Extensions.Configuration.IConfigurationSection * Microsoft.Extensions.Compliance.Classification.DataClassification[] -&gt; Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder" Usage="Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.SetFakeRedactor (builder, section, classifications)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Compliance::Redaction::IRedactionBuilder ^ SetFakeRedactor(Microsoft::Extensions::Compliance::Redaction::IRedactionBuilder ^ builder, Microsoft::Extensions::Configuration::IConfigurationSection ^ section, ... cli::array &lt;Microsoft::Extensions::Compliance::Classification::DataClassification&gt; ^ classifications);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="The type is FakeRedactorOptions and we know it.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="The type is FakeRedactorOptions and we know it.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfigurationSection" />
        <Parameter Name="classifications" Type="Microsoft.Extensions.Compliance.Classification.DataClassification[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="builder">The builder to attach the redactorr to.</param>
        <param name="section">Configuration section.</param>
        <param name="classifications">The data classes for which the redactor type should be used.</param>
        <summary>
            Sets the fake redactor to use for a set of data classes.
            </summary>
        <returns>The value of <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="builder" /> or <paramref name="section" /> are <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetFakeRedactor">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder SetFakeRedactor (this Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder builder, Action&lt;Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions&gt; configure, params Microsoft.Extensions.Compliance.Classification.DataClassification[] classifications);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder SetFakeRedactor(class Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions&gt; configure, valuetype Microsoft.Extensions.Compliance.Classification.DataClassification[] classifications) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.SetFakeRedactor(Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder,System.Action{Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions},Microsoft.Extensions.Compliance.Classification.DataClassification[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetFakeRedactor (builder As IRedactionBuilder, configure As Action(Of FakeRedactorOptions), ParamArray classifications As DataClassification()) As IRedactionBuilder" />
      <MemberSignature Language="F#" Value="static member SetFakeRedactor : Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder * Action&lt;Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions&gt; * Microsoft.Extensions.Compliance.Classification.DataClassification[] -&gt; Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder" Usage="Microsoft.Extensions.Compliance.Testing.FakeRedactionExtensions.SetFakeRedactor (builder, configure, classifications)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Compliance::Redaction::IRedactionBuilder ^ SetFakeRedactor(Microsoft::Extensions::Compliance::Redaction::IRedactionBuilder ^ builder, Action&lt;Microsoft::Extensions::Compliance::Testing::FakeRedactorOptions ^&gt; ^ configure, ... cli::array &lt;Microsoft::Extensions::Compliance::Classification::DataClassification&gt; ^ classifications);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Compliance.Redaction.IRedactionBuilder" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Compliance.Testing.FakeRedactorOptions&gt;" />
        <Parameter Name="classifications" Type="Microsoft.Extensions.Compliance.Classification.DataClassification[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="builder">The builder to attach the redactorr to.</param>
        <param name="configure">Configuration function.</param>
        <param name="classifications">The data classes for which the redactor type should be used.</param>
        <summary>
            Sets the fake redactor to use for a set of data classes.
            </summary>
        <returns>The value of <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="builder" /> or <paramref name="configure" /> are <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
