<Type Name="CommandLineConfigurationExtensions" FullName="Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions">
  <TypeSignature Language="C#" Value="public static class CommandLineConfigurationExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CommandLineConfigurationExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module CommandLineConfigurationExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandLineConfigurationExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type CommandLineConfigurationExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Configuration.CommandLine</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Extension methods for registering <see cref="T:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationProvider" /> with <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddCommandLine">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine (this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, Action&lt;Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource&gt; configureSource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(class Microsoft.Extensions.Configuration.IConfigurationBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource&gt; configureSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddCommandLine (builder As IConfigurationBuilder, configureSource As Action(Of CommandLineConfigurationSource)) As IConfigurationBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Configuration::IConfigurationBuilder ^ AddCommandLine(Microsoft::Extensions::Configuration::IConfigurationBuilder ^ builder, Action&lt;Microsoft::Extensions::Configuration::CommandLine::CommandLineConfigurationSource ^&gt; ^ configureSource);" />
      <MemberSignature Language="F#" Value="static member AddCommandLine : Microsoft.Extensions.Configuration.IConfigurationBuilder * Action&lt;Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource&gt; -&gt; Microsoft.Extensions.Configuration.IConfigurationBuilder" Usage="Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine (builder, configureSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="configureSource" Type="System.Action&lt;Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationSource&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
        <param name="configureSource">Configures the source.</param>
        <summary>Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads configuration values from the command line.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCommandLine">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddCommandLine (configurationBuilder As IConfigurationBuilder, args As String()) As IConfigurationBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Configuration::IConfigurationBuilder ^ AddCommandLine(Microsoft::Extensions::Configuration::IConfigurationBuilder ^ configurationBuilder, cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member AddCommandLine : Microsoft.Extensions.Configuration.IConfigurationBuilder * string[] -&gt; Microsoft.Extensions.Configuration.IConfigurationBuilder" Usage="Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine (configurationBuilder, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration.CommandLine</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
        <param name="args">The command line args.</param>
        <summary>
              Adds a <see cref="T:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationProvider" /><see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> 
              that reads configuration values from the command line.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        <remarks>
          <para>The values passed on the command line, in the <c>args</c> string array, should be a set
                of keys prefixed with two dashes ("--") and then values, separate by either the 
                equals sign ("=") or a space (" ").</para>
          <para>A forward slash ("/") can be used as an alternative prefix, with either equals or space, and when using
                an equals sign the prefix can be left out altogether. </para>
          <para>There are five basic alternative formats for arguments: 
                <c>key1=value1 --key2=value2 /key3=value3 --key4 value4 /key5 value5</c>.</para>
        </remarks>
        <example>
              A simple console application that has five values. 
              <code>
                // dotnet run key1=value1 --key2=value2 /key3=value3 --key4 value4 /key5 value5
                
                using Microsoft.Extensions.Configuration;
                using System;
                
                namespace CommandLineSample
                {
                   public class Program
                   {
                       public static void Main(string[] args)
                       {
                           var builder = new ConfigurationBuilder();
                           builder.AddCommandLine(args);
                
                           var config = builder.Build();
                
                           Console.WriteLine($"Key1: '{config["Key1"]}'");
                           Console.WriteLine($"Key2: '{config["Key2"]}'");
                           Console.WriteLine($"Key3: '{config["Key3"]}'");
                           Console.WriteLine($"Key4: '{config["Key4"]}'");
                           Console.WriteLine($"Key5: '{config["Key5"]}'");
                       }
                   }
                }
              </code></example>
      </Docs>
    </Member>
    <Member MemberName="AddCommandLine">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine (this Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string[] args, System.Collections.Generic.IDictionary&lt;string,string&gt; switchMappings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Configuration.IConfigurationBuilder AddCommandLine(class Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder, string[] args, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; switchMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String[],System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddCommandLine (configurationBuilder As IConfigurationBuilder, args As String(), switchMappings As IDictionary(Of String, String)) As IConfigurationBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Configuration::IConfigurationBuilder ^ AddCommandLine(Microsoft::Extensions::Configuration::IConfigurationBuilder ^ configurationBuilder, cli::array &lt;System::String ^&gt; ^ args, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ switchMappings);" />
      <MemberSignature Language="F#" Value="static member AddCommandLine : Microsoft.Extensions.Configuration.IConfigurationBuilder * string[] * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; Microsoft.Extensions.Configuration.IConfigurationBuilder" Usage="Microsoft.Extensions.Configuration.CommandLineConfigurationExtensions.AddCommandLine (configurationBuilder, args, switchMappings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration.CommandLine</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationBuilder" Type="Microsoft.Extensions.Configuration.IConfigurationBuilder" RefType="this" />
        <Parameter Name="args" Type="System.String[]" />
        <Parameter Name="switchMappings" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> to add to.</param>
        <param name="args">The command line args.</param>
        <param name="switchMappings">
              The switch mappings. A dictionary of short (with prefix "-") and 
              alias keys (with prefix "--"), mapped to the configuration key (no prefix).
            </param>
        <summary>
              Adds a <see cref="T:Microsoft.Extensions.Configuration.CommandLine.CommandLineConfigurationProvider" /><see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> that reads
              configuration values from the command line using the specified switch mappings.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</returns>
        <remarks>
          <para>The <c>switchMappings</c> allows additional formats for alternative short and alias keys 
                to be used from the command line. Also see the basic version of <c>AddCommandLine</c> for
                the standard formats supported.</para>
          <para>Short keys start with a single dash ("-") and are mapped to the main key name (without
                prefix), and can be used with either equals or space. The single dash mappings are intended
                to be used for shorter alternative switches.</para>
          <para>Note that a single dash switch cannot be accessed directly, but must have a switch mapping
                defined and accessed using the full key. Passing an undefined single dash argument will
                cause as <c>FormatException</c>.</para>
          <para>There are two formats for short arguments: 
                <c>-k1=value1 -k2 value2</c>.</para>
          <para>Alias key definitions start with two dashes ("--") and are mapped to the main key name (without
                prefix), and can be used in place of the normal key. They also work when a forward slash prefix 
                is used in the command line (but not with the no prefix equals format).</para>
          <para>There are only four formats for aliased arguments: 
                <c>--alt3=value3 /alt4=value4 --alt5 value5 /alt6 value6</c>.</para>
        </remarks>
        <example>
              A simple console application that has two short and four alias switch mappings defined. 
              <code>
                // dotnet run -k1=value1 -k2 value2 --alt3=value2 /alt4=value3 --alt5 value5 /alt6 value6
                
                using Microsoft.Extensions.Configuration;
                using System;
                using System.Collections.Generic;
                
                namespace CommandLineSample
                {
                   public class Program
                   {
                       public static void Main(string[] args)
                       {
                           var switchMappings = new Dictionary&lt;string, string&gt;()
                           {
                               { "-k1", "key1" },
                               { "-k2", "key2" },
                               { "--alt3", "key3" },
                               { "--alt4", "key4" },
                               { "--alt5", "key5" },
                               { "--alt6", "key6" },
                           };
                           var builder = new ConfigurationBuilder();
                           builder.AddCommandLine(args, switchMappings);
                
                           var config = builder.Build();
                
                           Console.WriteLine($"Key1: '{config["Key1"]}'");
                           Console.WriteLine($"Key2: '{config["Key2"]}'");
                           Console.WriteLine($"Key3: '{config["Key3"]}'");
                           Console.WriteLine($"Key4: '{config["Key4"]}'");
                           Console.WriteLine($"Key5: '{config["Key5"]}'");
                           Console.WriteLine($"Key6: '{config["Key6"]}'");
                       }
                   }
                }
              </code></example>
      </Docs>
    </Member>
  </Members>
</Type>
