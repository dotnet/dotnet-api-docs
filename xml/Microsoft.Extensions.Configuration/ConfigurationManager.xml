<Type Name="ConfigurationManager" FullName="Microsoft.Extensions.Configuration.ConfigurationManager">
  <TypeSignature Language="C#" Value="public sealed class ConfigurationManager : IDisposable, Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.Configuration.IConfigurationRoot" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ConfigurationManager extends System.Object implements class Microsoft.Extensions.Configuration.IConfiguration, class Microsoft.Extensions.Configuration.IConfigurationBuilder, class Microsoft.Extensions.Configuration.IConfigurationRoot, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Configuration.ConfigurationManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ConfigurationManager&#xA;Implements IConfigurationBuilder, IConfigurationRoot, IDisposable" />
  <TypeSignature Language="F#" Value="type ConfigurationManager = class&#xA;    interface IConfigurationBuilder&#xA;    interface IConfigurationRoot&#xA;    interface IConfiguration&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConfigurationManager sealed : IDisposable, Microsoft::Extensions::Configuration::IConfigurationBuilder, Microsoft::Extensions::Configuration::IConfigurationRoot" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Configuration.IConfiguration</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Configuration.IConfigurationBuilder</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Configuration.IConfigurationRoot</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a mutable configuration object. It is both an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> and an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" />.
            As sources are added, it updates its current view of the configuration. Once <see cref="M:Microsoft.Extensions.Configuration.ConfigurationManager.Microsoft#Extensions#Configuration#IConfigurationBuilder#Build" /> is called, the configuration is frozen.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConfigurationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConfigurationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates an empty mutable configuration object that is both an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> and an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationManager.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="configurationManager.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Configuration.IConfigurationSection&gt; GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Configuration.IConfigurationSection&gt; GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationManager.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As IEnumerable(Of IConfigurationSection)" />
      <MemberSignature Language="F#" Value="abstract member GetChildren : unit -&gt; seq&lt;Microsoft.Extensions.Configuration.IConfigurationSection&gt;&#xA;override this.GetChildren : unit -&gt; seq&lt;Microsoft.Extensions.Configuration.IConfigurationSection&gt;" Usage="configurationManager.GetChildren " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Configuration::IConfigurationSection ^&gt; ^ GetChildren();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Configuration.IConfiguration.GetChildren</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Configuration.IConfigurationSection&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the immediate descendant configuration subsections.</summary>
        <returns>The configuration subsections.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetSection">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Configuration.IConfigurationSection GetSection (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Configuration.IConfigurationSection GetSection(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationManager.GetSection(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSection (key As String) As IConfigurationSection" />
      <MemberSignature Language="F#" Value="abstract member GetSection : string -&gt; Microsoft.Extensions.Configuration.IConfigurationSection&#xA;override this.GetSection : string -&gt; Microsoft.Extensions.Configuration.IConfigurationSection" Usage="configurationManager.GetSection key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::Configuration::IConfigurationSection ^ GetSection(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Configuration.IConfiguration.GetSection(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfigurationSection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>Gets a configuration subsection with the specified key.</summary>
        <returns>The configuration section for the specified key.</returns>
        <remarks>The name of the configuration section is case-insensitive.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[string key] { get; set; }" FrameworkAlternate="dotnet-plat-ext-6.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Configuration.ConfigurationManager.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As String) As String" />
      <MemberSignature Language="F#" Value="member this.Item(string) : string with get, set" Usage="Microsoft.Extensions.Configuration.ConfigurationManager.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ key); void set(System::String ^ key, System::String ^ value); };" />
      <MemberSignature Language="C#" Value="public string? this[string key] { get; set; }" FrameworkAlternate="dotnet-plat-ext-7.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Extensions.Configuration.IConfiguration.Item(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The item index.</param>
        <summary>Gets or sets a configuration value.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Configuration.IConfiguration.GetReloadToken">
      <MemberSignature Language="C#" Value="Microsoft.Extensions.Primitives.IChangeToken IConfiguration.GetReloadToken ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.Extensions.Primitives.IChangeToken Microsoft.Extensions.Configuration.IConfiguration.GetReloadToken() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationManager.Microsoft#Extensions#Configuration#IConfiguration#GetReloadToken" />
      <MemberSignature Language="VB.NET" Value="Function GetReloadToken () As IChangeToken Implements IConfiguration.GetReloadToken" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Configuration.IConfiguration.GetReloadToken : unit -&gt; Microsoft.Extensions.Primitives.IChangeToken&#xA;override this.Microsoft.Extensions.Configuration.IConfiguration.GetReloadToken : unit -&gt; Microsoft.Extensions.Primitives.IChangeToken" Usage="configurationManager.Microsoft.Extensions.Configuration.IConfiguration.GetReloadToken " />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::Extensions::Primitives::IChangeToken ^ Microsoft.Extensions.Configuration.IConfiguration.GetReloadToken() = Microsoft::Extensions::Configuration::IConfiguration::GetReloadToken;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Configuration.IConfiguration.GetReloadToken</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Primitives.IChangeToken</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that can be used to observe when this configuration is reloaded.</summary>
        <returns>A token that can be used to observe when the configuration is reloaded.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Configuration.IConfigurationBuilder.Add">
      <MemberSignature Language="C#" Value="Microsoft.Extensions.Configuration.IConfigurationBuilder IConfigurationBuilder.Add (Microsoft.Extensions.Configuration.IConfigurationSource source);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.Extensions.Configuration.IConfigurationBuilder Microsoft.Extensions.Configuration.IConfigurationBuilder.Add(class Microsoft.Extensions.Configuration.IConfigurationSource source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationManager.Microsoft#Extensions#Configuration#IConfigurationBuilder#Add(Microsoft.Extensions.Configuration.IConfigurationSource)" />
      <MemberSignature Language="VB.NET" Value="Function Add (source As IConfigurationSource) As IConfigurationBuilder Implements IConfigurationBuilder.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Configuration.IConfigurationBuilder.Add : Microsoft.Extensions.Configuration.IConfigurationSource -&gt; Microsoft.Extensions.Configuration.IConfigurationBuilder&#xA;override this.Microsoft.Extensions.Configuration.IConfigurationBuilder.Add : Microsoft.Extensions.Configuration.IConfigurationSource -&gt; Microsoft.Extensions.Configuration.IConfigurationBuilder" Usage="configurationManager.Microsoft.Extensions.Configuration.IConfigurationBuilder.Add source" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::Extensions::Configuration::IConfigurationBuilder ^ Microsoft.Extensions.Configuration.IConfigurationBuilder.Add(Microsoft::Extensions::Configuration::IConfigurationSource ^ source) = Microsoft::Extensions::Configuration::IConfigurationBuilder::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Configuration.IConfigurationBuilder.Add(Microsoft.Extensions.Configuration.IConfigurationSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfigurationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Extensions.Configuration.IConfigurationSource" />
      </Parameters>
      <Docs>
        <param name="source">The configuration source to add.</param>
        <summary>Adds a new configuration source.</summary>
        <returns>The same <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> with the added configuration source.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Configuration.IConfigurationBuilder.Build">
      <MemberSignature Language="C#" Value="Microsoft.Extensions.Configuration.IConfigurationRoot IConfigurationBuilder.Build ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.Extensions.Configuration.IConfigurationRoot Microsoft.Extensions.Configuration.IConfigurationBuilder.Build() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationManager.Microsoft#Extensions#Configuration#IConfigurationBuilder#Build" />
      <MemberSignature Language="VB.NET" Value="Function Build () As IConfigurationRoot Implements IConfigurationBuilder.Build" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Configuration.IConfigurationBuilder.Build : unit -&gt; Microsoft.Extensions.Configuration.IConfigurationRoot&#xA;override this.Microsoft.Extensions.Configuration.IConfigurationBuilder.Build : unit -&gt; Microsoft.Extensions.Configuration.IConfigurationRoot" Usage="configurationManager.Microsoft.Extensions.Configuration.IConfigurationBuilder.Build " />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::Extensions::Configuration::IConfigurationRoot ^ Microsoft.Extensions.Configuration.IConfigurationBuilder.Build() = Microsoft::Extensions::Configuration::IConfigurationBuilder::Build;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Configuration.IConfigurationBuilder.Build</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfigurationRoot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Builds an <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> with keys and values from the set of sources registered in <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Sources" />.</summary>
        <returns>An <see cref="T:Microsoft.Extensions.Configuration.IConfigurationRoot" /> with keys and values from the registered sources.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,object&gt; Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Configuration.ConfigurationManager.Microsoft#Extensions#Configuration#IConfigurationBuilder#Properties" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Properties As IDictionary(Of String, Object) Implements IConfigurationBuilder.Properties" />
      <MemberSignature Language="F#" Value="member this.Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties : System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Microsoft::Extensions::Configuration::IConfigurationBuilder::Properties { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a key-value collection that can be used to share data between the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> and the registered configuration sources.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Configuration.IConfigurationBuilder.Sources">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IList&lt;Microsoft.Extensions.Configuration.IConfigurationSource&gt; Microsoft.Extensions.Configuration.IConfigurationBuilder.Sources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.Extensions.Configuration.IConfigurationSource&gt; Microsoft.Extensions.Configuration.IConfigurationBuilder.Sources" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Configuration.ConfigurationManager.Microsoft#Extensions#Configuration#IConfigurationBuilder#Sources" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Sources As IList(Of IConfigurationSource) Implements IConfigurationBuilder.Sources" />
      <MemberSignature Language="F#" Value="member this.Microsoft.Extensions.Configuration.IConfigurationBuilder.Sources : System.Collections.Generic.IList&lt;Microsoft.Extensions.Configuration.IConfigurationSource&gt;" Usage="Microsoft.Extensions.Configuration.IConfigurationBuilder.Sources" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IList&lt;Microsoft::Extensions::Configuration::IConfigurationSource ^&gt; ^ Microsoft::Extensions::Configuration::IConfigurationBuilder::Sources { System::Collections::Generic::IList&lt;Microsoft::Extensions::Configuration::IConfigurationSource ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Sources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Extensions.Configuration.IConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the sources used to obtain configuration values.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Configuration.IConfigurationRoot.Providers">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Configuration.IConfigurationProvider&gt; Microsoft.Extensions.Configuration.IConfigurationRoot.Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Configuration.IConfigurationProvider&gt; Microsoft.Extensions.Configuration.IConfigurationRoot.Providers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Configuration.ConfigurationManager.Microsoft#Extensions#Configuration#IConfigurationRoot#Providers" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Providers As IEnumerable(Of IConfigurationProvider) Implements IConfigurationRoot.Providers" />
      <MemberSignature Language="F#" Value="member this.Microsoft.Extensions.Configuration.IConfigurationRoot.Providers : seq&lt;Microsoft.Extensions.Configuration.IConfigurationProvider&gt;" Usage="Microsoft.Extensions.Configuration.IConfigurationRoot.Providers" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Configuration::IConfigurationProvider ^&gt; ^ Microsoft::Extensions::Configuration::IConfigurationRoot::Providers { System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Configuration::IConfigurationProvider ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Extensions.Configuration.IConfigurationRoot.Providers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Configuration.IConfigurationProvider&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the configuration providers for this configuration.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Configuration.IConfigurationRoot.Reload">
      <MemberSignature Language="C#" Value="void IConfigurationRoot.Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Configuration.IConfigurationRoot.Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Configuration.ConfigurationManager.Microsoft#Extensions#Configuration#IConfigurationRoot#Reload" />
      <MemberSignature Language="VB.NET" Value="Sub Reload () Implements IConfigurationRoot.Reload" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Configuration.IConfigurationRoot.Reload : unit -&gt; unit&#xA;override this.Microsoft.Extensions.Configuration.IConfigurationRoot.Reload : unit -&gt; unit" Usage="configurationManager.Microsoft.Extensions.Configuration.IConfigurationRoot.Reload " />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Configuration.IConfigurationRoot.Reload() = Microsoft::Extensions::Configuration::IConfigurationRoot::Reload;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Configuration.IConfigurationRoot.Reload</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces the configuration values to be reloaded from the underlying <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider" /> instances.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sources">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.Extensions.Configuration.IConfigurationSource&gt; Sources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.Extensions.Configuration.IConfigurationSource&gt; Sources" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Configuration.ConfigurationManager.Sources" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sources As IList(Of IConfigurationSource)" />
      <MemberSignature Language="F#" Value="member this.Sources : System.Collections.Generic.IList&lt;Microsoft.Extensions.Configuration.IConfigurationSource&gt;" Usage="Microsoft.Extensions.Configuration.ConfigurationManager.Sources" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;Microsoft::Extensions::Configuration::IConfigurationSource ^&gt; ^ Sources { System::Collections::Generic::IList&lt;Microsoft::Extensions::Configuration::IConfigurationSource ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Sources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Configuration</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Extensions.Configuration.IConfigurationSource&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the sources used to obtain configuration values.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
