<Type Name="IDynamicPropertyTypeProvider" FullName="System.Workflow.ComponentModel.IDynamicPropertyTypeProvider">
  <TypeSignature Language="C#" Value="public interface IDynamicPropertyTypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDynamicPropertyTypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDynamicPropertyTypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDynamicPropertyTypeProvider" />
  <TypeSignature Language="F#" Value="type IDynamicPropertyTypeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a property type to the bind infrastructure. It is implemented by activities that contain a property of variable type, where the type can vary depending on other activity settings.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 This interface allows the parent activity to associate two properties and indicate to the bind infrastructure the type to be used in validating the bind. For example, you might have an activity with two properties, `TypeProperty` and `ValueProperty`, where `TypeProperty` specifies a valid type for the value of `ValueProperty`. In such a case, the parent activity implements the <xref:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider> interface.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetAccessType">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Compiler.AccessTypes GetAccessType (IServiceProvider serviceProvider, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Workflow.ComponentModel.Compiler.AccessTypes GetAccessType(class System.IServiceProvider serviceProvider, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(System.IServiceProvider,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessType (serviceProvider As IServiceProvider, propertyName As String) As AccessTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::ComponentModel::Compiler::AccessTypes GetAccessType(IServiceProvider ^ serviceProvider, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessType : IServiceProvider * string -&gt; System.Workflow.ComponentModel.Compiler.AccessTypes" Usage="iDynamicPropertyTypeProvider.GetAccessType (serviceProvider, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Compiler.AccessTypes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are needed.</param>
        <param name="propertyName">The name of the property.</param>
        <summary>Returns the access type for the specified property.</summary>
        <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Used at compile time to validate if the properties are correctly bound to one other. Without this interface, this information is inferred directly from property getter/setters.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyType">
      <MemberSignature Language="C#" Value="public Type GetPropertyType (IServiceProvider serviceProvider, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetPropertyType(class System.IServiceProvider serviceProvider, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(System.IServiceProvider,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyType (serviceProvider As IServiceProvider, propertyName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetPropertyType(IServiceProvider ^ serviceProvider, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyType : IServiceProvider * string -&gt; Type" Usage="iDynamicPropertyTypeProvider.GetPropertyType (serviceProvider, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design-time services if they are needed.</param>
        <param name="propertyName">The name of the property.</param>
        <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
        <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Used at compile time to validate if the properties are correctly bound to one other.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
