<Type Name="IHybridCacheSerializerFactory" FullName="Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializerFactory">
  <TypeSignature Language="C#" Value="public interface IHybridCacheSerializerFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IHybridCacheSerializerFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializerFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHybridCacheSerializerFactory" />
  <TypeSignature Language="F#" Value="type IHybridCacheSerializerFactory = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHybridCacheSerializerFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Caching.Hybrid</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Caching.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Factory provider for per-type <see cref="T:Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer`1" /> instances.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryCreateSerializer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public bool TryCreateSerializer&lt;T&gt; (out Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer&lt;T&gt;? serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateSerializer&lt;T&gt;([out] class Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer`1&lt;!!T&gt;&amp; serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializerFactory.TryCreateSerializer``1(Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCreateSerializer(Of T) (ByRef serializer As IHybridCacheSerializer(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCreateSerializer : IHybridCacheSerializer -&gt; bool" Usage="iHybridCacheSerializerFactory.TryCreateSerializer serializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; bool TryCreateSerializer([Runtime::InteropServices::Out] Microsoft::Extensions::Caching::Hybrid::IHybridCacheSerializer&lt;T&gt; ^ % serializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Caching.Hybrid</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Caching.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="serializer" Type="Microsoft.Extensions.Caching.Hybrid.IHybridCacheSerializer&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-9.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type being serialized/deserialized.</typeparam>
        <param name="serializer">The serializer.</param>
        <summary>
            Request a serializer for the provided type, if possible.
            </summary>
        <returns>
          <c>true</c> if the factory supports this type, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
