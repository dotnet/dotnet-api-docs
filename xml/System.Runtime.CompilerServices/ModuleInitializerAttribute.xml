<Type Name="ModuleInitializerAttribute" FullName="System.Runtime.CompilerServices.ModuleInitializerAttribute">
  <TypeSignature Language="C#" Value="public sealed class ModuleInitializerAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ModuleInitializerAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.ModuleInitializerAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ModuleInitializerAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ModuleInitializerAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ModuleInitializerAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Used to indicate to the compiler that a method should be called in its containing module's initializer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

When one or more valid methods with this attribute are found in a compilation, the compiler will emit a module initializer that calls each of the attributed methods.

Certain requirements are imposed on any method targeted with this attribute:

- The method must be `static`.
- The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, and so on.
- The method must be parameterless.
- The method must return `void`.
- The method must not be generic or be contained in a generic type.
- The method's effective accessibility must be `internal` or `public`.

For more information, see [the specification for module initializers](https://github.com/dotnet/runtime/blob/master/docs/design/specs/Ecma-335-Augments.md#module-initializer).

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ModuleInitializerAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ModuleInitializerAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ModuleInitializerAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ModuleInitializerAttribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

The <xref:System.Runtime.CompilerServices.ModuleInitializerAttribute> attribute provides additional runtime guarantees to methods. For example, the marked methods are guaranteed to run before any other method is invoked or any field is accessed in the whole module.
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
