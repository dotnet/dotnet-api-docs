<Type Name="ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback" FullName="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback">
  <TypeSignature Language="C#" Value="public delegate TValue ConditionalWeakTable&lt;TKey,TValue&gt;.CreateValueCallback(TKey key) where TKey : class where TValue : class;" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed ConditionalWeakTable`2/CreateValueCallback&lt;class TKey, class TValue&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function ConditionalWeakTable(Of TKey, TValue).CreateValueCallback(key As TKey) As TValue " />
  <TypeSignature Language="C++ CLI" Value="public:  where TKey : class where TValue : classdelegate TValue ConditionalWeakTable&lt;TKey, TValue&gt;::CreateValueCallback(TKey key);" />
  <TypeSignature Language="F#" Value="type ConditionalWeakTable&lt;'Key, 'Value (requires 'Key : null and 'Value : null)&gt;.CreateValueCallback = delegate of 'Key -&gt; 'Value" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="key" Type="TKey" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TValue</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="key">The key that belongs to the value to create.</param>
    <summary>Represents a method that creates a non-default value to add as part of a key/value pair to a [ConditionalWeakTable\&lt;TKey, TValue\&gt;](https://msdn.microsoft.com/en-us/library/dd287757\(v=vs.110\)) object.</summary>
    <returns>An instance of a reference type that represents the value to attach to the specified key.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks  
The ConditionalWeakTable\<TKey, TValue\>.CreateValueCallback delegate encapsulates a callback method that is invoked by the [ConditionalWeakTable\<TKey, TValue\>.GetValue](https://msdn.microsoft.com/en-us/library/dd413870\(v=vs.110\)) method when the key passed to the method is not found in the [ConditionalWeakTable\<TKey, TValue\>](https://msdn.microsoft.com/en-us/library/dd287757\(v=vs.110\)) object. The [GetValue](https://msdn.microsoft.com/en-us/library/dd413870\(v=vs.110\)) method passes the callback method the key that represents a managed object to which a property value is to be dynamically attached. The method is responsible for returning the property value to its caller, which, in turn, adds the key/value pair to the table.

The ConditionalWeakTable\<TKey, TValue\>.CreateValueCallback method is used to return an instance of a reference type that can be attached to the specified key. It enables that instance to be initialized using non-default values. If the key is not found in the table, the [ConditionalWeakTable\<TKey, TValue\>.GetOrCreateValue](https://msdn.microsoft.com/en-us/library/dd384250\(v=vs.110\)) method adds a key/value pair in which the value is initialized using default values.

## Examples  
The following example defines a MainClass class and a MainInfo class. MainInfo provides information about the MainClass instance. It also defines a static (**Shared** in Visual Basic) CreateAttachedValue method that can be assigned to the ConditionalWeakTable\<TKey, TValue\>.CreateValueCallback delegate and passed to the [GetValue](https://msdn.microsoft.com/en-us/library/dd413870\(v=vs.110\)) method. The example calls the [GetValue](https://msdn.microsoft.com/en-us/library/dd413870\(v=vs.110\)) method to add a MainClass object and its corresponding MainInfo object to a [ConditionalWeakTable\<TKey, TValue\>](https://msdn.microsoft.com/en-us/library/dd287757\(v=vs.110\)) table. The example also illustrates calls to the [Add](https://msdn.microsoft.com/en-us/library/dd287785\(v=vs.110\)) and [GetOrCreateValue](https://msdn.microsoft.com/en-us/library/dd384250\(v=vs.110\)) methods to add key/value pairs to the table, and a call to the [TryGetValue](https://msdn.microsoft.com/en-us/library/dd287578\(v=vs.110\)) method to retrieve the value that belongs to an existing key.

``` csharp
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

public class Example
{
   string Name; 

   public Example(string name)
   {
      this.Name = name;
   }

   public override string ToString()
   {
      return this.Name;
   }
}

// Define a class to contain information about each Example instance.
public class ExampleInfo
{
   public string Name;
   public int Methods;
   public int Properties;

   public override string ToString()
   {
      return String.Format("{0}: {1} Methods, {2} Properties", 
                           this.Name, this.Methods, this.Properties);
   }
}

public class ExampleTest
{
   private static BindingFlags flags = BindingFlags.Public | BindingFlags.Instance;

   public static void Main()
   {
      Example ex1 = new Example("ex1");
      Example ex2 = new Example("ex2");
      Example ex3 = new Example("ex3");

      ExampleInfo exInfo1 = new ExampleInfo(); 
      exInfo1.Name = ex1.ToString();
      exInfo1.Methods = ex1.GetType().GetMethods(flags).Length;
      exInfo1.Properties = ex1.GetType().GetProperties(flags).Length;

      ExampleInfo exInfo3 = new ExampleInfo(); 
      exInfo3.Name = ex3.ToString();
      exInfo3.Methods = ex3.GetType().GetMethods(flags).Length;
      exInfo3.Properties = ex3.GetType().GetProperties(flags).Length;

      var attached = new ConditionalWeakTable<Example, ExampleInfo>();
      ExampleInfo value = null;

      // Attach a property to ex1 using the Add method, then retrieve it.
      attached.Add(ex1, exInfo1);
      if (attached.TryGetValue(ex1, out value))
         Console.WriteLine("{0}, {1}", ex1, value);
      else
         Console.WriteLine("{0} does not have an attached property.", ex1);

      // Attempt to retrieve the value attached to ex2.
      value = attached.GetValue(ex2, ExampleTest.CreateAttachedValue);      
      if (attached.TryGetValue(ex2, out value))
         Console.WriteLine("{0}, {1}", ex2, value);
      else 
         Console.WriteLine("{0} does not have an attached property.", ex2);

      // Attempt to retrieve the value attached to ex3.
      value = attached.GetOrCreateValue(ex3);
      Console.WriteLine("{0}, {1}", ex3, value);
   }

   public static ExampleInfo CreateAttachedValue(Example ex)
   {
      ExampleInfo info = new ExampleInfo();
      info.Name = ex.ToString();
      info.Methods = ex.GetType().GetMethods(flags).Length;
      info.Properties = ex.GetType().GetProperties(flags).Length;
      return info;
   }
}
// The example displays the following output:
//       ex1, ex1: 4 Methods, 0 Properties
//       ex2, ex2: 4 Methods, 0 Properties
//       ex3, : 0 Methods, 0 Properties
```

``` vb
Imports System.Reflection
Imports System.Runtime.CompilerServices

Public Class Example
   Public Name As String

   Public Sub New(name As String)
      Me.Name = name
   End Sub

   Public Overrides Function ToString() As String
      Return Me.Name
   End Function
End Class

' Define a class to contain information about each Example instance.
Public Class ExampleInfo
   Public Name As String
   Public Methods As Integer
   Public Properties As Integer

   Public Overrides Function ToString() As String
      Return String.Format("{0}: {1} Methods, {2} Properties", _
                           Me.Name, Me.Methods, Me.Properties)
   End Function
End Class

Module TestExample

   Private flags As BindingFlags = BindingFlags.Public Or BindingFlags.Instance

   Public Sub Main()
      Dim ex1 As New Example("ex1")
      Dim ex2 As New Example("ex2")
      Dim ex3 As New Example("ex3")

      Dim exInfo1 As New ExampleInfo() 
      exInfo1.Name = ex1.ToString()
      exInfo1.Methods = ex1.GetType().GetMethods(flags).Count
      exInfo1.Properties = ex1.GetType().GetProperties(flags).Count

      Dim exInfo3 As New ExampleInfo() 
      exInfo3.Name = ex3.ToString()
      exInfo3.Methods = ex3.GetType().GetMethods(flags).Count
      exInfo3.Properties = ex3.GetType().GetProperties(flags).Count

      Dim attached As New ConditionalWeakTable(Of Example, ExampleInfo)
      Dim value As ExampleInfo = Nothing

      ' Attach a property to ex1 using the Add method, then retrieve it.
      attached.Add(ex1, exInfo1)
      If attached.TryGetValue(ex1, value) Then
         Console.WriteLine("{0}, {1}", ex1, value)
      Else
         Console.WriteLine("{0} does not have an attached property.", ex1)
      End If

      ' Attempt to retrieve the value attached to ex2.
      value = attached.GetValue(ex2, AddressOf TestExample.CreateAttachedValue)      
      If attached.TryGetValue(ex2, value) Then
         Console.WriteLine("{0}, {1}", ex2, value)
      Else 
         Console.WriteLine("{0} does not have an attached property.", ex2)
      End If

      ' Atttempt to retrieve the value attached to ex3.
      value = attached.GetOrCreateValue(ex3)
      Console.WriteLine("{0}, {1}", ex3, value)
   End Sub

   Public Function CreateAttachedValue(ex As Example) As ExampleInfo
      Dim info As New ExampleInfo()
      info.Name = ex.ToString()
      info.Methods = ex.GetType().GetMethods(flags).Count
      info.Properties = ex.GetType().GetProperties(flags).Count
      Return info
   End Function
End Module
' The example displays the following output:
'       ex1, ex1: 4 Methods, 0 Properties
'       ex2, ex2: 4 Methods, 0 Properties
'       ex3, : 0 Methods, 0 Properties
```]]></format>
    </remarks>
    <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
    <related type="Article" href="https://msdn.microsoft.com/en-us/library/dd413870\(v=vs.110\)">ConditionalWeakTable&lt;TKey, TValue&gt;.GetValue</related>
  </Docs>
</Type>