<Type Name="IEnrichmentTagCollector" FullName="Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector">
  <TypeSignature Language="C#" Value="public interface IEnrichmentTagCollector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnrichmentTagCollector" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnrichmentTagCollector" />
  <TypeSignature Language="F#" Value="type IEnrichmentTagCollector = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnrichmentTagCollector" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Allows enrichers to report enrichment properties.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; tags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(valuetype System.ReadOnlySpan`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (tags As ReadOnlySpan(Of KeyValuePair(Of String, Object)))" />
      <MemberSignature Language="F#" Value="abstract member Add : ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; unit" Usage="iEnrichmentTagCollector.Add tags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(ReadOnlySpan&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; tags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 0, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 0, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tags">The tags to add.</param>
        <summary>
            Adds a series of tags.
            </summary>
        <remarks>Refer to the <see cref="M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System.String,System.Object)" /> overload for a description of the serialization semantics.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; tags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(valuetype System.ReadOnlySpan`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (tags As ReadOnlySpan(Of KeyValuePair(Of String, String)))" />
      <MemberSignature Language="F#" Value="abstract member Add : ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt; -&gt; unit" Usage="iEnrichmentTagCollector.Add tags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(ReadOnlySpan&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::String ^&gt;&gt; tags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 0, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 0, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tags">The tags to add.</param>
        <summary>
            Adds a series of tags.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string tagName, object tagValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(string tagName, object tagValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (tagName As String, tagValue As Object)" />
      <MemberSignature Language="F#" Value="abstract member Add : string * obj -&gt; unit" Usage="iEnrichmentTagCollector.Add (tagName, tagValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ tagName, System::Object ^ tagValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="tagValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="tagName">Enrichment property key.</param>
        <param name="tagValue">Enrichment property value.</param>
        <summary>
            Adds a tag in form of a key/value pair.
            </summary>
        <remarks>
            For log enrichment, <paramref name="tagValue" /> is serialized as per the rules below:
            <list type="bullet"><listheader><term>Primitive types</term><description>recognized and efficiently serialized.</description></listheader><item><term>Arrays</term><description>recognized and serialized in a loop.</description></item><item><term><see cref="T:System.Collections.IDictionary" /></term><description>recognized as IDictionary&lt;string, object&gt; and serialized in a loop.</description></item><item><term><see cref="T:System.DateTime" /></term><description>recognized and serialized after converting to <see cref="M:System.DateTime.ToUniversalTime" />.</description></item><item><term>All the rest</term><description>converted to <see cref="T:System.String" /> as is and serialized.</description></item></list>
            For metric enrichment, <paramref name="tagValue" /> is converted to <see cref="T:System.String" /> format using <see cref="M:System.Object.ToString" /> method.
            </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="tagName" /> is an empty string.</exception>
        <exception cref="T:System.ArgumentNullException">
            Either <paramref name="tagName" /> or <paramref name="tagValue" /> is <see langword="null" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string tagName, string tagValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(string tagName, string tagValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (tagName As String, tagValue As String)" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string -&gt; unit" Usage="iEnrichmentTagCollector.Add (tagName, tagValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ tagName, System::String ^ tagValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="tagValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Enrichment property key.</param>
        <param name="tagValue">Enrichment property value.</param>
        <summary>
            Adds a tag in form of a key/value pair.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="tagName" /> is an empty string.</exception>
        <exception cref="T:System.ArgumentNullException">
            Either <paramref name="tagName" /> or <paramref name="tagValue" /> is <see langword="null" />.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
