<Type Name="IStartupInitializationBuilder" FullName="Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder">
  <TypeSignature Language="C#" Value="public interface IStartupInitializationBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStartupInitializationBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStartupInitializationBuilder" />
  <TypeSignature Language="F#" Value="type IStartupInitializationBuilder = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStartupInitializationBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Hosting.Testing.StartupInitialization</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Configure service startup initialization.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddInitializer">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder AddInitializer (Func&lt;IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder AddInitializer(class System.Func`3&lt;class System.IServiceProvider, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder.AddInitializer(System.Func{System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddInitializer (initializer As Func(Of IServiceProvider, CancellationToken, Task)) As IStartupInitializationBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddInitializer : Func&lt;IServiceProvider, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder" Usage="iStartupInitializationBuilder.AddInitializer initializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Extensions::Hosting::Testing::IStartupInitializationBuilder ^ AddInitializer(Func&lt;IServiceProvider ^, System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Testing.StartupInitialization</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Func&lt;System.IServiceProvider,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="initializer">Initializer to execute.</param>
        <summary>
            Add ad-hoc initializer to be executed at service startup.
            </summary>
        <returns>Instance of <see cref="T:Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder" /> for further configuration.</returns>
        <remarks>
            Note, that there is no indempotency semantics while calling this API.
            Therefore, this interface is not recommended for library authors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInitializer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder AddInitializer&lt;T&gt; () where T : class, Microsoft.Extensions.Hosting.Testing.IStartupInitializer;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder AddInitializer&lt;class (class Microsoft.Extensions.Hosting.Testing.IStartupInitializer) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder.AddInitializer``1" />
      <MemberSignature Language="VB.NET" Value="Public Function AddInitializer(Of T As {Class, IStartupInitializer}) () As IStartupInitializationBuilder" />
      <MemberSignature Language="F#" Value="abstract member AddInitializer : unit -&gt; Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder (requires 'T : null and 'T :&gt; Microsoft.Extensions.Hosting.Testing.IStartupInitializer)" Usage="iStartupInitializationBuilder.AddInitializer " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class, Microsoft::Extensions::Hosting::Testing::IStartupInitializer Microsoft::Extensions::Hosting::Testing::IStartupInitializationBuilder ^ AddInitializer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Testing.StartupInitialization</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.Extensions.Hosting.Testing.IStartupInitializer</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Type of the initializer to add.</typeparam>
        <summary>
            Adds initializer of given type to be executed at service startup.
            </summary>
        <returns>Instance of <see cref="T:Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder" /> for further configuration.</returns>
        <remarks>
            The initializers should be pure functions, i.e. they shouldn't hold any state.
            They are used in transient manner, and the implementation is not guaranteed to be reachable by GC after startup time.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Services">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.DependencyInjection.IServiceCollection Services" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder.Services" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Services As IServiceCollection" />
      <MemberSignature Language="F#" Value="member this.Services : Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Hosting.Testing.IStartupInitializationBuilder.Services" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::DependencyInjection::IServiceCollection ^ Services { Microsoft::Extensions::DependencyInjection::IServiceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Testing.StartupInitialization</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets services used add initializers.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
