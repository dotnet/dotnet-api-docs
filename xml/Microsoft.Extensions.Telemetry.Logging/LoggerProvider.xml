<Type Name="LoggerProvider" FullName="Microsoft.Extensions.Telemetry.Logging.LoggerProvider">
  <TypeSignature Language="C#" Value="public sealed class LoggerProvider : OpenTelemetry.BaseProvider, IDisposable, Microsoft.Extensions.Logging.ILoggerProvider, Microsoft.Extensions.Logging.ISupportExternalScope" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggerProvider extends OpenTelemetry.BaseProvider implements class Microsoft.Extensions.Logging.ILoggerProvider, class Microsoft.Extensions.Logging.ISupportExternalScope, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Logging.LoggerProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggerProvider&#xA;Inherits BaseProvider&#xA;Implements IDisposable, ILoggerProvider, ISupportExternalScope" />
  <TypeSignature Language="F#" Value="type LoggerProvider = class&#xA;    inherit BaseProvider&#xA;    interface ILoggerProvider&#xA;    interface IDisposable&#xA;    interface ISupportExternalScope" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggerProvider sealed : OpenTelemetry::BaseProvider, IDisposable, Microsoft::Extensions::Logging::ILoggerProvider, Microsoft::Extensions::Logging::ISupportExternalScope" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>OpenTelemetry.BaseProvider</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.ISupportExternalScope</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Microsoft.Extensions.Logging.ProviderAlias("R9")]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.Extensions.Logging.ProviderAlias("R9")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            OpenTelemetry Logger provider class.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateLogger">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.ILogger CreateLogger (string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Logging.ILogger CreateLogger(string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerProvider.CreateLogger(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateLogger (categoryName As String) As ILogger" />
      <MemberSignature Language="F#" Value="abstract member CreateLogger : string -&gt; Microsoft.Extensions.Logging.ILogger&#xA;override this.CreateLogger : string -&gt; Microsoft.Extensions.Logging.ILogger" Usage="loggerProvider.CreateLogger categoryName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::Logging::ILogger ^ CreateLogger(System::String ^ categoryName);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILoggerProvider.CreateLogger(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">The category name for message produced by the logger.</param>
        <summary>
            Creates a new Microsoft.Extensions.Logging.ILogger instance.
            </summary>
        <returns>ILogger object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerProvider.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="loggerProvider.Dispose disposing" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Parameter indicating whether resources need disposing.</param>
        <summary>
            Performs tasks related to freeing up resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetScopeProvider">
      <MemberSignature Language="C#" Value="public void SetScopeProvider (Microsoft.Extensions.Logging.IExternalScopeProvider scopeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScopeProvider(class Microsoft.Extensions.Logging.IExternalScopeProvider scopeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetScopeProvider (scopeProvider As IExternalScopeProvider)" />
      <MemberSignature Language="F#" Value="abstract member SetScopeProvider : Microsoft.Extensions.Logging.IExternalScopeProvider -&gt; unit&#xA;override this.SetScopeProvider : Microsoft.Extensions.Logging.IExternalScopeProvider -&gt; unit" Usage="loggerProvider.SetScopeProvider scopeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetScopeProvider(Microsoft::Extensions::Logging::IExternalScopeProvider ^ scopeProvider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ISupportExternalScope.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeProvider" Type="Microsoft.Extensions.Logging.IExternalScopeProvider" />
      </Parameters>
      <Docs>
        <param name="scopeProvider">scope provider object.</param>
        <summary>
            Sets external scope information source for logger provider.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
