<Type Name="LoggerMessageState" FullName="Microsoft.Extensions.Telemetry.Logging.LoggerMessageState">
  <TypeSignature Language="C#" Value="public sealed class LoggerMessageState : Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector, Microsoft.Extensions.Telemetry.Logging.ITagCollector, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;, System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;, System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggerMessageState extends System.Object implements class Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector, class Microsoft.Extensions.Telemetry.Logging.ITagCollector, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggerMessageState&#xA;Implements IEnrichmentTagCollector, IEnumerable(Of KeyValuePair(Of String, Object)), IReadOnlyCollection(Of KeyValuePair(Of String, Object)), IReadOnlyList(Of KeyValuePair(Of String, Object)), ITagCollector" />
  <TypeSignature Language="F#" Value="type LoggerMessageState = class&#xA;    interface IEnrichmentTagCollector&#xA;    interface IReadOnlyList&lt;KeyValuePair&lt;string, obj&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;string, obj&gt;&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;KeyValuePair&lt;string, obj&gt;&gt;&#xA;    interface ITagCollector" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggerMessageState sealed : Microsoft::Extensions::Telemetry::Enrichment::IEnrichmentTagCollector, Microsoft::Extensions::Telemetry::Logging::ITagCollector, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;, System::Collections::Generic::IReadOnlyCollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;, System::Collections::Generic::IReadOnlyList&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Telemetry.Logging.ITagCollector</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0003", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0003", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Additional state to use with <see cref="M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LoggerMessageState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LoggerMessageState();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClassifiedTag">
      <MemberSignature Language="C#" Value="public void AddClassifiedTag (string name, object? value, Microsoft.Extensions.Compliance.Classification.DataClassification classification);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddClassifiedTag(string name, object value, valuetype Microsoft.Extensions.Compliance.Classification.DataClassification classification) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.AddClassifiedTag(System.String,System.Object,Microsoft.Extensions.Compliance.Classification.DataClassification)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddClassifiedTag (name As String, value As Object, classification As DataClassification)" />
      <MemberSignature Language="F#" Value="member this.AddClassifiedTag : string * obj * Microsoft.Extensions.Compliance.Classification.DataClassification -&gt; unit" Usage="loggerMessageState.AddClassifiedTag (name, value, classification)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddClassifiedTag(System::String ^ name, System::Object ^ value, Microsoft::Extensions::Compliance::Classification::DataClassification classification);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="classification" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
      </Parameters>
      <Docs>
        <param name="name">The name of the tag.</param>
        <param name="value">The value.</param>
        <param name="classification">The data classification of the tag.</param>
        <summary>
            Adds a classified tag to the array.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTag">
      <MemberSignature Language="C#" Value="public void AddTag (string name, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddTag(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.AddTag(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddTag (name As String, value As Object)" />
      <MemberSignature Language="F#" Value="member this.AddTag : string * obj -&gt; unit" Usage="loggerMessageState.AddTag (name, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddTag(System::String ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">The name of the tag.</param>
        <param name="value">The value.</param>
        <summary>
            Adds a tag to the array.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassifiedTagArray">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.ClassifiedTag[] ClassifiedTagArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Extensions.Telemetry.Logging.LoggerMessageState/ClassifiedTag[] ClassifiedTagArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.ClassifiedTagArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClassifiedTagArray As LoggerMessageState.ClassifiedTag()" />
      <MemberSignature Language="F#" Value="member this.ClassifiedTagArray : Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.ClassifiedTag[]" Usage="Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.ClassifiedTagArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Microsoft::Extensions::Telemetry::Logging::LoggerMessageState::ClassifiedTag&gt; ^ ClassifiedTagArray { cli::array &lt;Microsoft::Extensions::Telemetry::Logging::LoggerMessageState::ClassifiedTag&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Telemetry.Logging.LoggerMessageState+ClassifiedTag[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the array of classified tags.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="loggerMessageState.Clear " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Resets state of this object to its initial condition.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.KeyValuePair&lt;string,object?&gt; this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt; Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As KeyValuePair(Of String, Object)" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Collections.Generic.KeyValuePair&lt;string, obj&gt;" Usage="Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt; default[int] { System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt; get(int index); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 2 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 2 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the element to get.</param>
        <summary>Gets the element at the specified index in the read-only list.</summary>
        <value>The element at the specified index in the read-only list.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add">
      <MemberSignature Language="C#" Value="void IEnrichmentTagCollector.Add (ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; tags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(valuetype System.ReadOnlySpan`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.Microsoft#Extensions#Telemetry#Enrichment#IEnrichmentTagCollector#Add(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (tags As ReadOnlySpan(Of KeyValuePair(Of String, Object))) Implements IEnrichmentTagCollector.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add : ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; unit&#xA;override this.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add : ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; unit" Usage="loggerMessageState.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add tags" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(ReadOnlySpan&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; tags) = Microsoft::Extensions::Telemetry::Enrichment::IEnrichmentTagCollector::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 0, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 0, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tags">The tags to add.</param>
        <summary>Adds a series of tags.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add">
      <MemberSignature Language="C#" Value="void IEnrichmentTagCollector.Add (ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; tags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(valuetype System.ReadOnlySpan`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.Microsoft#Extensions#Telemetry#Enrichment#IEnrichmentTagCollector#Add(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (tags As ReadOnlySpan(Of KeyValuePair(Of String, String))) Implements IEnrichmentTagCollector.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add : ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt; -&gt; unit&#xA;override this.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add : ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt; -&gt; unit" Usage="loggerMessageState.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add tags" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(ReadOnlySpan&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::String ^&gt;&gt; tags) = Microsoft::Extensions::Telemetry::Enrichment::IEnrichmentTagCollector::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.String}})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 0, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 0, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tags">The tags to add.</param>
        <summary>Adds a series of tags.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add">
      <MemberSignature Language="C#" Value="void IEnrichmentTagCollector.Add (string key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(string key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.Microsoft#Extensions#Telemetry#Enrichment#IEnrichmentTagCollector#Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As String, value As Object) Implements IEnrichmentTagCollector.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add : string * obj -&gt; unit&#xA;override this.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add : string * obj -&gt; unit" Usage="loggerMessageState.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add (key, value)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System::String ^ key, System::Object ^ value) = Microsoft::Extensions::Telemetry::Enrichment::IEnrichmentTagCollector::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>Adds a tag in form of a key/value pair.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add">
      <MemberSignature Language="C#" Value="void IEnrichmentTagCollector.Add (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.Microsoft#Extensions#Telemetry#Enrichment#IEnrichmentTagCollector#Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As String, value As String) Implements IEnrichmentTagCollector.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add : string * string -&gt; unit&#xA;override this.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add : string * string -&gt; unit" Usage="loggerMessageState.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add (key, value)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System::String ^ key, System::String ^ value) = Microsoft::Extensions::Telemetry::Enrichment::IEnrichmentTagCollector::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentTagCollector.Add(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>Adds a tag in form of a key/value pair.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add">
      <MemberSignature Language="C#" Value="void ITagCollector.Add (string tagName, object? tagValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add(string tagName, object tagValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.Microsoft#Extensions#Telemetry#Logging#ITagCollector#Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (tagName As String, tagValue As Object) Implements ITagCollector.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add : string * obj -&gt; unit&#xA;override this.Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add : string * obj -&gt; unit" Usage="loggerMessageState.Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add (tagName, tagValue)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add(System::String ^ tagName, System::Object ^ tagValue) = Microsoft::Extensions::Telemetry::Logging::ITagCollector::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="tagValue" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tagName">The name of the tag to add.</param>
        <param name="tagValue">The value of the tag to add.</param>
        <summary>Adds a tag.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add">
      <MemberSignature Language="C#" Value="void ITagCollector.Add (string tagName, object? tagValue, Microsoft.Extensions.Compliance.Classification.DataClassification classification);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add(string tagName, object tagValue, valuetype Microsoft.Extensions.Compliance.Classification.DataClassification classification) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.Microsoft#Extensions#Telemetry#Logging#ITagCollector#Add(System.String,System.Object,Microsoft.Extensions.Compliance.Classification.DataClassification)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (tagName As String, tagValue As Object, classification As DataClassification) Implements ITagCollector.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add : string * obj * Microsoft.Extensions.Compliance.Classification.DataClassification -&gt; unit&#xA;override this.Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add : string * obj * Microsoft.Extensions.Compliance.Classification.DataClassification -&gt; unit" Usage="loggerMessageState.Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add (tagName, tagValue, classification)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add(System::String ^ tagName, System::Object ^ tagValue, Microsoft::Extensions::Compliance::Classification::DataClassification classification) = Microsoft::Extensions::Telemetry::Logging::ITagCollector::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add(System.String,System.Object,Microsoft.Extensions.Compliance.Classification.DataClassification)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="tagValue" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="classification" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
      </Parameters>
      <Docs>
        <param name="tagName">The name of the tag to add.</param>
        <param name="tagValue">The value of the tag to add.</param>
        <param name="classification">The data classification of the tag value.</param>
        <summary>Adds a tag.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="NumClassifiedTags">
      <MemberSignature Language="C#" Value="public int NumClassifiedTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumClassifiedTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.NumClassifiedTags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumClassifiedTags As Integer" />
      <MemberSignature Language="F#" Value="member this.NumClassifiedTags : int" Usage="Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.NumClassifiedTags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumClassifiedTags { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating the number of classified tags currently in this instance.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumRedactedTags">
      <MemberSignature Language="C#" Value="public int NumRedactedTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumRedactedTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.NumRedactedTags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumRedactedTags As Integer" />
      <MemberSignature Language="F#" Value="member this.NumRedactedTags : int" Usage="Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.NumRedactedTags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumRedactedTags { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating the number of redacted tags currently in this instance.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumTags">
      <MemberSignature Language="C#" Value="public int NumTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.NumTags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumTags As Integer" />
      <MemberSignature Language="F#" Value="member this.NumTags : int" Usage="Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.NumTags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumTags { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating the number of unclassified tags currently in this instance.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedactedTagArray">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.KeyValuePair&lt;string,object&gt;[] RedactedTagArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;[] RedactedTagArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.RedactedTagArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RedactedTagArray As KeyValuePair(Of String, Object)()" />
      <MemberSignature Language="F#" Value="member this.RedactedTagArray : System.Collections.Generic.KeyValuePair&lt;string, obj&gt;[]" Usage="Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.RedactedTagArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ RedactedTagArray { cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the array of tags.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReserveClassifiedTagSpace">
      <MemberSignature Language="C#" Value="public int ReserveClassifiedTagSpace (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReserveClassifiedTagSpace(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.ReserveClassifiedTagSpace(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReserveClassifiedTagSpace (count As Integer) As Integer" />
      <MemberSignature Language="F#" Value="member this.ReserveClassifiedTagSpace : int -&gt; int" Usage="loggerMessageState.ReserveClassifiedTagSpace count" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReserveClassifiedTagSpace(int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">The amount of space to allocate.</param>
        <summary>
            Allocates some room to put some tags.
            </summary>
        <returns>The index in the <see cref="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.ClassifiedTagArray" /> where to store the classified tags.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReserveRedactedTagSpace">
      <MemberSignature Language="C#" Value="public int ReserveRedactedTagSpace (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReserveRedactedTagSpace(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.ReserveRedactedTagSpace(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReserveRedactedTagSpace (count As Integer) As Integer" />
      <MemberSignature Language="F#" Value="member this.ReserveRedactedTagSpace : int -&gt; int" Usage="loggerMessageState.ReserveRedactedTagSpace count" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReserveRedactedTagSpace(int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">The amount of space to allocate.</param>
        <summary>
            Allocates some room to put some redacted tags.
            </summary>
        <returns>The index in the <see cref="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.RedactedTagArray" /> where to store the tags.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReserveTagSpace">
      <MemberSignature Language="C#" Value="public int ReserveTagSpace (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReserveTagSpace(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.ReserveTagSpace(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReserveTagSpace (count As Integer) As Integer" />
      <MemberSignature Language="F#" Value="member this.ReserveTagSpace : int -&gt; int" Usage="loggerMessageState.ReserveTagSpace count" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReserveTagSpace(int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">The amount of space to allocate.</param>
        <summary>
            Allocates some room to put some tags.
            </summary>
        <returns>The index in the <see cref="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.TagArray" /> where to store the tags.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,object?&gt;&gt; IEnumerable&lt;KeyValuePair&lt;string,object&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Object&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value=" Iterator Overridable NotOverridable Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Object)) Implements IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;" Usage="loggerMessageState.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.Extensions.Telemetry.Logging.LoggerMessageState+&lt;System-Collections-Generic-IEnumerable&lt;System-Collections-Generic-KeyValuePair&lt;System-String,System-Object&gt;&gt;-GetEnumerator&gt;d__37))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.Extensions.Telemetry.Logging.LoggerMessageState+&lt;System-Collections-Generic-IEnumerable&lt;System-Collections-Generic-KeyValuePair&lt;System-String,System-Object&gt;&gt;-GetEnumerator&gt;d__37))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the collection.</summary>
        <returns>An enumerator that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Count">
      <MemberSignature Language="C#" Value="int System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.System#Collections#Generic#IReadOnlyCollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Object&gt;&gt;#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements IReadOnlyCollection(Of KeyValuePair(Of String, Object)).Count" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Count : int" Usage="System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::Generic::IReadOnlyCollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String,System::Object&gt;&gt;::Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of elements in the collection.</summary>
        <value>The number of elements in the collection.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value=" Iterator Overridable NotOverridable Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="loggerMessageState.System.Collections.IEnumerable.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.Extensions.Telemetry.Logging.LoggerMessageState+&lt;System-Collections-IEnumerable-GetEnumerator&gt;d__38))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.Extensions.Telemetry.Logging.LoggerMessageState+&lt;System-Collections-IEnumerable-GetEnumerator&gt;d__38))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through a collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        <remarks>This member is an explicit interface member implementation. It can be used only when the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState"/> instance is cast to an <see cref="T:System.Collections.IEnumerable"/> interface.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TagArray">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.KeyValuePair&lt;string,object&gt;[] TagArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;[] TagArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.TagArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TagArray As KeyValuePair(Of String, Object)()" />
      <MemberSignature Language="F#" Value="member this.TagArray : System.Collections.Generic.KeyValuePair&lt;string, obj&gt;[]" Usage="Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.TagArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ TagArray { cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the array of tags.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TagNamePrefix">
      <MemberSignature Language="C#" Value="public string TagNamePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagNamePrefix" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.TagNamePrefix" />
      <MemberSignature Language="VB.NET" Value="Public Property TagNamePrefix As String" />
      <MemberSignature Language="F#" Value="member this.TagNamePrefix : string with get, set" Usage="Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.TagNamePrefix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TagNamePrefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the parameter name that is prepended to all tag names added to this instance using the
            <see cref="M:Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add(System.String,System.Object)" /> or <see cref="M:Microsoft.Extensions.Telemetry.Logging.ITagCollector.Add(System.String,System.Object,Microsoft.Extensions.Compliance.Classification.DataClassification)" />
            methods.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggerMessageState.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="loggerMessageState.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a string representation of this object.
            </summary>
        <returns>The string representation of this object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
