<Type Name="LogMethodHelper" FullName="Microsoft.Extensions.Telemetry.Logging.LogMethodHelper">
  <TypeSignature Language="C#" Value="public sealed class LogMethodHelper : System.Collections.Generic.List&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;, Microsoft.Extensions.ObjectPool.IResettable, Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag, Microsoft.Extensions.Telemetry.Logging.ILogPropertyCollector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogMethodHelper extends System.Collections.Generic.List`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; implements class Microsoft.Extensions.ObjectPool.IResettable, class Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag, class Microsoft.Extensions.Telemetry.Logging.ILogPropertyCollector" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogMethodHelper&#xA;Inherits List(Of KeyValuePair(Of String, Object))&#xA;Implements IEnrichmentPropertyBag, ILogPropertyCollector, IResettable" />
  <TypeSignature Language="F#" Value="type LogMethodHelper = class&#xA;    inherit List&lt;KeyValuePair&lt;string, obj&gt;&gt;&#xA;    interface ILogPropertyCollector&#xA;    interface IEnrichmentPropertyBag&#xA;    interface IResettable" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogMethodHelper sealed : System::Collections::Generic::List&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;, Microsoft::Extensions::ObjectPool::IResettable, Microsoft::Extensions::Telemetry::Enrichment::IEnrichmentPropertyBag, Microsoft::Extensions::Telemetry::Logging::ILogPropertyCollector" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.Generic.List&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.ObjectPool.IResettable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Telemetry.Logging.ILogPropertyCollector</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Utility type to support generated logging methods.
            </summary>
    <remarks>
            This type is not intended to be directly invoked by application code,
            it is intended to be invoked by generated logging method code.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogMethodHelper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogMethodHelper();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string propertyName, object? propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(string propertyName, object propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (propertyName As String, propertyValue As Object)" />
      <MemberSignature Language="F#" Value="override this.Add : string * obj -&gt; unit" Usage="logMethodHelper.Add (propertyName, propertyValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::String ^ propertyName, System::Object ^ propertyValue);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Logging.ILogPropertyCollector.Add(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">To be added.</param>
        <param name="propertyValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetHelper">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Telemetry.Logging.LogMethodHelper GetHelper ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Telemetry.Logging.LogMethodHelper GetHelper() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.GetHelper" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHelper () As LogMethodHelper" />
      <MemberSignature Language="F#" Value="static member GetHelper : unit -&gt; Microsoft.Extensions.Telemetry.Logging.LogMethodHelper" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.GetHelper " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::Telemetry::Logging::LogMethodHelper ^ GetHelper();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Telemetry.Logging.LogMethodHelper</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an instance of a helper from the global pool.
            </summary>
        <returns>A usable instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add">
      <MemberSignature Language="C#" Value="void IEnrichmentPropertyBag.Add (ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(valuetype System.ReadOnlySpan`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.Microsoft#Extensions#Telemetry#Enrichment#IEnrichmentPropertyBag#Add(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (properties As ReadOnlySpan(Of KeyValuePair(Of String, Object))) Implements IEnrichmentPropertyBag.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add : ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; unit&#xA;override this.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add : ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; unit" Usage="logMethodHelper.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add properties" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(ReadOnlySpan&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; properties) = Microsoft::Extensions::Telemetry::Enrichment::IEnrichmentPropertyBag::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add">
      <MemberSignature Language="C#" Value="void IEnrichmentPropertyBag.Add (ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; properties);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(valuetype System.ReadOnlySpan`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.Microsoft#Extensions#Telemetry#Enrichment#IEnrichmentPropertyBag#Add(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (properties As ReadOnlySpan(Of KeyValuePair(Of String, String))) Implements IEnrichmentPropertyBag.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add : ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt; -&gt; unit&#xA;override this.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add : ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt; -&gt; unit" Usage="logMethodHelper.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add properties" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(ReadOnlySpan&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::String ^&gt;&gt; properties) = Microsoft::Extensions::Telemetry::Enrichment::IEnrichmentPropertyBag::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.String}})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.ReadOnlySpan&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="properties">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add">
      <MemberSignature Language="C#" Value="void IEnrichmentPropertyBag.Add (string key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(string key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.Microsoft#Extensions#Telemetry#Enrichment#IEnrichmentPropertyBag#Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As String, value As Object) Implements IEnrichmentPropertyBag.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add : string * obj -&gt; unit&#xA;override this.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add : string * obj -&gt; unit" Usage="logMethodHelper.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add (key, value)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(System::String ^ key, System::Object ^ value) = Microsoft::Extensions::Telemetry::Enrichment::IEnrichmentPropertyBag::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add">
      <MemberSignature Language="C#" Value="void IEnrichmentPropertyBag.Add (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.Microsoft#Extensions#Telemetry#Enrichment#IEnrichmentPropertyBag#Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As String, value As String) Implements IEnrichmentPropertyBag.Add" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add : string * string -&gt; unit&#xA;override this.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add : string * string -&gt; unit" Usage="logMethodHelper.Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add (key, value)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(System::String ^ key, System::String ^ value) = Microsoft::Extensions::Telemetry::Enrichment::IEnrichmentPropertyBag::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ParameterName">
      <MemberSignature Language="C#" Value="public string ParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.ParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterName As String" />
      <MemberSignature Language="F#" Value="member this.ParameterName : string with get, set" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.ParameterName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the name of the logging method parameter for which to collect properties.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnHelper">
      <MemberSignature Language="C#" Value="public static void ReturnHelper (Microsoft.Extensions.Telemetry.Logging.LogMethodHelper helper);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReturnHelper(class Microsoft.Extensions.Telemetry.Logging.LogMethodHelper helper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.ReturnHelper(Microsoft.Extensions.Telemetry.Logging.LogMethodHelper)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReturnHelper (helper As LogMethodHelper)" />
      <MemberSignature Language="F#" Value="static member ReturnHelper : Microsoft.Extensions.Telemetry.Logging.LogMethodHelper -&gt; unit" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.ReturnHelper helper" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReturnHelper(Microsoft::Extensions::Telemetry::Logging::LogMethodHelper ^ helper);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="helper" Type="Microsoft.Extensions.Telemetry.Logging.LogMethodHelper" />
      </Parameters>
      <Docs>
        <param name="helper">The helper instance.</param>
        <summary>
            Returns a helper instance to the global pool.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipEnabledCheckOptions">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LogDefineOptions SkipEnabledCheckOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Extensions.Logging.LogDefineOptions SkipEnabledCheckOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.SkipEnabledCheckOptions" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SkipEnabledCheckOptions As LogDefineOptions" />
      <MemberSignature Language="F#" Value="static member SkipEnabledCheckOptions : Microsoft.Extensions.Logging.LogDefineOptions" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.SkipEnabledCheckOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Extensions::Logging::LogDefineOptions ^ SkipEnabledCheckOptions { Microsoft::Extensions::Logging::LogDefineOptions ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LogDefineOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets log define options configured to skip the log level enablement check.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stringify">
      <MemberSignature Language="C#" Value="public static string Stringify (System.Collections.IEnumerable? enumerable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Stringify(class System.Collections.IEnumerable enumerable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.Stringify(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Stringify (enumerable As IEnumerable) As String" />
      <MemberSignature Language="F#" Value="static member Stringify : System.Collections.IEnumerable -&gt; string" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.Stringify enumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Stringify(System::Collections::IEnumerable ^ enumerable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumerable" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="enumerable">The enumerable object.</param>
        <summary>
            Enumerates an enumerable into a string.
            </summary>
        <returns>
            A string representation of the enumerable.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stringify&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Stringify&lt;TKey,TValue&gt; (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;? enumerable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Stringify&lt;TKey, TValue&gt;(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!!TKey, !!TValue&gt;&gt; enumerable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.Stringify``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Stringify(Of TKey, TValue) (enumerable As IEnumerable(Of KeyValuePair(Of TKey, TValue))) As String" />
      <MemberSignature Language="F#" Value="static member Stringify : seq&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt; -&gt; string" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.Stringify enumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static System::String ^ Stringify(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ enumerable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="enumerable" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">Type of keys.</typeparam>
        <typeparam name="TValue">Type of values.</typeparam>
        <param name="enumerable">The enumerable object.</param>
        <summary>
            Enumerates an enumerable of key/value pairs into a string.
            </summary>
        <returns>
            A string representation of the enumerable.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReset">
      <MemberSignature Language="C#" Value="public bool TryReset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodHelper.TryReset" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReset () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryReset : unit -&gt; bool&#xA;override this.TryReset : unit -&gt; bool" Usage="logMethodHelper.TryReset " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryReset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.ObjectPool.IResettable.TryReset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Resets state of this container as described in <see cref="M:Microsoft.Extensions.ObjectPool.IResettable.TryReset" />.
            </summary>
        <returns>
          <see langword="true" /> if the object successfully reset and can be reused.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
