<Type Name="LogPropertiesAttribute" FullName="Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute">
  <TypeSignature Language="C#" Value="public sealed class LogPropertiesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogPropertiesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogPropertiesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type LogPropertiesAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogPropertiesAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Parameter)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Parameter)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Marks a logging method parameter whose public properties need to be logged.
            </summary>
    <remarks>To be added.</remarks>
    <altmember cref="T:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogPropertiesAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogPropertiesAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute" /> class.
            </summary>
        <remarks>
            Use this parameterless constructor if you want
            to get a source-generated set of properties to be logged.
            In case you need to provide your own set of properties or their custom names, please
            use the <see cref="M:Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.#ctor(System.Type,System.String)" /> constructor overload instead.
            </remarks>
        <example>
          <code>
            [LogMethod(1, LogLevel.Warning, "Logging complex object here.")]
            static partial void LogMethod(ILogger logger, [LogProperties] ClassToLog param);
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogPropertiesAttribute (Type providerType, string providerMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type providerType, string providerMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerType As Type, providerMethod As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute : Type * string -&gt; Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute" Usage="new Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute (providerType, providerMethod)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogPropertiesAttribute(Type ^ providerType, System::String ^ providerMethod);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerType" Type="System.Type" />
        <Parameter Name="providerMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerType">A type containing a method that provides a custom set of properties to log.</param>
        <param name="providerMethod">The name of a method on the provider type which generates a custom set of properties to log.</param>
        <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute" /> class with custom properties provider.
             </summary>
        <remarks>
             You can create your own method that will generate the exact set of properties to log
             for a given input object.
            
             Do NOT use this constructor overload if you want to have a default source-generated set of properties to log,
             Use the parameterless constructor in that case.
            
             The method referenced by this constructor should be non-generic, <c>static</c>, <c>public</c> and it should have two parameters:
             <list type="number"><item><description>First one of <see cref="T:Microsoft.Extensions.Telemetry.Logging.ILogPropertyCollector" /> type</description></item><item><description>
                 Second one of <c>T?</c> type, where <c>T</c> is a type of logging method parameter that you want to log.
                 </description></item></list></remarks>
        <exception cref="T:System.ArgumentNullException">
             When <paramref name="providerMethod" /> or <paramref name="providerType" /> are <see langword="null" />.
             </exception>
        <exception cref="T:System.ArgumentException">
             When <paramref name="providerMethod" /> is either an empty string or contains only whitespace.
             </exception>
        <example>
          <code>
             [LogMethod(1, LogLevel.Warning, "Custom properties for {Param}.")]
             static partial void LogMethod(ILogger logger,
                 [LogProperties(typeof(CustomProvider), nameof(CustomProvider.GetPropertiesToLog))] ClassToLog param);
            
             public static class CustomProvider
             {
                 public static void GetPropertiesToLog(ILogPropertyCollector props, ClassToLog? param)
                 {
                     props.Add("Custom_property_name", param?.MyProperty);
                     props.Add(nameof(ClassToLog.AnotherProperty), param?.AnotherProperty);
                     // ...
                 }
             }
             </code>
        </example>
        <altmember cref="T:Microsoft.Extensions.Telemetry.Logging.ILogPropertyCollector" />
      </Docs>
    </Member>
    <Member MemberName="OmitParameterName">
      <MemberSignature Language="C#" Value="public bool OmitParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitParameterName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.OmitParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitParameterName As Boolean" />
      <MemberSignature Language="F#" Value="member this.OmitParameterName : bool with get, set" Usage="Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.OmitParameterName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitParameterName { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether to prefix the name of the logging method parameter to the generated name of each property being logged.
            </summary>
        <value>To be added.</value>
        <remarks>
            Defaults to <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderMethod">
      <MemberSignature Language="C#" Value="public string? ProviderMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderMethod" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.ProviderMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderMethod As String" />
      <MemberSignature Language="F#" Value="member this.ProviderMethod : string" Usage="Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.ProviderMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderMethod { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the method that provides properties to be logged.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderType">
      <MemberSignature Language="C#" Value="public Type? ProviderType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ProviderType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.ProviderType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderType As Type" />
      <MemberSignature Language="F#" Value="member this.ProviderType : Type" Usage="Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.ProviderType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ProviderType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:System.Type" /> containing the method that provides properties to be logged.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipNullProperties">
      <MemberSignature Language="C#" Value="public bool SkipNullProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipNullProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.SkipNullProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipNullProperties As Boolean" />
      <MemberSignature Language="F#" Value="member this.SkipNullProperties : bool with get, set" Usage="Microsoft.Extensions.Telemetry.Logging.LogPropertiesAttribute.SkipNullProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipNullProperties { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether null properties are logged.
            </summary>
        <value>To be added.</value>
        <remarks>
            Defaults to <see langword="false" />.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
