<Type Name="LogMethodAttribute" FullName="Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute">
  <TypeSignature Language="C#" Value="public sealed class LogMethodAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogMethodAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogMethodAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type LogMethodAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogMethodAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Method)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Method)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Provides information to guide the production of a strongly-typed logging method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogMethodAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogMethodAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" /> class
             which is used to guide the production of a strongly-typed logging method.
             </summary>
        <remarks>
             This overload is not commonly used. In general, the overload that accepts a <see cref="T:Microsoft.Extensions.Logging.LogLevel" />
             value is preferred.
            
             The method this attribute is applied to has some constraints:
               - Logging methods must be partial, and return void.
               - Logging methods cannot be generic or accept any generic parameters.
               - Logging method names must not start with an underscore.
               - Parameter names of logging methods must not start with an underscore.
               - If the logging method is static, one of its parameters must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />, or a type that implements the interface.
               - If the logging method is an instance method, one of the fields of the containing type must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            
             This overload doesn't specify an event id, it is set to <c>0</c>, nor it specifies a message template - it is an empty string.
             </remarks>
        <example>
          <code>
             static partial class Log
             {
                 [LogMethod]
                 static partial void CouldNotOpenSocket(ILogger logger, LogLevel level, string hostName);
             }
             </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogMethodAttribute (Microsoft.Extensions.Logging.LogLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.#ctor(Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (level As LogLevel)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute : Microsoft.Extensions.Logging.LogLevel -&gt; Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" Usage="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute level" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogMethodAttribute(Microsoft::Extensions::Logging::LogLevel level);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="level">The logging level produced when invoking the strongly-typed logging method.</param>
        <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" /> class
             which is used to guide the production of a strongly-typed logging method.
             </summary>
        <remarks>
             The method this attribute is applied to has some constraints
               - Logging methods must be partial, and return void.
               - Logging methods cannot be generic or accept any generic parameters.
               - Logging method names must not start with an underscore.
               - Parameter names of logging methods must not start with an underscore.
               - If the logging method is static, one of its parameters must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />, or a type that implements the interface.
               - If the logging method is an instance method, one of the fields of the containing type must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            
             This overload doesn't specify an event id, it is set to 0.
             </remarks>
        <example>
          <code>
             static partial class Log
             {
                 [LogMethod(LogLevel.Critical)]
                 static partial void CouldNotOpenSocket(ILogger logger, string hostName);
             }
             </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogMethodAttribute (int eventId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 eventId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventId As Integer)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute : int -&gt; Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" Usage="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute eventId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogMethodAttribute(int eventId);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="eventId">The stable event id for this log message.</param>
        <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" /> class
             which is used to guide the production of a strongly-typed logging method.
             </summary>
        <remarks>
             This overload is not commonly used. In general, the overload that accepts a <see cref="T:Microsoft.Extensions.Logging.LogLevel" />
             value is preferred.
            
             The method this attribute is applied to has some constraints
               - Logging methods must be partial, and return void.
               - Logging methods cannot be generic or accept any generic parameters.
               - Logging method names must not start with an underscore.
               - Parameter names of logging methods must not start with an underscore.
               - If the logging method is static, one of its parameters must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />, or a type that implements the interface.
               - If the logging method is an instance method, one of the fields of the containing type must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
             </remarks>
        <example>
          <code>
             static partial class Log
             {
                 [LogMethod(0)]
                 static partial void CouldNotOpenSocket(ILogger logger, LogLevel level, string hostName);
             }
             </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogMethodAttribute (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute : string -&gt; Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" Usage="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogMethodAttribute(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message text output by the logging method. This string is a template that can contain any of the method's parameters. Defaults to empty.</param>
        <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" /> class
             which is used to guide the production of a strongly-typed logging method.
             </summary>
        <remarks>
             The method this attribute is applied to has some constraints
               - Logging methods must be partial, and return void.
               - Logging methods cannot be generic or accept any generic parameters.
               - Logging method names must not start with an underscore.
               - Parameter names of logging methods must not start with an underscore.
               - If the logging method is static, one of its parameters must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />, or a type that implements the interface.
               - If the logging method is an instance method, one of the fields of the containing type must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            
             This overload doesn't specify an event id, it is set to 0.
             </remarks>
        <example>
          <code>
             static partial class Log
             {
                 [LogMethod("Could not open socket for {hostName}")]
                 static partial void CouldNotOpenSocket(ILogger logger, LogLevel level, string hostName);
             }
             </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogMethodAttribute (Microsoft.Extensions.Logging.LogLevel level, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Extensions.Logging.LogLevel level, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.#ctor(Microsoft.Extensions.Logging.LogLevel,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (level As LogLevel, message As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute : Microsoft.Extensions.Logging.LogLevel * string -&gt; Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" Usage="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute (level, message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogMethodAttribute(Microsoft::Extensions::Logging::LogLevel level, System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="level">The logging level produced when invoking the strongly-typed logging method.</param>
        <param name="message">The message text output by the logging method. This string is a template that can contain any of the method's parameters. Defaults to empty.</param>
        <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" /> class
             which is used to guide the production of a strongly-typed logging method.
             </summary>
        <remarks>
             The method this attribute is applied to has some constraints
               - Logging methods must be partial, and return void.
               - Logging methods cannot be generic or accept any generic parameters.
               - Logging method names must not start with an underscore.
               - Parameter names of logging methods must not start with an underscore.
               - If the logging method is static, one of its parameters must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />, or a type that implements the interface.
               - If the logging method is an instance method, one of the fields of the containing type must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            
             This overload doesn't specify an event id, it is set to 0.
             </remarks>
        <example>
          <code>
             static partial class Log
             {
                 [LogMethod(LogLevel.Critical, "Could not open socket for {hostName}")]
                 static partial void CouldNotOpenSocket(ILogger logger, string hostName);
             }
             </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogMethodAttribute (int eventId, Microsoft.Extensions.Logging.LogLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 eventId, valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.#ctor(System.Int32,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventId As Integer, level As LogLevel)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute : int * Microsoft.Extensions.Logging.LogLevel -&gt; Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" Usage="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute (eventId, level)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogMethodAttribute(int eventId, Microsoft::Extensions::Logging::LogLevel level);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventId" Type="System.Int32" />
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="eventId">The stable event id for this log message.</param>
        <param name="level">The logging level produced when invoking the strongly-typed logging method.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" /> class
            which is used to guide the production of a strongly-typed logging method.
            </summary>
        <remarks>
            The method this attribute is applied to has some constraints
              - Logging methods must be partial, and return void.
              - Logging methods cannot be generic or accept any generic parameters.
              - Logging method names must not start with an underscore.
              - Parameter names of logging methods must not start with an underscore.
              - If the logging method is static, one of its parameters must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />, or a type that implements the interface.
              - If the logging method is an instance method, one of the fields of the containing type must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            </remarks>
        <example>
          <code>
            static partial class Log
            {
                [LogMethod(0, LogLevel.Critical)]
                static partial void CouldNotOpenSocket(ILogger logger, string hostName);
            }
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogMethodAttribute (int eventId, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 eventId, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.#ctor(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventId As Integer, message As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute : int * string -&gt; Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" Usage="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute (eventId, message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogMethodAttribute(int eventId, System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventId" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventId">The stable event id for this log message.</param>
        <param name="message">The message text output by the logging method. This string is a template that can contain any of the method's parameters.</param>
        <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" /> class
             which is used to guide the production of a strongly-typed logging method.
             </summary>
        <remarks>
             This overload is not commonly used. In general, the overload that accepts a <see cref="T:Microsoft.Extensions.Logging.LogLevel" />
             value is preferred.
            
             The method this attribute is applied to has some constraints
               - Logging methods must be partial, and return void.
               - Logging methods cannot be generic or accept any generic parameters.
               - Logging method names must not start with an underscore.
               - Parameter names of logging methods must not start with an underscore.
               - If the logging method is static, one of its parameters must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />, or a type that implements the interface.
               - If the logging method is an instance method, one of the fields of the containing type must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
             </remarks>
        <example>
          <code>
             static partial class Log
             {
                 [LogMethod(0, "Could not open socket for {hostName}")]
                 static partial void CouldNotOpenSocket(ILogger logger, LogLevel level, string hostName);
             }
             </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogMethodAttribute (int eventId, Microsoft.Extensions.Logging.LogLevel level, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 eventId, valuetype Microsoft.Extensions.Logging.LogLevel level, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.#ctor(System.Int32,Microsoft.Extensions.Logging.LogLevel,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventId As Integer, level As LogLevel, message As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute : int * Microsoft.Extensions.Logging.LogLevel * string -&gt; Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" Usage="new Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute (eventId, level, message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogMethodAttribute(int eventId, Microsoft::Extensions::Logging::LogLevel level, System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventId" Type="System.Int32" />
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventId">The stable event id for this log message.</param>
        <param name="level">The logging level produced when invoking the strongly-typed logging method.</param>
        <param name="message">The message text output by the logging method. This string is a template that can contain any of the method's parameters.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute" /> class
            which is used to guide the production of a strongly-typed logging method.
            </summary>
        <remarks>
            The method this attribute is applied to has some constraints
              - Logging methods must be partial, and return void.
              - Logging methods cannot be generic or accept any generic parameters.
              - Logging method names must not start with an underscore.
              - Parameter names of logging methods must not start with an underscore.
              - If the logging method is static, one of its parameters must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />, or a type that implements the interface.
              - If the logging method is an instance method, one of the fields of the containing type must be of type <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            </remarks>
        <example>
          <code>
            static partial class Log
            {
                [LogMethod(0, LogLevel.Critical, "Could not open socket for {hostName}")]
                static partial void CouldNotOpenSocket(ILogger logger, string hostName);
            }
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="EventId">
      <MemberSignature Language="C#" Value="public int EventId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EventId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.EventId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventId As Integer" />
      <MemberSignature Language="F#" Value="member this.EventId : int" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.EventId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int EventId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the logging event id for the logging method.
            </summary>
        <value>To be added.</value>
        <remarks>
            This is <c>0</c> if the logging method doesn't have a stable event id.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventName">
      <MemberSignature Language="C#" Value="public string? EventName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EventName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.EventName" />
      <MemberSignature Language="VB.NET" Value="Public Property EventName As String" />
      <MemberSignature Language="F#" Value="member this.EventName : string with get, set" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.EventName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EventName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the logging event name for the logging method.
            </summary>
        <value>To be added.</value>
        <remarks>
            This will equal the method name if not specified.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Level">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.LogLevel? Level { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Microsoft.Extensions.Logging.LogLevel&gt; Level" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.Level" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Level As Nullable(Of LogLevel)" />
      <MemberSignature Language="F#" Value="member this.Level : Nullable&lt;Microsoft.Extensions.Logging.LogLevel&gt;" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.Level" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;Microsoft::Extensions::Logging::LogLevel&gt; Level { Nullable&lt;Microsoft::Extensions::Logging::LogLevel&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.Extensions.Logging.LogLevel&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the logging level for the logging method.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As String" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Message { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the message text for the logging method.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipEnabledCheck">
      <MemberSignature Language="C#" Value="public bool SkipEnabledCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipEnabledCheck" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.SkipEnabledCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipEnabledCheck As Boolean" />
      <MemberSignature Language="F#" Value="member this.SkipEnabledCheck : bool with get, set" Usage="Microsoft.Extensions.Telemetry.Logging.LogMethodAttribute.SkipEnabledCheck" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipEnabledCheck { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets a value indicating whether the generated code should omit the logic to check whether a log level is enabled.
             </summary>
        <value>To be added.</value>
        <remarks>
             The generated code contains an optimization to avoid calling into the underlying <see cref="T:Microsoft.Extensions.Logging.ILogger" /> if the log method's log level
             is currently not enabled. If your application is already performing this check before calling the logging method, then you
             can remove the redundant check performed in the generated code by setting this option to <see langword="true" />.
            
             This defaults to <see langword="true" /> if the log method's logging level is Error or Critical, otherwise it defaults
             to <see langword="false" />.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
