<Type Name="LoggingExtensions" FullName="Microsoft.Extensions.Telemetry.Logging.LoggingExtensions">
  <TypeSignature Language="C#" Value="public static class LoggingExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LoggingExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Logging.LoggingExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module LoggingExtensions" />
  <TypeSignature Language="F#" Value="type LoggingExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions for configuring logging.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddOpenTelemetryLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddOpenTelemetryLogging (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddOpenTelemetryLogging(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggingExtensions.AddOpenTelemetryLogging(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddOpenTelemetryLogging (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddOpenTelemetryLogging : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Telemetry.Logging.LoggingExtensions.AddOpenTelemetryLogging builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddOpenTelemetryLogging(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">Logging builder.</param>
        <summary>
            Configure logging with default options.
            </summary>
        <returns>Logging <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOpenTelemetryLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddOpenTelemetryLogging (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Microsoft.Extensions.Configuration.IConfigurationSection section);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddOpenTelemetryLogging(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class Microsoft.Extensions.Configuration.IConfigurationSection section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggingExtensions.AddOpenTelemetryLogging(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddOpenTelemetryLogging (builder As ILoggingBuilder, section As IConfigurationSection) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddOpenTelemetryLogging : Microsoft.Extensions.Logging.ILoggingBuilder * Microsoft.Extensions.Configuration.IConfigurationSection -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Telemetry.Logging.LoggingExtensions.AddOpenTelemetryLogging (builder, section)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddOpenTelemetryLogging(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Microsoft::Extensions::Configuration::IConfigurationSection ^ section);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfigurationSection" />
      </Parameters>
      <Docs>
        <param name="builder">Logging builder.</param>
        <param name="section">Configuration section that contains <see cref="T:Microsoft.Extensions.Telemetry.Logging.LoggingOptions" />.</param>
        <summary>
            Configure logging.
            </summary>
        <returns>Logging <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOpenTelemetryLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddOpenTelemetryLogging (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Action&lt;Microsoft.Extensions.Telemetry.Logging.LoggingOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddOpenTelemetryLogging(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Telemetry.Logging.LoggingOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggingExtensions.AddOpenTelemetryLogging(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Telemetry.Logging.LoggingOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddOpenTelemetryLogging (builder As ILoggingBuilder, configure As Action(Of LoggingOptions)) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddOpenTelemetryLogging : Microsoft.Extensions.Logging.ILoggingBuilder * Action&lt;Microsoft.Extensions.Telemetry.Logging.LoggingOptions&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Telemetry.Logging.LoggingExtensions.AddOpenTelemetryLogging (builder, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddOpenTelemetryLogging(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Action&lt;Microsoft::Extensions::Telemetry::Logging::LoggingOptions ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Telemetry.Logging.LoggingOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">Logging builder.</param>
        <param name="configure">Logging configuration options.</param>
        <summary>
            Configure logging.
            </summary>
        <returns>Logging <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProcessor">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddProcessor (this Microsoft.Extensions.Logging.ILoggingBuilder builder, OpenTelemetry.BaseProcessor&lt;OpenTelemetry.Logs.LogRecord&gt; processor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddProcessor(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class OpenTelemetry.BaseProcessor`1&lt;class OpenTelemetry.Logs.LogRecord&gt; processor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggingExtensions.AddProcessor(Microsoft.Extensions.Logging.ILoggingBuilder,OpenTelemetry.BaseProcessor{OpenTelemetry.Logs.LogRecord})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddProcessor (builder As ILoggingBuilder, processor As BaseProcessor(Of LogRecord)) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddProcessor : Microsoft.Extensions.Logging.ILoggingBuilder * OpenTelemetry.BaseProcessor&lt;OpenTelemetry.Logs.LogRecord&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Telemetry.Logging.LoggingExtensions.AddProcessor (builder, processor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddProcessor(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, OpenTelemetry::BaseProcessor&lt;OpenTelemetry::Logs::LogRecord ^&gt; ^ processor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="processor" Type="OpenTelemetry.BaseProcessor&lt;OpenTelemetry.Logs.LogRecord&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The builder to add the processor to.</param>
        <param name="processor">Log processor to add.</param>
        <summary>
            Adds a logging processor to the builder.
            </summary>
        <returns>Returns <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProcessor&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddProcessor&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder) where T : OpenTelemetry.BaseProcessor&lt;OpenTelemetry.Logs.LogRecord&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddProcessor&lt;(class OpenTelemetry.BaseProcessor`1&lt;class OpenTelemetry.Logs.LogRecord&gt;) T&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Logging.LoggingExtensions.AddProcessor``1(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddProcessor(Of T As BaseProcessor(Of LogRecord)) (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddProcessor : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder (requires 'T :&gt; OpenTelemetry.BaseProcessor&lt;OpenTelemetry.Logs.LogRecord&gt;)" Usage="Microsoft.Extensions.Telemetry.Logging.LoggingExtensions.AddProcessor builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : OpenTelemetry::BaseProcessor&lt;OpenTelemetry::Logs::LogRecord ^&gt;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddProcessor(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>OpenTelemetry.BaseProcessor&lt;OpenTelemetry.Logs.LogRecord&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">Type of processor to add.</typeparam>
        <param name="builder">The builder to add the processor to.</param>
        <summary>
            Adds a logging processor to the builder.
            </summary>
        <returns>Returns <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
