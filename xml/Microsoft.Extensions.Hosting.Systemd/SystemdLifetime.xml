<Type Name="SystemdLifetime" FullName="Microsoft.Extensions.Hosting.Systemd.SystemdLifetime">
  <TypeSignature Language="C#" Value="public class SystemdLifetime : IDisposable, Microsoft.Extensions.Hosting.IHostLifetime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SystemdLifetime extends System.Object implements class Microsoft.Extensions.Hosting.IHostLifetime, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime" />
  <TypeSignature Language="VB.NET" Value="Public Class SystemdLifetime&#xA;Implements IDisposable, IHostLifetime" />
  <TypeSignature Language="F#" Value="type SystemdLifetime = class&#xA;    interface IHostLifetime&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SystemdLifetime : IDisposable, Microsoft::Extensions::Hosting::IHostLifetime" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Hosting.Systemd</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Hosting.IHostLifetime</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("android")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("android")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("browser")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("browser")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("ios")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("ios")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("maccatalyst")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("maccatalyst")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("tvos")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("tvos")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Provides notification messages for application started and stopping, and configures console logging to the systemd format.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SystemdLifetime (Microsoft.Extensions.Hosting.IHostEnvironment environment, Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime, Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier systemdNotifier, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Hosting.IHostEnvironment environment, class Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime, class Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier systemdNotifier, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime.#ctor(Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (environment As IHostEnvironment, applicationLifetime As IHostApplicationLifetime, systemdNotifier As ISystemdNotifier, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Hosting.Systemd.SystemdLifetime : Microsoft.Extensions.Hosting.IHostEnvironment * Microsoft.Extensions.Hosting.IHostApplicationLifetime * Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.Extensions.Hosting.Systemd.SystemdLifetime" Usage="new Microsoft.Extensions.Hosting.Systemd.SystemdLifetime (environment, applicationLifetime, systemdNotifier, loggerFactory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SystemdLifetime(Microsoft::Extensions::Hosting::IHostEnvironment ^ environment, Microsoft::Extensions::Hosting::IHostApplicationLifetime ^ applicationLifetime, Microsoft::Extensions::Hosting::Systemd::ISystemdNotifier ^ systemdNotifier, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Systemd</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="environment" Type="Microsoft.Extensions.Hosting.IHostEnvironment" />
        <Parameter Name="applicationLifetime" Type="Microsoft.Extensions.Hosting.IHostApplicationLifetime" />
        <Parameter Name="systemdNotifier" Type="Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="environment">Information about the host.</param>
        <param name="applicationLifetime">The <see cref="T:Microsoft.Extensions.Hosting.IHostApplicationLifetime" /> that tracks the service lifetime.</param>
        <param name="systemdNotifier">The <see cref="T:Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier" /> to notify Systemd about service status.</param>
        <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> used to instantiate the lifetime logger.</param>
        <summary>
            Initializes a new <see cref="T:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="systemdLifetime.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Systemd</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StopAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime.StopAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function StopAsync (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member StopAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.StopAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="systemdLifetime.StopAsync cancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ StopAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostLifetime.StopAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Systemd</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A cancellation token that indicates when stop should no longer be graceful.
            </param>
        <summary>
            Asynchronously stops and shuts down the host. This method is called from <see cref="M:Microsoft.Extensions.Hosting.IHost.StopAsync(System.Threading.CancellationToken)" />.
            </summary>
        <returns>
            A task that represents the asynchronous stop operation.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForStartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitForStartAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WaitForStartAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Systemd.SystemdLifetime.WaitForStartAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForStartAsync (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member WaitForStartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WaitForStartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="systemdLifetime.WaitForStartAsync cancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WaitForStartAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Systemd</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A cancellation token that indicates when stop should no longer be graceful.
            </param>
        <summary>
            Asynchronously waits until the start operation is complete before continuing. This method is called at the beginning of <see cref="M:Microsoft.Extensions.Hosting.IHost.StartAsync(System.Threading.CancellationToken)" />. This can be used to delay startup until signaled by an external event.
            </summary>
        <returns>
            A task that represents the waiting for start operation.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
