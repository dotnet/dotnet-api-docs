<Type Name="IAsyncContext&lt;T&gt;" FullName="Microsoft.Extensions.AsyncState.IAsyncContext&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IAsyncContext&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncContext`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AsyncState.IAsyncContext`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncContext(Of T)" />
  <TypeSignature Language="F#" Value="type IAsyncContext&lt;'T&gt; = interface" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IAsyncContext" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">The type of the asynchronous state.</typeparam>
    <summary>
            Provides access to the current async context.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public T? Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T Get() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AsyncState.IAsyncContext`1.Get" />
      <MemberSignature Language="VB.NET" Value="Public Function Get () As T" />
      <MemberSignature Language="F#" Value="abstract member Get : unit -&gt; 'T" Usage="iAsyncContext.Get " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Get();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets current async context.
            </summary>
        <returns>Current async context.</returns>
        <remarks>
            If you are getting an exception that context is not initialized, make sure that you initialized it before usage in your framework.
            Also check if you are accessing the context from the current asynchronous flow, starting with context initialization.
            </remarks>
        <exception cref="T:System.InvalidOperationException">Context is not initialized.</exception>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (T? context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set(!T context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AsyncState.IAsyncContext`1.Set(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (context As T)" />
      <MemberSignature Language="F#" Value="abstract member Set : 'T -&gt; unit" Usage="iAsyncContext.Set context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Set(T context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="T" />
      </Parameters>
      <Docs>
        <param name="context">Context to be set.</param>
        <summary>
            Sets async context.
            </summary>
        <remarks>
            If you are getting an exception that context is not initialized, make sure that you initialized it before usage in your framework.
            Also check if you are accessing the context from the current asynchronous flow, starting with context initialization.
            </remarks>
        <exception cref="T:System.InvalidOperationException">Context is not initialized.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGet">
      <MemberSignature Language="C#" Value="public bool TryGet (out T? context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGet([out] !T&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AsyncState.IAsyncContext`1.TryGet(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGet (ByRef context As T) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGet : 'T -&gt; bool" Usage="iAsyncContext.TryGet context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGet([Runtime::InteropServices::Out] T % context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="T" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">Receives the context.</param>
        <summary>
            Tries to get the current async context.
            </summary>
        <returns>
          <see langword="true" /> if the context is initialized; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
