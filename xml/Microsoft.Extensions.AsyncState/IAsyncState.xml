<Type Name="IAsyncState" FullName="Microsoft.Extensions.AsyncState.IAsyncState">
  <TypeSignature Language="C#" Value="public interface IAsyncState" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncState" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AsyncState.IAsyncState" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncState" />
  <TypeSignature Language="F#" Value="type IAsyncState = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncState" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Encapsulates all information within the asynchronous flow in an <see cref="T:System.Threading.AsyncLocal`1" /> variable.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public object? Get (Microsoft.Extensions.AsyncState.AsyncStateToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Get(valuetype Microsoft.Extensions.AsyncState.AsyncStateToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AsyncState.IAsyncState.Get(Microsoft.Extensions.AsyncState.AsyncStateToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (token As AsyncStateToken) As Object" />
      <MemberSignature Language="F#" Value="abstract member Get : Microsoft.Extensions.AsyncState.AsyncStateToken -&gt; obj" Usage="iAsyncState.Get token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Get(Microsoft::Extensions::AsyncState::AsyncStateToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.Extensions.AsyncState.AsyncStateToken" />
      </Parameters>
      <Docs>
        <param name="token">The token representing the state to extract.</param>
        <summary>
            Gets the stored async context from the state.
            </summary>
        <returns>The asynchronous state corresponding to the token.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">If the context is not initialized.</exception>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AsyncState.IAsyncState.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize ()" />
      <MemberSignature Language="F#" Value="abstract member Initialize : unit -&gt; unit" Usage="iAsyncState.Initialize " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Initializes async state in current asynchronous flow.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAsyncContext">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.AsyncState.AsyncStateToken RegisterAsyncContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.Extensions.AsyncState.AsyncStateToken RegisterAsyncContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AsyncState.IAsyncState.RegisterAsyncContext" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterAsyncContext () As AsyncStateToken" />
      <MemberSignature Language="F#" Value="abstract member RegisterAsyncContext : unit -&gt; Microsoft.Extensions.AsyncState.AsyncStateToken" Usage="iAsyncState.RegisterAsyncContext " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Extensions::AsyncState::AsyncStateToken RegisterAsyncContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AsyncState.AsyncStateToken</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Registers new async context with the state.
            </summary>
        <returns>Token that gives access to the reserved context.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AsyncState.IAsyncState.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit" Usage="iAsyncState.Reset " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Resets async state after usage.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (Microsoft.Extensions.AsyncState.AsyncStateToken token, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set(valuetype Microsoft.Extensions.AsyncState.AsyncStateToken token, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AsyncState.IAsyncState.Set(Microsoft.Extensions.AsyncState.AsyncStateToken,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (token As AsyncStateToken, value As Object)" />
      <MemberSignature Language="F#" Value="abstract member Set : Microsoft.Extensions.AsyncState.AsyncStateToken * obj -&gt; unit" Usage="iAsyncState.Set (token, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Set(Microsoft::Extensions::AsyncState::AsyncStateToken token, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.Extensions.AsyncState.AsyncStateToken" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="token">The token representing the state to store.</param>
        <param name="value">New state value.</param>
        <summary>
            Stores async context.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Context is not initialized.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGet">
      <MemberSignature Language="C#" Value="public bool TryGet (Microsoft.Extensions.AsyncState.AsyncStateToken token, out object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGet(valuetype Microsoft.Extensions.AsyncState.AsyncStateToken token, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AsyncState.IAsyncState.TryGet(Microsoft.Extensions.AsyncState.AsyncStateToken,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGet (token As AsyncStateToken, ByRef value As Object) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGet : Microsoft.Extensions.AsyncState.AsyncStateToken * obj -&gt; bool" Usage="iAsyncState.TryGet (token, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGet(Microsoft::Extensions::AsyncState::AsyncStateToken token, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AsyncState</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.Extensions.AsyncState.AsyncStateToken" />
        <Parameter Name="value" Type="System.Object" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="token">The token representing the state to extract.</param>
        <param name="value">
            Receives the value associated with the specified token, if the context is initialized;
            otherwise, the default value for the type of the <paramref name="value" /> parameter.
            </param>
        <summary>
            Tries to get the stored async context from the state.
            </summary>
        <returns>
          <see langword="true" /> if the context is initialized; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
