<Type Name="VectorSearchResults&lt;TRecord&gt;" FullName="Microsoft.Extensions.VectorData.VectorSearchResults&lt;TRecord&gt;">
  <TypeSignature Language="C#" Value="public class VectorSearchResults&lt;TRecord&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VectorSearchResults`1&lt;TRecord&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.VectorSearchResults`1" />
  <TypeSignature Language="VB.NET" Value="Public Class VectorSearchResults(Of TRecord)" />
  <TypeSignature Language="F#" Value="type VectorSearchResults&lt;'Record&gt; = class" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TRecord&gt;&#xA;public ref class VectorSearchResults" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TRecord">
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TRecord">The record data model to use for retrieving data from the store.</typeparam>
    <param name="results">The list of records returned by the search operation.</param>
    <summary>
            Contains the full list of search results for a vector search operation with metadata.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VectorSearchResults (System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;TRecord&gt;&gt; results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IAsyncEnumerable`1&lt;class Microsoft.Extensions.VectorData.VectorSearchResult`1&lt;!TRecord&gt;&gt; results) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorSearchResults`1.#ctor(System.Collections.Generic.IAsyncEnumerable{Microsoft.Extensions.VectorData.VectorSearchResult{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (results As IAsyncEnumerable(Of VectorSearchResult(Of TRecord)))" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.VectorData.VectorSearchResults&lt;'Record&gt; : System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;'Record&gt;&gt; -&gt; Microsoft.Extensions.VectorData.VectorSearchResults&lt;'Record&gt;" Usage="new Microsoft.Extensions.VectorData.VectorSearchResults&lt;'Record&gt; results" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VectorSearchResults(System::Collections::Generic::IAsyncEnumerable&lt;Microsoft::Extensions::VectorData::VectorSearchResult&lt;TRecord&gt; ^&gt; ^ results);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="results" Type="System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;TRecord&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRecord">The record data model to use for retrieving data from the store.</typeparam>
        <param name="results">The list of records returned by the search operation.</param>
        <summary>
            Contains the full list of search results for a vector search operation with metadata.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;string,object?&gt;? Metadata { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, object&gt; Metadata" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.VectorSearchResults`1.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public Property Metadata As IReadOnlyDictionary(Of String, Object)" />
      <MemberSignature Language="F#" Value="member this.Metadata : System.Collections.Generic.IReadOnlyDictionary&lt;string, obj&gt; with get, set" Usage="Microsoft.Extensions.VectorData.VectorSearchResults&lt;'Record&gt;.Metadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyDictionary&lt;System::String ^, System::Object ^&gt; ^ Metadata { System::Collections::Generic::IReadOnlyDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); void set(System::Collections::Generic::IReadOnlyDictionary&lt;System::String ^, System::Object ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 2 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 2 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The metadata associated with the content.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Results">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;TRecord&gt;&gt; Results { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Microsoft.Extensions.VectorData.VectorSearchResult`1&lt;!TRecord&gt;&gt; Results" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.VectorSearchResults`1.Results" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Results As IAsyncEnumerable(Of VectorSearchResult(Of TRecord))" />
      <MemberSignature Language="F#" Value="member this.Results : System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;'Record&gt;&gt;" Usage="Microsoft.Extensions.VectorData.VectorSearchResults&lt;'Record&gt;.Results" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IAsyncEnumerable&lt;Microsoft::Extensions::VectorData::VectorSearchResult&lt;TRecord&gt; ^&gt; ^ Results { System::Collections::Generic::IAsyncEnumerable&lt;Microsoft::Extensions::VectorData::VectorSearchResult&lt;TRecord&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;TRecord&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The search results.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalCount">
      <MemberSignature Language="C#" Value="public long? TotalCount { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; TotalCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.VectorSearchResults`1.TotalCount" />
      <MemberSignature Language="VB.NET" Value="Public Property TotalCount As Nullable(Of Long)" />
      <MemberSignature Language="F#" Value="member this.TotalCount : Nullable&lt;int64&gt; with get, set" Usage="Microsoft.Extensions.VectorData.VectorSearchResults&lt;'Record&gt;.TotalCount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; TotalCount { Nullable&lt;long&gt; get(); void set(Nullable&lt;long&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The total count of results found by the search operation, or null
            if the count was not requested or cannot be computed.
            </summary>
        <value>To be added.</value>
        <remarks>
            This value represents the total number of results that are available for the current query and not the number of results being returned.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
