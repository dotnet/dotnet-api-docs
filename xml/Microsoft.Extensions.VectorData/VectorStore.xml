<Type Name="VectorStore" FullName="Microsoft.Extensions.VectorData.VectorStore">
  <TypeSignature Language="C#" Value="public abstract class VectorStore : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VectorStore extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.VectorStore" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VectorStore&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type VectorStore = class&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class VectorStore abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a vector store that contains collections of records.
            </summary>
    <remarks>
      <para>This type can be used with collections of any schema type, but requires you to provide schema information when getting a collection.</para>
      <para>Unless otherwise documented, implementations of this abstract base class can be expected to be thread-safe, and can be used concurrently from multiple threads.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VectorStore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorStore.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VectorStore();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionExistsAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;bool&gt; CollectionExistsAsync (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CollectionExistsAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorStore.CollectionExistsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CollectionExistsAsync (name As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CollectionExistsAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="vectorStore.CollectionExistsAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the collection.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Checks if the collection exists in the vector store.
            </summary>
        <returns>
          <see langword="true" /> if the collection exists, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorStore.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="vectorStore.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorStore.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="vectorStore.Dispose disposing" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> if called from <see cref="M:Microsoft.Extensions.VectorData.VectorStore.Dispose" />; <see langword="false" /> if called from a finalizer.</param>
        <summary>
            Disposes the <see cref="T:Microsoft.Extensions.VectorData.VectorStore" /> and releases any resources it holds.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureCollectionDeletedAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task EnsureCollectionDeletedAsync (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task EnsureCollectionDeletedAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorStore.EnsureCollectionDeletedAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EnsureCollectionDeletedAsync (name As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member EnsureCollectionDeletedAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="vectorStore.EnsureCollectionDeletedAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the collection to delete.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Deletes the collection from the vector store.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when the collection has been deleted.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCollection&lt;TKey,TRecord&gt;">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Extensions.VectorData.VectorStoreCollection&lt;TKey,TRecord&gt; GetCollection&lt;TKey,TRecord&gt; (string name, Microsoft.Extensions.VectorData.VectorStoreCollectionDefinition? definition = default) where TRecord : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.VectorData.VectorStoreCollection`2&lt;!!TKey, !!TRecord&gt; GetCollection&lt;TKey, class TRecord&gt;(string name, class Microsoft.Extensions.VectorData.VectorStoreCollectionDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorStore.GetCollection``2(System.String,Microsoft.Extensions.VectorData.VectorStoreCollectionDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCollection(Of TKey, TRecord) (name As String, Optional definition As VectorStoreCollectionDefinition = Nothing) As VectorStoreCollection(Of TKey, TRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetCollection : string * Microsoft.Extensions.VectorData.VectorStoreCollectionDefinition -&gt; Microsoft.Extensions.VectorData.VectorStoreCollection&lt;'Key, 'Record (requires 'Record : null)&gt; (requires 'Record : null)" Usage="vectorStore.GetCollection (name, definition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresDynamicCode("This API is not compatible with NativeAOT. For dynamic mapping via Dictionary&lt;string, object?&gt;, use GetCollectionDynamic() instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresDynamicCode("This API is not compatible with NativeAOT. For dynamic mapping via Dictionary&lt;string, object?&gt;, use GetCollectionDynamic() instead.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("This API is not compatible with trimming. For dynamic mapping via Dictionary&lt;string, object?&gt;, use GetCollectionDynamic() instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("This API is not compatible with trimming. For dynamic mapping via Dictionary&lt;string, object?&gt;, use GetCollectionDynamic() instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.VectorData.VectorStoreCollection&lt;TKey,TRecord&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TRecord">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definition" Type="Microsoft.Extensions.VectorData.VectorStoreCollectionDefinition">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TKey">The data type of the record key.</typeparam>
        <typeparam name="TRecord">The record data model to use for adding, updating, and retrieving data from the collection.</typeparam>
        <param name="name">The name of the collection.</param>
        <param name="definition">The schema of the record type.</param>
        <summary>
            Gets a collection from the vector store.
            </summary>
        <returns>A new <see cref="T:Microsoft.Extensions.VectorData.VectorStoreCollection`2" /> instance for managing the records in the collection.</returns>
        <remarks>
            To successfully request a collection, either <typeparamref name="TRecord" /> must be annotated with attributes that define the schema of
            the record type, or <paramref name="definition" /> must be provided.
            </remarks>
        <altmember cref="T:Microsoft.Extensions.VectorData.VectorStoreDataAttribute" />
        <altmember cref="T:Microsoft.Extensions.VectorData.VectorStoreVectorAttribute" />
        <altmember cref="T:Microsoft.Extensions.VectorData.VectorStoreKeyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicCollection">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Extensions.VectorData.VectorStoreCollection&lt;object,System.Collections.Generic.Dictionary&lt;string,object?&gt;&gt; GetDynamicCollection (string name, Microsoft.Extensions.VectorData.VectorStoreCollectionDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.VectorData.VectorStoreCollection`2&lt;object, class System.Collections.Generic.Dictionary`2&lt;string, object&gt;&gt; GetDynamicCollection(string name, class Microsoft.Extensions.VectorData.VectorStoreCollectionDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorStore.GetDynamicCollection(System.String,Microsoft.Extensions.VectorData.VectorStoreCollectionDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDynamicCollection (name As String, definition As VectorStoreCollectionDefinition) As VectorStoreCollection(Of Object, Dictionary(Of String, Object))" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicCollection : string * Microsoft.Extensions.VectorData.VectorStoreCollectionDefinition -&gt; Microsoft.Extensions.VectorData.VectorStoreCollection&lt;obj, System.Collections.Generic.Dictionary&lt;string, obj&gt;&gt;" Usage="vectorStore.GetDynamicCollection (name, definition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::Extensions::VectorData::VectorStoreCollection&lt;System::Object ^, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^&gt; ^ GetDynamicCollection(System::String ^ name, Microsoft::Extensions::VectorData::VectorStoreCollectionDefinition ^ definition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.VectorData.VectorStoreCollection&lt;System.Object,System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="definition" Type="Microsoft.Extensions.VectorData.VectorStoreCollectionDefinition" />
      </Parameters>
      <Docs>
        <param name="name">The name of the collection.</param>
        <param name="definition">The schema of the record type.</param>
        <summary>
            Gets a collection from the vector store, using dynamic mapping; the record type is represented as a <see cref="T:System.Collections.Generic.Dictionary`2" />.
            </summary>
        <returns>A new <see cref="T:Microsoft.Extensions.VectorData.VectorStoreCollection`2" /> instance for managing the records in the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public abstract object? GetService (Type serviceType, object? serviceKey = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorStore.GetService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetService (serviceType As Type, Optional serviceKey As Object = Nothing) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type * obj -&gt; obj" Usage="vectorStore.GetService (serviceType, serviceKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="serviceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of object being requested.</param>
        <param name="serviceKey">An optional key that can be used to help identify the target service.</param>
        <summary>Asks the <see cref="T:Microsoft.Extensions.VectorData.VectorStore" /> for an object of the specified type <paramref name="serviceType" />.</summary>
        <returns>The found object, otherwise <see langword="null" />.</returns>
        <remarks>
            The purpose of this method is to allow for the retrieval of strongly typed services that might be provided by the <see cref="T:Microsoft.Extensions.VectorData.VectorStore" />,
            including itself or any services it might be wrapping. For example, to access the <see cref="T:Microsoft.Extensions.VectorData.VectorStoreMetadata" /> for the instance,
            <see cref="M:Microsoft.Extensions.VectorData.VectorStore.GetService(System.Type,System.Object)" /> can be used to request it.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ListCollectionNamesAsync">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IAsyncEnumerable&lt;string&gt; ListCollectionNamesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;string&gt; ListCollectionNamesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorStore.ListCollectionNamesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ListCollectionNamesAsync (Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of String)" />
      <MemberSignature Language="F#" Value="abstract member ListCollectionNamesAsync : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;string&gt;" Usage="vectorStore.ListCollectionNamesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Retrieves the names of all the collections in the vector store.
            </summary>
        <returns>The list of names of all the collections in the vector store.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
