<Type Name="IVectorSearchable&lt;TRecord&gt;" FullName="Microsoft.Extensions.VectorData.IVectorSearchable&lt;TRecord&gt;">
  <TypeSignature Language="C#" Value="public interface IVectorSearchable&lt;TRecord&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IVectorSearchable`1&lt;TRecord&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.IVectorSearchable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVectorSearchable(Of TRecord)" />
  <TypeSignature Language="F#" Value="type IVectorSearchable&lt;'Record&gt; = interface" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TRecord&gt;&#xA;public interface class IVectorSearchable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TRecord" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TRecord">The record data model to use for retrieving data from the store.</typeparam>
    <summary>
            Defines an interface for performing vector searches on a vector store.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object? GetService (Type serviceType, object? serviceKey = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorSearchable`1.GetService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type, Optional serviceKey As Object = Nothing) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type * obj -&gt; obj" Usage="iVectorSearchable.GetService (serviceType, serviceKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="serviceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of object being requested.</param>
        <param name="serviceKey">An optional key that can be used to help identify the target service.</param>
        <summary>Asks the <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1" /> for an object of the specified type <paramref name="serviceType" />.</summary>
        <returns>The found object, otherwise <see langword="null" />.</returns>
        <remarks>
            The purpose of this method is to allow for the retrieval of strongly typed services that might be provided by the <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1" />,
            including itself or any services it might be wrapping. For example, to access the <see cref="T:Microsoft.Extensions.VectorData.VectorStoreCollectionMetadata" /> for the instance,
            <see cref="M:Microsoft.Extensions.VectorData.IVectorSearchable`1.GetService(System.Type,System.Object)" /> can be used to request it.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SearchAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;TRecord&gt;&gt; SearchAsync&lt;TInput&gt; (TInput searchValue, int top, Microsoft.Extensions.VectorData.VectorSearchOptions&lt;TRecord&gt;? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Microsoft.Extensions.VectorData.VectorSearchResult`1&lt;!TRecord&gt;&gt; SearchAsync&lt;TInput&gt;(!!TInput searchValue, int32 top, class Microsoft.Extensions.VectorData.VectorSearchOptions`1&lt;!TRecord&gt; options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorSearchable`1.SearchAsync``1(``0,System.Int32,Microsoft.Extensions.VectorData.VectorSearchOptions{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchAsync(Of TInput) (searchValue As TInput, top As Integer, Optional options As VectorSearchOptions(Of TRecord) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of VectorSearchResult(Of TRecord))" />
      <MemberSignature Language="F#" Value="abstract member SearchAsync : 'Input * int * Microsoft.Extensions.VectorData.VectorSearchOptions&lt;'Record&gt; * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;'Record&gt;&gt;" Usage="iVectorSearchable.SearchAsync (searchValue, top, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;TRecord&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="searchValue" Type="TInput" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.Extensions.VectorData.VectorSearchOptions&lt;TRecord&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">The type of the input value on which to perform the similarity search.</typeparam>
        <param name="searchValue">The value on which to perform the similarity search. See the remarks section for more details.</param>
        <param name="top">The maximum number of results to return.</param>
        <param name="options">The options that control the behavior of the search.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
             Searches the vector store for records that are similar to the given value.
             </summary>
        <returns>The records found by the vector search, including their result scores.</returns>
        <remarks>
             The types supported for the <paramref name="searchValue" /> vary based on the provider being used and the embedding generation configured:
            
             <list type="bullet"><item>
                 A <see cref="T:System.String" /> or <see cref="T:Microsoft.Extensions.AI.DataContent" /> (for images, sound...) if an appropriate <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator" /> has been configured that accepts that type as input.
                 For example, register an <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator" /> that accepts <see cref="T:System.String" /> as input in your dependency injection container, and then pass in a
                 <see cref="T:System.String" /> argument to this method; the argument will be automatically passed to the <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator" /> to generate the embedding and perform the search.
                 Some databases support generating embeddings at the database side. In this case, you can pass in a <see cref="T:System.String" /> or <see cref="T:Microsoft.Extensions.AI.DataContent" /> without configuring an
                 <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator" /> with Microsoft.Extensions.VectorData. The provider will simply send your argument to the database as-is for embedding generation.
               </item><item>
                 Arbitrary .NET types can also be passed in as long as an appropriate <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator" /> has been configured; for example, you can create your own <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator" />
                 that accepts your own custom types as input, and uses another <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator" /> to generate embedding from multiple properties. For .NET types beyond <see cref="T:System.String" /> and
                 <see cref="T:Microsoft.Extensions.AI.DataContent" />, you must use the generic <see cref="T:Microsoft.Extensions.VectorData.VectorStoreVectorProperty`1" /> in your record definition.
               </item><item>
                 To work with embeddings directly, pass in a <see cref="T:System.ReadOnlyMemory`1" /> or a .NET array of the appropriate type. Most providers support at least <c>ReadOnlyMemory&lt;float&gt;</c> and <c>float[]</c>,
                 but some support other types (for example, <c>ReadOnlyMemory&lt;Half&gt;</c>, <see cref="T:System.Collections.BitArray" />). Some providers might also support their own custom types as well, for example, to represent sparse embeddings.
                 Consult your provider's documentation for supported types.
               </item><item>
                 If you're using <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator" /> directly in your code, that type returns an <see cref="T:Microsoft.Extensions.AI.Embedding" /> (for example, <c>Embedding{float}</c>),
                 which can also be passed in directly, as long as the provider supports the specific embedding type. However, consider registering your <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator" /> with the provider
                 instead and pass in the input type (for example, <see cref="T:System.String" />).
               </item></list></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
