<Type Name="IVectorStoreRecordCollection&lt;TKey,TRecord&gt;" FullName="Microsoft.Extensions.VectorData.IVectorStoreRecordCollection&lt;TKey,TRecord&gt;">
  <TypeSignature Language="C#" Value="public interface IVectorStoreRecordCollection&lt;TKey,TRecord&gt; : Microsoft.Extensions.VectorData.IVectorizedSearch&lt;TRecord&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IVectorStoreRecordCollection`2&lt;TKey, TRecord&gt; implements class Microsoft.Extensions.VectorData.IVectorizedSearch`1&lt;!TRecord&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVectorStoreRecordCollection(Of TKey, TRecord)&#xA;Implements IVectorizedSearch(Of TRecord)" />
  <TypeSignature Language="F#" Value="type IVectorStoreRecordCollection&lt;'Key, 'Record&gt; = interface&#xA;    interface IVectorizedSearch&lt;'Record&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TRecord&gt;&#xA;public interface class IVectorStoreRecordCollection : Microsoft::Extensions::VectorData::IVectorizedSearch&lt;TRecord&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TRecord">
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.VectorData.IVectorizedSearch&lt;TRecord&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">The data type of the record key.</typeparam>
    <typeparam name="TRecord">The record data model to use for adding, updating, and retrieving data from the store.</typeparam>
    <summary>
            Defines a schema-aware interface for managing a named collection of records in a vector store and for creating or deleting the collection itself.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CollectionExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; CollectionExistsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CollectionExistsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.CollectionExistsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CollectionExistsAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CollectionExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iVectorStoreRecordCollection.CollectionExistsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Checks if the collection exists in the vector store.
            </summary>
        <returns>
          <see langword="true" /> if the collection exists, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionName">
      <MemberSignature Language="C#" Value="public string CollectionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CollectionName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.CollectionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CollectionName As String" />
      <MemberSignature Language="F#" Value="member this.CollectionName : string" Usage="Microsoft.Extensions.VectorData.IVectorStoreRecordCollection&lt;'Key, 'Record&gt;.CollectionName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CollectionName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the collection.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateCollectionAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateCollectionAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.CreateCollectionAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCollectionAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateCollectionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iVectorStoreRecordCollection.CreateCollectionAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates this collection in the vector store.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when the collection has been created.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCollectionIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateCollectionIfNotExistsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateCollectionIfNotExistsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.CreateCollectionIfNotExistsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCollectionIfNotExistsAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateCollectionIfNotExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iVectorStoreRecordCollection.CreateCollectionIfNotExistsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates this collection in the vector store if it doesn't already exist.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when the collection has been created.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteAsync (TKey key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAsync(!TKey key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.DeleteAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (key As TKey, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : 'Key * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iVectorStoreRecordCollection.DeleteAsync (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key">The unique ID associated with the record to remove.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Deletes a record from the vector store. Does not guarantee that the collection exists.
            </summary>
        <returns>The unique identifier for the record.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Extensions.VectorData.VectorStoreOperationException">The command fails to execute for any reason other than that the record does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteBatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteBatchAsync (System.Collections.Generic.IEnumerable&lt;TKey&gt; keys, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteBatchAsync(class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; keys, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.DeleteBatchAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteBatchAsync (keys As IEnumerable(Of TKey), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member DeleteBatchAsync : seq&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iVectorStoreRecordCollection.DeleteBatchAsync (keys, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;TKey&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="keys">The unique IDs associated with the records to remove.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Deletes a batch of records from the vector store. Does not guarantee that the collection exists.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when the records have been deleted.</returns>
        <remarks>
            Deletes are made in a single request or in a single parallel batch, depending on the available store functionality.
            If a record isn't found, it is ignored and the batch succeeds.
            If any record can't be deleted for any other reason, the operation throws. Some records might have already been deleted while others might not have, so the entire operation should be retried.
            </remarks>
        <exception cref="T:Microsoft.Extensions.VectorData.VectorStoreOperationException">The command fails to execute for any reason other than that a record does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteCollectionAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteCollectionAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.DeleteCollectionAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteCollectionAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member DeleteCollectionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iVectorStoreRecordCollection.DeleteCollectionAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Deletes the collection from the vector store.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when the collection has been deleted.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TRecord?&gt; GetAsync (TKey key, Microsoft.Extensions.VectorData.GetRecordOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TRecord&gt; GetAsync(!TKey key, class Microsoft.Extensions.VectorData.GetRecordOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.GetAsync(`0,Microsoft.Extensions.VectorData.GetRecordOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (key As TKey, Optional options As GetRecordOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : 'Key * Microsoft.Extensions.VectorData.GetRecordOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Record&gt;" Usage="iVectorStoreRecordCollection.GetAsync (key, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TRecord&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="options" Type="Microsoft.Extensions.VectorData.GetRecordOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key">The unique ID associated with the record to get.</param>
        <param name="options">Optional options for retrieving the record.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Gets a record from the vector store. Does not guarantee that the collection exists.
            Returns null if the record is not found.
            </summary>
        <returns>The record if found, otherwise null.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Extensions.VectorData.VectorStoreOperationException">The command fails to execute for any reason.</exception>
        <exception cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordMappingException">The mapping between the storage model and record data model fails.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBatchAsync">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;TRecord&gt; GetBatchAsync (System.Collections.Generic.IEnumerable&lt;TKey&gt; keys, Microsoft.Extensions.VectorData.GetRecordOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!TRecord&gt; GetBatchAsync(class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; keys, class Microsoft.Extensions.VectorData.GetRecordOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.GetBatchAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.VectorData.GetRecordOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBatchAsync (keys As IEnumerable(Of TKey), Optional options As GetRecordOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of TRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetBatchAsync : seq&lt;'Key&gt; * Microsoft.Extensions.VectorData.GetRecordOptions * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Record&gt;" Usage="iVectorStoreRecordCollection.GetBatchAsync (keys, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;TKey&gt;" />
        <Parameter Name="options" Type="Microsoft.Extensions.VectorData.GetRecordOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="keys">The unique IDs associated with the record to get.</param>
        <param name="options">Optional options for retrieving the records.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Gets a batch of records from the vector store. Does not guarantee that the collection exists.
            </summary>
        <returns>The records associated with the specified unique keys.</returns>
        <remarks>
            Gets are made in a single request or in a single parallel batch depending on the available store functionality.
            Only found records are returned, so the result set might be smaller than the requested keys.
            This method throws for any issues other than records not being found.
            </remarks>
        <exception cref="T:Microsoft.Extensions.VectorData.VectorStoreOperationException">The command fails to execute for any reason.</exception>
        <exception cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordMappingException">The mapping between the storage model and record data model fails.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpsertAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TKey&gt; UpsertAsync (TRecord record, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TKey&gt; UpsertAsync(!TRecord record, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.UpsertAsync(`1,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpsertAsync (record As TRecord, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TKey)" />
      <MemberSignature Language="F#" Value="abstract member UpsertAsync : 'Record * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Key&gt;" Usage="iVectorStoreRecordCollection.UpsertAsync (record, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="TRecord" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="record">The record to upsert.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Upserts a record into the vector store. Does not guarantee that the collection exists.
                If the record already exists, it is updated.
                If the record does not exist, it is created.
            </summary>
        <returns>The unique identifier for the record.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Extensions.VectorData.VectorStoreOperationException">The command fails to execute for any reason.</exception>
        <exception cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordMappingException">The mapping between the storage model and record data model fails.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpsertBatchAsync">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;TKey&gt; UpsertBatchAsync (System.Collections.Generic.IEnumerable&lt;TRecord&gt; records, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!TKey&gt; UpsertBatchAsync(class System.Collections.Generic.IEnumerable`1&lt;!TRecord&gt; records, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2.UpsertBatchAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpsertBatchAsync (records As IEnumerable(Of TRecord), Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of TKey)" />
      <MemberSignature Language="F#" Value="abstract member UpsertBatchAsync : seq&lt;'Record&gt; * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Key&gt;" Usage="iVectorStoreRecordCollection.UpsertBatchAsync (records, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="records" Type="System.Collections.Generic.IEnumerable&lt;TRecord&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="records">The records to upsert.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Upserts a group of records into the vector store. Does not guarantee that the collection exists.
                If the record already exists, it is updated.
                If the record does not exist, it is created.
            </summary>
        <returns>The unique identifiers for the records.</returns>
        <remarks>
            Upserts are made in a single request or in a single parallel batch depending on the available store functionality.
            </remarks>
        <exception cref="T:Microsoft.Extensions.VectorData.VectorStoreOperationException">The command fails to execute for any reason.</exception>
        <exception cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordMappingException">The mapping between the storage model and record data model fails.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
