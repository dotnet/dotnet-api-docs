<Type Name="VectorSearchExtensions" FullName="Microsoft.Extensions.VectorData.VectorSearchExtensions">
  <TypeSignature Language="C#" Value="public static class VectorSearchExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit VectorSearchExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.VectorSearchExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module VectorSearchExtensions" />
  <TypeSignature Language="F#" Value="type VectorSearchExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class VectorSearchExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a collection of static methods for extending <see cref="T:Microsoft.Extensions.VectorData.IVectorizedSearch`1" /> instances.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRequiredService&lt;TRecord&gt;">
      <MemberSignature Language="C#" Value="public static object GetRequiredService&lt;TRecord&gt; (this Microsoft.Extensions.VectorData.IVectorSearch&lt;TRecord&gt; vectorSearch, Type serviceType, object? serviceKey = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetRequiredService&lt;TRecord&gt;(class Microsoft.Extensions.VectorData.IVectorSearch`1&lt;!!TRecord&gt; vectorSearch, class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorSearchExtensions.GetRequiredService``1(Microsoft.Extensions.VectorData.IVectorSearch{``0},System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRequiredService(Of TRecord) (vectorSearch As IVectorSearch(Of TRecord), serviceType As Type, Optional serviceKey As Object = Nothing) As Object" />
      <MemberSignature Language="F#" Value="static member GetRequiredService : Microsoft.Extensions.VectorData.IVectorSearch&lt;'Record&gt; * Type * obj -&gt; obj" Usage="Microsoft.Extensions.VectorData.VectorSearchExtensions.GetRequiredService (vectorSearch, serviceType, serviceKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRecord" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="vectorSearch" Type="Microsoft.Extensions.VectorData.IVectorSearch&lt;TRecord&gt;" RefType="this" Index="0" FrameworkAlternate="netframework-4.6.2-pp;netstandard-2.0-pp" />
        <Parameter Name="serviceType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.6.2-pp;netstandard-2.0-pp" />
        <Parameter Name="serviceKey" Type="System.Object" Index="2" FrameworkAlternate="netframework-4.6.2-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="TRecord">The record data model to use for retrieving data from the store.</typeparam>
        <param name="vectorSearch">The vector search.</param>
        <param name="serviceType">The type of object being requested.</param>
        <param name="serviceKey">An optional key that can be used to help identify the target service.</param>
        <summary>
            Asks the <see cref="T:Microsoft.Extensions.VectorData.IVectorSearch`1" /> for an object of the specified type <paramref name="serviceType" />
            and throw an exception if one isn't available.
            </summary>
        <returns>The found object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">No service of the requested type for the specified key is available.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredService&lt;TRecord&gt;">
      <MemberSignature Language="C#" Value="public static object GetRequiredService&lt;TRecord&gt; (this Microsoft.Extensions.VectorData.IVectorSearchable&lt;TRecord&gt; vectorSearch, Type serviceType, object? serviceKey = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetRequiredService&lt;TRecord&gt;(class Microsoft.Extensions.VectorData.IVectorSearchable`1&lt;!!TRecord&gt; vectorSearch, class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorSearchExtensions.GetRequiredService``1(Microsoft.Extensions.VectorData.IVectorSearchable{``0},System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRequiredService(Of TRecord) (vectorSearch As IVectorSearchable(Of TRecord), serviceType As Type, Optional serviceKey As Object = Nothing) As Object" />
      <MemberSignature Language="F#" Value="static member GetRequiredService : Microsoft.Extensions.VectorData.IVectorSearchable&lt;'Record&gt; * Type * obj -&gt; obj" Usage="Microsoft.Extensions.VectorData.VectorSearchExtensions.GetRequiredService (vectorSearch, serviceType, serviceKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRecord">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="vectorSearch" Type="Microsoft.Extensions.VectorData.IVectorSearchable&lt;TRecord&gt;" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp" />
        <Parameter Name="serviceType" Type="System.Type" Index="1" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp" />
        <Parameter Name="serviceKey" Type="System.Object" Index="2" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TRecord">The record data model to use for retrieving data from the store.</typeparam>
        <param name="vectorSearch">The vector search.</param>
        <param name="serviceType">The type of object being requested.</param>
        <param name="serviceKey">An optional key that can be used to help identify the target service.</param>
        <summary>
            Asks the <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1" /> for an object of the specified type <paramref name="serviceType" />
            and throw an exception if one isn't available.
            </summary>
        <returns>The found object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">No service of the requested type for the specified key is available.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
