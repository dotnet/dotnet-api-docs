<Type Name="VectorSearchFilter" FullName="Microsoft.Extensions.VectorData.VectorSearchFilter">
  <TypeSignature Language="C#" Value="public sealed class VectorSearchFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit VectorSearchFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.VectorSearchFilter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VectorSearchFilter" />
  <TypeSignature Language="F#" Value="type VectorSearchFilter = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class VectorSearchFilter sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Used to provide filtering when doing vector searches.
            Contains configuration for doing basic vector search filtering.
            </summary>
    <remarks>
            A filter has a collection of <see cref="T:Microsoft.Extensions.VectorData.FilterClause" />s that can be used
            to request that the underlying service filter the search results.
            All clauses are combined with and.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VectorSearchFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorSearchFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VectorSearchFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Create an instance of <see cref="T:Microsoft.Extensions.VectorData.VectorSearchFilter" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VectorSearchFilter (System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.VectorData.FilterClause&gt; filterClauses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.VectorData.FilterClause&gt; filterClauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorSearchFilter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.VectorData.FilterClause})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filterClauses As IEnumerable(Of FilterClause))" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.VectorData.VectorSearchFilter : seq&lt;Microsoft.Extensions.VectorData.FilterClause&gt; -&gt; Microsoft.Extensions.VectorData.VectorSearchFilter" Usage="new Microsoft.Extensions.VectorData.VectorSearchFilter filterClauses" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VectorSearchFilter(System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::VectorData::FilterClause ^&gt; ^ filterClauses);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filterClauses" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.VectorData.FilterClause&gt;" />
      </Parameters>
      <Docs>
        <param name="filterClauses">To be added.</param>
        <summary>
            Create an instance of <see cref="T:Microsoft.Extensions.VectorData.VectorSearchFilter" /> with the provided <see cref="T:Microsoft.Extensions.VectorData.FilterClause" />s.
            <param name="filterClauses">The <see cref="T:Microsoft.Extensions.VectorData.FilterClause" /> instances to use</param></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnyTagEqualTo">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.VectorData.VectorSearchFilter AnyTagEqualTo (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Extensions.VectorData.VectorSearchFilter AnyTagEqualTo(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorSearchFilter.AnyTagEqualTo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyTagEqualTo (propertyName As String, value As String) As VectorSearchFilter" />
      <MemberSignature Language="F#" Value="member this.AnyTagEqualTo : string * string -&gt; Microsoft.Extensions.VectorData.VectorSearchFilter" Usage="vectorSearchFilter.AnyTagEqualTo (propertyName, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Extensions::VectorData::VectorSearchFilter ^ AnyTagEqualTo(System::String ^ propertyName, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.VectorData.VectorSearchFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Name of the property consisting of a list of values to check against. Use the name of the property from your data model or as provided in the record definition.</param>
        <param name="value">Value that the list should contain.</param>
        <summary>
            Add an any tag equal to clause to the filter options.
            </summary>
        <returns>
          <see cref="T:Microsoft.Extensions.VectorData.VectorSearchFilter" /> instance to allow fluent configuration.</returns>
        <remarks>
            This clause will check if a property consisting of a list of values contains a specific value.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.VectorData.VectorSearchFilter Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Extensions.VectorData.VectorSearchFilter Default" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.VectorSearchFilter.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As VectorSearchFilter" />
      <MemberSignature Language="F#" Value="static member Default : Microsoft.Extensions.VectorData.VectorSearchFilter" Usage="Microsoft.Extensions.VectorData.VectorSearchFilter.Default" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Extensions::VectorData::VectorSearchFilter ^ Default { Microsoft::Extensions::VectorData::VectorSearchFilter ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.VectorData.VectorSearchFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default search filter.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualTo">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.VectorData.VectorSearchFilter EqualTo (string propertyName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Extensions.VectorData.VectorSearchFilter EqualTo(string propertyName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.VectorSearchFilter.EqualTo(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualTo (propertyName As String, value As Object) As VectorSearchFilter" />
      <MemberSignature Language="F#" Value="member this.EqualTo : string * obj -&gt; Microsoft.Extensions.VectorData.VectorSearchFilter" Usage="vectorSearchFilter.EqualTo (propertyName, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Extensions::VectorData::VectorSearchFilter ^ EqualTo(System::String ^ propertyName, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.VectorData.VectorSearchFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">Name of the property to check against. Use the name of the property from your data model or as provided in the record definition.</param>
        <param name="value">Value that the property should match.</param>
        <summary>
            Add an equal to clause to the filter options.
            </summary>
        <returns>
          <see cref="T:Microsoft.Extensions.VectorData.VectorSearchFilter" /> instance to allow fluent configuration.</returns>
        <remarks>
            This clause will check if a property is equal to a specific value.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterClauses">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.VectorData.FilterClause&gt; FilterClauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.VectorData.FilterClause&gt; FilterClauses" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.VectorSearchFilter.FilterClauses" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterClauses As IEnumerable(Of FilterClause)" />
      <MemberSignature Language="F#" Value="member this.FilterClauses : seq&lt;Microsoft.Extensions.VectorData.FilterClause&gt;" Usage="Microsoft.Extensions.VectorData.VectorSearchFilter.FilterClauses" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::VectorData::FilterClause ^&gt; ^ FilterClauses { System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::VectorData::FilterClause ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.VectorData.FilterClause&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The filter clauses to and together.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
