<Type Name="IKeywordHybridSearch&lt;TRecord&gt;" FullName="Microsoft.Extensions.VectorData.IKeywordHybridSearch&lt;TRecord&gt;">
  <TypeSignature Language="C#" Value="public interface IKeywordHybridSearch&lt;TRecord&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IKeywordHybridSearch`1&lt;TRecord&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.IKeywordHybridSearch`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IKeywordHybridSearch(Of TRecord)" />
  <TypeSignature Language="F#" Value="type IKeywordHybridSearch&lt;'Record&gt; = interface" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TRecord&gt;&#xA;public interface class IKeywordHybridSearch" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TRecord" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TRecord">The record data model to use for retrieving data from the store.</typeparam>
    <summary>
            Contains a method for doing a hybrid search using a vector and keywords.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object? GetService (Type serviceType, object? serviceKey = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IKeywordHybridSearch`1.GetService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type, Optional serviceKey As Object = Nothing) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type * obj -&gt; obj" Usage="iKeywordHybridSearch.GetService (serviceType, serviceKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("MEVD9000")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("MEVD9000")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="serviceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of object being requested.</param>
        <param name="serviceKey">An optional key that can be used to help identify the target service.</param>
        <summary>Asks the <see cref="T:Microsoft.Extensions.VectorData.IKeywordHybridSearch`1" /> for an object of the specified type <paramref name="serviceType" />.</summary>
        <returns>The found object, otherwise <see langword="null" />.</returns>
        <remarks>
            The purpose of this method is to allow for the retrieval of strongly-typed services that might be provided by the <see cref="T:Microsoft.Extensions.VectorData.IKeywordHybridSearch`1" />,
            including itself or any services it might be wrapping. For example, to access the <see cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordCollectionMetadata" /> for the instance,
            <see cref="M:Microsoft.Extensions.VectorData.IKeywordHybridSearch`1.GetService(System.Type,System.Object)" /> may be used to request it.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HybridSearchAsync&lt;TVector&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;TRecord&gt;&gt; HybridSearchAsync&lt;TVector&gt; (TVector vector, System.Collections.Generic.ICollection&lt;string&gt; keywords, int top, Microsoft.Extensions.VectorData.HybridSearchOptions&lt;TRecord&gt;? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Microsoft.Extensions.VectorData.VectorSearchResult`1&lt;!TRecord&gt;&gt; HybridSearchAsync&lt;TVector&gt;(!!TVector vector, class System.Collections.Generic.ICollection`1&lt;string&gt; keywords, int32 top, class Microsoft.Extensions.VectorData.HybridSearchOptions`1&lt;!TRecord&gt; options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IKeywordHybridSearch`1.HybridSearchAsync``1(``0,System.Collections.Generic.ICollection{System.String},System.Int32,Microsoft.Extensions.VectorData.HybridSearchOptions{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function HybridSearchAsync(Of TVector) (vector As TVector, keywords As ICollection(Of String), top As Integer, Optional options As HybridSearchOptions(Of TRecord) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of VectorSearchResult(Of TRecord))" />
      <MemberSignature Language="F#" Value="abstract member HybridSearchAsync : 'Vector * System.Collections.Generic.ICollection&lt;string&gt; * int * Microsoft.Extensions.VectorData.HybridSearchOptions&lt;'Record&gt; * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;'Record&gt;&gt;" Usage="iKeywordHybridSearch.HybridSearchAsync (vector, keywords, top, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.VectorData.VectorSearchResult&lt;TRecord&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TVector">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="vector" Type="TVector" />
        <Parameter Name="keywords" Type="System.Collections.Generic.ICollection&lt;System.String&gt;" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.Extensions.VectorData.HybridSearchOptions&lt;TRecord&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TVector">The type of the vector.</typeparam>
        <param name="vector">The vector to search the store with.</param>
        <param name="keywords">A collection of keywords to search the store with.</param>
        <param name="top">The maximum number of results to return.</param>
        <param name="options">The options that control the behavior of the search.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Performs a hybrid search for records that match the given embedding and keywords, after applying the provided filters.
            </summary>
        <returns>The records found by the hybrid search, including their result scores.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
