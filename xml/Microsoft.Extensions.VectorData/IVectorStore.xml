<Type Name="IVectorStore" FullName="Microsoft.Extensions.VectorData.IVectorStore">
  <TypeSignature Language="C#" Value="public interface IVectorStore" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IVectorStore" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.IVectorStore" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVectorStore" />
  <TypeSignature Language="F#" Value="type IVectorStore = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVectorStore" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Defines an interface for accessing the list of collections in a vector store.
            </summary>
    <remarks>
      <para>This interface can be used with collections of any schema type, but requires you to provide schema information when getting a collection.</para>
      <para>Unless otherwise documented, implementations of this interface can be expected to be thread-safe, and can be used concurrently from multiple threads.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CollectionExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; CollectionExistsAsync (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CollectionExistsAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStore.CollectionExistsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CollectionExistsAsync (name As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CollectionExistsAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iVectorStore.CollectionExistsAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the collection.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Checks if the collection exists in the vector store.
            </summary>
        <returns>
          <see langword="true" /> if the collection exists, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteCollectionAsync (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteCollectionAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStore.DeleteCollectionAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteCollectionAsync (name As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member DeleteCollectionAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iVectorStore.DeleteCollectionAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the collection.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Deletes the collection from the vector store.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when the collection has been deleted.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCollection&lt;TKey,TRecord&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.VectorData.IVectorStoreRecordCollection&lt;TKey,TRecord&gt; GetCollection&lt;TKey,TRecord&gt; (string name, Microsoft.Extensions.VectorData.VectorStoreRecordDefinition? vectorStoreRecordDefinition = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2&lt;!!TKey, !!TRecord&gt; GetCollection&lt;TKey, TRecord&gt;(string name, class Microsoft.Extensions.VectorData.VectorStoreRecordDefinition vectorStoreRecordDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStore.GetCollection``2(System.String,Microsoft.Extensions.VectorData.VectorStoreRecordDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCollection(Of TKey, TRecord) (name As String, Optional vectorStoreRecordDefinition As VectorStoreRecordDefinition = Nothing) As IVectorStoreRecordCollection(Of TKey, TRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetCollection : string * Microsoft.Extensions.VectorData.VectorStoreRecordDefinition -&gt; Microsoft.Extensions.VectorData.IVectorStoreRecordCollection&lt;'Key, 'Record&gt;" Usage="iVectorStore.GetCollection (name, vectorStoreRecordDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.VectorData.IVectorStoreRecordCollection&lt;TKey,TRecord&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TRecord" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="vectorStoreRecordDefinition" Type="Microsoft.Extensions.VectorData.VectorStoreRecordDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">The data type of the record key.</typeparam>
        <typeparam name="TRecord">The record data model to use for adding, updating, and retrieving data from the collection.</typeparam>
        <param name="name">The name of the collection.</param>
        <param name="vectorStoreRecordDefinition">The schema of the record type.</param>
        <summary>
            Gets a collection from the vector store.
            </summary>
        <returns>A new <see cref="T:Microsoft.Extensions.VectorData.IVectorStoreRecordCollection`2" /> instance for managing the records in the collection.</returns>
        <remarks>
            To successfully request a collection, either <typeparamref name="TRecord" /> must be annotated with attributes that define the schema of
            the record type, or <paramref name="vectorStoreRecordDefinition" /> must be provided.
            </remarks>
        <altmember cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordDataAttribute" />
        <altmember cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordVectorAttribute" />
        <altmember cref="T:Microsoft.Extensions.VectorData.VectorStoreRecordKeyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object? GetService (Type serviceType, object? serviceKey = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStore.GetService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type, Optional serviceKey As Object = Nothing) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type * obj -&gt; obj" Usage="iVectorStore.GetService (serviceType, serviceKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of object being requested.</param>
        <param name="serviceKey">An optional key that can be used to help identify the target service.</param>
        <summary>Asks the <see cref="T:Microsoft.Extensions.VectorData.IVectorStore" /> for an object of the specified type <paramref name="serviceType" />.</summary>
        <returns>The found object, otherwise <see langword="null" />.</returns>
        <remarks>
            The purpose of this method is to allow for the retrieval of strongly-typed services that might be provided by the <see cref="T:Microsoft.Extensions.VectorData.IVectorStore" />,
            including itself or any services it might be wrapping. For example, to access the <see cref="T:Microsoft.Extensions.VectorData.VectorStoreMetadata" /> for the instance,
            <see cref="M:Microsoft.Extensions.VectorData.IVectorStore.GetService(System.Type,System.Object)" /> may be used to request it.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ListCollectionNamesAsync">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;string&gt; ListCollectionNamesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;string&gt; ListCollectionNamesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.IVectorStore.ListCollectionNamesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ListCollectionNamesAsync (Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of String)" />
      <MemberSignature Language="F#" Value="abstract member ListCollectionNamesAsync : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;string&gt;" Usage="iVectorStore.ListCollectionNamesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Retrieves the names of all the collections in the vector store.
            </summary>
        <returns>The list of names of all the collections in the vector store.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
