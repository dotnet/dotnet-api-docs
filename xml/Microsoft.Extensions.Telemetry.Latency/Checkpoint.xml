<Type Name="Checkpoint" FullName="Microsoft.Extensions.Telemetry.Latency.Checkpoint">
  <TypeSignature Language="C#" Value="public readonly struct Checkpoint : IEquatable&lt;Microsoft.Extensions.Telemetry.Latency.Checkpoint&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Checkpoint extends System.ValueType implements class System.IEquatable`1&lt;valuetype Microsoft.Extensions.Telemetry.Latency.Checkpoint&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Latency.Checkpoint" />
  <TypeSignature Language="VB.NET" Value="Public Structure Checkpoint&#xA;Implements IEquatable(Of Checkpoint)" />
  <TypeSignature Language="F#" Value="type Checkpoint = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class Checkpoint : IEquatable&lt;Microsoft::Extensions::Telemetry::Latency::Checkpoint&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.Extensions.Telemetry.Latency.Checkpoint&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents an event and the time it occurred relative to a well-known starting point.
            </summary>
    <remarks>
            Related checkpoints are used to capture when sequential points in time are reached in an
            operation like request execution. They are measured relative to the start of an operation and
            hence capture latency as well as operation flow.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Checkpoint (string name, long elapsed, long frequency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, int64 elapsed, int64 frequency) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Latency.Checkpoint.#ctor(System.String,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, elapsed As Long, frequency As Long)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Latency.Checkpoint : string * int64 * int64 -&gt; Microsoft.Extensions.Telemetry.Latency.Checkpoint" Usage="new Microsoft.Extensions.Telemetry.Latency.Checkpoint (name, elapsed, frequency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Checkpoint(System::String ^ name, long elapsed, long frequency);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="elapsed" Type="System.Int64" />
        <Parameter Name="frequency" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="name">Name of the checkpoint.</param>
        <param name="elapsed">Elapsed time since start.</param>
        <param name="frequency">Frequency of the elapsed time.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Latency.Checkpoint" /> struct.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public long Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Elapsed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Latency.Checkpoint.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As Long" />
      <MemberSignature Language="F#" Value="member this.Elapsed : int64" Usage="Microsoft.Extensions.Telemetry.Latency.Checkpoint.Elapsed" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Elapsed { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the relative time since the begining of the associated operation at which the checkpoint was created.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.Extensions.Telemetry.Latency.Checkpoint other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.Extensions.Telemetry.Latency.Checkpoint other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Latency.Checkpoint.Equals(Microsoft.Extensions.Telemetry.Latency.Checkpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Checkpoint) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.Extensions.Telemetry.Latency.Checkpoint -&gt; bool" Usage="checkpoint.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::Extensions::Telemetry::Latency::Checkpoint other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.Extensions.Telemetry.Latency.Checkpoint" />
      </Parameters>
      <Docs>
        <param name="other">The other checkpoint.</param>
        <summary>
            Determines whether this and a specified checkpoint are identical.
            </summary>
        <returns>
          <see langword="true" /> if identical;<see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Latency.Checkpoint.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="checkpoint.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare.</param>
        <summary>
            Determines whether this and a specified object are identical.
            </summary>
        <returns>
          <see langword="true" /> if identical;<see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public long Frequency { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Frequency" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Latency.Checkpoint.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frequency As Long" />
      <MemberSignature Language="F#" Value="member this.Frequency : int64" Usage="Microsoft.Extensions.Telemetry.Latency.Checkpoint.Frequency" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Frequency { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the frequency of the timestamp value.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Latency.Checkpoint.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="checkpoint.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a hash code for this object.
            </summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Latency.Checkpoint.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.Extensions.Telemetry.Latency.Checkpoint.Name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the checkpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.Extensions.Telemetry.Latency.Checkpoint left, Microsoft.Extensions.Telemetry.Latency.Checkpoint right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype Microsoft.Extensions.Telemetry.Latency.Checkpoint left, valuetype Microsoft.Extensions.Telemetry.Latency.Checkpoint right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Latency.Checkpoint.op_Equality(Microsoft.Extensions.Telemetry.Latency.Checkpoint,Microsoft.Extensions.Telemetry.Latency.Checkpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Checkpoint, right As Checkpoint) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : Microsoft.Extensions.Telemetry.Latency.Checkpoint * Microsoft.Extensions.Telemetry.Latency.Checkpoint -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Microsoft::Extensions::Telemetry::Latency::Checkpoint left, Microsoft::Extensions::Telemetry::Latency::Checkpoint right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.Extensions.Telemetry.Latency.Checkpoint" />
        <Parameter Name="right" Type="Microsoft.Extensions.Telemetry.Latency.Checkpoint" />
      </Parameters>
      <Docs>
        <param name="left">First value.</param>
        <param name="right">Second value.</param>
        <summary>
            Equality operator.
            </summary>
        <returns>
          <see langword="true" /> if its operands are equal, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.Extensions.Telemetry.Latency.Checkpoint left, Microsoft.Extensions.Telemetry.Latency.Checkpoint right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype Microsoft.Extensions.Telemetry.Latency.Checkpoint left, valuetype Microsoft.Extensions.Telemetry.Latency.Checkpoint right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Latency.Checkpoint.op_Inequality(Microsoft.Extensions.Telemetry.Latency.Checkpoint,Microsoft.Extensions.Telemetry.Latency.Checkpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Checkpoint, right As Checkpoint) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Microsoft.Extensions.Telemetry.Latency.Checkpoint * Microsoft.Extensions.Telemetry.Latency.Checkpoint -&gt; bool" Usage="Microsoft.Extensions.Telemetry.Latency.Checkpoint.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Microsoft::Extensions::Telemetry::Latency::Checkpoint left, Microsoft::Extensions::Telemetry::Latency::Checkpoint right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.Extensions.Telemetry.Latency.Checkpoint" />
        <Parameter Name="right" Type="Microsoft.Extensions.Telemetry.Latency.Checkpoint" />
      </Parameters>
      <Docs>
        <param name="left">First value.</param>
        <param name="right">Second value.</param>
        <summary>
            Inequality operator.
            </summary>
        <returns>
          <see langword="true" /> if its operands are inequal, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
