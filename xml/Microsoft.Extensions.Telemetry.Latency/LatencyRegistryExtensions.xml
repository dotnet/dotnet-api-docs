<Type Name="LatencyRegistryExtensions" FullName="Microsoft.Extensions.Telemetry.Latency.LatencyRegistryExtensions">
  <TypeSignature Language="C#" Value="public static class LatencyRegistryExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LatencyRegistryExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Latency.LatencyRegistryExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module LatencyRegistryExtensions" />
  <TypeSignature Language="F#" Value="type LatencyRegistryExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class LatencyRegistryExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions to configure a latency context.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="RegisterCheckpointNames">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection RegisterCheckpointNames (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection RegisterCheckpointNames(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Latency.LatencyRegistryExtensions.RegisterCheckpointNames(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RegisterCheckpointNames (services As IServiceCollection, ParamArray names As String()) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member RegisterCheckpointNames : Microsoft.Extensions.DependencyInjection.IServiceCollection * string[] -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Telemetry.Latency.LatencyRegistryExtensions.RegisterCheckpointNames (services, names)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ RegisterCheckpointNames(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, ... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="services">The dependency injection container to add the names to.</param>
        <param name="names">Set of checkpoint names.</param>
        <summary>
            Registers a set of checkpoint names for a latency context.
            </summary>
        <returns>The value of <paramref name="services" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="services" /> or <paramref name="names" /> are <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterMeasureNames">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection RegisterMeasureNames (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection RegisterMeasureNames(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Latency.LatencyRegistryExtensions.RegisterMeasureNames(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RegisterMeasureNames (services As IServiceCollection, ParamArray names As String()) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member RegisterMeasureNames : Microsoft.Extensions.DependencyInjection.IServiceCollection * string[] -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Telemetry.Latency.LatencyRegistryExtensions.RegisterMeasureNames (services, names)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ RegisterMeasureNames(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, ... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="services">The dependency injection container to add the names to.</param>
        <param name="names">Set of measure names.</param>
        <summary>
            Registers a set of measure names for a latency context.
            </summary>
        <returns>Provided service collection.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="services" /> or <paramref name="names" /> are <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterTagNames">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection RegisterTagNames (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection RegisterTagNames(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Latency.LatencyRegistryExtensions.RegisterTagNames(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RegisterTagNames (services As IServiceCollection, ParamArray names As String()) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member RegisterTagNames : Microsoft.Extensions.DependencyInjection.IServiceCollection * string[] -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Telemetry.Latency.LatencyRegistryExtensions.RegisterTagNames (services, names)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ RegisterTagNames(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, ... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="services">The dependency injection container to add the names to.</param>
        <param name="names">Set of tag names.</param>
        <summary>
            Registers a set of tag names for a latency context.
            </summary>
        <returns>Provided service collection.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">When <paramref name="services" /> or <paramref name="names" /> are <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
