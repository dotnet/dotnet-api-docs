<Type Name="LoggingConsoleExtensions" FullName="Microsoft.Extensions.Telemetry.Console.LoggingConsoleExtensions">
  <TypeSignature Language="C#" Value="public static class LoggingConsoleExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LoggingConsoleExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Console.LoggingConsoleExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module LoggingConsoleExtensions" />
  <TypeSignature Language="F#" Value="type LoggingConsoleExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingConsoleExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Console</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Console exporter logging extensions for R9 logger.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddConsoleExporter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleExporter (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleExporter(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Console.LoggingConsoleExtensions.AddConsoleExporter(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsoleExporter (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddConsoleExporter : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Telemetry.Console.LoggingConsoleExtensions.AddConsoleExporter builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddConsoleExporter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Console</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">Logging builder where the exporter will be added.</param>
        <summary>
            Adds console exporter as a configuration to the OpenTelemetry ILoggingBuilder.
            </summary>
        <returns>The instance of <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to chain the calls.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsoleExporter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleExporter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Microsoft.Extensions.Configuration.IConfigurationSection section);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleExporter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class Microsoft.Extensions.Configuration.IConfigurationSection section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Console.LoggingConsoleExtensions.AddConsoleExporter(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsoleExporter (builder As ILoggingBuilder, section As IConfigurationSection) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddConsoleExporter : Microsoft.Extensions.Logging.ILoggingBuilder * Microsoft.Extensions.Configuration.IConfigurationSection -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Telemetry.Console.LoggingConsoleExtensions.AddConsoleExporter (builder, section)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddConsoleExporter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Microsoft::Extensions::Configuration::IConfigurationSection ^ section);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Console</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.Telemetry.Console.LoggingConsoleOptions))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.Telemetry.Console.LoggingConsoleOptions))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed by [DynamicDependency]")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed by [DynamicDependency]")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfigurationSection" />
      </Parameters>
      <Docs>
        <param name="builder">Logging builder where the exporter will be added.</param>
        <param name="section">The configuration section to bind <see cref="T:Microsoft.Extensions.Telemetry.Console.LoggingConsoleOptions" /> for customization of the console output.</param>
        <summary>
            Adds console exporter as a configuration to the OpenTelemetry ILoggingBuilder.
            </summary>
        <returns>The instance of <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to chain the calls.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsoleExporter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleExporter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Action&lt;Microsoft.Extensions.Telemetry.Console.LoggingConsoleOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleExporter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Telemetry.Console.LoggingConsoleOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Console.LoggingConsoleExtensions.AddConsoleExporter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Telemetry.Console.LoggingConsoleOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsoleExporter (builder As ILoggingBuilder, configure As Action(Of LoggingConsoleOptions)) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddConsoleExporter : Microsoft.Extensions.Logging.ILoggingBuilder * Action&lt;Microsoft.Extensions.Telemetry.Console.LoggingConsoleOptions&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Telemetry.Console.LoggingConsoleExtensions.AddConsoleExporter (builder, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddConsoleExporter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Action&lt;Microsoft::Extensions::Telemetry::Console::LoggingConsoleOptions ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Console</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Telemetry.Console.LoggingConsoleOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">Logging builder where the exporter will be added.</param>
        <param name="configure">An action to configure the <see cref="T:Microsoft.Extensions.Telemetry.Console.LoggingConsoleOptions" /> for console output customization.</param>
        <summary>
            Adds console exporter as a configuration to the OpenTelemetry ILoggingBuilder.
            </summary>
        <returns>The instance of <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to chain the calls.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
