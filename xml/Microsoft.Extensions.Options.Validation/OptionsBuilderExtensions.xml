<Type Name="OptionsBuilderExtensions" FullName="Microsoft.Extensions.Options.Validation.OptionsBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class OptionsBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit OptionsBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Options.Validation.OptionsBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module OptionsBuilderExtensions" />
  <TypeSignature Language="F#" Value="type OptionsBuilderExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class OptionsBuilderExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Options.ValidateOnStart</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Extension methods for adding configuration related options services to the DI container via <see cref="T:Microsoft.Extensions.Options.OptionsBuilder`1" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddValidatedOptions&lt;TOptions&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Options.OptionsBuilder&lt;TOptions&gt; AddValidatedOptions&lt;TOptions&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string? name = default) where TOptions : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Options.OptionsBuilder`1&lt;!!TOptions&gt; AddValidatedOptions&lt;class TOptions&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Options.Validation.OptionsBuilderExtensions.AddValidatedOptions``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddValidatedOptions(Of TOptions As Class) (services As IServiceCollection, Optional name As String = Nothing) As OptionsBuilder(Of TOptions)" />
      <MemberSignature Language="F#" Value="static member AddValidatedOptions : Microsoft.Extensions.DependencyInjection.IServiceCollection * string -&gt; Microsoft.Extensions.Options.OptionsBuilder&lt;'Options (requires 'Options : null)&gt; (requires 'Options : null)" Usage="Microsoft.Extensions.Options.Validation.OptionsBuilderExtensions.AddValidatedOptions (services, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Options.ValidateOnStart</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Options.OptionsBuilder&lt;TOptions&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="name" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOptions">Options to validate.</typeparam>
        <param name="services">Service collection.</param>
        <param name="name">Name of the options.</param>
        <summary>
            Adds named options that are automatically validated during startup using a built-in validator.
            </summary>
        <returns>The <see cref="T:Microsoft.Extensions.Options.OptionsBuilder`1" /> so that additional calls can be chained.</returns>
        <remarks>
            We recommend using custom generated validator.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddValidatedOptions&lt;TOptions,TValidateOptions&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Options.OptionsBuilder&lt;TOptions&gt; AddValidatedOptions&lt;TOptions,TValidateOptions&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string? name = default) where TOptions : class where TValidateOptions : class, Microsoft.Extensions.Options.IValidateOptions&lt;TOptions&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Options.OptionsBuilder`1&lt;!!TOptions&gt; AddValidatedOptions&lt;class TOptions, class (class Microsoft.Extensions.Options.IValidateOptions`1&lt;!!TOptions&gt;) TValidateOptions&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Options.Validation.OptionsBuilderExtensions.AddValidatedOptions``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddValidatedOptions(Of TOptions As Class, TValidateOptions As Class) (services As IServiceCollection, Optional name As String = Nothing) As OptionsBuilder(Of TOptions)" />
      <MemberSignature Language="F#" Value="static member AddValidatedOptions : Microsoft.Extensions.DependencyInjection.IServiceCollection * string -&gt; Microsoft.Extensions.Options.OptionsBuilder&lt;'Options (requires 'Options : null)&gt; (requires 'Options : null and 'ValidateOptions : null and 'ValidateOptions :&gt; Microsoft.Extensions.Options.IValidateOptions&lt;'Options&gt;)" Usage="Microsoft.Extensions.Options.Validation.OptionsBuilderExtensions.AddValidatedOptions (services, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Options.ValidateOnStart</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Options.OptionsBuilder&lt;TOptions&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TValidateOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.Extensions.Options.IValidateOptions&lt;TOptions&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="name" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOptions">Options to validate.</typeparam>
        <typeparam name="TValidateOptions">Validator to use.</typeparam>
        <param name="services">Service collection.</param>
        <param name="name">Name of the options.</param>
        <summary>
            Adds named options that are automatically validated during startup using a custom validator.
            </summary>
        <returns>The <see cref="T:Microsoft.Extensions.Options.OptionsBuilder`1" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
