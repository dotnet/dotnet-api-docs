<Type Name="JsonObject" FullName="System.Text.Json.Nodes.JsonObject">
  <TypeSignature Language="C#" Value="public sealed class JsonObject : System.Text.Json.Nodes.JsonNode, System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode&gt;&gt;, System.Collections.Generic.IDictionary&lt;string,System.Text.Json.Nodes.JsonNode&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode&gt;&gt;" FrameworkAlternate="net-6.0;net-7.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonObject extends System.Text.Json.Nodes.JsonNode implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt;&gt;, class System.Collections.IEnumerable" FrameworkAlternate="net-6.0;net-7.0" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Nodes.JsonObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonObject&#xA;Inherits JsonNode&#xA;Implements ICollection(Of KeyValuePair(Of String, JsonNode)), IDictionary(Of String, JsonNode), IEnumerable(Of KeyValuePair(Of String, JsonNode))" FrameworkAlternate="net-6.0;net-7.0" />
  <TypeSignature Language="F#" Value="type JsonObject = class&#xA;    inherit JsonNode&#xA;    interface IDictionary&lt;string, JsonNode&gt;&#xA;    interface ICollection&lt;KeyValuePair&lt;string, JsonNode&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;string, JsonNode&gt;&gt;&#xA;    interface IEnumerable" FrameworkAlternate="net-6.0;net-7.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonObject sealed : System::Text::Json::Nodes::JsonNode, System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;, System::Collections::Generic::IDictionary&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;" FrameworkAlternate="net-6.0;net-7.0" />
  <TypeSignature Language="C#" Value="public sealed class JsonObject : System.Text.Json.Nodes.JsonNode, System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode&gt;&gt;, System.Collections.Generic.IDictionary&lt;string,System.Text.Json.Nodes.JsonNode&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode&gt;&gt;, System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode&gt;&gt;" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonObject extends System.Text.Json.Nodes.JsonNode implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt;&gt;, class System.Collections.Generic.IList`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt;&gt;, class System.Collections.IEnumerable" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonObject&#xA;Inherits JsonNode&#xA;Implements ICollection(Of KeyValuePair(Of String, JsonNode)), IDictionary(Of String, JsonNode), IEnumerable(Of KeyValuePair(Of String, JsonNode)), IList(Of KeyValuePair(Of String, JsonNode))" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
  <TypeSignature Language="F#" Value="type JsonObject = class&#xA;    inherit JsonNode&#xA;    interface IDictionary&lt;string, JsonNode&gt;&#xA;    interface ICollection&lt;KeyValuePair&lt;string, JsonNode&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;string, JsonNode&gt;&gt;&#xA;    interface IEnumerable&#xA;    interface IList&lt;KeyValuePair&lt;string, JsonNode&gt;&gt;" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonObject sealed : System::Text::Json::Nodes::JsonNode, System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;, System::Collections::Generic::IDictionary&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;, System::Collections::Generic::IList&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Json.Nodes.JsonNode</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0">
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0">
      <InterfaceName>System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("JsonObject[{Count}]")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("JsonObject[{Count}]")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerTypeProxy(typeof(System.Text.Json.Nodes.JsonObject+DebugView))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerTypeProxy(typeof(System.Text.Json.Nodes.JsonObject+DebugView))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a mutable JSON object.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

It's safe to perform multiple concurrent read operations on a <xref:System.Text.Json.Nodes.JsonObject>, but issues can occur if the collection is modified while it's being read.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonObject (System.Text.Json.Nodes.JsonNodeOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Nullable`1&lt;valuetype System.Text.Json.Nodes.JsonNodeOptions&gt; options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.#ctor(System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional options As Nullable(Of JsonNodeOptions) = Nothing)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Nodes.JsonObject : Nullable&lt;System.Text.Json.Nodes.JsonNodeOptions&gt; -&gt; System.Text.Json.Nodes.JsonObject" Usage="new System.Text.Json.Nodes.JsonObject options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Nullable&lt;System.Text.Json.Nodes.JsonNodeOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="options">Options to control the behavior.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject" /> class that is empty.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonObject (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode?&gt;&gt; properties, System.Text.Json.Nodes.JsonNodeOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt;&gt; properties, valuetype System.Nullable`1&lt;valuetype System.Text.Json.Nodes.JsonNodeOptions&gt; options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode}},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IEnumerable(Of KeyValuePair(Of String, JsonNode)), Optional options As Nullable(Of JsonNodeOptions) = Nothing)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Nodes.JsonObject : seq&lt;System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt;&gt; * Nullable&lt;System.Text.Json.Nodes.JsonNodeOptions&gt; -&gt; System.Text.Json.Nodes.JsonObject" Usage="new System.Text.Json.Nodes.JsonObject (properties, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="System.Nullable&lt;System.Text.Json.Nodes.JsonNodeOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="properties">The properties to be added.</param>
        <param name="options">Options to control the behavior.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject" /> class that contains the specified <paramref name="properties" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode?&gt; property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt; property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (property As KeyValuePair(Of String, JsonNode))" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; -&gt; unit&#xA;override this.Add : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; -&gt; unit" Usage="jsonObject.Add property" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt; property);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="property">The KeyValuePair structure representing the property name and value to add to the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</param>
        <summary>Adds the specified property to the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">An element with the same property name already exists in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</exception>
        <exception cref="T:System.ArgumentNullException">The property name of <paramref name="property" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string propertyName, System.Text.Json.Nodes.JsonNode? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(string propertyName, class System.Text.Json.Nodes.JsonNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.Add(System.String,System.Text.Json.Nodes.JsonNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (propertyName As String, value As JsonNode)" />
      <MemberSignature Language="F#" Value="abstract member Add : string * System.Text.Json.Nodes.JsonNode -&gt; unit&#xA;override this.Add : string * System.Text.Json.Nodes.JsonNode -&gt; unit" Usage="jsonObject.Add (propertyName, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::String ^ propertyName, System::Text::Json::Nodes::JsonNode ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Add(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.Nodes.JsonNode">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">The property name of the element to add.</param>
        <param name="value">The value of the element to add.</param>
        <summary>Adds an element with the provided property name and value to the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyName" />is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">An element with the same property name already exists in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="jsonObject.Clear " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all elements from the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (propertyName As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="jsonObject.ContainsKey propertyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The property name to locate in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</param>
        <summary>Determines whether the <see cref="T:System.Text.Json.Nodes.JsonObject" /> contains an element with the specified property name.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Text.Json.Nodes.JsonObject" /> contains an element with the specified property name; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyName" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Nodes.JsonObject.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Text.Json.Nodes.JsonObject.Count" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of elements contained in <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        <value>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Text.Json.Nodes.JsonObject? Create (System.Text.Json.JsonElement element, System.Text.Json.Nodes.JsonNodeOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.Nodes.JsonObject Create(valuetype System.Text.Json.JsonElement element, valuetype System.Nullable`1&lt;valuetype System.Text.Json.Nodes.JsonNodeOptions&gt; options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.Create(System.Text.Json.JsonElement,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (element As JsonElement, Optional options As Nullable(Of JsonNodeOptions) = Nothing) As JsonObject" />
      <MemberSignature Language="F#" Value="static member Create : System.Text.Json.JsonElement * Nullable&lt;System.Text.Json.Nodes.JsonNodeOptions&gt; -&gt; System.Text.Json.Nodes.JsonObject" Usage="System.Text.Json.Nodes.JsonObject.Create (element, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Json.Nodes.JsonObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Text.Json.JsonElement" />
        <Parameter Name="options" Type="System.Nullable&lt;System.Text.Json.Nodes.JsonNodeOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="element">The <see cref="T:System.Text.Json.JsonElement" />.</param>
        <param name="options">Options to control the behavior.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject" /> class that contains properties from the specified <see cref="T:System.Text.Json.JsonElement" />.</summary>
        <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject" /> class that contains properties from the specified <see cref="T:System.Text.Json.JsonElement" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAt">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode?&gt; GetAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt; GetAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.GetAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAt (index As Integer) As KeyValuePair(Of String, JsonNode)" />
      <MemberSignature Language="F#" Value="member this.GetAt : int -&gt; System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt;" Usage="jsonObject.GetAt index" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt; GetAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the pair to get.</param>
        <summary>Gets the property of the specified index.</summary>
        <returns>The property at the specified index as a key/value pair.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than 0 or greater than or equal to <see cref="P:System.Text.Json.Nodes.JsonObject.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode?&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, JsonNode))" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt;&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt;&gt;" Usage="jsonObject.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        <returns>An enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.IndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (propertyName As String) As Integer" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string -&gt; int" Usage="jsonObject.IndexOf propertyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
      </Parameters>
      <Docs>
        <param name="propertyName">The property name to locate.</param>
        <summary>Determines the index of a specific property name in the object.</summary>
        <returns>The index of <paramref name="propertyName" /> if found; otherwise, -1.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyName" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, string propertyName, System.Text.Json.Nodes.JsonNode? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, string propertyName, class System.Text.Json.Nodes.JsonNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.Insert(System.Int32,System.String,System.Text.Json.Nodes.JsonNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, propertyName As String, value As JsonNode)" />
      <MemberSignature Language="F#" Value="member this.Insert : int * string * System.Text.Json.Nodes.JsonNode -&gt; unit" Usage="jsonObject.Insert (index, propertyName, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::String ^ propertyName, System::Text::Json::Nodes::JsonNode ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
        <Parameter Name="value" Type="System.Text.Json.Nodes.JsonNode" Index="2" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">The zero-based index at which the property should be inserted.</param>
        <param name="propertyName">The property name to insert.</param>
        <param name="value">The JSON value to insert.</param>
        <summary>Inserts a property into the object at the specified index.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than 0 or greater than <see cref="P:System.Text.Json.Nodes.JsonObject.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (propertyName As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Remove : string -&gt; bool&#xA;override this.Remove : string -&gt; bool" Usage="jsonObject.Remove propertyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The property name of the element to remove.</param>
        <summary>Removes the element with the specified property name from the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        <returns>
          <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyName" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="jsonObject.RemoveAt index" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the item to remove.</param>
        <summary>Removes the property at the specified index.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than 0 or greater than or equal to <see cref="P:System.Text.Json.Nodes.JsonObject.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, System.Text.Json.Nodes.JsonNode? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, class System.Text.Json.Nodes.JsonNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.SetAt(System.Int32,System.Text.Json.Nodes.JsonNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, value As JsonNode)" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * System.Text.Json.Nodes.JsonNode -&gt; unit" Usage="jsonObject.SetAt (index, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, System::Text::Json::Nodes::JsonNode ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
        <Parameter Name="value" Type="System.Text.Json.Nodes.JsonNode" Index="1" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the property to set.</param>
        <param name="value">The JSON value to store at the specified index.</param>
        <summary>Sets a new property value at the specified index.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than 0 or greater than or equal to <see cref="P:System.Text.Json.Nodes.JsonObject.Count" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="value" /> already has a parent.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, string propertyName, System.Text.Json.Nodes.JsonNode? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, string propertyName, class System.Text.Json.Nodes.JsonNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.SetAt(System.Int32,System.String,System.Text.Json.Nodes.JsonNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, propertyName As String, value As JsonNode)" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * string * System.Text.Json.Nodes.JsonNode -&gt; unit" Usage="jsonObject.SetAt (index, propertyName, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, System::String ^ propertyName, System::Text::Json::Nodes::JsonNode ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
        <Parameter Name="propertyName" Type="System.String" Index="1" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
        <Parameter Name="value" Type="System.Text.Json.Nodes.JsonNode" Index="2" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the property to set.</param>
        <param name="propertyName">The property name to store at the specified index.</param>
        <param name="value">The JSON value to store at the specified index.</param>
        <summary>Sets a new property at the specified index.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than 0 or greater than or equal to <see cref="P:System.Text.Json.Nodes.JsonObject.Count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyName" /> is already specified in a different index.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="value" /> already has a parent.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;string,JsonNode&gt;&gt;.Contains (System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Contains(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;&gt;#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As KeyValuePair(Of String, JsonNode)) As Boolean Implements ICollection(Of KeyValuePair(Of String, JsonNode)).Contains" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Contains : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; -&gt; bool&#xA;override this.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Contains : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; -&gt; bool" Usage="jsonObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Contains item" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Contains(System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt; item) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;" />
      </Parameters>
      <Docs>
        <param name="item">The element to locate in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</param>
        <summary>Determines whether the <see cref="T:System.Text.Json.Nodes.JsonObject" /> contains a specific property name and <see cref="T:System.Text.Json.Nodes.JsonNode" /> reference.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Text.Json.Nodes.JsonObject" /> contains an element with the property name; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;string,JsonNode&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode&gt;[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.CopyTo(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt;[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;&gt;#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As KeyValuePair(Of String, JsonNode)(), index As Integer) Implements ICollection(Of KeyValuePair(Of String, JsonNode)).CopyTo" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.CopyTo : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt;[] * int -&gt; unit&#xA;override this.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.CopyTo : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt;[] * int -&gt; unit" Usage="jsonObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.CopyTo (array, index)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.CopyTo(cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt; ^ array, int index) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The one-dimensional Array that is the destination of the elements copied from <see cref="T:System.Text.Json.Nodes.JsonObject" />.</param>
        <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        <summary>Copies the elements of the <see cref="T:System.Text.Json.Nodes.JsonObject" /> to an array of type KeyValuePair starting at the specified array index.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than 0.</exception>
        <exception cref="T:System.ArgumentException">The number of elements in the source ICollection is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of String, JsonNode)).IsReadOnly" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IsReadOnly : bool" Usage="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String,System::Text::Json::Nodes::JsonNode&gt;&gt;::IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <see langword="false" />.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;string,JsonNode&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Remove(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;&gt;#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As KeyValuePair(Of String, JsonNode)) As Boolean Implements ICollection(Of KeyValuePair(Of String, JsonNode)).Remove" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Remove : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; -&gt; bool&#xA;override this.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Remove : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; -&gt; bool" Usage="jsonObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Remove item" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Remove(System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt; item) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;" />
      </Parameters>
      <Docs>
        <param name="item">The KeyValuePair structure representing the property name and value to remove from the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</param>
        <summary>Removes a key and value from the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        <returns>
          <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;string&gt; System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;string&gt; System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IDictionary&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection(Of String) Implements IDictionary(Of String, JsonNode).Keys" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.Keys : System.Collections.Generic.ICollection&lt;string&gt;" Usage="System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;System::String ^&gt; ^ System::Collections::Generic::IDictionary&lt;System::String,System::Text::Json::Nodes::JsonNode&gt;::Keys { System::Collections::Generic::ICollection&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection containing the property names in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        <value>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.TryGetValue">
      <MemberSignature Language="C#" Value="bool IDictionary&lt;string,JsonNode&gt;.TryGetValue (string propertyName, out System.Text.Json.Nodes.JsonNode jsonNode);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.TryGetValue(string propertyName, [out] class System.Text.Json.Nodes.JsonNode&amp; jsonNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IDictionary&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;#TryGetValue(System.String,System.Text.Json.Nodes.JsonNode@)" />
      <MemberSignature Language="VB.NET" Value="Function TryGetValue (propertyName As String, ByRef jsonNode As JsonNode) As Boolean Implements IDictionary(Of String, JsonNode).TryGetValue" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.TryGetValue : string * JsonNode -&gt; bool&#xA;override this.System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.TryGetValue : string * JsonNode -&gt; bool" Usage="jsonObject.System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.TryGetValue (propertyName, jsonNode)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.TryGetValue(System::String ^ propertyName, [Runtime::InteropServices::Out] System::Text::Json::Nodes::JsonNode ^ % jsonNode) = System::Collections::Generic::IDictionary&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;::TryGetValue;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="jsonNode" Type="System.Text.Json.Nodes.JsonNode" RefType="out" />
      </Parameters>
      <Docs>
        <param name="propertyName">The property name of the value to get.</param>
        <param name="jsonNode">When this method returns, contains the value associated with the specified property name, if the property name is found; otherwise, <see langword="null" />.</param>
        <summary>Gets the value associated with the specified property name.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Text.Json.Nodes.JsonObject" /> contains an element with the specified property name; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyName" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;System.Text.Json.Nodes.JsonNode?&gt; System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class System.Text.Json.Nodes.JsonNode&gt; System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.Values" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IDictionary&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection(Of JsonNode) Implements IDictionary(Of String, JsonNode).Values" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.Values : System.Collections.Generic.ICollection&lt;System.Text.Json.Nodes.JsonNode&gt;" Usage="System.Collections.Generic.IDictionary&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;.Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;System::Text::Json::Nodes::JsonNode ^&gt; ^ System::Collections::Generic::IDictionary&lt;System::String,System::Text::Json::Nodes::JsonNode&gt;::Values { System::Collections::Generic::ICollection&lt;System::Text::Json::Nodes::JsonNode ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Text.Json.Nodes.JsonNode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection containing the property values in the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        <value>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IndexOf">
      <MemberSignature Language="C#" Value="int IList&lt;KeyValuePair&lt;string,JsonNode&gt;&gt;.IndexOf (System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IndexOf(valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IList&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;&gt;#IndexOf(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As KeyValuePair(Of String, JsonNode)) As Integer Implements IList(Of KeyValuePair(Of String, JsonNode)).IndexOf" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IndexOf : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; -&gt; int&#xA;override this.System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IndexOf : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; -&gt; int" Usage="jsonObject.System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IndexOf item" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.IndexOf(System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt; item) = System::Collections::Generic::IList&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;" Index="0" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;KeyValuePair&lt;string,JsonNode&gt;&gt;.Insert (int index, System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode&gt; item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Insert(int32 index, valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IList&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;&gt;#Insert(System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As KeyValuePair(Of String, JsonNode)) Implements IList(Of KeyValuePair(Of String, JsonNode)).Insert" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Insert : int * System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; -&gt; unit&#xA;override this.System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Insert : int * System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; -&gt; unit" Usage="jsonObject.System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Insert (index, item)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Insert(int index, System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt; item) = System::Collections::Generic::IList&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;" Index="1" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Item">
      <MemberSignature Language="C#" Value="System.Collections.Generic.KeyValuePair&lt;string,System.Text.Json.Nodes.JsonNode?&gt; System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.Json.Nodes.JsonNode&gt; System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IList&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As KeyValuePair(Of String, JsonNode) Implements IList(Of KeyValuePair(Of String, JsonNode)).Item" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Item(int) : System.Collections.Generic.KeyValuePair&lt;string, System.Text.Json.Nodes.JsonNode&gt; with get, set" Usage="System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt; System::Collections::Generic::IList&lt;System::Collections::Generic::KeyValuePair&lt;System::String,System::Text::Json::Nodes::JsonNode&gt;&gt;::Item[int] { System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt; get(int index); void set(int index, System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt; value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 2 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 2 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;KeyValuePair&lt;string,JsonNode&gt;&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IList&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#Json#Nodes#JsonNode&gt;&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of KeyValuePair(Of String, JsonNode)).RemoveAt" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.RemoveAt : int -&gt; unit&#xA;override this.System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.RemoveAt : int -&gt; unit" Usage="jsonObject.System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.RemoveAt index" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.Json.Nodes.JsonNode&gt;&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::Json::Nodes::JsonNode ^&gt;&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="net-8.0;net-9.0;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-2.0" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="jsonObject.System.Collections.IEnumerable.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</summary>
        <returns>An enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This member is an explicit interface member implementation. It can be used only when the <xref:System.Text.Json.Nodes.JsonObject> instance is cast to an <xref:System.Collections.IEnumerable> interface.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetPropertyValue">
      <MemberSignature Language="C#" Value="public bool TryGetPropertyValue (string propertyName, out System.Text.Json.Nodes.JsonNode? jsonNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetPropertyValue(string propertyName, [out] class System.Text.Json.Nodes.JsonNode&amp; jsonNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.TryGetPropertyValue(System.String,System.Text.Json.Nodes.JsonNode@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetPropertyValue (propertyName As String, ByRef jsonNode As JsonNode) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetPropertyValue : string * JsonNode -&gt; bool" Usage="jsonObject.TryGetPropertyValue (propertyName, jsonNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetPropertyValue(System::String ^ propertyName, [Runtime::InteropServices::Out] System::Text::Json::Nodes::JsonNode ^ % jsonNode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="jsonNode" Type="System.Text.Json.Nodes.JsonNode" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property to return.</param>
        <param name="jsonNode">The JSON value of the property with the specified name.</param>
        <summary>Returns the value of a property with the specified name.</summary>
        <returns>
          <see langword="true" /> if a property with the specified name was found; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Text.Json.Utf8JsonWriter writer, System.Text.Json.JsonSerializerOptions? options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Text.Json.Utf8JsonWriter writer, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Nodes.JsonObject.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As Utf8JsonWriter, Optional options As JsonSerializerOptions = Nothing)" />
      <MemberSignature Language="F#" Value="override this.WriteTo : System.Text.Json.Utf8JsonWriter * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="jsonObject.WriteTo (writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" />.</param>
        <param name="options">Options to control the serialization behavior.</param>
        <summary>Writes the <see cref="T:System.Text.Json.Nodes.JsonNode" /> into the provided <see cref="T:System.Text.Json.Utf8JsonWriter" /> as JSON.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> parameter is <see langword="null" />.</exception>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
