<Type Name="HostBuilder" FullName="Microsoft.Extensions.Hosting.HostBuilder">
  <TypeSignature Language="C#" Value="public class HostBuilder : Microsoft.Extensions.Hosting.IHostBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HostBuilder extends System.Object implements class Microsoft.Extensions.Hosting.IHostBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Hosting.HostBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class HostBuilder&#xA;Implements IHostBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HostBuilder : Microsoft::Extensions::Hosting::IHostBuilder" />
  <TypeSignature Language="F#" Value="type HostBuilder = class&#xA;    interface IHostBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Hosting.IHostBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A program initialization utility.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.IHost Build ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Hosting.IHost Build() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostBuilder.Build" />
      <MemberSignature Language="VB.NET" Value="Public Function Build () As IHost" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::Hosting::IHost ^ Build();" />
      <MemberSignature Language="F#" Value="abstract member Build : unit -&gt; Microsoft.Extensions.Hosting.IHost&#xA;override this.Build : unit -&gt; Microsoft.Extensions.Hosting.IHost" Usage="hostBuilder.Build " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostBuilder.Build</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHost</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Run the given actions to initialize the host. This can only be called once.</summary>
        <returns>An initialized <see cref="T:Microsoft.Extensions.Hosting.IHost" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureAppConfiguration">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.IHostBuilder ConfigureAppConfiguration (Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; configureDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Hosting.IHostBuilder ConfigureAppConfiguration(class System.Action`2&lt;class Microsoft.Extensions.Hosting.HostBuilderContext, class Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; configureDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostBuilder.ConfigureAppConfiguration(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAppConfiguration (configureDelegate As Action(Of HostBuilderContext, IConfigurationBuilder)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::Hosting::IHostBuilder ^ ConfigureAppConfiguration(Action&lt;Microsoft::Extensions::Hosting::HostBuilderContext ^, Microsoft::Extensions::Configuration::IConfigurationBuilder ^&gt; ^ configureDelegate);" />
      <MemberSignature Language="F#" Value="abstract member ConfigureAppConfiguration : Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder&#xA;override this.ConfigureAppConfiguration : Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="hostBuilder.ConfigureAppConfiguration configureDelegate" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureAppConfiguration(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configureDelegate" Type="System.Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Configuration.IConfigurationBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> for the application.</param>
        <summary>Sets up the configuration for the remainder of the build process and application.
            The <see cref="P:Microsoft.Extensions.Hosting.HostBuilderContext.Configuration"/> passed in is the host's configuration built
            from calls to <see cref="M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})"/>. This can be called multiple times and the results will be additive.
            After all calls have been processed, <see cref="P:Microsoft.Extensions.Hosting.HostBuilderContext.Configuration"/> will be updated with the results
            for future build steps. The resulting configuration will also be available in the <see cref="P:Microsoft.Extensions.Hosting.IHost.Services"/> DI Container.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureContainer&lt;TContainerBuilder&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.IHostBuilder ConfigureContainer&lt;TContainerBuilder&gt; (Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext,TContainerBuilder&gt; configureDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Hosting.IHostBuilder ConfigureContainer&lt;TContainerBuilder&gt;(class System.Action`2&lt;class Microsoft.Extensions.Hosting.HostBuilderContext, !!TContainerBuilder&gt; configureDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostBuilder.ConfigureContainer``1(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureContainer(Of TContainerBuilder) (configureDelegate As Action(Of HostBuilderContext, TContainerBuilder)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContainerBuilder&gt;&#xA; virtual Microsoft::Extensions::Hosting::IHostBuilder ^ ConfigureContainer(Action&lt;Microsoft::Extensions::Hosting::HostBuilderContext ^, TContainerBuilder&gt; ^ configureDelegate);" />
      <MemberSignature Language="F#" Value="abstract member ConfigureContainer : Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext, 'ContainerBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder&#xA;override this.ConfigureContainer : Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext, 'ContainerBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="hostBuilder.ConfigureContainer configureDelegate" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureContainer``1(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,``0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContainerBuilder" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="configureDelegate" Type="System.Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext,TContainerBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContainerBuilder">The type of the builder to create.</typeparam>
        <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> for the host.</param>
        <summary>Enables configuring the instantiated dependency container. This can be called multiple times and
            the results will be additive.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureHostConfiguration">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.IHostBuilder ConfigureHostConfiguration (Action&lt;Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; configureDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Hosting.IHostBuilder ConfigureHostConfiguration(class System.Action`1&lt;class Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; configureDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureHostConfiguration (configureDelegate As Action(Of IConfigurationBuilder)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::Hosting::IHostBuilder ^ ConfigureHostConfiguration(Action&lt;Microsoft::Extensions::Configuration::IConfigurationBuilder ^&gt; ^ configureDelegate);" />
      <MemberSignature Language="F#" Value="abstract member ConfigureHostConfiguration : Action&lt;Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder&#xA;override this.ConfigureHostConfiguration : Action&lt;Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="hostBuilder.ConfigureHostConfiguration configureDelegate" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureHostConfiguration(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configureDelegate" Type="System.Action&lt;Microsoft.Extensions.Configuration.IConfigurationBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> for the host.</param>
        <summary>Set up the configuration for the builder itself. This will be used to initialize the <see cref="T:Microsoft.Extensions.Hosting.IHostEnvironment" />
            for use later in the build process. This can be called multiple times and the results will be additive.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureServices">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.IHostBuilder ConfigureServices (Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; configureDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Hosting.IHostBuilder ConfigureServices(class System.Action`2&lt;class Microsoft.Extensions.Hosting.HostBuilderContext, class Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; configureDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureServices (configureDelegate As Action(Of HostBuilderContext, IServiceCollection)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::Hosting::IHostBuilder ^ ConfigureServices(Action&lt;Microsoft::Extensions::Hosting::HostBuilderContext ^, Microsoft::Extensions::DependencyInjection::IServiceCollection ^&gt; ^ configureDelegate);" />
      <MemberSignature Language="F#" Value="abstract member ConfigureServices : Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder&#xA;override this.ConfigureServices : Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="hostBuilder.ConfigureServices configureDelegate" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configureDelegate" Type="System.Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection&gt;" />
      </Parameters>
      <Docs>
        <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> for the host.</param>
        <summary>Adds services to the container. This can be called multiple times and the results will be additive.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;object,object&gt; Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;object, object&gt; Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.HostBuilder.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As IDictionary(Of Object, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::Object ^, System::Object ^&gt; ^ Properties { System::Collections::Generic::IDictionary&lt;System::Object ^, System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Collections.Generic.IDictionary&lt;obj, obj&gt;" Usage="Microsoft.Extensions.Hosting.HostBuilder.Properties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Extensions.Hosting.IHostBuilder.Properties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A central location for sharing state between components during the host building process.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseServiceProviderFactory&lt;TContainerBuilder&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.IHostBuilder UseServiceProviderFactory&lt;TContainerBuilder&gt; (Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;TContainerBuilder&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Hosting.IHostBuilder UseServiceProviderFactory&lt;TContainerBuilder&gt;(class Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1&lt;!!TContainerBuilder&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function UseServiceProviderFactory(Of TContainerBuilder) (factory As IServiceProviderFactory(Of TContainerBuilder)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContainerBuilder&gt;&#xA; virtual Microsoft::Extensions::Hosting::IHostBuilder ^ UseServiceProviderFactory(Microsoft::Extensions::DependencyInjection::IServiceProviderFactory&lt;TContainerBuilder&gt; ^ factory);" />
      <MemberSignature Language="F#" Value="abstract member UseServiceProviderFactory : Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;'ContainerBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder&#xA;override this.UseServiceProviderFactory : Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;'ContainerBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="hostBuilder.UseServiceProviderFactory factory" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostBuilder.UseServiceProviderFactory``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContainerBuilder" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;TContainerBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContainerBuilder">The type of the builder to create.</typeparam>
        <param name="factory">A factory used for creating service providers.</param>
        <summary>Overrides the factory used to create the service provider.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseServiceProviderFactory&lt;TContainerBuilder&gt;">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.IHostBuilder UseServiceProviderFactory&lt;TContainerBuilder&gt; (Func&lt;Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;TContainerBuilder&gt;&gt; factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Hosting.IHostBuilder UseServiceProviderFactory&lt;TContainerBuilder&gt;(class System.Func`2&lt;class Microsoft.Extensions.Hosting.HostBuilderContext, class Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1&lt;!!TContainerBuilder&gt;&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostBuilder.UseServiceProviderFactory``1(System.Func{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function UseServiceProviderFactory(Of TContainerBuilder) (factory As Func(Of HostBuilderContext, IServiceProviderFactory(Of TContainerBuilder))) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContainerBuilder&gt;&#xA; virtual Microsoft::Extensions::Hosting::IHostBuilder ^ UseServiceProviderFactory(Func&lt;Microsoft::Extensions::Hosting::HostBuilderContext ^, Microsoft::Extensions::DependencyInjection::IServiceProviderFactory&lt;TContainerBuilder&gt; ^&gt; ^ factory);" />
      <MemberSignature Language="F#" Value="abstract member UseServiceProviderFactory : Func&lt;Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;'ContainerBuilder&gt;&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder&#xA;override this.UseServiceProviderFactory : Func&lt;Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;'ContainerBuilder&gt;&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="hostBuilder.UseServiceProviderFactory factory" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Hosting.IHostBuilder.UseServiceProviderFactory``1(System.Func{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0}})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContainerBuilder" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="System.Func&lt;Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;TContainerBuilder&gt;&gt;" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TContainerBuilder">The type of the builder to create.</typeparam>
        <param name="factory">A factory used for creating service providers.</param>
        <summary>Overrides the factory used to create the service provider.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
