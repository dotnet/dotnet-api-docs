<Type Name="HostOptions" FullName="Microsoft.Extensions.Hosting.HostOptions">
  <TypeSignature Language="C#" Value="public class HostOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HostOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Hosting.HostOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class HostOptions" />
  <TypeSignature Language="F#" Value="type HostOptions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class HostOptions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Options for <see cref="T:Microsoft.Extensions.Hosting.IHost" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.Hosting.HostOptions" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundServiceExceptionBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.BackgroundServiceExceptionBehavior BackgroundServiceExceptionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Extensions.Hosting.BackgroundServiceExceptionBehavior BackgroundServiceExceptionBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.HostOptions.BackgroundServiceExceptionBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property BackgroundServiceExceptionBehavior As BackgroundServiceExceptionBehavior" />
      <MemberSignature Language="F#" Value="member this.BackgroundServiceExceptionBehavior : Microsoft.Extensions.Hosting.BackgroundServiceExceptionBehavior with get, set" Usage="Microsoft.Extensions.Hosting.HostOptions.BackgroundServiceExceptionBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Hosting::BackgroundServiceExceptionBehavior BackgroundServiceExceptionBehavior { Microsoft::Extensions::Hosting::BackgroundServiceExceptionBehavior get(); void set(Microsoft::Extensions::Hosting::BackgroundServiceExceptionBehavior value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.BackgroundServiceExceptionBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the behavior the <see cref="T:Microsoft.Extensions.Hosting.IHost" /> will follow when any of
            its <see cref="T:Microsoft.Extensions.Hosting.BackgroundService" /> instances throw an unhandled exception.
            </summary>
        <value>The default is <see cref="F:Microsoft.Extensions.Hosting.BackgroundServiceExceptionBehavior.StopHost" />.</value>
        <remarks>
            Defaults to <see cref="F:Microsoft.Extensions.Hosting.BackgroundServiceExceptionBehavior.StopHost" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicesStartConcurrently">
      <MemberSignature Language="C#" Value="public bool ServicesStartConcurrently { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ServicesStartConcurrently" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.HostOptions.ServicesStartConcurrently" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesStartConcurrently As Boolean" />
      <MemberSignature Language="F#" Value="member this.ServicesStartConcurrently : bool with get, set" Usage="Microsoft.Extensions.Hosting.HostOptions.ServicesStartConcurrently" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ServicesStartConcurrently { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value that indicates if the <see cref="T:Microsoft.Extensions.Hosting.IHost" /> will start registered instances of <see cref="T:Microsoft.Extensions.Hosting.IHostedService" /> concurrently or sequentially.
            </summary>
        <value>
          <see langword="true" /> if the <see cref="T:Microsoft.Extensions.Hosting.IHost" /> will start registered instances of <see cref="T:Microsoft.Extensions.Hosting.IHostedService" /> concurrently; <see langword="false" /> if the <see cref="T:Microsoft.Extensions.Hosting.IHost" /> will start registered instances sequentially. The default is <see langword="false" /> .
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicesStopConcurrently">
      <MemberSignature Language="C#" Value="public bool ServicesStopConcurrently { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ServicesStopConcurrently" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.HostOptions.ServicesStopConcurrently" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesStopConcurrently As Boolean" />
      <MemberSignature Language="F#" Value="member this.ServicesStopConcurrently : bool with get, set" Usage="Microsoft.Extensions.Hosting.HostOptions.ServicesStopConcurrently" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ServicesStopConcurrently { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value that indicates if the <see cref="T:Microsoft.Extensions.Hosting.IHost" /> will stop registered instances of <see cref="T:Microsoft.Extensions.Hosting.IHostedService" /> concurrently or sequentially.
            </summary>
        <value>
          <see langword="true" /> if the <see cref="T:Microsoft.Extensions.Hosting.IHost" /> will stop registered instances of <see cref="T:Microsoft.Extensions.Hosting.IHostedService" /> concurrently; <see langword="false" /> if the <see cref="T:Microsoft.Extensions.Hosting.IHost" /> will stop registered instances sequentially. The default is <see langword="false" /> .
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ShutdownTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ShutdownTimeout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.HostOptions.ShutdownTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ShutdownTimeout As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.ShutdownTimeout : TimeSpan with get, set" Usage="Microsoft.Extensions.Hosting.HostOptions.ShutdownTimeout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ShutdownTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the default timeout for <see cref="M:Microsoft.Extensions.Hosting.IHost.StopAsync(System.Threading.CancellationToken)" />.
            </summary>
        <value>To be added.</value>
        <remarks>
            This timeout also encompasses all host services implementing
            <see cref="M:Microsoft.Extensions.Hosting.IHostedLifecycleService.StoppingAsync(System.Threading.CancellationToken)" /> and
            <see cref="M:Microsoft.Extensions.Hosting.IHostedLifecycleService.StoppedAsync(System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartupTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan StartupTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan StartupTimeout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.HostOptions.StartupTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property StartupTimeout As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.StartupTimeout : TimeSpan with get, set" Usage="Microsoft.Extensions.Hosting.HostOptions.StartupTimeout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan StartupTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the default timeout for <see cref="M:Microsoft.Extensions.Hosting.IHost.StartAsync(System.Threading.CancellationToken)" />.
            </summary>
        <value>To be added.</value>
        <remarks>
            This timeout also encompasses all host services implementing
            <see cref="M:Microsoft.Extensions.Hosting.IHostedLifecycleService.StartingAsync(System.Threading.CancellationToken)" /> and
            <see cref="M:Microsoft.Extensions.Hosting.IHostedLifecycleService.StartedAsync(System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
