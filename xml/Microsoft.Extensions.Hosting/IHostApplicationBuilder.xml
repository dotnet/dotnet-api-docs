<Type Name="IHostApplicationBuilder" FullName="Microsoft.Extensions.Hosting.IHostApplicationBuilder">
  <TypeSignature Language="C#" Value="public interface IHostApplicationBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IHostApplicationBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Hosting.IHostApplicationBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHostApplicationBuilder" />
  <TypeSignature Language="F#" Value="type IHostApplicationBuilder = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHostApplicationBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Hosting.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Represents a hosted applications and services builder which helps manage configuration, logging, lifetime, and more.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Configuration.IConfigurationManager Configuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Configuration.IConfigurationManager Configuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.IHostApplicationBuilder.Configuration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Configuration As IConfigurationManager" />
      <MemberSignature Language="F#" Value="member this.Configuration : Microsoft.Extensions.Configuration.IConfigurationManager" Usage="Microsoft.Extensions.Hosting.IHostApplicationBuilder.Configuration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Configuration::IConfigurationManager ^ Configuration { Microsoft::Extensions::Configuration::IConfigurationManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfigurationManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the set of key/value configuration properties.
            </summary>
        <value>To be added.</value>
        <remarks>
            This can be mutated by adding more configuration sources, which will update its current view.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureContainer&lt;TContainerBuilder&gt;">
      <MemberSignature Language="C#" Value="public void ConfigureContainer&lt;TContainerBuilder&gt; (Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;TContainerBuilder&gt; factory, Action&lt;TContainerBuilder&gt;? configure = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConfigureContainer&lt;TContainerBuilder&gt;(class Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1&lt;!!TContainerBuilder&gt; factory, class System.Action`1&lt;!!TContainerBuilder&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.IHostApplicationBuilder.ConfigureContainer``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConfigureContainer(Of TContainerBuilder) (factory As IServiceProviderFactory(Of TContainerBuilder), Optional configure As Action(Of TContainerBuilder) = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member ConfigureContainer : Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;'ContainerBuilder&gt; * Action&lt;'ContainerBuilder&gt; -&gt; unit" Usage="iHostApplicationBuilder.ConfigureContainer (factory, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContainerBuilder" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.DependencyInjection.IServiceProviderFactory&lt;TContainerBuilder&gt;" />
        <Parameter Name="configure" Type="System.Action&lt;TContainerBuilder&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TContainerBuilder">The type of builder provided by the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1" />.</typeparam>
        <param name="factory">The factory object that can create the <typeparamref name="TContainerBuilder" /> and <see cref="T:System.IServiceProvider" />.</param>
        <param name="configure">
            A delegate used to configure the <typeparamref name="TContainerBuilder" />. This can be used to configure services using
            APIS specific to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1" /> implementation.
            </param>
        <summary>
            Registers a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1" /> instance to be used to create the <see cref="T:System.IServiceProvider" />.
            </summary>
        <remarks>
          <para>
            The <see cref="T:System.IServiceProvider" /> is created when this builder is built and so the delegate provided
            by <paramref name="configure" /> will run after all other services have been registered.
            </para>
          <para>
            Multiple calls to <see cref="M:Microsoft.Extensions.Hosting.IHostApplicationBuilder.ConfigureContainer``1(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory{``0},System.Action{``0})" /> will replace
            the previously stored <paramref name="factory" /> and <paramref name="configure" /> delegate.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Environment">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Hosting.IHostEnvironment Environment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Hosting.IHostEnvironment Environment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.IHostApplicationBuilder.Environment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Environment As IHostEnvironment" />
      <MemberSignature Language="F#" Value="member this.Environment : Microsoft.Extensions.Hosting.IHostEnvironment" Usage="Microsoft.Extensions.Hosting.IHostApplicationBuilder.Environment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Hosting::IHostEnvironment ^ Environment { Microsoft::Extensions::Hosting::IHostEnvironment ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostEnvironment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the information about the hosting environment an application is running in.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logging">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.ILoggingBuilder Logging { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILoggingBuilder Logging" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.IHostApplicationBuilder.Logging" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Logging As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="member this.Logging : Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Hosting.IHostApplicationBuilder.Logging" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Logging::ILoggingBuilder ^ Logging { Microsoft::Extensions::Logging::ILoggingBuilder ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a collection of logging providers for the application to compose. This is useful for adding new logging providers.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metrics">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder Metrics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder Metrics" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.IHostApplicationBuilder.Metrics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Metrics As IMetricsBuilder" />
      <MemberSignature Language="F#" Value="member this.Metrics : Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder" Usage="Microsoft.Extensions.Hosting.IHostApplicationBuilder.Metrics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Diagnostics::Metrics::IMetricsBuilder ^ Metrics { Microsoft::Extensions::Diagnostics::Metrics::IMetricsBuilder ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a builder that allows enabling metrics and directing their output.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;object,object&gt; Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;object, object&gt; Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.IHostApplicationBuilder.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As IDictionary(Of Object, Object)" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Collections.Generic.IDictionary&lt;obj, obj&gt;" Usage="Microsoft.Extensions.Hosting.IHostApplicationBuilder.Properties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::Object ^, System::Object ^&gt; ^ Properties { System::Collections::Generic::IDictionary&lt;System::Object ^, System::Object ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a central location for sharing state between components during the host building process.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Services">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.DependencyInjection.IServiceCollection Services" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Hosting.IHostApplicationBuilder.Services" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Services As IServiceCollection" />
      <MemberSignature Language="F#" Value="member this.Services : Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Hosting.IHostApplicationBuilder.Services" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::DependencyInjection::IServiceCollection ^ Services { Microsoft::Extensions::DependencyInjection::IServiceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a collection of services for the application to compose. This is useful for adding user provided or framework provided services.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
