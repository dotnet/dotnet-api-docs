<Type Name="HostingHostBuilderExtensions" FullName="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class HostingHostBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit HostingHostBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module HostingHostBuilderExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class HostingHostBuilderExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type HostingHostBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ConfigureAppConfiguration">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder ConfigureAppConfiguration (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; configureDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder ConfigureAppConfiguration(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; configureDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureAppConfiguration(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureAppConfiguration (hostBuilder As IHostBuilder, configureDelegate As Action(Of IConfigurationBuilder)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ ConfigureAppConfiguration(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, Action&lt;Microsoft::Extensions::Configuration::IConfigurationBuilder ^&gt; ^ configureDelegate);" />
      <MemberSignature Language="F#" Value="static member ConfigureAppConfiguration : Microsoft.Extensions.Hosting.IHostBuilder * Action&lt;Microsoft.Extensions.Configuration.IConfigurationBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureAppConfiguration (hostBuilder, configureDelegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
        <Parameter Name="configureDelegate" Type="System.Action&lt;Microsoft.Extensions.Configuration.IConfigurationBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" /> that will be used
            to construct the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> for the host.</param>
        <summary>Sets up the configuration for the remainder of the build process and application. This can be called multiple times and
            the results will be additive. The results will be available at <see cref="P:Microsoft.Extensions.Hosting.HostBuilderContext.Configuration" /> for
            subsequent operations, as well as in <see cref="P:Microsoft.Extensions.Hosting.IHost.Services" />.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureContainer&lt;TContainerBuilder&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder ConfigureContainer&lt;TContainerBuilder&gt; (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, Action&lt;TContainerBuilder&gt; configureDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder ConfigureContainer&lt;TContainerBuilder&gt;(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, class System.Action`1&lt;!!TContainerBuilder&gt; configureDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureContainer``1(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureContainer(Of TContainerBuilder) (hostBuilder As IHostBuilder, configureDelegate As Action(Of TContainerBuilder)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContainerBuilder&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ ConfigureContainer(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, Action&lt;TContainerBuilder&gt; ^ configureDelegate);" />
      <MemberSignature Language="F#" Value="static member ConfigureContainer : Microsoft.Extensions.Hosting.IHostBuilder * Action&lt;'ContainerBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureContainer (hostBuilder, configureDelegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContainerBuilder" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
        <Parameter Name="configureDelegate" Type="System.Action&lt;TContainerBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContainerBuilder">
        </typeparam>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="configureDelegate">The delegate for configuring the <typeparamref name="TContainerBuilder" />.</param>
        <summary>Enables configuring the instantiated dependency container. This can be called multiple times and
            the results will be additive.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder ConfigureLogging (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder&gt; configureLogging);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder ConfigureLogging(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, class System.Action`2&lt;class Microsoft.Extensions.Hosting.HostBuilderContext, class Microsoft.Extensions.Logging.ILoggingBuilder&gt; configureLogging) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureLogging(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureLogging (hostBuilder As IHostBuilder, configureLogging As Action(Of HostBuilderContext, ILoggingBuilder)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ ConfigureLogging(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, Action&lt;Microsoft::Extensions::Hosting::HostBuilderContext ^, Microsoft::Extensions::Logging::ILoggingBuilder ^&gt; ^ configureLogging);" />
      <MemberSignature Language="F#" Value="static member ConfigureLogging : Microsoft.Extensions.Hosting.IHostBuilder * Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Logging.ILoggingBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureLogging (hostBuilder, configureLogging)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
        <Parameter Name="configureLogging" Type="System.Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.Logging.ILoggingBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" />.</param>
        <summary>Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" />. This may be called multiple times.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder ConfigureLogging (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.Logging.ILoggingBuilder&gt; configureLogging);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder ConfigureLogging(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.Extensions.Logging.ILoggingBuilder&gt; configureLogging) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureLogging(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureLogging (hostBuilder As IHostBuilder, configureLogging As Action(Of ILoggingBuilder)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ ConfigureLogging(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, Action&lt;Microsoft::Extensions::Logging::ILoggingBuilder ^&gt; ^ configureLogging);" />
      <MemberSignature Language="F#" Value="static member ConfigureLogging : Microsoft.Extensions.Hosting.IHostBuilder * Action&lt;Microsoft.Extensions.Logging.ILoggingBuilder&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureLogging (hostBuilder, configureLogging)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
        <Parameter Name="configureLogging" Type="System.Action&lt;Microsoft.Extensions.Logging.ILoggingBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="configureLogging">The delegate that configures the <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" />.</param>
        <summary>Adds a delegate for configuring the provided <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" />. This may be called multiple times.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureServices">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder ConfigureServices (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; configureDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder ConfigureServices(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; configureDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureServices(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureServices (hostBuilder As IHostBuilder, configureDelegate As Action(Of IServiceCollection)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ ConfigureServices(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, Action&lt;Microsoft::Extensions::DependencyInjection::IServiceCollection ^&gt; ^ configureDelegate);" />
      <MemberSignature Language="F#" Value="static member ConfigureServices : Microsoft.Extensions.Hosting.IHostBuilder * Action&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ConfigureServices (hostBuilder, configureDelegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
        <Parameter Name="configureDelegate" Type="System.Action&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt;" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="configureDelegate">The delegate for configuring the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
        <summary>Adds services to the container. This can be called multiple times and the results will be additive.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunConsoleAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RunConsoleAsync (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RunConsoleAsync(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.RunConsoleAsync(Microsoft.Extensions.Hosting.IHostBuilder,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RunConsoleAsync (hostBuilder As IHostBuilder, Optional cancellationToken As CancellationToken = null) As Task" />
      <MemberSignature Language="F#" Value="static member RunConsoleAsync : Microsoft.Extensions.Hosting.IHostBuilder * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.RunConsoleAsync (hostBuilder, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the console.</param>
        <summary>Enables console support, builds and starts the host, and waits for Ctrl+C or SIGTERM to shut down.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that only completes when the token is triggeredor shutdown is triggered.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunConsoleAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RunConsoleAsync (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; configureOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RunConsoleAsync(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; configureOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.RunConsoleAsync(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.ConsoleLifetimeOptions},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RunConsoleAsync (hostBuilder As IHostBuilder, configureOptions As Action(Of ConsoleLifetimeOptions), Optional cancellationToken As CancellationToken = null) As Task" />
      <MemberSignature Language="F#" Value="static member RunConsoleAsync : Microsoft.Extensions.Hosting.IHostBuilder * Action&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.RunConsoleAsync (hostBuilder, configureOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="configureOptions">The delegate for configuring the <see cref="T:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime" />.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the console.</param>
        <summary>Enables console support, builds and starts the host, and waits for Ctrl+C or SIGTERM to shut down.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that only completes when the token is triggeredor shutdown is triggered.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseConsoleLifetime">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder UseConsoleLifetime (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder UseConsoleLifetime(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseConsoleLifetime(Microsoft.Extensions.Hosting.IHostBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseConsoleLifetime (hostBuilder As IHostBuilder) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ UseConsoleLifetime(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder);" />
      <MemberSignature Language="F#" Value="static member UseConsoleLifetime : Microsoft.Extensions.Hosting.IHostBuilder -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseConsoleLifetime hostBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <summary>Listens for Ctrl+C or SIGTERM and calls <see cref="M:Microsoft.Extensions.Hosting.IHostApplicationLifetime.StopApplication" /> to start the shutdown process.
            This will unblock extensions like RunAsync and WaitForShutdownAsync.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseConsoleLifetime">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder UseConsoleLifetime (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; configureOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder UseConsoleLifetime(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; configureOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseConsoleLifetime(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.ConsoleLifetimeOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseConsoleLifetime (hostBuilder As IHostBuilder, configureOptions As Action(Of ConsoleLifetimeOptions)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ UseConsoleLifetime(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, Action&lt;Microsoft::Extensions::Hosting::ConsoleLifetimeOptions ^&gt; ^ configureOptions);" />
      <MemberSignature Language="F#" Value="static member UseConsoleLifetime : Microsoft.Extensions.Hosting.IHostBuilder * Action&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseConsoleLifetime (hostBuilder, configureOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.Extensions.Hosting.ConsoleLifetimeOptions&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="configureOptions">The delegate for configuring the <see cref="T:Microsoft.Extensions.Hosting.Internal.ConsoleLifetime" />.</param>
        <summary>Listens for Ctrl+C or SIGTERM and calls <see cref="M:Microsoft.Extensions.Hosting.IHostApplicationLifetime.StopApplication" /> to start the shutdown process.
            This will unblock extensions like RunAsync and WaitForShutdownAsync.</summary>
        <returns>The same instance of the <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseContentRoot">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder UseContentRoot (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, string contentRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder UseContentRoot(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, string contentRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseContentRoot(Microsoft.Extensions.Hosting.IHostBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseContentRoot (hostBuilder As IHostBuilder, contentRoot As String) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ UseContentRoot(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, System::String ^ contentRoot);" />
      <MemberSignature Language="F#" Value="static member UseContentRoot : Microsoft.Extensions.Hosting.IHostBuilder * string -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseContentRoot (hostBuilder, contentRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
        <Parameter Name="contentRoot" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="contentRoot">Path to root directory of the application.</param>
        <summary>Specify the content root directory to be used by the host.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultServiceProvider">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder UseDefaultServiceProvider (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder UseDefaultServiceProvider(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseDefaultServiceProvider(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.DependencyInjection.ServiceProviderOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseDefaultServiceProvider (hostBuilder As IHostBuilder, configure As Action(Of ServiceProviderOptions)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ UseDefaultServiceProvider(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, Action&lt;Microsoft::Extensions::DependencyInjection::ServiceProviderOptions ^&gt; ^ configure);" />
      <MemberSignature Language="F#" Value="static member UseDefaultServiceProvider : Microsoft.Extensions.Hosting.IHostBuilder * Action&lt;Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseDefaultServiceProvider (hostBuilder, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="configure">
        </param>
        <summary>Specify the <see cref="T:System.IServiceProvider" /> to be the default one.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultServiceProvider">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder UseDefaultServiceProvider (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder UseDefaultServiceProvider(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, class System.Action`2&lt;class Microsoft.Extensions.Hosting.HostBuilderContext, class Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseDefaultServiceProvider(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseDefaultServiceProvider (hostBuilder As IHostBuilder, configure As Action(Of HostBuilderContext, ServiceProviderOptions)) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ UseDefaultServiceProvider(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, Action&lt;Microsoft::Extensions::Hosting::HostBuilderContext ^, Microsoft::Extensions::DependencyInjection::ServiceProviderOptions ^&gt; ^ configure);" />
      <MemberSignature Language="F#" Value="static member UseDefaultServiceProvider : Microsoft.Extensions.Hosting.IHostBuilder * Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseDefaultServiceProvider (hostBuilder, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="configure">The delegate that configures the <see cref="T:System.IServiceProvider" />.</param>
        <summary>Specify the <see cref="T:System.IServiceProvider" /> to be the default one.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseEnvironment">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder UseEnvironment (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, string environment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder UseEnvironment(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, string environment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseEnvironment(Microsoft.Extensions.Hosting.IHostBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseEnvironment (hostBuilder As IHostBuilder, environment As String) As IHostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ UseEnvironment(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, System::String ^ environment);" />
      <MemberSignature Language="F#" Value="static member UseEnvironment : Microsoft.Extensions.Hosting.IHostBuilder * string -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.UseEnvironment (hostBuilder, environment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
        <Parameter Name="environment" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to configure.</param>
        <param name="environment">The environment to host the application in.</param>
        <summary>Specify the environment to be used by the host.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
