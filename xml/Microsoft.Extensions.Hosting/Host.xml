<Type Name="Host" FullName="Microsoft.Extensions.Hosting.Host">
  <TypeSignature Language="C#" Value="public static class Host" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Host extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Hosting.Host" />
  <TypeSignature Language="VB.NET" Value="Public Class Host" />
  <TypeSignature Language="F#" Value="type Host = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class Host abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides convenience methods for creating instances of <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> with preconfigured defaults.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateApplicationBuilder">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.HostApplicationBuilder CreateApplicationBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.HostApplicationBuilder CreateApplicationBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Host.CreateApplicationBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateApplicationBuilder () As HostApplicationBuilder" />
      <MemberSignature Language="F#" Value="static member CreateApplicationBuilder : unit -&gt; Microsoft.Extensions.Hosting.HostApplicationBuilder" Usage="Microsoft.Extensions.Hosting.Host.CreateApplicationBuilder " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::Hosting::HostApplicationBuilder ^ CreateApplicationBuilder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-7.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Hosting uses Microsoft.Extensions.DependencyInjection, which may require generating code dynamically at runtime.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Hosting uses Microsoft.Extensions.DependencyInjection, which may require generating code dynamically at runtime.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.HostApplicationBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.Hosting.HostApplicationBuilder" /> class with preconfigured defaults.</summary>
        <returns>A new <see cref="T:Microsoft.Extensions.Hosting.HostApplicationBuilder" /> instance.</returns>
        <remarks>The following defaults are applied to the returned <see cref="T:Microsoft.Extensions.Hosting.HostBuilder" />:
<list type="bullet"><item><description>Set the <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.ContentRootPath" /> to the result of <see cref="M:System.IO.Directory.GetCurrentDirectory" />.</description></item><item><description>Load host <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from "DOTNET_" prefixed environment variables.</description></item><item><description>Load host <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from supplied command line arguments.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from 'appsettings.json' and 'appsettings.[<see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" />].json'.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from User Secrets when <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" /> is 'Development' using the entry assembly.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from environment variables.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from supplied command line arguments.</description></item><item><description>Configure the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to log to the console, debug, and event source output.</description></item><item><description>Enable scope validation on the dependency injection container when <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" /> is 'Development'.</description></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateApplicationBuilder">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.HostApplicationBuilder CreateApplicationBuilder (string[]? args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.HostApplicationBuilder CreateApplicationBuilder(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Host.CreateApplicationBuilder(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateApplicationBuilder (args As String()) As HostApplicationBuilder" />
      <MemberSignature Language="F#" Value="static member CreateApplicationBuilder : string[] -&gt; Microsoft.Extensions.Hosting.HostApplicationBuilder" Usage="Microsoft.Extensions.Hosting.Host.CreateApplicationBuilder args" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::Hosting::HostApplicationBuilder ^ CreateApplicationBuilder(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-7.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Hosting uses Microsoft.Extensions.DependencyInjection, which may require generating code dynamically at runtime.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Hosting uses Microsoft.Extensions.DependencyInjection, which may require generating code dynamically at runtime.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.HostApplicationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-plat-ext-7.0" />
      </Parameters>
      <Docs>
        <param name="args">The command line arguments.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.Hosting.HostApplicationBuilder" /> class with preconfigured defaults.</summary>
        <returns>A new <see cref="T:Microsoft.Extensions.Hosting.HostApplicationBuilder" /> instance.</returns>
        <remarks>
The following defaults are applied to the returned <see cref="T:Microsoft.Extensions.Hosting.HostBuilder" />:
<list type="bullet"><item><description>Set the <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.ContentRootPath" /> to the result of <see cref="M:System.IO.Directory.GetCurrentDirectory" />.</description></item><item><description>Load host <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from "DOTNET_" prefixed environment variables.</description></item><item><description>Load host <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from supplied command line arguments.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from 'appsettings.json' and 'appsettings.[<see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" />].json'.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from User Secrets when <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" /> is 'Development' using the entry assembly.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from environment variables.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from supplied command line arguments.</description></item><item><description>Configure the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to log to the console, debug, and event source output.</description></item><item><description>Enable scope validation on the dependency injection container when <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" /> is 'Development'.</description></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultBuilder">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder CreateDefaultBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder CreateDefaultBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Host.CreateDefaultBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDefaultBuilder () As IHostBuilder" />
      <MemberSignature Language="F#" Value="static member CreateDefaultBuilder : unit -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.Host.CreateDefaultBuilder " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ CreateDefaultBuilder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-7.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Hosting uses Microsoft.Extensions.DependencyInjection, which may require generating code dynamically at runtime.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Hosting uses Microsoft.Extensions.DependencyInjection, which may require generating code dynamically at runtime.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.Hosting.HostBuilder" /> class with preconfigured defaults.</summary>
        <returns>The initialized <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" />.</returns>
        <remarks>The following defaults are applied to the returned <see cref="T:Microsoft.Extensions.Hosting.HostBuilder" />:
<list type="bullet"><item><description>Set the <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.ContentRootPath" /> to the result of <see cref="M:System.IO.Directory.GetCurrentDirectory" />.</description></item><item><description>Load host <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from "DOTNET_" prefixed environment variables.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from 'appsettings.json' and 'appsettings.[<see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" />].json'.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from User Secrets when <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" /> is 'Development' using the entry assembly.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from environment variables.</description></item><item><description>Configure the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to log to the console, debug, and event source output.</description></item><item><description>Enable scope validation on the dependency injection container when <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" /> is 'Development'.</description></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultBuilder">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder CreateDefaultBuilder (string[] args);" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;dotnet-plat-ext-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder CreateDefaultBuilder(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.Host.CreateDefaultBuilder(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDefaultBuilder (args As String()) As IHostBuilder" />
      <MemberSignature Language="F#" Value="static member CreateDefaultBuilder : string[] -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.Host.CreateDefaultBuilder args" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ CreateDefaultBuilder(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder CreateDefaultBuilder (string[]? args);" FrameworkAlternate="dotnet-plat-ext-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-7.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Hosting uses Microsoft.Extensions.DependencyInjection, which may require generating code dynamically at runtime.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Hosting uses Microsoft.Extensions.DependencyInjection, which may require generating code dynamically at runtime.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">The command line arguments.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.Hosting.HostBuilder" /> class with preconfigured defaults.</summary>
        <returns>The initialized <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" />.</returns>
        <remarks>The following defaults are applied to the returned <see cref="T:Microsoft.Extensions.Hosting.HostBuilder" />:
<list type="bullet"><item><description>Set the <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.ContentRootPath" /> to the result of <see cref="M:System.IO.Directory.GetCurrentDirectory" />.</description></item><item><description>Load host <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from "DOTNET_" prefixed environment variables.</description></item><item><description>Load host <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from supplied command line arguments.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from 'appsettings.json' and 'appsettings.[<see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" />].json'.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from User Secrets when <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" /> is 'Development' using the entry assembly.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from environment variables.</description></item><item><description>Load app <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> from supplied command line arguments.</description></item><item><description>Configure the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to log to the console, debug, and event source output.</description></item><item><description>Enable scope validation on the dependency injection container when <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.EnvironmentName" /> is 'Development'.</description></item></list></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
