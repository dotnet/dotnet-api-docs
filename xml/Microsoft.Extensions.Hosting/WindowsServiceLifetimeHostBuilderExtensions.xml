<Type Name="WindowsServiceLifetimeHostBuilderExtensions" FullName="Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class WindowsServiceLifetimeHostBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WindowsServiceLifetimeHostBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module WindowsServiceLifetimeHostBuilderExtensions" />
  <TypeSignature Language="F#" Value="type WindowsServiceLifetimeHostBuilderExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsServiceLifetimeHostBuilderExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Hosting.WindowsServices</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.1</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Extension methods for setting up WindowsServiceLifetime.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddWindowsService">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddWindowsService (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddWindowsService(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions.AddWindowsService(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddWindowsService (services As IServiceCollection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddWindowsService : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions.AddWindowsService services" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddWindowsService(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.WindowsServices</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
      </Parameters>
      <Docs>
        <param name="services">
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> used to build the <see cref="T:Microsoft.Extensions.Hosting.IHost" />.
            For example, <see cref="P:Microsoft.Extensions.Hosting.HostApplicationBuilder.Services" /> or the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> passed to the
            <see cref="M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})" /> callback.
            </param>
        <summary>
            Configures the lifetime of the <see cref="T:Microsoft.Extensions.Hosting.IHost" /> built from <paramref name="services" /> to
            <see cref="T:Microsoft.Extensions.Hosting.WindowsServices.WindowsServiceLifetime" /> and enables logging to the event log with the application
            name as the default source name.
            </summary>
        <returns>The <paramref name="services" /> instance for chaining.</returns>
        <remarks>
            This is context aware and will only activate if it detects the process is running
            as a Windows Service.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddWindowsService">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddWindowsService (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddWindowsService(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions.AddWindowsService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddWindowsService (services As IServiceCollection, configure As Action(Of WindowsServiceLifetimeOptions)) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddWindowsService : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions.AddWindowsService (services, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddWindowsService(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Action&lt;Microsoft::Extensions::Hosting::WindowsServiceLifetimeOptions ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.WindowsServices</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="services">
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> used to build the <see cref="T:Microsoft.Extensions.Hosting.IHost" />.
            For example, <see cref="P:Microsoft.Extensions.Hosting.HostApplicationBuilder.Services" /> or the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> passed to the
            <see cref="M:Microsoft.Extensions.Hosting.IHostBuilder.ConfigureServices(System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Microsoft.Extensions.DependencyInjection.IServiceCollection})" /> callback.
            </param>
        <param name="configure">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions" />.</param>
        <summary>
            Configures the lifetime of the <see cref="T:Microsoft.Extensions.Hosting.IHost" /> built from <paramref name="services" /> to
            <see cref="T:Microsoft.Extensions.Hosting.WindowsServices.WindowsServiceLifetime" /> and enables logging to the event log with the application name as the default source name.
            </summary>
        <returns>The <paramref name="services" /> instance for chaining.</returns>
        <remarks>
            This is context aware and will only activate if it detects the process is running
            as a Windows Service.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseWindowsService">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder UseWindowsService (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder UseWindowsService(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions.UseWindowsService(Microsoft.Extensions.Hosting.IHostBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseWindowsService (hostBuilder As IHostBuilder) As IHostBuilder" />
      <MemberSignature Language="F#" Value="static member UseWindowsService : Microsoft.Extensions.Hosting.IHostBuilder -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions.UseWindowsService hostBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ UseWindowsService(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.WindowsServices</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to operate on.</param>
        <summary>
            Sets the host lifetime to <see cref="T:Microsoft.Extensions.Hosting.WindowsServices.WindowsServiceLifetime" /> and enables logging to the event log with
            the application name as the default source name.
            </summary>
        <returns>The <paramref name="hostBuilder" /> instance for chaining.</returns>
        <remarks>
            This is context aware and will only activate if it detects the process is running as a Windows Service.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseWindowsService">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Hosting.IHostBuilder UseWindowsService (this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, Action&lt;Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Hosting.IHostBuilder UseWindowsService(class Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, class System.Action`1&lt;class Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions.UseWindowsService(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseWindowsService (hostBuilder As IHostBuilder, configure As Action(Of WindowsServiceLifetimeOptions)) As IHostBuilder" />
      <MemberSignature Language="F#" Value="static member UseWindowsService : Microsoft.Extensions.Hosting.IHostBuilder * Action&lt;Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions&gt; -&gt; Microsoft.Extensions.Hosting.IHostBuilder" Usage="Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions.UseWindowsService (hostBuilder, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Hosting::IHostBuilder ^ UseWindowsService(Microsoft::Extensions::Hosting::IHostBuilder ^ hostBuilder, Action&lt;Microsoft::Extensions::Hosting::WindowsServiceLifetimeOptions ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Hosting.WindowsServices</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Hosting.IHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostBuilder" Type="Microsoft.Extensions.Hosting.IHostBuilder" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="hostBuilder">The <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder" /> to operate on.</param>
        <param name="configure">An <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions" />.</param>
        <summary>
            Sets the host lifetime to <see cref="T:Microsoft.Extensions.Hosting.WindowsServices.WindowsServiceLifetime" /> and enables logging to the event log with the application
            name as the default source name.
            </summary>
        <returns>The <paramref name="hostBuilder" /> instance for chaining.</returns>
        <remarks>
            This is context aware and will only activate if it detects the process is running
            as a Windows Service.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
