<Type Name="ILatencyContext" FullName="Microsoft.Extensions.Diagnostics.Latency.ILatencyContext">
  <TypeSignature Language="C#" Value="public interface ILatencyContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ILatencyContext implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILatencyContext&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type ILatencyContext = interface&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILatencyContext : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.4.0.0</AssemblyVersion>
    <AssemblyVersion>8.5.0.0</AssemblyVersion>
    <AssemblyVersion>8.6.0.0</AssemblyVersion>
    <AssemblyVersion>8.7.0.0</AssemblyVersion>
    <AssemblyVersion>8.8.0.0</AssemblyVersion>
    <AssemblyVersion>8.9.1.0</AssemblyVersion>
    <AssemblyVersion>8.10.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Abstraction that provides the context for latency measurement and diagnostics.
            </summary>
    <remarks>
            The context ties in latency signals such as checkpoints and measures for a scope along with
            mechanisms such as tags that allow describing the scope. For example, a context lets you record
            tags, checkpoints, and measures within the scope of a web request.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddCheckpoint">
      <MemberSignature Language="C#" Value="public void AddCheckpoint (Microsoft.Extensions.Diagnostics.Latency.CheckpointToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCheckpoint(valuetype Microsoft.Extensions.Diagnostics.Latency.CheckpointToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.AddCheckpoint(Microsoft.Extensions.Diagnostics.Latency.CheckpointToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCheckpoint (token As CheckpointToken)" />
      <MemberSignature Language="F#" Value="abstract member AddCheckpoint : Microsoft.Extensions.Diagnostics.Latency.CheckpointToken -&gt; unit" Usage="iLatencyContext.AddCheckpoint token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCheckpoint(Microsoft::Extensions::Diagnostics::Latency::CheckpointToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.Extensions.Diagnostics.Latency.CheckpointToken" />
      </Parameters>
      <Docs>
        <param name="token">The checkpoint token.</param>
        <summary>
            Adds a checkpoint to the context.
            </summary>
        <remarks>
            A checkpoint can be added only once per context. Use checkpoints for
            code that is non-reentrant per context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMeasure">
      <MemberSignature Language="C#" Value="public void AddMeasure (Microsoft.Extensions.Diagnostics.Latency.MeasureToken token, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddMeasure(valuetype Microsoft.Extensions.Diagnostics.Latency.MeasureToken token, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.AddMeasure(Microsoft.Extensions.Diagnostics.Latency.MeasureToken,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMeasure (token As MeasureToken, value As Long)" />
      <MemberSignature Language="F#" Value="abstract member AddMeasure : Microsoft.Extensions.Diagnostics.Latency.MeasureToken * int64 -&gt; unit" Usage="iLatencyContext.AddMeasure (token, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMeasure(Microsoft::Extensions::Diagnostics::Latency::MeasureToken token, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.Extensions.Diagnostics.Latency.MeasureToken" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="token">The measure token.</param>
        <param name="value">The value to add.</param>
        <summary>
            Adds to a measure.
            </summary>
        <remarks>
            Adds the value to a measure. Measures are used for tracking total latency
            or the count for repeating operations. Example: Latency for all database calls,
            or number of calls to an external service.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Freeze">
      <MemberSignature Language="C#" Value="public void Freeze ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Freeze() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.Freeze" />
      <MemberSignature Language="VB.NET" Value="Public Sub Freeze ()" />
      <MemberSignature Language="F#" Value="abstract member Freeze : unit -&gt; unit" Usage="iLatencyContext.Freeze " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Freeze();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops the latency measurement.
            </summary>
        <remarks>This prevents any state change to the context.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LatencyData">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Diagnostics.Latency.LatencyData LatencyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Extensions.Diagnostics.Latency.LatencyData LatencyData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.LatencyData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LatencyData As LatencyData" />
      <MemberSignature Language="F#" Value="member this.LatencyData : Microsoft.Extensions.Diagnostics.Latency.LatencyData" Usage="Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.LatencyData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Diagnostics::Latency::LatencyData LatencyData { Microsoft::Extensions::Diagnostics::Latency::LatencyData get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Diagnostics.Latency.LatencyData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the accumulated latency data.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecordMeasure">
      <MemberSignature Language="C#" Value="public void RecordMeasure (Microsoft.Extensions.Diagnostics.Latency.MeasureToken token, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RecordMeasure(valuetype Microsoft.Extensions.Diagnostics.Latency.MeasureToken token, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.RecordMeasure(Microsoft.Extensions.Diagnostics.Latency.MeasureToken,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecordMeasure (token As MeasureToken, value As Long)" />
      <MemberSignature Language="F#" Value="abstract member RecordMeasure : Microsoft.Extensions.Diagnostics.Latency.MeasureToken * int64 -&gt; unit" Usage="iLatencyContext.RecordMeasure (token, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecordMeasure(Microsoft::Extensions::Diagnostics::Latency::MeasureToken token, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.Extensions.Diagnostics.Latency.MeasureToken" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="token">The measure token.</param>
        <param name="value">The value to set.</param>
        <summary>
            Sets a measure to an absolute value.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTag">
      <MemberSignature Language="C#" Value="public void SetTag (Microsoft.Extensions.Diagnostics.Latency.TagToken token, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTag(valuetype Microsoft.Extensions.Diagnostics.Latency.TagToken token, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.SetTag(Microsoft.Extensions.Diagnostics.Latency.TagToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetTag (token As TagToken, value As String)" />
      <MemberSignature Language="F#" Value="abstract member SetTag : Microsoft.Extensions.Diagnostics.Latency.TagToken * string -&gt; unit" Usage="iLatencyContext.SetTag (token, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetTag(Microsoft::Extensions::Diagnostics::Latency::TagToken token, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.Extensions.Diagnostics.Latency.TagToken" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">The tag token.</param>
        <param name="value">The value of the tag.</param>
        <summary>
            Adds a tag to the context.
            </summary>
        <remarks>
            Tags are used to provide metadata to the context. These are pivots that are useful to
            slice and dice the data for analysis. Examples include API, Client, and UserType.
            Setting a tag with the same name overrides its prior value, that is, the last call wins.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
