<Type Name="IDocumentWriter&lt;TDocument&gt;" FullName="System.Cloud.DocumentDb.IDocumentWriter&lt;TDocument&gt;">
  <TypeSignature Language="C#" Value="public interface IDocumentWriter&lt;TDocument&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDocumentWriter`1&lt;TDocument&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Cloud.DocumentDb.IDocumentWriter`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDocumentWriter(Of TDocument)" />
  <TypeSignature Language="F#" Value="type IDocumentWriter&lt;'Document&gt; = interface" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TDocument&gt;&#xA;public interface class IDocumentWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Cloud.DocumentDb.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TDocument" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TDocument">
            The document entity type to be used as a table schema.
            Request results will be mapped to instance of this type.
            </typeparam>
    <summary>
            An interface to clients for all document oriented (or NoSQL) databases for document write operations.
            https://en.wikipedia.org/wiki/Document-oriented_database.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt; CreateDocumentAsync (System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt; options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Cloud.DocumentDb.IDatabaseResponse`1&lt;!TDocument&gt;&gt; CreateDocumentAsync(class System.Cloud.DocumentDb.RequestOptions`1&lt;!TDocument&gt; options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Cloud.DocumentDb.IDocumentWriter`1.CreateDocumentAsync(System.Cloud.DocumentDb.RequestOptions{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDocumentAsync (options As RequestOptions(Of TDocument), cancellationToken As CancellationToken) As Task(Of IDatabaseResponse(Of TDocument))" />
      <MemberSignature Language="F#" Value="abstract member CreateDocumentAsync : System.Cloud.DocumentDb.RequestOptions&lt;'Document&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;'Document&gt;&gt;" Usage="iDocumentWriter.CreateDocumentAsync (options, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Cloud::DocumentDb::IDatabaseResponse&lt;TDocument&gt; ^&gt; ^ CreateDocumentAsync(System::Cloud::DocumentDb::RequestOptions&lt;TDocument&gt; ^ options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Cloud.DocumentDb.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The request options.</param>
        <param name="cancellationToken">The token represents request cancellation.</param>
        <summary>
            Creates a document provided at <see cref="P:System.Cloud.DocumentDb.RequestOptions`1.Document" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:System.Cloud.DocumentDb.IDatabaseResponse`1" /> which wraps the created document.</returns>
        <remarks>
            The request will fail if an item already exists.
            </remarks>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseClientException">Thrown when an error occurred on a client side.
            For example on a bad request, permissions error or client timeout.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseServerException">Thrown when an error occurred on a database server side,
            including internal server error.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseRetryableException">Thrown when a request failed but can be retried.
            This includes throttling and server not available cases. </exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseException">A generic exception thrown in all other not covered above cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;bool&gt;&gt; DeleteDocumentAsync (System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt; options, string id, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Cloud.DocumentDb.IDatabaseResponse`1&lt;bool&gt;&gt; DeleteDocumentAsync(class System.Cloud.DocumentDb.RequestOptions`1&lt;!TDocument&gt; options, string id, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Cloud.DocumentDb.IDocumentWriter`1.DeleteDocumentAsync(System.Cloud.DocumentDb.RequestOptions{`0},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteDocumentAsync (options As RequestOptions(Of TDocument), id As String, cancellationToken As CancellationToken) As Task(Of IDatabaseResponse(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member DeleteDocumentAsync : System.Cloud.DocumentDb.RequestOptions&lt;'Document&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;bool&gt;&gt;" Usage="iDocumentWriter.DeleteDocumentAsync (options, id, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Cloud::DocumentDb::IDatabaseResponse&lt;bool&gt; ^&gt; ^ DeleteDocumentAsync(System::Cloud::DocumentDb::RequestOptions&lt;TDocument&gt; ^ options, System::String ^ id, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Cloud.DocumentDb.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt;" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The request options.</param>
        <param name="id">The id of the document to be deleted.</param>
        <param name="cancellationToken">The token represents request cancellation.</param>
        <summary>
            Deletes a document associated with the id.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:System.Cloud.DocumentDb.IDatabaseResponse`1" /> which wraps the asynchronous operation result.
            Result of the operation is true when deletion succeed, false if failed.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseClientException">Thrown when an error occurred on a client side.
            For example on a bad request, permissions error or client timeout.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseServerException">Thrown when an error occurred on a database server side,
            including internal server error.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseRetryableException">Thrown when a request failed but can be retried.
            This includes throttling and server not available cases. </exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseException">A generic exception thrown in all other not covered above cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteTransactionalBatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt;&gt;&gt; ExecuteTransactionalBatchAsync (System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt; requestOptions, System.Collections.Generic.IReadOnlyList&lt;System.Cloud.DocumentDb.BatchItem&lt;TDocument&gt;&gt; itemsToPerformTransactionalBatch, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Cloud.DocumentDb.IDatabaseResponse`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class System.Cloud.DocumentDb.IDatabaseResponse`1&lt;!TDocument&gt;&gt;&gt;&gt; ExecuteTransactionalBatchAsync(class System.Cloud.DocumentDb.RequestOptions`1&lt;!TDocument&gt; requestOptions, class System.Collections.Generic.IReadOnlyList`1&lt;valuetype System.Cloud.DocumentDb.BatchItem`1&lt;!TDocument&gt;&gt; itemsToPerformTransactionalBatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Cloud.DocumentDb.IDocumentWriter`1.ExecuteTransactionalBatchAsync(System.Cloud.DocumentDb.RequestOptions{`0},System.Collections.Generic.IReadOnlyList{System.Cloud.DocumentDb.BatchItem{`0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteTransactionalBatchAsync (requestOptions As RequestOptions(Of TDocument), itemsToPerformTransactionalBatch As IReadOnlyList(Of BatchItem(Of TDocument)), cancellationToken As CancellationToken) As Task(Of IDatabaseResponse(Of IReadOnlyList(Of IDatabaseResponse(Of TDocument))))" />
      <MemberSignature Language="F#" Value="abstract member ExecuteTransactionalBatchAsync : System.Cloud.DocumentDb.RequestOptions&lt;'Document&gt; * System.Collections.Generic.IReadOnlyList&lt;System.Cloud.DocumentDb.BatchItem&lt;'Document&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;'Document&gt;&gt;&gt;&gt;" Usage="iDocumentWriter.ExecuteTransactionalBatchAsync (requestOptions, itemsToPerformTransactionalBatch, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Cloud::DocumentDb::IDatabaseResponse&lt;System::Collections::Generic::IReadOnlyList&lt;System::Cloud::DocumentDb::IDatabaseResponse&lt;TDocument&gt; ^&gt; ^&gt; ^&gt; ^ ExecuteTransactionalBatchAsync(System::Cloud::DocumentDb::RequestOptions&lt;TDocument&gt; ^ requestOptions, System::Collections::Generic::IReadOnlyList&lt;System::Cloud::DocumentDb::BatchItem&lt;TDocument&gt;&gt; ^ itemsToPerformTransactionalBatch, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Cloud.DocumentDb.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt;" />
        <Parameter Name="itemsToPerformTransactionalBatch" Type="System.Collections.Generic.IReadOnlyList&lt;System.Cloud.DocumentDb.BatchItem&lt;TDocument&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">The request options.</param>
        <param name="itemsToPerformTransactionalBatch">
          <see cref="T:System.Collections.Generic.IList`1" /> to perform transaction batch.</param>
        <param name="cancellationToken">The token represents request cancellation.</param>
        <summary>
            Transactionally executes a set of operations.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Cloud.DocumentDb.IDatabaseResponse`1" /> which wraps transaction operation response.</returns>
        <remarks>
            Transactional batch describes a group of point operations that
            need to either succeed or fail. If all operations, in the order that are described in the transactional batch,
            succeed, the transaction is committed. If any operation fails, the entire transaction is rolled back.
            </remarks>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseClientException">Thrown when an error occurred on a client side.
            For example on a bad request, permissions error or client timeout.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseServerException">Thrown when an error occurred on a database server side,
            including internal server error.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseRetryableException">Thrown when a request failed but can be retried.
            This includes throttling and server not available cases. </exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseException">A generic exception thrown in all other not covered above cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertOrUpdateDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt; InsertOrUpdateDocumentAsync (System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt; options, string id, Func&lt;TDocument,TDocument&gt; conflictResolveFunc, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Cloud.DocumentDb.IDatabaseResponse`1&lt;!TDocument&gt;&gt; InsertOrUpdateDocumentAsync(class System.Cloud.DocumentDb.RequestOptions`1&lt;!TDocument&gt; options, string id, class System.Func`2&lt;!TDocument, !TDocument&gt; conflictResolveFunc, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Cloud.DocumentDb.IDocumentWriter`1.InsertOrUpdateDocumentAsync(System.Cloud.DocumentDb.RequestOptions{`0},System.String,System.Func{`0,`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertOrUpdateDocumentAsync (options As RequestOptions(Of TDocument), id As String, conflictResolveFunc As Func(Of TDocument, TDocument), cancellationToken As CancellationToken) As Task(Of IDatabaseResponse(Of TDocument))" />
      <MemberSignature Language="F#" Value="abstract member InsertOrUpdateDocumentAsync : System.Cloud.DocumentDb.RequestOptions&lt;'Document&gt; * string * Func&lt;'Document, 'Document&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;'Document&gt;&gt;" Usage="iDocumentWriter.InsertOrUpdateDocumentAsync (options, id, conflictResolveFunc, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Cloud::DocumentDb::IDatabaseResponse&lt;TDocument&gt; ^&gt; ^ InsertOrUpdateDocumentAsync(System::Cloud::DocumentDb::RequestOptions&lt;TDocument&gt; ^ options, System::String ^ id, Func&lt;TDocument, TDocument&gt; ^ conflictResolveFunc, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Cloud.DocumentDb.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt;" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="conflictResolveFunc" Type="System.Func&lt;TDocument,TDocument&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The request options.</param>
        <param name="id">The document id.</param>
        <param name="conflictResolveFunc">Func used to resolve conflict if there are documents in DB.</param>
        <param name="cancellationToken">The token represents request cancellation.</param>
        <summary>
            Tries to insert or update a document with provided document id with value provided in <see cref="P:System.Cloud.DocumentDb.RequestOptions`1.Document" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:System.Cloud.DocumentDb.IDatabaseResponse`1" /> which wraps the updated document.</returns>
        <remarks>
            This function should only be called if existence status of the target item is unknown.
            This is different from <see cref="M:System.Cloud.DocumentDb.IDocumentWriter`1.UpsertDocumentAsync(System.Cloud.DocumentDb.RequestOptions{`0},System.Threading.CancellationToken)" /> by providing a method for resolving conflicts.
            If the id in the document different from the id provided,
            the id will be updated too. After the operation succeed there will be no document with the old id.
            </remarks>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseClientException">Thrown when an error occurred on a client side.
            For example on a bad request, permissions error or client timeout.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseServerException">Thrown when an error occurred on a database server side,
            including internal server error.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseRetryableException">Thrown when a request failed but can be retried.
            This includes throttling and server not available cases. </exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseException">A generic exception thrown in all other not covered above cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="PatchDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt; PatchDocumentAsync (System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt; options, string id, System.Collections.Generic.IReadOnlyList&lt;System.Cloud.DocumentDb.PatchOperation&gt; patchOperations, string? filter, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Cloud.DocumentDb.IDatabaseResponse`1&lt;!TDocument&gt;&gt; PatchDocumentAsync(class System.Cloud.DocumentDb.RequestOptions`1&lt;!TDocument&gt; options, string id, class System.Collections.Generic.IReadOnlyList`1&lt;valuetype System.Cloud.DocumentDb.PatchOperation&gt; patchOperations, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Cloud.DocumentDb.IDocumentWriter`1.PatchDocumentAsync(System.Cloud.DocumentDb.RequestOptions{`0},System.String,System.Collections.Generic.IReadOnlyList{System.Cloud.DocumentDb.PatchOperation},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchDocumentAsync (options As RequestOptions(Of TDocument), id As String, patchOperations As IReadOnlyList(Of PatchOperation), filter As String, cancellationToken As CancellationToken) As Task(Of IDatabaseResponse(Of TDocument))" />
      <MemberSignature Language="F#" Value="abstract member PatchDocumentAsync : System.Cloud.DocumentDb.RequestOptions&lt;'Document&gt; * string * System.Collections.Generic.IReadOnlyList&lt;System.Cloud.DocumentDb.PatchOperation&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;'Document&gt;&gt;" Usage="iDocumentWriter.PatchDocumentAsync (options, id, patchOperations, filter, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Cloud::DocumentDb::IDatabaseResponse&lt;TDocument&gt; ^&gt; ^ PatchDocumentAsync(System::Cloud::DocumentDb::RequestOptions&lt;TDocument&gt; ^ options, System::String ^ id, System::Collections::Generic::IReadOnlyList&lt;System::Cloud::DocumentDb::PatchOperation&gt; ^ patchOperations, System::String ^ filter, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Cloud.DocumentDb.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt;" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="patchOperations" Type="System.Collections.Generic.IReadOnlyList&lt;System.Cloud.DocumentDb.PatchOperation&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The request options.</param>
        <param name="id">The document id requested to patched.</param>
        <param name="patchOperations">The patch operations to be applied.</param>
        <param name="filter">The predicate filter to be checked before patch applied.</param>
        <param name="cancellationToken">The token represents request cancellation.</param>
        <summary>
            Patches a document.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:System.Cloud.DocumentDb.IDatabaseResponse`1" /> which wraps the result document.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseClientException">Thrown when an error occurred on a client side.
            For example on a bad request, permissions error or client timeout.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseServerException">Thrown when an error occurred on a database server side,
            including internal server error.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseRetryableException">Thrown when a request failed but can be retried.
            This includes throttling and server not available cases. </exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseException">A generic exception thrown in all other not covered above cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReplaceDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt; ReplaceDocumentAsync (System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt; options, string id, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Cloud.DocumentDb.IDatabaseResponse`1&lt;!TDocument&gt;&gt; ReplaceDocumentAsync(class System.Cloud.DocumentDb.RequestOptions`1&lt;!TDocument&gt; options, string id, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Cloud.DocumentDb.IDocumentWriter`1.ReplaceDocumentAsync(System.Cloud.DocumentDb.RequestOptions{`0},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceDocumentAsync (options As RequestOptions(Of TDocument), id As String, cancellationToken As CancellationToken) As Task(Of IDatabaseResponse(Of TDocument))" />
      <MemberSignature Language="F#" Value="abstract member ReplaceDocumentAsync : System.Cloud.DocumentDb.RequestOptions&lt;'Document&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;'Document&gt;&gt;" Usage="iDocumentWriter.ReplaceDocumentAsync (options, id, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Cloud::DocumentDb::IDatabaseResponse&lt;TDocument&gt; ^&gt; ^ ReplaceDocumentAsync(System::Cloud::DocumentDb::RequestOptions&lt;TDocument&gt; ^ options, System::String ^ id, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Cloud.DocumentDb.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt;" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The request options.</param>
        <param name="id">Id of the document to replace.</param>
        <param name="cancellationToken">The token represents request cancellation.</param>
        <summary>
            Replaces a document having provided id with <see cref="P:System.Cloud.DocumentDb.RequestOptions`1.Document" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:System.Cloud.DocumentDb.IDatabaseResponse`1" /> which wraps the updated document.</returns>
        <remarks>
            The request will fail if a document having the provided id does not exist.
            If the id in the document different from the id provided in <see cref="P:System.Cloud.DocumentDb.RequestOptions`1.Document" />,
            the id will be updated too. After the operation succeed there will be no document with the old id anymore.
            </remarks>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseClientException">Thrown when an error occurred on a client side.
            For example on a bad request, permissions error or client timeout.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseServerException">Thrown when an error occurred on a database server side,
            including internal server error.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseRetryableException">Thrown when a request failed but can be retried.
            This includes throttling and server not available cases. </exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseException">A generic exception thrown in all other not covered above cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpsertDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt; UpsertDocumentAsync (System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt; options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Cloud.DocumentDb.IDatabaseResponse`1&lt;!TDocument&gt;&gt; UpsertDocumentAsync(class System.Cloud.DocumentDb.RequestOptions`1&lt;!TDocument&gt; options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Cloud.DocumentDb.IDocumentWriter`1.UpsertDocumentAsync(System.Cloud.DocumentDb.RequestOptions{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpsertDocumentAsync (options As RequestOptions(Of TDocument), cancellationToken As CancellationToken) As Task(Of IDatabaseResponse(Of TDocument))" />
      <MemberSignature Language="F#" Value="abstract member UpsertDocumentAsync : System.Cloud.DocumentDb.RequestOptions&lt;'Document&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;'Document&gt;&gt;" Usage="iDocumentWriter.UpsertDocumentAsync (options, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Cloud::DocumentDb::IDatabaseResponse&lt;TDocument&gt; ^&gt; ^ UpsertDocumentAsync(System::Cloud::DocumentDb::RequestOptions&lt;TDocument&gt; ^ options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Cloud.DocumentDb.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Cloud.DocumentDb.IDatabaseResponse&lt;TDocument&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Cloud.DocumentDb.RequestOptions&lt;TDocument&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The request options.</param>
        <param name="cancellationToken">The token represents request cancellation.</param>
        <summary>
            Upserts a document provided in <see cref="P:System.Cloud.DocumentDb.RequestOptions`1.Document" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:System.Cloud.DocumentDb.IDatabaseResponse`1" /> which wraps the updated document.</returns>
        <remarks>
            This method is suitable when existence of a document is unknown, and replace is always suitable.
            For conditional replace <see cref="M:System.Cloud.DocumentDb.IDocumentWriter`1.InsertOrUpdateDocumentAsync(System.Cloud.DocumentDb.RequestOptions{`0},System.String,System.Func{`0,`0},System.Threading.CancellationToken)" /> should be used instead.
            </remarks>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseClientException">Thrown when an error occurred on a client side.
            For example on a bad request, permissions error or client timeout.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseServerException">Thrown when an error occurred on a database server side,
            including internal server error.</exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseRetryableException">Thrown when a request failed but can be retried.
            This includes throttling and server not available cases. </exception>
        <exception cref="T:System.Cloud.DocumentDb.DatabaseException">A generic exception thrown in all other not covered above cases.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
