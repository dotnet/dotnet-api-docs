<Type Name="SizeChangedEventArgs" FullName="System.Windows.SizeChangedEventArgs">
  <TypeSignature Language="C#" Value="public class SizeChangedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SizeChangedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.SizeChangedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SizeChangedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SizeChangedEventArgs : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type SizeChangedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data related to the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event.</summary>
    <remarks>To be added.</remarks>
    <altmember cref="E:System.Windows.FrameworkElement.SizeChanged" />
    <altmember cref="T:System.Windows.SizeChangedEventHandler" />
  </Docs>
  <Members>
    <Member MemberName="HeightChanged">
      <MemberSignature Language="C#" Value="public bool HeightChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HeightChanged" />
      <MemberSignature Language="DocId" Value="P:System.Windows.SizeChangedEventArgs.HeightChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HeightChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HeightChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HeightChanged : bool" Usage="System.Windows.SizeChangedEventArgs.HeightChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="P:System.Windows.FrameworkElement.Height" /> component of the size changed.</summary>
        <value>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Height" /> component of the size changed; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because <xref:System.Double> precision numbers process imprecisely, this property might return a value of `false` even when <xref:System.Windows.SizeChangedEventArgs.PreviousSize%2A> and <xref:System.Windows.SizeChangedEventArgs.NewSize%2A> are not equal.  
  
 The layout system occasionally experiences this state due to minor fluctuations in the input parameters; however, the overall rendered scene is considered to be the same; therefore, no visible changes are detected. The handler for the <xref:System.Windows.FrameworkElement.SizeChanged> event should check for this state in order to avoid invalidation of layout if the dimension didn't actually change.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.SizeChanged" />
        <altmember cref="T:System.Windows.SizeChangedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.SizeChangedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="sizeChangedEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">The generic handler to call in a type-specific way.</param>
        <param name="genericTarget">The target to call the handler on.</param>
        <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation casts the generic handler as a <xref:System.Windows.SizeChangedEventHandler> and then invokes it. For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](/dotnet/framework/wpf/advanced/routed-events-overview).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.RoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
        <altmember cref="E:System.Windows.FrameworkElement.SizeChanged" />
        <altmember cref="T:System.Windows.SizeChangedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="NewSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size NewSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size NewSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.SizeChangedEventArgs.NewSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size NewSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.NewSize : System.Windows.Size" Usage="System.Windows.SizeChangedEventArgs.NewSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the new <see cref="T:System.Windows.Size" /> of the object.</summary>
        <value>The new <see cref="T:System.Windows.Size" /> of the object.</value>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.FrameworkElement.SizeChanged" />
        <altmember cref="T:System.Windows.SizeChangedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PreviousSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size PreviousSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size PreviousSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.SizeChangedEventArgs.PreviousSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreviousSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size PreviousSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.PreviousSize : System.Windows.Size" Usage="System.Windows.SizeChangedEventArgs.PreviousSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the previous <see cref="T:System.Windows.Size" /> of the object.</summary>
        <value>The previous <see cref="T:System.Windows.Size" /> of the object.</value>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.FrameworkElement.SizeChanged" />
        <altmember cref="T:System.Windows.SizeChangedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="WidthChanged">
      <MemberSignature Language="C#" Value="public bool WidthChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WidthChanged" />
      <MemberSignature Language="DocId" Value="P:System.Windows.SizeChangedEventArgs.WidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WidthChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WidthChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.WidthChanged : bool" Usage="System.Windows.SizeChangedEventArgs.WidthChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="P:System.Windows.FrameworkElement.Width" /> component of the size changed.</summary>
        <value>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Width" /> component of the size changed; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because <xref:System.Double> precision numbers process imprecisely, this property might return a value of `false` even when <xref:System.Windows.SizeChangedEventArgs.PreviousSize%2A> and <xref:System.Windows.SizeChangedEventArgs.NewSize%2A> are not equal.  
  
 The layout system occasionally experiences this state due to minor fluctuations in the input parameters; however, the overall rendered scene is considered to be the same; therefore, no visible changes are detected. The handler for the <xref:System.Windows.FrameworkElement.SizeChanged> event should check for this state in order to avoid invalidation of layout if the dimension didn't actually change.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.SizeChanged" />
        <altmember cref="T:System.Windows.SizeChangedEventHandler" />
      </Docs>
    </Member>
  </Members>
</Type>
