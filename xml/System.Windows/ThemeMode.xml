<Type Name="ThemeMode" FullName="System.Windows.ThemeMode">
  <TypeSignature Language="C#" Value="public readonly struct ThemeMode : IEquatable&lt;System.Windows.ThemeMode&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ThemeMode extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Windows.ThemeMode&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ThemeMode" />
  <TypeSignature Language="VB.NET" Value="Public Structure ThemeMode&#xA;Implements IEquatable(Of ThemeMode)" />
  <TypeSignature Language="F#" Value="type ThemeMode = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class ThemeMode : IEquatable&lt;System::Windows::ThemeMode&gt;" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Windows.ThemeMode&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("WPF0001")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("WPF0001")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes the Fluent theme mode to apply to an application or window.</summary>
    <remarks>
      <para>This is an experimental API and may be modified or removed in future releases.</para>
      <para>Since this is an experimental API, rather than creating a new instance of ThemeMode, use the static properties Light, Dark, System, and None.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThemeMode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ThemeMode.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String)" />
      <MemberSignature Language="F#" Value="new System.Windows.ThemeMode : string -&gt; System.Windows.ThemeMode" Usage="new System.Windows.ThemeMode value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThemeMode(System::String ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The name of the theme mode</param>
        <summary>Creates a new ThemeMode object with the specified value.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dark">
      <MemberSignature Language="C#" Value="public static System.Windows.ThemeMode Dark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.ThemeMode Dark" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ThemeMode.Dark" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Dark As ThemeMode" />
      <MemberSignature Language="F#" Value="static member Dark : System.Windows.ThemeMode" Usage="System.Windows.ThemeMode.Dark" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::ThemeMode Dark { System::Windows::ThemeMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ThemeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Dark predefined theme mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Whenever this mode is set on <see cref="T:System.Windows.Application" /> or <see cref="T:System.Windows.Window" />, Fluent Dark theme will be applied.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ThemeMode.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="themeMode.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">ThemeMode object to compare with.</param>
        <summary>Checks whether this instance  is equal to another ThemeMode object.</summary>
        <returns>
          <see langword="true" /> if the ThemeMode objects are equal; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.ThemeMode other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Windows.ThemeMode other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ThemeMode.Equals(System.Windows.ThemeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ThemeMode) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.ThemeMode -&gt; bool" Usage="themeMode.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Windows::ThemeMode other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Windows.ThemeMode" />
      </Parameters>
      <Docs>
        <param name="other">ThemeMode object to compare with</param>
        <summary>Checks whether this instance is equal to another ThemeMode object.</summary>
        <returns>
          <see langword="true" /> if the ThemeMode objects are equal; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ThemeMode.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="themeMode.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Computes the hash code for this object.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Light">
      <MemberSignature Language="C#" Value="public static System.Windows.ThemeMode Light { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.ThemeMode Light" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ThemeMode.Light" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Light As ThemeMode" />
      <MemberSignature Language="F#" Value="static member Light : System.Windows.ThemeMode" Usage="System.Windows.ThemeMode.Light" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::ThemeMode Light { System::Windows::ThemeMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ThemeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Light predefined theme mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Whenever this mode is set on <see cref="T:System.Windows.Application" /> or <see cref="T:System.Windows.Window" />, Fluent Light theme will be applied.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Windows.ThemeMode None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.ThemeMode None" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ThemeMode.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As ThemeMode" />
      <MemberSignature Language="F#" Value="static member None : System.Windows.ThemeMode" Usage="System.Windows.ThemeMode.None" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::ThemeMode None { System::Windows::ThemeMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ThemeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the None predefined theme mode.</para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>This is the default value for <see cref="P:System.Windows.Application.ThemeMode" /> and <see cref="P:System.Windows.Window.ThemeMode" /> and it means that Fluent theme will not be applied on the application or window.</para>
          <para>In case, when <see cref="P:System.Windows.Application.ThemeMode" /> is not set to None, even if <see cref="P:System.Windows.Window.ThemeMode" /> is set to None, the Fluent theme will be applied on the window.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.ThemeMode left, System.Windows.ThemeMode right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.ThemeMode left, valuetype System.Windows.ThemeMode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ThemeMode.op_Equality(System.Windows.ThemeMode,System.Windows.ThemeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ThemeMode, right As ThemeMode) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.ThemeMode * System.Windows.ThemeMode -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::ThemeMode left, System::Windows::ThemeMode right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.ThemeMode" />
        <Parameter Name="right" Type="System.Windows.ThemeMode" />
      </Parameters>
      <Docs>
        <param name="left">The first ThemeMode object to compare.</param>
        <param name="right">The second ThemeMode object to compare.</param>
        <summary>Checks whether two ThemeMode objects are equal.</summary>
        <returns>
          <see langword="true" /> if the ThemeMode objects are equal; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.ThemeMode left, System.Windows.ThemeMode right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.ThemeMode left, valuetype System.Windows.ThemeMode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ThemeMode.op_Inequality(System.Windows.ThemeMode,System.Windows.ThemeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ThemeMode, right As ThemeMode) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.ThemeMode * System.Windows.ThemeMode -&gt; bool" Usage="System.Windows.ThemeMode.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::ThemeMode left, System::Windows::ThemeMode right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.ThemeMode" />
        <Parameter Name="right" Type="System.Windows.ThemeMode" />
      </Parameters>
      <Docs>
        <param name="left">The first ThemeMode object to compare.</param>
        <param name="right">The second ThemeMode object to compare.</param>
        <summary>Checks whether two ThemeMode objects are not equal.</summary>
        <returns>
          <see langword="true" /> if the ThemeMode objects are not equal; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System">
      <MemberSignature Language="C#" Value="public static System.Windows.ThemeMode System { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.ThemeMode System" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ThemeMode.System" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property System As ThemeMode" />
      <MemberSignature Language="F#" Value="static member System : System.Windows.ThemeMode" Usage="System.Windows.ThemeMode.System" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::ThemeMode System { System::Windows::ThemeMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ThemeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the System predefined theme mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Whenever this mode is set on <see cref="T:System.Windows.Application" /> or <see cref="T:System.Windows.Window" />, Fluent theme will be applied based on the system theme.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ThemeMode.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="themeMode.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a string representation of the ThemeMode object.</summary>
        <returns>A string representation of this object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ThemeMode.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Windows.ThemeMode.Value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the ThemeMode.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
