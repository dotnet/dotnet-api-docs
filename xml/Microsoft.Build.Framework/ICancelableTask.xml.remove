<Type Name="ICancelableTask" FullName="Microsoft.Build.Framework.ICancelableTask">
  <TypeSignature Language="C#" Value="public interface ICancelableTask : Microsoft.Build.Framework.ITask" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICancelableTask implements class Microsoft.Build.Framework.ITask" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Framework.ICancelableTask" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICancelableTask&#xA;Implements ITask" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICancelableTask : Microsoft::Build::Framework::ITask" />
  <TypeSignature Language="F#" Value="type ICancelableTask = interface&#xA;    interface ITask" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Framework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.ITask</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Interface for tasks which can be cancelled.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.ICancelableTask.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberSignature Language="F#" Value="abstract member Cancel : unit -&gt; unit" Usage="iCancelableTask.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Instructs the task to exit as soon as possible, or to immediately exit if Execute is invoked after this method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cancel() may be called at any time after the task has been instantiated, even before <xref:Microsoft.Build.Framework.ITask.Execute%2A> is called.  
  
 Cancel calls may come in from any thread. The implementation of this method should not block indefinitely.  
  
 To cancel the build, both `Cancel` and `Execute` must return in any order.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
