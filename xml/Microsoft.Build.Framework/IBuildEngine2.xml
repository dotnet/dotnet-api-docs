<Type Name="IBuildEngine2" FullName="Microsoft.Build.Framework.IBuildEngine2">
  <TypeSignature Language="C#" Value="public interface IBuildEngine2 : Microsoft.Build.Framework.IBuildEngine" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBuildEngine2 implements class Microsoft.Build.Framework.IBuildEngine" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Framework.IBuildEngine2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBuildEngine2&#xA;Implements IBuildEngine" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBuildEngine2 : Microsoft::Build::Framework::IBuildEngine" />
  <TypeSignature Language="F#" Value="type IBuildEngine2 = interface&#xA;    interface IBuildEngine" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Framework</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.IBuildEngine</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            This interface extends IBuildEngine to provide a method allowing building 
            project files in parallel.
            </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Build.Framework.IBuildEngine2> extends <xref:Microsoft.Build.Framework.IBuildEngine>, allowing you to build multiple project files in parallel on systems containing multiple processors, or processors with multiple cores.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BuildProjectFile">
      <MemberSignature Language="C#" Value="public bool BuildProjectFile (string projectFileName, string[] targetNames, System.Collections.IDictionary globalProperties, System.Collections.IDictionary targetOutputs, string toolsVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BuildProjectFile(string projectFileName, string[] targetNames, class System.Collections.IDictionary globalProperties, class System.Collections.IDictionary targetOutputs, string toolsVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildProjectFile (projectFileName As String, targetNames As String(), globalProperties As IDictionary, targetOutputs As IDictionary, toolsVersion As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BuildProjectFile(System::String ^ projectFileName, cli::array &lt;System::String ^&gt; ^ targetNames, System::Collections::IDictionary ^ globalProperties, System::Collections::IDictionary ^ targetOutputs, System::String ^ toolsVersion);" />
      <MemberSignature Language="F#" Value="abstract member BuildProjectFile : string * string[] * System.Collections.IDictionary * System.Collections.IDictionary * string -&gt; bool" Usage="iBuildEngine2.BuildProjectFile (projectFileName, targetNames, globalProperties, targetOutputs, toolsVersion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectFileName" Type="System.String" />
        <Parameter Name="targetNames" Type="System.String[]" />
        <Parameter Name="globalProperties" Type="System.Collections.IDictionary" />
        <Parameter Name="targetOutputs" Type="System.Collections.IDictionary" />
        <Parameter Name="toolsVersion" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="projectFileName">The project to build.</param>
        <param name="targetNames">The targets in the project to build (can be null).</param>
        <param name="globalProperties">A hash table of additional global properties to apply
                to the child project (can be null).  The key and value should both be strings.</param>
        <param name="targetOutputs">The outputs of each specified target (can be null).</param>
        <param name="toolsVersion">A tools version recognized by the Engine that will be used during this build (can be null).</param>
        <summary>
            This method allows tasks to initiate a build on a
            particular project file. If the build is successful, the outputs
            (if any) of the specified targets are returned.
            </summary>
        <returns>true, if build was successful</returns>
        <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            3) target outputs are returned as <c>ITaskItem</c> arrays indexed by target name
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildProjectFilesInParallel">
      <MemberSignature Language="C#" Value="public bool BuildProjectFilesInParallel (string[] projectFileNames, string[] targetNames, System.Collections.IDictionary[] globalProperties, System.Collections.IDictionary[] targetOutputsPerProject, string[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BuildProjectFilesInParallel(string[] projectFileNames, string[] targetNames, class System.Collections.IDictionary[] globalProperties, class System.Collections.IDictionary[] targetOutputsPerProject, string[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.IDictionary[],System.String[],System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildProjectFilesInParallel (projectFileNames As String(), targetNames As String(), globalProperties As IDictionary(), targetOutputsPerProject As IDictionary(), toolsVersion As String(), useResultsCache As Boolean, unloadProjectsOnCompletion As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BuildProjectFilesInParallel(cli::array &lt;System::String ^&gt; ^ projectFileNames, cli::array &lt;System::String ^&gt; ^ targetNames, cli::array &lt;System::Collections::IDictionary ^&gt; ^ globalProperties, cli::array &lt;System::Collections::IDictionary ^&gt; ^ targetOutputsPerProject, cli::array &lt;System::String ^&gt; ^ toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion);" />
      <MemberSignature Language="F#" Value="abstract member BuildProjectFilesInParallel : string[] * string[] * System.Collections.IDictionary[] * System.Collections.IDictionary[] * string[] * bool * bool -&gt; bool" Usage="iBuildEngine2.BuildProjectFilesInParallel (projectFileNames, targetNames, globalProperties, targetOutputsPerProject, toolsVersion, useResultsCache, unloadProjectsOnCompletion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectFileNames" Type="System.String[]" />
        <Parameter Name="targetNames" Type="System.String[]" />
        <Parameter Name="globalProperties" Type="System.Collections.IDictionary[]" />
        <Parameter Name="targetOutputsPerProject" Type="System.Collections.IDictionary[]" />
        <Parameter Name="toolsVersion" Type="System.String[]" />
        <Parameter Name="useResultsCache" Type="System.Boolean" />
        <Parameter Name="unloadProjectsOnCompletion" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="projectFileNames">The project to build.</param>
        <param name="targetNames">The targets in the project to build (can be null).</param>
        <param name="globalProperties">An array of hashtables of additional global properties to apply
                to the child project (array entries can be null). 
                The key and value in the hashtable should both be strings.</param>
        <param name="targetOutputsPerProject">The outputs of each specified target (can be null).</param>
        <param name="toolsVersion">A tools version recognized by the Engine that will be used during this build (can be null).</param>
        <param name="useResultsCache">If true the operation will only be run if the cache doesn't
                                          already contain the result. After the operation the result is
                                          stored in the cache </param>
        <param name="unloadProjectsOnCompletion">If true the project will be unloaded once the 
                                                    operation is completed </param>
        <summary>
            This method allows tasks to initiate a build on a
            particular project file. If the build is successful, the outputs
            (if any) of the specified targets are returned.
            </summary>
        <returns>true, if build was successful</returns>
        <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            3) target outputs are returned as <c>ITaskItem</c> arrays indexed by target name
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunningMultipleNodes">
      <MemberSignature Language="C#" Value="public bool IsRunningMultipleNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunningMultipleNodes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Framework.IBuildEngine2.IsRunningMultipleNodes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunningMultipleNodes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunningMultipleNodes { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunningMultipleNodes : bool" Usage="Microsoft.Build.Framework.IBuildEngine2.IsRunningMultipleNodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This property allows a task to query whether or not the system is running in single process mode or multi process mode.
            Single process mode (IsRunningMultipleNodes = false) is where the engine is initialized with the number of cpus = 1 and the engine is not a child engine.
            The engine is in multi process mode (IsRunningMultipleNodes = true) when the engine is initialized with a number of cpus &gt; 1 or the engine is a child engine.
            </summary>
        <value>
          <see langword="true" /> if the system is running in multi-processor mode, <see langword="false" /> otherwise.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The build engine is in single-processor mode (`IsRunningMultipleNodes` = `false`) when it is initialized with the number of CPUs equal to 1 and the build engine is not a child engine. The build engine is in multi-processor mode (`IsRunningMultipleNodes` = `true`) when it is initialized with a number of CPUs greater than 1, or when the build engine is a child engine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
