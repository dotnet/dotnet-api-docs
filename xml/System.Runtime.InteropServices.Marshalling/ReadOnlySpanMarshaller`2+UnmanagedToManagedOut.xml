<Type Name="ReadOnlySpanMarshaller&lt;T,TUnmanagedElement&gt;+UnmanagedToManagedOut" FullName="System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller&lt;T,TUnmanagedElement&gt;+UnmanagedToManagedOut">
  <TypeSignature Language="C#" Value="public static class ReadOnlySpanMarshaller&lt;T,TUnmanagedElement&gt;.UnmanagedToManagedOut where TUnmanagedElement : struct" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract sealed beforefieldinit ReadOnlySpanMarshaller`2/UnmanagedToManagedOut&lt;T, struct .ctor (class System.ValueType) TUnmanagedElement&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.UnmanagedToManagedOut" />
  <TypeSignature Language="VB.NET" Value="Public Class ReadOnlySpanMarshaller(Of T, TUnmanagedElement).UnmanagedToManagedOut" />
  <TypeSignature Language="F#" Value="type ReadOnlySpanMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.UnmanagedToManagedOut = class" />
  <TypeSignature Language="C++ CLI" Value="public:  where TUnmanagedElement : value classref class ReadOnlySpanMarshaller&lt;T, TUnmanagedElement&gt;::UnmanagedToManagedOut abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
    <TypeParameter Name="TUnmanagedElement">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Supports marshalling from managed into unmanaged in a call from unmanaged code to managed code.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllocateContainerForUnmanagedElements">
      <MemberSignature Language="C#" Value="public static TUnmanagedElement* AllocateContainerForUnmanagedElements (ReadOnlySpan&lt;T&gt; managed, out int numElements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !TUnmanagedElement* AllocateContainerForUnmanagedElements(valuetype System.ReadOnlySpan`1&lt;!T&gt; managed, [out] int32&amp; numElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.UnmanagedToManagedOut.AllocateContainerForUnmanagedElements(System.ReadOnlySpan{`0},System.Int32@)" />
      <MemberSignature Language="F#" Value="static member AllocateContainerForUnmanagedElements : ReadOnlySpan&lt;'T&gt; * int -&gt; nativeptr&lt;'UnmanagedElement&gt;" Usage="System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.UnmanagedToManagedOut.AllocateContainerForUnmanagedElements (managed, numElements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TUnmanagedElement* AllocateContainerForUnmanagedElements(ReadOnlySpan&lt;T&gt; managed, [Runtime::InteropServices::Out] int % numElements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TUnmanagedElement*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managed" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="numElements" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="managed">The managed span.</param>
        <param name="numElements">The number of elements in the span.</param>
        <summary>Allocates the space to store the unmanaged elements.</summary>
        <returns>A pointer to the block of memory for the unmanaged elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedValuesSource">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; GetManagedValuesSource (ReadOnlySpan&lt;T&gt; managed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!T&gt; GetManagedValuesSource(valuetype System.ReadOnlySpan`1&lt;!T&gt; managed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.UnmanagedToManagedOut.GetManagedValuesSource(System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetManagedValuesSource (managed As ReadOnlySpan(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="F#" Value="static member GetManagedValuesSource : ReadOnlySpan&lt;'T&gt; -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.UnmanagedToManagedOut.GetManagedValuesSource managed" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;T&gt; GetManagedValuesSource(ReadOnlySpan&lt;T&gt; managed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managed" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="managed">The managed collection.</param>
        <summary>Gets a span of the managed collection elements.</summary>
        <returns>A span of the managed collection elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnmanagedValuesDestination">
      <MemberSignature Language="C#" Value="public static Span&lt;TUnmanagedElement&gt; GetUnmanagedValuesDestination (TUnmanagedElement* unmanaged, int numElements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!TUnmanagedElement&gt; GetUnmanagedValuesDestination(!TUnmanagedElement* unmanaged, int32 numElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.UnmanagedToManagedOut.GetUnmanagedValuesDestination(`1*,System.Int32)" />
      <MemberSignature Language="F#" Value="static member GetUnmanagedValuesDestination : nativeptr&lt;'UnmanagedElement&gt; * int -&gt; Span&lt;'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;" Usage="System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.UnmanagedToManagedOut.GetUnmanagedValuesDestination (unmanaged, numElements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Span&lt;TUnmanagedElement&gt; GetUnmanagedValuesDestination(TUnmanagedElement* unmanaged, int numElements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TUnmanagedElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanaged" Type="TUnmanagedElement*" />
        <Parameter Name="numElements" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unmanaged">The pointer to the block of memory for the unmanaged elements.</param>
        <param name="numElements">The number of elements that will be copied into the memory block.</param>
        <summary>Gets a span of the space where the unmanaged collection elements should be stored.</summary>
        <returns>A span over the unmanaged memory that can contain the specified number of elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
