<Type Name="ReadOnlySpanMarshaller&lt;T,TUnmanagedElement&gt;+ManagedToUnmanagedOut" FullName="System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller&lt;T,TUnmanagedElement&gt;+ManagedToUnmanagedOut">
  <TypeSignature Language="C#" Value="public struct ReadOnlySpanMarshaller&lt;T,TUnmanagedElement&gt;.ManagedToUnmanagedOut where TUnmanagedElement : struct" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpanMarshaller`2/ManagedToUnmanagedOut&lt;T, struct .ctor (class System.ValueType) TUnmanagedElement&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.ManagedToUnmanagedOut" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpanMarshaller(Of T, TUnmanagedElement).ManagedToUnmanagedOut" />
  <TypeSignature Language="F#" Value="type ReadOnlySpanMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.ManagedToUnmanagedOut = struct" />
  <TypeSignature Language="C++ CLI" Value="public:  where TUnmanagedElement : value classvalue class ReadOnlySpanMarshaller&lt;T, TUnmanagedElement&gt;::ManagedToUnmanagedOut" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
    <TypeParameter Name="TUnmanagedElement">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IsUnmanaged]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsUnmanaged&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Supports marshalling from unmanaged to managed in a call from managed code to unmanaged code. For example, return values and `out` parameters in P/Invoke methods.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Free">
      <MemberSignature Language="C#" Value="public void Free ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Free() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.ManagedToUnmanagedOut.Free" />
      <MemberSignature Language="VB.NET" Value="Public Sub Free ()" />
      <MemberSignature Language="F#" Value="member this.Free : unit -&gt; unit" Usage="managedToUnmanagedOut.Free " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Free();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Frees resources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUnmanaged">
      <MemberSignature Language="C#" Value="public void FromUnmanaged (TUnmanagedElement* unmanaged);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromUnmanaged(!TUnmanagedElement* unmanaged) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.ManagedToUnmanagedOut.FromUnmanaged(`1*)" />
      <MemberSignature Language="F#" Value="member this.FromUnmanaged : nativeptr&lt;'UnmanagedElement&gt; -&gt; unit" Usage="managedToUnmanagedOut.FromUnmanaged unmanaged" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FromUnmanaged(TUnmanagedElement* unmanaged);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanaged" Type="TUnmanagedElement*" />
      </Parameters>
      <Docs>
        <param name="unmanaged">A pointer to the array to be unmarshalled from native to managed.</param>
        <summary>Initializes the <see cref="T:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.ManagedToUnmanagedOut" /> marshaller.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedValuesDestination">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; GetManagedValuesDestination (int numElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Span`1&lt;!T&gt; GetManagedValuesDestination(int32 numElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.ManagedToUnmanagedOut.GetManagedValuesDestination(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetManagedValuesDestination (numElements As Integer) As Span(Of T)" />
      <MemberSignature Language="F#" Value="member this.GetManagedValuesDestination : int -&gt; Span&lt;'T&gt;" Usage="managedToUnmanagedOut.GetManagedValuesDestination numElements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt; GetManagedValuesDestination(int numElements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numElements" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numElements">The number of elements in the array.</param>
        <summary>Returns a span that points to the memory where the managed elements of the array should be stored.</summary>
        <returns>A span where managed values of the array should be stored.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnmanagedValuesSource">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;TUnmanagedElement&gt; GetUnmanagedValuesSource (int numElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!TUnmanagedElement&gt; GetUnmanagedValuesSource(int32 numElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.ManagedToUnmanagedOut.GetUnmanagedValuesSource(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnmanagedValuesSource (numElements As Integer) As ReadOnlySpan(Of TUnmanagedElement)" />
      <MemberSignature Language="F#" Value="member this.GetUnmanagedValuesSource : int -&gt; ReadOnlySpan&lt;'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;" Usage="managedToUnmanagedOut.GetUnmanagedValuesSource numElements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;TUnmanagedElement&gt; GetUnmanagedValuesSource(int numElements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TUnmanagedElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numElements" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numElements">The number of elements in the array.</param>
        <summary>Returns a span that points to the memory where the unmanaged elements of the array are stored.</summary>
        <returns>A span over unmanaged values of the array.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToManaged">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; ToManaged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; ToManaged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ReadOnlySpanMarshaller`2.ManagedToUnmanagedOut.ToManaged" />
      <MemberSignature Language="VB.NET" Value="Public Function ToManaged () As ReadOnlySpan(Of T)" />
      <MemberSignature Language="F#" Value="member this.ToManaged : unit -&gt; ReadOnlySpan&lt;'T&gt;" Usage="managedToUnmanagedOut.ToManaged " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; ToManaged();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the managed value representing the native array.</summary>
        <returns>A span over managed values of the array.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
