<Type Name="ArrayMarshaller&lt;T,TUnmanagedElement&gt;+ManagedToUnmanagedIn" FullName="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;T,TUnmanagedElement&gt;+ManagedToUnmanagedIn">
  <TypeSignature Language="C#" Value="public ref struct ArrayMarshaller&lt;T,TUnmanagedElement&gt;.ManagedToUnmanagedIn where TUnmanagedElement : struct" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ArrayMarshaller`2/ManagedToUnmanagedIn&lt;T, struct .ctor (class System.ValueType) TUnmanagedElement&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn" />
  <TypeSignature Language="VB.NET" Value="Public Structure ArrayMarshaller(Of T, TUnmanagedElement).ManagedToUnmanagedIn" />
  <TypeSignature Language="F#" Value="type ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.ManagedToUnmanagedIn = struct" />
  <TypeSignature Language="C++ CLI" Value="public:  where TUnmanagedElement : value classvalue class ArrayMarshaller&lt;T, TUnmanagedElement&gt;::ManagedToUnmanagedIn" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
    <TypeParameter Name="TUnmanagedElement">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsByRefLike]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsByRefLike&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Marshaller for marshalling a array from managed to unmanaged.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public static int BufferSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.BufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BufferSize As Integer" />
      <MemberSignature Language="F#" Value="static member BufferSize : int" Usage="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.ManagedToUnmanagedIn.BufferSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the requested caller-allocated buffer size.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This property represents a potential optimization for the marshaller.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Free">
      <MemberSignature Language="C#" Value="public void Free ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Free() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.Free" />
      <MemberSignature Language="VB.NET" Value="Public Sub Free ()" />
      <MemberSignature Language="F#" Value="member this.Free : unit -&gt; unit" Usage="managedToUnmanagedIn.Free " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Free();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Frees resources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromManaged">
      <MemberSignature Language="C#" Value="public void FromManaged (T[]? array, Span&lt;TUnmanagedElement&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromManaged(!T[] array, valuetype System.Span`1&lt;!TUnmanagedElement&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.FromManaged(`0[],System.Span{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromManaged (array As T(), buffer As Span(Of TUnmanagedElement))" />
      <MemberSignature Language="F#" Value="member this.FromManaged : 'T[] * Span&lt;'UnmanagedElement (requires 'UnmanagedElement : struct)&gt; -&gt; unit" Usage="managedToUnmanagedIn.FromManaged (array, buffer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FromManaged(cli::array &lt;T&gt; ^ array, Span&lt;TUnmanagedElement&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="buffer" Type="System.Span&lt;TUnmanagedElement&gt;" />
      </Parameters>
      <Docs>
        <param name="array">The array to be marshalled.</param>
        <param name="buffer">The buffer that may be used for marshalling.</param>
        <summary>Initializes the <see cref="T:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn" /> marshaller.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The `buffer` must not be movable - that is, it should not be
            on the managed heap or it should be pinned.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedValuesSource">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; GetManagedValuesSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; GetManagedValuesSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.GetManagedValuesSource" />
      <MemberSignature Language="VB.NET" Value="Public Function GetManagedValuesSource () As ReadOnlySpan(Of T)" />
      <MemberSignature Language="F#" Value="member this.GetManagedValuesSource : unit -&gt; ReadOnlySpan&lt;'T&gt;" Usage="managedToUnmanagedIn.GetManagedValuesSource " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; GetManagedValuesSource();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a span that points to the memory where the managed values of the array are stored.</summary>
        <returns>A span over managed values of the array.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public ref TUnmanagedElement GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TUnmanagedElement GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As TUnmanagedElement" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; 'UnmanagedElement" Usage="managedToUnmanagedIn.GetPinnableReference " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TUnmanagedElement % GetPinnableReference();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TUnmanagedElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a reference to the marshalled array.</summary>
        <returns>A pinnable reference to the unmanaged marshalled array.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public static ref T GetPinnableReference (T[]? array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !T GetPinnableReference(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.GetPinnableReference(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPinnableReference (array As T()) As T" />
      <MemberSignature Language="F#" Value="static member GetPinnableReference : 'T[] -&gt; 'T" Usage="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.ManagedToUnmanagedIn.GetPinnableReference array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static T % GetPinnableReference(cli::array &lt;T&gt; ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">The managed array.</param>
        <summary>Gets a pinnable reference to the managed array.</summary>
        <returns>The reference that can be pinned and directly passed to unmanaged code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnmanagedValuesDestination">
      <MemberSignature Language="C#" Value="public Span&lt;TUnmanagedElement&gt; GetUnmanagedValuesDestination ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Span`1&lt;!TUnmanagedElement&gt; GetUnmanagedValuesDestination() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.GetUnmanagedValuesDestination" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnmanagedValuesDestination () As Span(Of TUnmanagedElement)" />
      <MemberSignature Language="F#" Value="member this.GetUnmanagedValuesDestination : unit -&gt; Span&lt;'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;" Usage="managedToUnmanagedIn.GetUnmanagedValuesDestination " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;TUnmanagedElement&gt; GetUnmanagedValuesDestination();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TUnmanagedElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a span that points to the memory where the unmanaged values of the array should be stored.</summary>
        <returns>A span where unmanaged values of the array should be stored.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUnmanaged">
      <MemberSignature Language="C#" Value="public TUnmanagedElement* ToUnmanaged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TUnmanagedElement* ToUnmanaged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.ToUnmanaged" />
      <MemberSignature Language="F#" Value="member this.ToUnmanaged : unit -&gt; nativeptr&lt;'UnmanagedElement&gt;" Usage="managedToUnmanagedIn.ToUnmanaged " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TUnmanagedElement* ToUnmanaged();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TUnmanagedElement*</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the unmanaged value representing the array.</summary>
        <returns>A pointer to the beginning of the unmanaged value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
