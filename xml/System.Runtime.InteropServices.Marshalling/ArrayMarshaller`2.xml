<Type Name="ArrayMarshaller&lt;T,TUnmanagedElement&gt;" FullName="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;T,TUnmanagedElement&gt;">
  <TypeSignature Language="C#" Value="public static class ArrayMarshaller&lt;T,TUnmanagedElement&gt; where TUnmanagedElement : struct" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ArrayMarshaller`2&lt;T, struct .ctor (class System.ValueType) TUnmanagedElement&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2" />
  <TypeSignature Language="VB.NET" Value="Public Class ArrayMarshaller(Of T, TUnmanagedElement)" />
  <TypeSignature Language="F#" Value="type ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt; = class" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TUnmanagedElement&gt;&#xA; where TUnmanagedElement : value classpublic ref class ArrayMarshaller abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
    <TypeParameter Name="TUnmanagedElement">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Marshalling.ContiguousCollectionMarshaller]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Marshalling.ContiguousCollectionMarshaller&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Marshalling.CustomMarshaller(typeof(System.Runtime.InteropServices.Marshalling.CustomMarshallerAttribute+GenericPlaceholder[]), System.Runtime.InteropServices.Marshalling.MarshalMode.Default, typeof(System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;,&gt;))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Marshalling.CustomMarshaller(typeof(System.Runtime.InteropServices.Marshalling.CustomMarshallerAttribute+GenericPlaceholder[]), System.Runtime.InteropServices.Marshalling.MarshalMode.Default, typeof(System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;,&gt;))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Marshalling.CustomMarshaller(typeof(System.Runtime.InteropServices.Marshalling.CustomMarshallerAttribute+GenericPlaceholder[]), System.Runtime.InteropServices.Marshalling.MarshalMode.ManagedToUnmanagedIn, typeof(System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;,&gt;+ManagedToUnmanagedIn))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Marshalling.CustomMarshaller(typeof(System.Runtime.InteropServices.Marshalling.CustomMarshallerAttribute+GenericPlaceholder[]), System.Runtime.InteropServices.Marshalling.MarshalMode.ManagedToUnmanagedIn, typeof(System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;,&gt;+ManagedToUnmanagedIn))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">The array element type.</typeparam>
    <typeparam name="TUnmanagedElement">The unmanaged type for the element type.</typeparam>
    <summary>Represents a marshaller for arrays.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllocateContainerForManagedElements">
      <MemberSignature Language="C#" Value="public static T[]? AllocateContainerForManagedElements (TUnmanagedElement* unmanaged, int numElements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !T[] AllocateContainerForManagedElements(!TUnmanagedElement* unmanaged, int32 numElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.AllocateContainerForManagedElements(`1*,System.Int32)" />
      <MemberSignature Language="F#" Value="static member AllocateContainerForManagedElements : nativeptr&lt;'UnmanagedElement&gt; * int -&gt; 'T[]" Usage="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.AllocateContainerForManagedElements (unmanaged, numElements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;T&gt; ^ AllocateContainerForManagedElements(TUnmanagedElement* unmanaged, int numElements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanaged" Type="TUnmanagedElement*" />
        <Parameter Name="numElements" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unmanaged">The unmanaged array.</param>
        <param name="numElements">The unmanaged element count.</param>
        <summary>Allocates memory for the managed representation of the array.</summary>
        <returns>The managed array.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateContainerForUnmanagedElements">
      <MemberSignature Language="C#" Value="public static TUnmanagedElement* AllocateContainerForUnmanagedElements (T[]? managed, out int numElements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !TUnmanagedElement* AllocateContainerForUnmanagedElements(!T[] managed, [out] int32&amp; numElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.AllocateContainerForUnmanagedElements(`0[],System.Int32@)" />
      <MemberSignature Language="F#" Value="static member AllocateContainerForUnmanagedElements : 'T[] * int -&gt; nativeptr&lt;'UnmanagedElement&gt;" Usage="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.AllocateContainerForUnmanagedElements (managed, numElements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TUnmanagedElement* AllocateContainerForUnmanagedElements(cli::array &lt;T&gt; ^ managed, [Runtime::InteropServices::Out] int % numElements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TUnmanagedElement*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managed" Type="T[]" />
        <Parameter Name="numElements" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="managed">The managed array.</param>
        <param name="numElements">The unmanaged element count.</param>
        <summary>Allocates memory for the unmanaged representation of the array.</summary>
        <returns>The unmanaged pointer to the allocated memory.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Free">
      <MemberSignature Language="C#" Value="public static void Free (TUnmanagedElement* unmanaged);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Free(!TUnmanagedElement* unmanaged) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.Free(`1*)" />
      <MemberSignature Language="F#" Value="static member Free : nativeptr&lt;'UnmanagedElement&gt; -&gt; unit" Usage="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.Free unmanaged" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Free(TUnmanagedElement* unmanaged);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanaged" Type="TUnmanagedElement*" />
      </Parameters>
      <Docs>
        <param name="unmanaged">The unmanaged array.</param>
        <summary>Frees memory for the unmanaged array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedValuesDestination">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; GetManagedValuesDestination (T[]? managed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!T&gt; GetManagedValuesDestination(!T[] managed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.GetManagedValuesDestination(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetManagedValuesDestination (managed As T()) As Span(Of T)" />
      <MemberSignature Language="F#" Value="static member GetManagedValuesDestination : 'T[] -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.GetManagedValuesDestination managed" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Span&lt;T&gt; GetManagedValuesDestination(cli::array &lt;T&gt; ^ managed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managed" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="managed">The managed array.</param>
        <summary>Gets a destination for the managed elements in the array.</summary>
        <returns>The <see cref="T:System.Span`1" /> of managed elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedValuesSource">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; GetManagedValuesSource (T[]? managed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!T&gt; GetManagedValuesSource(!T[] managed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.GetManagedValuesSource(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetManagedValuesSource (managed As T()) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="F#" Value="static member GetManagedValuesSource : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.GetManagedValuesSource managed" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;T&gt; GetManagedValuesSource(cli::array &lt;T&gt; ^ managed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managed" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="managed">The managed array.</param>
        <summary>Gets a source for the managed elements in the array.</summary>
        <returns>The <see cref="T:System.ReadOnlySpan`1" /> containing the managed elements to marshal.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnmanagedValuesDestination">
      <MemberSignature Language="C#" Value="public static Span&lt;TUnmanagedElement&gt; GetUnmanagedValuesDestination (TUnmanagedElement* unmanaged, int numElements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!TUnmanagedElement&gt; GetUnmanagedValuesDestination(!TUnmanagedElement* unmanaged, int32 numElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.GetUnmanagedValuesDestination(`1*,System.Int32)" />
      <MemberSignature Language="F#" Value="static member GetUnmanagedValuesDestination : nativeptr&lt;'UnmanagedElement&gt; * int -&gt; Span&lt;'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;" Usage="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.GetUnmanagedValuesDestination (unmanaged, numElements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Span&lt;TUnmanagedElement&gt; GetUnmanagedValuesDestination(TUnmanagedElement* unmanaged, int numElements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TUnmanagedElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanaged" Type="TUnmanagedElement*" />
        <Parameter Name="numElements" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unmanaged">The unmanaged allocation.</param>
        <param name="numElements">The unmanaged element count.</param>
        <summary>Gets a destination for the unmanaged elements in the array.</summary>
        <returns>The <see cref="T:System.Span`1" /> of unmanaged elements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnmanagedValuesSource">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TUnmanagedElement&gt; GetUnmanagedValuesSource (TUnmanagedElement* unmanagedValue, int numElements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!TUnmanagedElement&gt; GetUnmanagedValuesSource(!TUnmanagedElement* unmanagedValue, int32 numElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.GetUnmanagedValuesSource(`1*,System.Int32)" />
      <MemberSignature Language="F#" Value="static member GetUnmanagedValuesSource : nativeptr&lt;'UnmanagedElement&gt; * int -&gt; ReadOnlySpan&lt;'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;" Usage="System.Runtime.InteropServices.Marshalling.ArrayMarshaller&lt;'T, 'UnmanagedElement (requires 'UnmanagedElement : struct)&gt;.GetUnmanagedValuesSource (unmanagedValue, numElements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;TUnmanagedElement&gt; GetUnmanagedValuesSource(TUnmanagedElement* unmanagedValue, int numElements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TUnmanagedElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedValue" Type="TUnmanagedElement*" />
        <Parameter Name="numElements" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unmanagedValue">The unmanaged array.</param>
        <param name="numElements">The unmanaged element count.</param>
        <summary>Gets a source for the unmanaged elements in the array.</summary>
        <returns>The <see cref="T:System.ReadOnlySpan`1" /> containing the unmanaged elements to marshal.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
