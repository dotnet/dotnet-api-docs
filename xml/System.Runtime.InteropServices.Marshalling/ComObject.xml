<Type Name="ComObject" FullName="System.Runtime.InteropServices.Marshalling.ComObject">
  <TypeSignature Language="C#" Value="public sealed class ComObject : System.Runtime.InteropServices.IDynamicInterfaceCastable, System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComObject extends System.Object implements class System.Runtime.InteropServices.IDynamicInterfaceCastable, class System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.Marshalling.ComObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComObject&#xA;Implements IDynamicInterfaceCastable, IUnmanagedVirtualMethodTableProvider" />
  <TypeSignature Language="F#" Value="type ComObject = class&#xA;    interface IDynamicInterfaceCastable&#xA;    interface IUnmanagedVirtualMethodTableProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComObject sealed : System::Runtime::InteropServices::IDynamicInterfaceCastable, System::Runtime::InteropServices::Marshalling::IUnmanagedVirtualMethodTableProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices.IDynamicInterfaceCastable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Base class for all COM source-generated runtime callable wrappers (RCWs).</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ComObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ComObject.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="comObject.Finalize " />
      <MemberSignature Language="C++ CLI" Value="!ComObject ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all references to the underlying COM object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalRelease">
      <MemberSignature Language="C#" Value="public void FinalRelease ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FinalRelease() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ComObject.FinalRelease" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalRelease ()" />
      <MemberSignature Language="F#" Value="member this.FinalRelease : unit -&gt; unit" Usage="comObject.FinalRelease " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalRelease();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all references owned by this <see cref="T:System.Runtime.InteropServices.Marshalling.ComObject" /> if it is a unique instance.</summary>
        <remarks>This method does nothing if the <see cref="T:System.Runtime.InteropServices.Marshalling.ComObject" /> was not created with <see cref="F:System.Runtime.InteropServices.CreateObjectFlags.UniqueInstance" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation">
      <MemberSignature Language="C#" Value="RuntimeTypeHandle IDynamicInterfaceCastable.GetInterfaceImplementation (RuntimeTypeHandle interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.RuntimeTypeHandle System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(valuetype System.RuntimeTypeHandle interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ComObject.System#Runtime#InteropServices#IDynamicInterfaceCastable#GetInterfaceImplementation(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Function GetInterfaceImplementation (interfaceType As RuntimeTypeHandle) As RuntimeTypeHandle Implements IDynamicInterfaceCastable.GetInterfaceImplementation" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation : RuntimeTypeHandle -&gt; RuntimeTypeHandle&#xA;override this.System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation : RuntimeTypeHandle -&gt; RuntimeTypeHandle" Usage="comObject.System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation interfaceType" />
      <MemberSignature Language="C++ CLI" Value=" virtual RuntimeTypeHandle System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(RuntimeTypeHandle interfaceType) = System::Runtime::InteropServices::IDynamicInterfaceCastable::GetInterfaceImplementation;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="interfaceType">The interface type.</param>
        <summary>Determines the type to use to dispatch the specified interface type. This method is called during interface dispatch when the given interface type can't be found in the class's metadata.</summary>
        <returns>The type that should be used to dispatch for <paramref name="interfaceType" /> on the current object.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented">
      <MemberSignature Language="C#" Value="bool IDynamicInterfaceCastable.IsInterfaceImplemented (RuntimeTypeHandle interfaceType, bool throwIfNotImplemented);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(valuetype System.RuntimeTypeHandle interfaceType, bool throwIfNotImplemented) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ComObject.System#Runtime#InteropServices#IDynamicInterfaceCastable#IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IsInterfaceImplemented (interfaceType As RuntimeTypeHandle, throwIfNotImplemented As Boolean) As Boolean Implements IDynamicInterfaceCastable.IsInterfaceImplemented" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented : RuntimeTypeHandle * bool -&gt; bool&#xA;override this.System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented : RuntimeTypeHandle * bool -&gt; bool" Usage="comObject.System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented (interfaceType, throwIfNotImplemented)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(RuntimeTypeHandle interfaceType, bool throwIfNotImplemented) = System::Runtime::InteropServices::IDynamicInterfaceCastable::IsInterfaceImplemented;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.RuntimeTypeHandle" />
        <Parameter Name="throwIfNotImplemented" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="interfaceType">The interface type.</param>
        <param name="throwIfNotImplemented">
          <see langword="true" /> to throw an exception instead of returning <see langword="false" />; otherwise, <see langword="false" />.</param>
        <summary>Determines if this object can be cast to the specified interface type. This method is called when an implementing class instance is cast to an interface type that's not contained in the class's metadata.</summary>
        <returns>
          <see langword="true" /> if this object can be cast to the given interface; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey">
      <MemberSignature Language="C#" Value="System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshalling.ComObject.System#Runtime#InteropServices#Marshalling#IUnmanagedVirtualMethodTableProvider#GetVirtualMethodTableInfoForKey(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function GetVirtualMethodTableInfoForKey (type As Type) As VirtualMethodTableInfo Implements IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey : Type -&gt; System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo&#xA;override this.System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey : Type -&gt; System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo" Usage="comObject.System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey type" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Runtime::InteropServices::Marshalling::VirtualMethodTableInfo System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey(Type ^ type) = System::Runtime::InteropServices::Marshalling::IUnmanagedVirtualMethodTableProvider::GetVirtualMethodTableInfoForKey;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The managed type for the unmanaged interface.</param>
        <summary>Get the information about the virtual method table for a given unmanaged interface type represented by <paramref name="type" />.</summary>
        <returns>The virtual method table information for the unmanaged interface.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
