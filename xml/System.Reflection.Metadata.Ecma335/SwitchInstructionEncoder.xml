<Type Name="SwitchInstructionEncoder" FullName="System.Reflection.Metadata.Ecma335.SwitchInstructionEncoder">
  <TypeSignature Language="C#" Value="public readonly struct SwitchInstructionEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SwitchInstructionEncoder extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.Ecma335.SwitchInstructionEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Structure SwitchInstructionEncoder" />
  <TypeSignature Language="F#" Value="type SwitchInstructionEncoder = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class SwitchInstructionEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0;net-8.0-pp;net-9.0;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Encodes the branches of an IL <c>switch</c> instruction.</summary>
    <remarks>See <see cref="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Switch(System.Int32)" /> for usage guidelines.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Branch">
      <MemberSignature Language="C#" Value="public void Branch (System.Reflection.Metadata.Ecma335.LabelHandle label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Branch(valuetype System.Reflection.Metadata.Ecma335.LabelHandle label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.SwitchInstructionEncoder.Branch(System.Reflection.Metadata.Ecma335.LabelHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Branch (label As LabelHandle)" />
      <MemberSignature Language="F#" Value="member this.Branch : System.Reflection.Metadata.Ecma335.LabelHandle -&gt; unit" Usage="switchInstructionEncoder.Branch label" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Branch(System::Reflection::Metadata::Ecma335::LabelHandle label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.Reflection.Metadata.Ecma335.LabelHandle" />
      </Parameters>
      <Docs>
        <param name="label">To be added.</param>
        <summary>Encodes a branch that is part of a switch instruction.</summary>
        <remarks>See <see cref="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Switch(System.Int32)" /> for usage guidelines.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
