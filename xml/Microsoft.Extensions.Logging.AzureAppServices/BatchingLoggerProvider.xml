<Type Name="BatchingLoggerProvider" FullName="Microsoft.Extensions.Logging.AzureAppServices.BatchingLoggerProvider">
  <TypeSignature Language="C#" Value="public abstract class BatchingLoggerProvider : IDisposable, Microsoft.Extensions.Logging.ILoggerProvider, Microsoft.Extensions.Logging.ISupportExternalScope" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BatchingLoggerProvider extends System.Object implements class Microsoft.Extensions.Logging.ILoggerProvider, class Microsoft.Extensions.Logging.ISupportExternalScope, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.AzureAppServices.BatchingLoggerProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BatchingLoggerProvider&#xA;Implements IDisposable, ILoggerProvider, ISupportExternalScope" />
  <TypeSignature Language="C++ CLI" Value="public ref class BatchingLoggerProvider abstract : IDisposable, Microsoft::Extensions::Logging::ILoggerProvider, Microsoft::Extensions::Logging::ISupportExternalScope" />
  <TypeSignature Language="F#" Value="type BatchingLoggerProvider = class&#xA;    interface ILoggerProvider&#xA;    interface IDisposable&#xA;    interface ISupportExternalScope" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.AzureAppServices</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.ISupportExternalScope</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A provider of <see cref="T:Microsoft.Extensions.Logging.AzureAppServices.BatchingLogger" /> instances.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateLogger">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.ILogger CreateLogger (string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Logging.ILogger CreateLogger(string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.AzureAppServices.BatchingLoggerProvider.CreateLogger(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateLogger (categoryName As String) As ILogger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::Extensions::Logging::ILogger ^ CreateLogger(System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="abstract member CreateLogger : string -&gt; Microsoft.Extensions.Logging.ILogger&#xA;override this.CreateLogger : string -&gt; Microsoft.Extensions.Logging.ILogger" Usage="batchingLoggerProvider.CreateLogger categoryName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILoggerProvider.CreateLogger(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.AzureAppServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">The name of the category to create this logger with.</param>
        <summary>Creates a <see cref="T:Microsoft.Extensions.Logging.AzureAppServices.BatchingLogger" /> with the given <paramref name="categoryName" />.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.AzureAppServices.BatchingLogger" /> that was created.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.AzureAppServices.BatchingLoggerProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="batchingLoggerProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.AzureAppServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="IntervalAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task IntervalAsync (TimeSpan interval, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task IntervalAsync(valuetype System.TimeSpan interval, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.AzureAppServices.BatchingLoggerProvider.IntervalAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IntervalAsync (interval As TimeSpan, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::Tasks::Task ^ IntervalAsync(TimeSpan interval, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member IntervalAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.IntervalAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="batchingLoggerProvider.IntervalAsync (interval, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.AzureAppServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="interval">The amount of time to wait.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the delay.</param>
        <summary>Wait for the given <see cref="T:System.TimeSpan" />.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> which completes when the <paramref name="interval" /> has passed or the <paramref name="cancellationToken" /> has been canceled.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.AzureAppServices.BatchingLoggerProvider.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool" Usage="Microsoft.Extensions.Logging.AzureAppServices.BatchingLoggerProvider.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.AzureAppServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks if the queue is enabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Logging.ISupportExternalScope.SetScopeProvider">
      <MemberSignature Language="C#" Value="void ISupportExternalScope.SetScopeProvider (Microsoft.Extensions.Logging.IExternalScopeProvider scopeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Extensions.Logging.ISupportExternalScope.SetScopeProvider(class Microsoft.Extensions.Logging.IExternalScopeProvider scopeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.AzureAppServices.BatchingLoggerProvider.Microsoft#Extensions#Logging#ISupportExternalScope#SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)" />
      <MemberSignature Language="VB.NET" Value="Sub SetScopeProvider (scopeProvider As IExternalScopeProvider) Implements ISupportExternalScope.SetScopeProvider" />
      <MemberSignature Language="C++ CLI" Value=" virtual void Microsoft.Extensions.Logging.ISupportExternalScope.SetScopeProvider(Microsoft::Extensions::Logging::IExternalScopeProvider ^ scopeProvider) = Microsoft::Extensions::Logging::ISupportExternalScope::SetScopeProvider;" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Logging.ISupportExternalScope.SetScopeProvider : Microsoft.Extensions.Logging.IExternalScopeProvider -&gt; unit&#xA;override this.Microsoft.Extensions.Logging.ISupportExternalScope.SetScopeProvider : Microsoft.Extensions.Logging.IExternalScopeProvider -&gt; unit" Usage="batchingLoggerProvider.Microsoft.Extensions.Logging.ISupportExternalScope.SetScopeProvider scopeProvider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ISupportExternalScope.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.AzureAppServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeProvider" Type="Microsoft.Extensions.Logging.IExternalScopeProvider" />
      </Parameters>
      <Docs>
        <param name="scopeProvider">Provides the scope.</param>
        <summary>Sets the scope on this provider.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
