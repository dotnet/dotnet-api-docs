<Type Name="HttpClientBuilderExtensions" FullName="Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class HttpClientBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit HttpClientBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module HttpClientBuilderExtensions" />
  <TypeSignature Language="F#" Value="type HttpClientBuilderExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClientBuilderExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddResilienceHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder AddResilienceHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, string strategyName, Action&lt;Polly.CompositeStrategyBuilder&lt;System.Net.Http.HttpResponseMessage&gt;,Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder AddResilienceHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, string strategyName, class System.Action`2&lt;class Polly.CompositeStrategyBuilder`1&lt;class System.Net.Http.HttpResponseMessage&gt;, class Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddResilienceHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.String,System.Action{Polly.CompositeStrategyBuilder{System.Net.Http.HttpResponseMessage},Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddResilienceHandler (builder As IHttpClientBuilder, strategyName As String, configure As Action(Of CompositeStrategyBuilder(Of HttpResponseMessage), ResilienceHandlerContext)) As IHttpResilienceStrategyBuilder" />
      <MemberSignature Language="F#" Value="static member AddResilienceHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * string * Action&lt;Polly.CompositeStrategyBuilder&lt;System.Net.Http.HttpResponseMessage&gt;, Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext&gt; -&gt; Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder" Usage="Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddResilienceHandler (builder, strategyName, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Http::Resilience::IHttpResilienceStrategyBuilder ^ AddResilienceHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, System::String ^ strategyName, Action&lt;Polly::CompositeStrategyBuilder&lt;System::Net::Http::HttpResponseMessage ^&gt; ^, Microsoft::Extensions::Http::Resilience::ResilienceHandlerContext ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="strategyName" Type="System.String" />
        <Parameter Name="configure" Type="System.Action&lt;Polly.CompositeStrategyBuilder&lt;System.Net.Http.HttpResponseMessage&gt;,Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The builder instance.</param>
        <param name="strategyName">The custom identifier for the resilience strategy, used in the name of the strategy.</param>
        <param name="configure">The callback that configures the strategy.</param>
        <summary>
            Adds a resilience strategy handler that uses a named inline resilience strategy.
            </summary>
        <returns>The HTTP strategy builder instance.</returns>
        <remarks>
            The final strategy name is combination of <see cref="P:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder.Name" /> and <paramref name="strategyName" />.
            Use strategy name identifier if your HTTP client contains multiple resilience handlers.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddResilienceHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder AddResilienceHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, string strategyName, Action&lt;Polly.CompositeStrategyBuilder&lt;System.Net.Http.HttpResponseMessage&gt;&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder AddResilienceHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, string strategyName, class System.Action`1&lt;class Polly.CompositeStrategyBuilder`1&lt;class System.Net.Http.HttpResponseMessage&gt;&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddResilienceHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.String,System.Action{Polly.CompositeStrategyBuilder{System.Net.Http.HttpResponseMessage}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddResilienceHandler (builder As IHttpClientBuilder, strategyName As String, configure As Action(Of CompositeStrategyBuilder(Of HttpResponseMessage))) As IHttpResilienceStrategyBuilder" />
      <MemberSignature Language="F#" Value="static member AddResilienceHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * string * Action&lt;Polly.CompositeStrategyBuilder&lt;System.Net.Http.HttpResponseMessage&gt;&gt; -&gt; Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder" Usage="Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddResilienceHandler (builder, strategyName, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Http::Resilience::IHttpResilienceStrategyBuilder ^ AddResilienceHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, System::String ^ strategyName, Action&lt;Polly::CompositeStrategyBuilder&lt;System::Net::Http::HttpResponseMessage ^&gt; ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="strategyName" Type="System.String" />
        <Parameter Name="configure" Type="System.Action&lt;Polly.CompositeStrategyBuilder&lt;System.Net.Http.HttpResponseMessage&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The builder instance.</param>
        <param name="strategyName">The custom identifier for the resilience strategy, used in the name of the strategy.</param>
        <param name="configure">The callback that configures the strategy.</param>
        <summary>
            Adds a resilience strategy handler that uses a named inline resilience strategy.
            </summary>
        <returns>The HTTP strategy builder instance.</returns>
        <remarks>
            The final strategy name is combination of <see cref="P:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder.Name" /> and <paramref name="strategyName" />.
            Use strategy name identifier if your HTTP client contains multiple resilience handlers.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStandardHedgingHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder AddStandardHedgingHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder AddStandardHedgingHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardHedgingHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddStandardHedgingHandler (builder As IHttpClientBuilder) As IStandardHedgingHandlerBuilder" />
      <MemberSignature Language="F#" Value="static member AddStandardHedgingHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder -&gt; Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder" Usage="Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardHedgingHandler builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Http::Resilience::IStandardHedgingHandlerBuilder ^ AddStandardHedgingHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">The HTTP client builder.</param>
        <summary>
            Adds a standard hedging handler that wraps the execution of the request with a standard hedging mechanism.
            </summary>
        <returns>
            A <see cref="T:Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder" /> builder that can be used to configure the standard hedging behavior.
            </returns>
        <remarks>
            The standard hedging uses a pool of circuit breakers to ensure that unhealthy endpoints are not hedged against.
            By default, the selection from pool is based on the URL Authority (scheme + host + port).
            It is recommended that you configure the way the strategies are selected by calling
            <see cref="M:Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.SelectStrategyByAuthority(Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder,Microsoft.Extensions.Compliance.Classification.DataClassification)" />
            extensions.
            <para>
            See <see cref="T:Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions" /> for more details about the used resilience strategies.
            </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStandardHedgingHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder AddStandardHedgingHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Action&lt;Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder AddStandardHedgingHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardHedgingHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddStandardHedgingHandler (builder As IHttpClientBuilder, configure As Action(Of IRoutingStrategyBuilder)) As IStandardHedgingHandlerBuilder" />
      <MemberSignature Language="F#" Value="static member AddStandardHedgingHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Action&lt;Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder&gt; -&gt; Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder" Usage="Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardHedgingHandler (builder, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Http::Resilience::IStandardHedgingHandlerBuilder ^ AddStandardHedgingHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Action&lt;Microsoft::Extensions::Http::Resilience::IRoutingStrategyBuilder ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The HTTP client builder.</param>
        <param name="configure">Configures the routing strategy associated with this handler.</param>
        <summary>
            Adds a standard hedging handler that wraps the execution of the request with a standard hedging mechanism.
            </summary>
        <returns>
            A <see cref="T:Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder" /> builder that can be used to configure the standard hedging behavior.
            </returns>
        <remarks>
            The standard hedging uses a pool of circuit breakers to ensure that unhealthy endpoints are not hedged against.
            By default, the selection from pool is based on the URL Authority (scheme + host + port).
            It is recommended that you configure the way the strategies are selected by calling
            <see cref="M:Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.SelectStrategyByAuthority(Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder,Microsoft.Extensions.Compliance.Classification.DataClassification)" />
            extensions.
            <para>
            See <see cref="T:Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions" /> for more details about the used resilience strategies.
            </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStandardResilienceHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder AddStandardResilienceHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder AddStandardResilienceHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddStandardResilienceHandler (builder As IHttpClientBuilder) As IHttpStandardResilienceStrategyBuilder" />
      <MemberSignature Language="F#" Value="static member AddStandardResilienceHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder -&gt; Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder" Usage="Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Http::Resilience::IHttpStandardResilienceStrategyBuilder ^ AddStandardResilienceHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">The builder instance.</param>
        <summary>
            Adds a standard resilience handler that uses multiple resilience strategies with default options to send the requests and handle any transient errors.
            </summary>
        <returns>The HTTP resilience handler builder instance.</returns>
        <remarks>
            The resilience strategy combines multiple strategies that are configured based on HTTP-specific <see cref="T:Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions" /> options with recommended defaults.
            See <see cref="T:Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions" /> for more details about the individual resilience strategies configured by this method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStandardResilienceHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder AddStandardResilienceHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Microsoft.Extensions.Configuration.IConfigurationSection section);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder AddStandardResilienceHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class Microsoft.Extensions.Configuration.IConfigurationSection section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddStandardResilienceHandler (builder As IHttpClientBuilder, section As IConfigurationSection) As IHttpStandardResilienceStrategyBuilder" />
      <MemberSignature Language="F#" Value="static member AddStandardResilienceHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Microsoft.Extensions.Configuration.IConfigurationSection -&gt; Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder" Usage="Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler (builder, section)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Http::Resilience::IHttpStandardResilienceStrategyBuilder ^ AddStandardResilienceHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Microsoft::Extensions::Configuration::IConfigurationSection ^ section);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfigurationSection" />
      </Parameters>
      <Docs>
        <param name="builder">The builder instance.</param>
        <param name="section">The section that the options will bind against.</param>
        <summary>
            Adds a standard resilience handler that uses multiple resilience strategies with default options to send the requests and handle any transient errors.
            </summary>
        <returns>The HTTP resilience handler builder instance.</returns>
        <remarks>
            The resilience strategy combines multiple strategies that are configured based on HTTP-specific <see cref="T:Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions" /> options with recommended defaults.
            See <see cref="T:Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions" /> for more details about the individual resilience strategies configured by this method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStandardResilienceHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder AddStandardResilienceHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Action&lt;Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder AddStandardResilienceHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddStandardResilienceHandler (builder As IHttpClientBuilder, configure As Action(Of HttpStandardResilienceOptions)) As IHttpStandardResilienceStrategyBuilder" />
      <MemberSignature Language="F#" Value="static member AddStandardResilienceHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Action&lt;Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions&gt; -&gt; Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder" Usage="Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler (builder, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Http::Resilience::IHttpStandardResilienceStrategyBuilder ^ AddStandardResilienceHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Action&lt;Microsoft::Extensions::Http::Resilience::HttpStandardResilienceOptions ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The builder instance.</param>
        <param name="configure">The callback that configures the options.</param>
        <summary>
            Adds a standard resilience handler that uses multiple resilience strategies with default options to send the requests and handle any transient errors.
            </summary>
        <returns>The HTTP resilience handler builder instance.</returns>
        <remarks>
            The resilience strategy combines multiple strategies that are configured based on HTTP-specific <see cref="T:Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions" /> options with recommended defaults.
            See <see cref="T:Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions" /> for more details about the individual resilience strategies configured by this method.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
