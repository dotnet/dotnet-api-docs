<Type Name="ResilienceHandler" FullName="Microsoft.Extensions.Http.Resilience.ResilienceHandler">
  <TypeSignature Language="C#" Value="public class ResilienceHandler : System.Net.Http.DelegatingHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ResilienceHandler extends System.Net.Http.DelegatingHandler" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Http.Resilience.ResilienceHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class ResilienceHandler&#xA;Inherits DelegatingHandler" />
  <TypeSignature Language="F#" Value="type ResilienceHandler = class&#xA;    inherit DelegatingHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResilienceHandler : System::Net::Http::DelegatingHandler" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
    <AssemblyVersion>8.4.0.0</AssemblyVersion>
    <AssemblyVersion>8.5.0.0</AssemblyVersion>
    <AssemblyVersion>8.6.0.0</AssemblyVersion>
    <AssemblyVersion>8.7.0.0</AssemblyVersion>
    <AssemblyVersion>8.8.0.0</AssemblyVersion>
    <AssemblyVersion>8.9.1.0</AssemblyVersion>
    <AssemblyVersion>8.10.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Http.DelegatingHandler</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0001", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0001", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Base class for resilience handler, i.e. handlers that use resilience strategies to send the requests.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResilienceHandler (Polly.ResiliencePipeline&lt;System.Net.Http.HttpResponseMessage&gt; pipeline);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Polly.ResiliencePipeline`1&lt;class System.Net.Http.HttpResponseMessage&gt; pipeline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.ResilienceHandler.#ctor(Polly.ResiliencePipeline{System.Net.Http.HttpResponseMessage})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pipeline As ResiliencePipeline(Of HttpResponseMessage))" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Http.Resilience.ResilienceHandler : Polly.ResiliencePipeline&lt;System.Net.Http.HttpResponseMessage&gt; -&gt; Microsoft.Extensions.Http.Resilience.ResilienceHandler" Usage="new Microsoft.Extensions.Http.Resilience.ResilienceHandler pipeline" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResilienceHandler(Polly::ResiliencePipeline&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ pipeline);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pipeline" Type="Polly.ResiliencePipeline&lt;System.Net.Http.HttpResponseMessage&gt;" />
      </Parameters>
      <Docs>
        <param name="pipeline">The pipeline to use for the message.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Http.Resilience.ResilienceHandler" /> class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="pipeline" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResilienceHandler (Func&lt;System.Net.Http.HttpRequestMessage,Polly.ResiliencePipeline&lt;System.Net.Http.HttpResponseMessage&gt;&gt; pipelineProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;class System.Net.Http.HttpRequestMessage, class Polly.ResiliencePipeline`1&lt;class System.Net.Http.HttpResponseMessage&gt;&gt; pipelineProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.ResilienceHandler.#ctor(System.Func{System.Net.Http.HttpRequestMessage,Polly.ResiliencePipeline{System.Net.Http.HttpResponseMessage}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pipelineProvider As Func(Of HttpRequestMessage, ResiliencePipeline(Of HttpResponseMessage)))" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Http.Resilience.ResilienceHandler : Func&lt;System.Net.Http.HttpRequestMessage, Polly.ResiliencePipeline&lt;System.Net.Http.HttpResponseMessage&gt;&gt; -&gt; Microsoft.Extensions.Http.Resilience.ResilienceHandler" Usage="new Microsoft.Extensions.Http.Resilience.ResilienceHandler pipelineProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResilienceHandler(Func&lt;System::Net::Http::HttpRequestMessage ^, Polly::ResiliencePipeline&lt;System::Net::Http::HttpResponseMessage ^&gt; ^&gt; ^ pipelineProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pipelineProvider" Type="System.Func&lt;System.Net.Http.HttpRequestMessage,Polly.ResiliencePipeline&lt;System.Net.Http.HttpResponseMessage&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="pipelineProvider">The pipeline provider that supplies pipelines in response to an http message.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Http.Resilience.ResilienceHandler" /> class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="pipelineProvider" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="protected override System.Net.Http.HttpResponseMessage Send (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.Http.HttpResponseMessage Send(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.ResilienceHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Send (request As HttpRequestMessage, cancellationToken As CancellationToken) As HttpResponseMessage" />
      <MemberSignature Language="F#" Value="override this.Send : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Net.Http.HttpResponseMessage" Usage="resilienceHandler.Send (request, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::Http::HttpResponseMessage ^ Send(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" Index="0" FrameworkAlternate="net-6.0;net-8.0;net-9.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-6.0;net-8.0;net-9.0" />
      </Parameters>
      <Docs>
        <param name="request">The HTTP request message to send to the server.</param>
        <param name="cancellationToken">A cancellation token to cancel operation.</param>
        <summary>
            Sends an HTTP request to the inner handler to send to the server as a synchronous operation.
            </summary>
        <returns>An HTTP response received from the server.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="request" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.ResilienceHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SendAsync (request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="resilienceHandler.SendAsync (request, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request">The HTTP request message to send to the server.</param>
        <param name="cancellationToken">A cancellation token to cancel operation.</param>
        <summary>
            Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="request" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
