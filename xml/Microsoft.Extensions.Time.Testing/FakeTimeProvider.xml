<Type Name="FakeTimeProvider" FullName="Microsoft.Extensions.Time.Testing.FakeTimeProvider">
  <TypeSignature Language="C#" Value="public class FakeTimeProvider : TimeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FakeTimeProvider extends System.TimeProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class FakeTimeProvider&#xA;Inherits TimeProvider" />
  <TypeSignature Language="F#" Value="type FakeTimeProvider = class&#xA;    inherit TimeProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class FakeTimeProvider : TimeProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.4.0.0</AssemblyVersion>
    <AssemblyVersion>8.5.0.0</AssemblyVersion>
    <AssemblyVersion>8.6.0.0</AssemblyVersion>
    <AssemblyVersion>8.7.0.0</AssemblyVersion>
    <AssemblyVersion>8.8.0.0</AssemblyVersion>
    <AssemblyVersion>8.9.1.0</AssemblyVersion>
    <AssemblyVersion>8.10.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.TimeProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a synthetic time provider that can be used to enable deterministic behavior in tests.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FakeTimeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FakeTimeProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider" /> class.
            </summary>
        <remarks>
            This creates a provider whose time is initially set to midnight January 1st 2000.
            The provider is set to not automatically advance time each time it is read.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FakeTimeProvider (DateTimeOffset startDateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTimeOffset startDateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.#ctor(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (startDateTime As DateTimeOffset)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Time.Testing.FakeTimeProvider : DateTimeOffset -&gt; Microsoft.Extensions.Time.Testing.FakeTimeProvider" Usage="new Microsoft.Extensions.Time.Testing.FakeTimeProvider startDateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FakeTimeProvider(DateTimeOffset startDateTime);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="startDateTime" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="startDateTime">The initial time and date reported by the provider.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider" /> class.
            </summary>
        <remarks>
            The provider is set to not automatically advance time each time it is read.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustTime">
      <MemberSignature Language="C#" Value="public void AdjustTime (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AdjustTime(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AdjustTime(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AdjustTime (value As DateTimeOffset)" />
      <MemberSignature Language="F#" Value="member this.AdjustTime : DateTimeOffset -&gt; unit" Usage="fakeTimeProvider.AdjustTime value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AdjustTime(DateTimeOffset value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0004", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0004", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">The date and time in the UTC time zone.</param>
        <summary>
            Advances the date and time in the UTC time zone.
            </summary>
        <remarks>
            This method updates the current time, and has no impact on outstanding
            timers. This is similar to what happens in a real system when the system's
            time is changed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Advance">
      <MemberSignature Language="C#" Value="public void Advance (TimeSpan delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Advance(valuetype System.TimeSpan delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.Advance(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Advance (delta As TimeSpan)" />
      <MemberSignature Language="F#" Value="member this.Advance : TimeSpan -&gt; unit" Usage="fakeTimeProvider.Advance delta" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Advance(TimeSpan delta);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delta" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delta">The amount of time to advance the clock by.</param>
        <summary>
            Advances time by a specific amount.
            </summary>
        <remarks>
            Advancing time affects the timers created from this provider, and all other operations that are directly or
            indirectly using this provider as a time source. Whereas when using <see cref="P:System.TimeProvider.System" />, time
            marches forward automatically in hardware, for the fake time provider the application is responsible for
            doing this explicitly by calling this method.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The time value is less than <see cref="F:System.TimeSpan.Zero" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoAdvanceAmount">
      <MemberSignature Language="C#" Value="public TimeSpan AutoAdvanceAmount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AutoAdvanceAmount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AutoAdvanceAmount" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoAdvanceAmount As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.AutoAdvanceAmount : TimeSpan with get, set" Usage="Microsoft.Extensions.Time.Testing.FakeTimeProvider.AutoAdvanceAmount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AutoAdvanceAmount { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the amount of time by which time advances whenever the clock is read.
            </summary>
        <value>To be added.</value>
        <remarks>
            This defaults to <see cref="F:System.TimeSpan.Zero" />.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The time value is less than <see cref="F:System.TimeSpan.Zero" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public override System.Threading.ITimer CreateTimer (System.Threading.TimerCallback callback, object? state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.ITimer CreateTimer(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.CreateTimer(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateTimer (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan) As ITimer" />
      <MemberSignature Language="F#" Value="override this.CreateTimer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.ITimer" Usage="fakeTimeProvider.CreateTimer (callback, state, dueTime, period)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::ITimer ^ CreateTimer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ITimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <param name="dueTime">To be added.</param>
        <param name="period">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public override long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetTimestamp () As Long" />
      <MemberSignature Language="F#" Value="override this.GetTimestamp : unit -&gt; int64" Usage="fakeTimeProvider.GetTimestamp " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long GetTimestamp();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetUtcNow">
      <MemberSignature Language="C#" Value="public override DateTimeOffset GetUtcNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTimeOffset GetUtcNow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetUtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUtcNow () As DateTimeOffset" />
      <MemberSignature Language="F#" Value="override this.GetUtcNow : unit -&gt; DateTimeOffset" Usage="fakeTimeProvider.GetUtcNow " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTimeOffset GetUtcNow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="LocalTimeZone">
      <MemberSignature Language="C#" Value="public override TimeZoneInfo LocalTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.TimeZoneInfo LocalTimeZone" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.LocalTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalTimeZone As TimeZoneInfo" />
      <MemberSignature Language="F#" Value="member this.LocalTimeZone : TimeZoneInfo" Usage="Microsoft.Extensions.Time.Testing.FakeTimeProvider.LocalTimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property TimeZoneInfo ^ LocalTimeZone { TimeZoneInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="SetLocalTimeZone">
      <MemberSignature Language="C#" Value="public void SetLocalTimeZone (TimeZoneInfo localTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalTimeZone(class System.TimeZoneInfo localTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.SetLocalTimeZone(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLocalTimeZone (localTimeZone As TimeZoneInfo)" />
      <MemberSignature Language="F#" Value="member this.SetLocalTimeZone : TimeZoneInfo -&gt; unit" Usage="fakeTimeProvider.SetLocalTimeZone localTimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalTimeZone(TimeZoneInfo ^ localTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="localTimeZone">The local time zone.</param>
        <summary>
            Sets the local time zone.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcNow">
      <MemberSignature Language="C#" Value="public void SetUtcNow (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetUtcNow(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.SetUtcNow(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetUtcNow (value As DateTimeOffset)" />
      <MemberSignature Language="F#" Value="member this.SetUtcNow : DateTimeOffset -&gt; unit" Usage="fakeTimeProvider.SetUtcNow value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetUtcNow(DateTimeOffset value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">The date and time in the UTC time zone.</param>
        <summary>
            Advances the date and time in the UTC time zone.
            </summary>
        <remarks>
            This method simply advances time. If the time is set forward beyond the
            trigger point of any outstanding timers, those timers will immediately trigger.
            This is unlike the <see cref="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AdjustTime(System.DateTimeOffset)" /> method, which has no impact
            on timers.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The supplied time value is before the current time.</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public DateTimeOffset Start { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeOffset Start" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.Start" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Start As DateTimeOffset" />
      <MemberSignature Language="F#" Value="member this.Start : DateTimeOffset" Usage="Microsoft.Extensions.Time.Testing.FakeTimeProvider.Start" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeOffset Start { DateTimeOffset get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the starting date and time for this provider.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimestampFrequency">
      <MemberSignature Language="C#" Value="public override long TimestampFrequency { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TimestampFrequency" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.TimestampFrequency" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TimestampFrequency As Long" />
      <MemberSignature Language="F#" Value="member this.TimestampFrequency : int64" Usage="Microsoft.Extensions.Time.Testing.FakeTimeProvider.TimestampFrequency" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long TimestampFrequency { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the amount by which the value from <see cref="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetTimestamp" /> increments per second.
            </summary>
        <value>To be added.</value>
        <remarks>
            This is fixed to the value of <see cref="F:System.TimeSpan.TicksPerSecond" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="fakeTimeProvider.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.TimeProvider.Testing</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a string representation this provider's idea of current time.
            </summary>
        <returns>A string representing the provider's current time.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
