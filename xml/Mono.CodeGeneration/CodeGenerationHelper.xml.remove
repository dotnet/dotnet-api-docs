<Type Name="CodeGenerationHelper" FullName="Mono.CodeGeneration.CodeGenerationHelper">
  <TypeSignature Language="C#" Value="public class CodeGenerationHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CodeGenerationHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Mono.CodeGeneration.CodeGenerationHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeGenerationHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeGenerationHelper" />
  <TypeSignature Language="F#" Value="type CodeGenerationHelper = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeGenerationHelper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeGenerationHelper.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeGenerationHelper();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateMethodCall">
      <MemberSignature Language="C#" Value="public static void GenerateMethodCall (System.Reflection.Emit.ILGenerator gen, Mono.CodeGeneration.CodeExpression target, Mono.CodeGeneration.CodeMethod method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenerateMethodCall(class System.Reflection.Emit.ILGenerator gen, class Mono.CodeGeneration.CodeExpression target, class Mono.CodeGeneration.CodeMethod method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeGenerationHelper.GenerateMethodCall(System.Reflection.Emit.ILGenerator,Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeMethod,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GenerateMethodCall (gen As ILGenerator, target As CodeExpression, method As CodeMethod, ParamArray parameters As CodeExpression())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GenerateMethodCall(System::Reflection::Emit::ILGenerator ^ gen, Mono::CodeGeneration::CodeExpression ^ target, Mono::CodeGeneration::CodeMethod ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member GenerateMethodCall : System.Reflection.Emit.ILGenerator * Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeMethod * Mono.CodeGeneration.CodeExpression[] -&gt; unit" Usage="Mono.CodeGeneration.CodeGenerationHelper.GenerateMethodCall (gen, target, method, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gen" Type="System.Reflection.Emit.ILGenerator" />
        <Parameter Name="target" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="method" Type="Mono.CodeGeneration.CodeMethod" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="gen">To be added.</param>
        <param name="target">To be added.</param>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateMethodCall">
      <MemberSignature Language="C#" Value="public static void GenerateMethodCall (System.Reflection.Emit.ILGenerator gen, Mono.CodeGeneration.CodeExpression target, System.Reflection.MethodBase method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenerateMethodCall(class System.Reflection.Emit.ILGenerator gen, class Mono.CodeGeneration.CodeExpression target, class System.Reflection.MethodBase method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeGenerationHelper.GenerateMethodCall(System.Reflection.Emit.ILGenerator,Mono.CodeGeneration.CodeExpression,System.Reflection.MethodBase,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GenerateMethodCall (gen As ILGenerator, target As CodeExpression, method As MethodBase, ParamArray parameters As CodeExpression())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GenerateMethodCall(System::Reflection::Emit::ILGenerator ^ gen, Mono::CodeGeneration::CodeExpression ^ target, System::Reflection::MethodBase ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member GenerateMethodCall : System.Reflection.Emit.ILGenerator * Mono.CodeGeneration.CodeExpression * System.Reflection.MethodBase * Mono.CodeGeneration.CodeExpression[] -&gt; unit" Usage="Mono.CodeGeneration.CodeGenerationHelper.GenerateMethodCall (gen, target, method, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gen" Type="System.Reflection.Emit.ILGenerator" />
        <Parameter Name="target" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="method" Type="System.Reflection.MethodBase" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="gen">To be added.</param>
        <param name="target">To be added.</param>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratePrimitiveValue">
      <MemberSignature Language="C#" Value="public static void GeneratePrimitiveValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GeneratePrimitiveValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeGenerationHelper.GeneratePrimitiveValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GeneratePrimitiveValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GeneratePrimitiveValue();" />
      <MemberSignature Language="F#" Value="static member GeneratePrimitiveValue : unit -&gt; unit" Usage="Mono.CodeGeneration.CodeGenerationHelper.GeneratePrimitiveValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSafeConversion">
      <MemberSignature Language="C#" Value="public static void GenerateSafeConversion (System.Reflection.Emit.ILGenerator gen, Type targetType, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenerateSafeConversion(class System.Reflection.Emit.ILGenerator gen, class System.Type targetType, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeGenerationHelper.GenerateSafeConversion(System.Reflection.Emit.ILGenerator,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GenerateSafeConversion (gen As ILGenerator, targetType As Type, sourceType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GenerateSafeConversion(System::Reflection::Emit::ILGenerator ^ gen, Type ^ targetType, Type ^ sourceType);" />
      <MemberSignature Language="F#" Value="static member GenerateSafeConversion : System.Reflection.Emit.ILGenerator * Type * Type -&gt; unit" Usage="Mono.CodeGeneration.CodeGenerationHelper.GenerateSafeConversion (gen, targetType, sourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gen" Type="System.Reflection.Emit.ILGenerator" />
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="gen">To be added.</param>
        <param name="targetType">To be added.</param>
        <param name="sourceType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodException">
      <MemberSignature Language="C#" Value="public static Exception GetMethodException (System.Reflection.MethodBase method, string msg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception GetMethodException(class System.Reflection.MethodBase method, string msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeGenerationHelper.GetMethodException(System.Reflection.MethodBase,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMethodException (method As MethodBase, msg As String) As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Exception ^ GetMethodException(System::Reflection::MethodBase ^ method, System::String ^ msg);" />
      <MemberSignature Language="F#" Value="static member GetMethodException : System.Reflection.MethodBase * string -&gt; Exception" Usage="Mono.CodeGeneration.CodeGenerationHelper.GetMethodException (method, msg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodBase" />
        <Parameter Name="msg" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="msg">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeGenerationHelper.IsNumber(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (t As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(Type ^ t);" />
      <MemberSignature Language="F#" Value="static member IsNumber : Type -&gt; bool" Usage="Mono.CodeGeneration.CodeGenerationHelper.IsNumber t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromPtr">
      <MemberSignature Language="C#" Value="public static void LoadFromPtr (System.Reflection.Emit.ILGenerator ig, Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LoadFromPtr(class System.Reflection.Emit.ILGenerator ig, class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeGenerationHelper.LoadFromPtr(System.Reflection.Emit.ILGenerator,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LoadFromPtr (ig As ILGenerator, t As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LoadFromPtr(System::Reflection::Emit::ILGenerator ^ ig, Type ^ t);" />
      <MemberSignature Language="F#" Value="static member LoadFromPtr : System.Reflection.Emit.ILGenerator * Type -&gt; unit" Usage="Mono.CodeGeneration.CodeGenerationHelper.LoadFromPtr (ig, t)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ig" Type="System.Reflection.Emit.ILGenerator" />
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ig">To be added.</param>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveToPtr">
      <MemberSignature Language="C#" Value="public static void SaveToPtr (System.Reflection.Emit.ILGenerator ig, Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SaveToPtr(class System.Reflection.Emit.ILGenerator ig, class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeGenerationHelper.SaveToPtr(System.Reflection.Emit.ILGenerator,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SaveToPtr (ig As ILGenerator, t As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SaveToPtr(System::Reflection::Emit::ILGenerator ^ ig, Type ^ t);" />
      <MemberSignature Language="F#" Value="static member SaveToPtr : System.Reflection.Emit.ILGenerator * Type -&gt; unit" Usage="Mono.CodeGeneration.CodeGenerationHelper.SaveToPtr (ig, t)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ig" Type="System.Reflection.Emit.ILGenerator" />
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ig">To be added.</param>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
