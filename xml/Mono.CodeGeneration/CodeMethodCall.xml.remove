<Type Name="CodeMethodCall" FullName="Mono.CodeGeneration.CodeMethodCall">
  <TypeSignature Language="C#" Value="public class CodeMethodCall : Mono.CodeGeneration.CodeExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CodeMethodCall extends Mono.CodeGeneration.CodeExpression" />
  <TypeSignature Language="DocId" Value="T:Mono.CodeGeneration.CodeMethodCall" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeMethodCall&#xA;Inherits CodeExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeMethodCall : Mono::CodeGeneration::CodeExpression" />
  <TypeSignature Language="F#" Value="type CodeMethodCall = class&#xA;    inherit CodeExpression" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Mono.CodeGeneration.CodeExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeMethodCall (Mono.CodeGeneration.CodeMethod method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Mono.CodeGeneration.CodeMethod method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeMethodCall.#ctor(Mono.CodeGeneration.CodeMethod,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (method As CodeMethod, ParamArray parameters As CodeExpression())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeMethodCall(Mono::CodeGeneration::CodeMethod ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new Mono.CodeGeneration.CodeMethodCall : Mono.CodeGeneration.CodeMethod * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeMethodCall" Usage="new Mono.CodeGeneration.CodeMethodCall (method, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="method" Type="Mono.CodeGeneration.CodeMethod" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeMethodCall (System.Reflection.MethodInfo method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeMethodCall.#ctor(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (method As MethodInfo, ParamArray parameters As CodeExpression())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeMethodCall(System::Reflection::MethodInfo ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new Mono.CodeGeneration.CodeMethodCall : System.Reflection.MethodInfo * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeMethodCall" Usage="new Mono.CodeGeneration.CodeMethodCall (method, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeMethodCall (Mono.CodeGeneration.CodeExpression target, Mono.CodeGeneration.CodeMethod method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Mono.CodeGeneration.CodeExpression target, class Mono.CodeGeneration.CodeMethod method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeMethodCall.#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeMethod,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (target As CodeExpression, method As CodeMethod, ParamArray parameters As CodeExpression())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeMethodCall(Mono::CodeGeneration::CodeExpression ^ target, Mono::CodeGeneration::CodeMethod ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new Mono.CodeGeneration.CodeMethodCall : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeMethod * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeMethodCall" Usage="new Mono.CodeGeneration.CodeMethodCall (target, method, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="method" Type="Mono.CodeGeneration.CodeMethod" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeMethodCall (Mono.CodeGeneration.CodeExpression target, System.Reflection.MethodBase method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Mono.CodeGeneration.CodeExpression target, class System.Reflection.MethodBase method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeMethodCall.#ctor(Mono.CodeGeneration.CodeExpression,System.Reflection.MethodBase,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (target As CodeExpression, method As MethodBase, ParamArray parameters As CodeExpression())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeMethodCall(Mono::CodeGeneration::CodeExpression ^ target, System::Reflection::MethodBase ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new Mono.CodeGeneration.CodeMethodCall : Mono.CodeGeneration.CodeExpression * System.Reflection.MethodBase * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeMethodCall" Usage="new Mono.CodeGeneration.CodeMethodCall (target, method, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="method" Type="System.Reflection.MethodBase" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeMethodCall (Mono.CodeGeneration.CodeExpression target, string name, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Mono.CodeGeneration.CodeExpression target, string name, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeMethodCall.#ctor(Mono.CodeGeneration.CodeExpression,System.String,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (target As CodeExpression, name As String, ParamArray parameters As CodeExpression())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeMethodCall(Mono::CodeGeneration::CodeExpression ^ target, System::String ^ name, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new Mono.CodeGeneration.CodeMethodCall : Mono.CodeGeneration.CodeExpression * string * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeMethodCall" Usage="new Mono.CodeGeneration.CodeMethodCall (target, name, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeMethodCall (Type type, string name, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, string name, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeMethodCall.#ctor(System.Type,System.String,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeMethodCall(Type ^ type, System::String ^ name, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new Mono.CodeGeneration.CodeMethodCall : Type * string * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeMethodCall" Usage="new Mono.CodeGeneration.CodeMethodCall (type, name, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Generate">
      <MemberSignature Language="C#" Value="public override void Generate (System.Reflection.Emit.ILGenerator gen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Generate(class System.Reflection.Emit.ILGenerator gen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeMethodCall.Generate(System.Reflection.Emit.ILGenerator)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Generate (gen As ILGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Generate(System::Reflection::Emit::ILGenerator ^ gen);" />
      <MemberSignature Language="F#" Value="override this.Generate : System.Reflection.Emit.ILGenerator -&gt; unit" Usage="codeMethodCall.Generate gen" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gen" Type="System.Reflection.Emit.ILGenerator" />
      </Parameters>
      <Docs>
        <param name="gen">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateAsStatement">
      <MemberSignature Language="C#" Value="public override void GenerateAsStatement (System.Reflection.Emit.ILGenerator gen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateAsStatement(class System.Reflection.Emit.ILGenerator gen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeMethodCall.GenerateAsStatement(System.Reflection.Emit.ILGenerator)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateAsStatement (gen As ILGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateAsStatement(System::Reflection::Emit::ILGenerator ^ gen);" />
      <MemberSignature Language="F#" Value="override this.GenerateAsStatement : System.Reflection.Emit.ILGenerator -&gt; unit" Usage="codeMethodCall.GenerateAsStatement gen" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gen" Type="System.Reflection.Emit.ILGenerator" />
      </Parameters>
      <Docs>
        <param name="gen">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResultType">
      <MemberSignature Language="C#" Value="public override Type GetResultType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetResultType() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeMethodCall.GetResultType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetResultType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetResultType();" />
      <MemberSignature Language="F#" Value="override this.GetResultType : unit -&gt; Type" Usage="codeMethodCall.GetResultType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintCode">
      <MemberSignature Language="C#" Value="public override void PrintCode (Mono.CodeGeneration.CodeWriter cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void PrintCode(class Mono.CodeGeneration.CodeWriter cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeMethodCall.PrintCode(Mono.CodeGeneration.CodeWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub PrintCode (cp As CodeWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void PrintCode(Mono::CodeGeneration::CodeWriter ^ cp);" />
      <MemberSignature Language="F#" Value="override this.PrintCode : Mono.CodeGeneration.CodeWriter -&gt; unit" Usage="codeMethodCall.PrintCode cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="Mono.CodeGeneration.CodeWriter" />
      </Parameters>
      <Docs>
        <param name="cp">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
