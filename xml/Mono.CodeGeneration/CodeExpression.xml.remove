<Type Name="CodeExpression" FullName="Mono.CodeGeneration.CodeExpression">
  <TypeSignature Language="C#" Value="public abstract class CodeExpression : Mono.CodeGeneration.CodeItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeExpression extends Mono.CodeGeneration.CodeItem" />
  <TypeSignature Language="DocId" Value="T:Mono.CodeGeneration.CodeExpression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeExpression&#xA;Inherits CodeItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeExpression abstract : Mono::CodeGeneration::CodeItem" />
  <TypeSignature Language="F#" Value="type CodeExpression = class&#xA;    inherit CodeItem" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Mono.CodeGeneration.CodeItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Add (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Add(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.Add(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Add(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member Add : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.Add (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeExpression And (Mono.CodeGeneration.CodeExpression other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CodeGeneration.CodeExpression And(class Mono.CodeGeneration.CodeExpression other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.And(Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (other As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mono::CodeGeneration::CodeExpression ^ And(Mono::CodeGeneration::CodeExpression ^ other);" />
      <MemberSignature Language="F#" Value="member this.And : Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="codeExpression.And other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression AreEqual (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression AreEqual(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.AreEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEqual (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ AreEqual(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member AreEqual : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.AreEqual (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression AreNotEqual (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression AreNotEqual(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.AreNotEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreNotEqual (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ AreNotEqual(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.AreNotEqual (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeExpression ArrayLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CodeGeneration.CodeExpression ArrayLength" />
      <MemberSignature Language="DocId" Value="P:Mono.CodeGeneration.CodeExpression.ArrayLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArrayLength As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Mono::CodeGeneration::CodeExpression ^ ArrayLength { Mono::CodeGeneration::CodeExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ArrayLength : Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.ArrayLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeExpression Call (System.Reflection.MethodInfo method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CodeGeneration.CodeExpression Call(class System.Reflection.MethodInfo method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.Call(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Call (method As MethodInfo, ParamArray parameters As CodeExpression()) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mono::CodeGeneration::CodeExpression ^ Call(System::Reflection::MethodInfo ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Call : System.Reflection.MethodInfo * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeExpression" Usage="codeExpression.Call (method, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeExpression Call (string name, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CodeGeneration.CodeExpression Call(string name, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.Call(System.String,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Call (name As String, ParamArray parameters As CodeExpression()) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mono::CodeGeneration::CodeExpression ^ Call(System::String ^ name, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Call : string * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeExpression" Usage="codeExpression.Call (name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallToString">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeExpression CallToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CodeGeneration.CodeExpression CallToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.CallToString" />
      <MemberSignature Language="VB.NET" Value="Public Function CallToString () As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mono::CodeGeneration::CodeExpression ^ CallToString();" />
      <MemberSignature Language="F#" Value="member this.CallToString : unit -&gt; Mono.CodeGeneration.CodeExpression" Usage="codeExpression.CallToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CastTo">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeExpression CastTo (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CodeGeneration.CodeExpression CastTo(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.CastTo(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mono::CodeGeneration::CodeExpression ^ CastTo(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CastTo : Type -&gt; Mono.CodeGeneration.CodeExpression" Usage="codeExpression.CastTo type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Divide (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Divide(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.Divide(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Divide(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member Divide : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.Divide (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateAsStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateAsStatement (System.Reflection.Emit.ILGenerator gen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateAsStatement(class System.Reflection.Emit.ILGenerator gen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.GenerateAsStatement(System.Reflection.Emit.ILGenerator)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateAsStatement (gen As ILGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateAsStatement(System::Reflection::Emit::ILGenerator ^ gen);" />
      <MemberSignature Language="F#" Value="abstract member GenerateAsStatement : System.Reflection.Emit.ILGenerator -&gt; unit&#xA;override this.GenerateAsStatement : System.Reflection.Emit.ILGenerator -&gt; unit" Usage="codeExpression.GenerateAsStatement gen" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gen" Type="System.Reflection.Emit.ILGenerator" />
      </Parameters>
      <Docs>
        <param name="gen">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResultType">
      <MemberSignature Language="C#" Value="public abstract Type GetResultType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetResultType() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.GetResultType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetResultType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetResultType();" />
      <MemberSignature Language="F#" Value="abstract member GetResultType : unit -&gt; Type" Usage="codeExpression.GetResultType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Is">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeExpression Is (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CodeGeneration.CodeExpression Is(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.Is(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mono::CodeGeneration::CodeExpression ^ Is(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.Is : Type -&gt; Mono.CodeGeneration.CodeExpression" Usage="codeExpression.Is type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterEqualThan">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression IsGreaterEqualThan (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression IsGreaterEqualThan(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsGreaterEqualThan (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ IsGreaterEqualThan(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member IsGreaterEqualThan : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGreaterThan">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression IsGreaterThan (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression IsGreaterThan(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.IsGreaterThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsGreaterThan (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ IsGreaterThan(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member IsGreaterThan : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.IsGreaterThan (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeExpression IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CodeGeneration.CodeExpression IsNull" />
      <MemberSignature Language="DocId" Value="P:Mono.CodeGeneration.CodeExpression.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Mono::CodeGeneration::CodeExpression ^ IsNull { Mono::CodeGeneration::CodeExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.IsNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNumber" />
      <MemberSignature Language="DocId" Value="P:Mono.CodeGeneration.CodeExpression.IsNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNumber As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNumber { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNumber : bool" Usage="Mono.CodeGeneration.CodeExpression.IsNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSmallerEqualThan">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression IsSmallerEqualThan (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression IsSmallerEqualThan(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSmallerEqualThan (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ IsSmallerEqualThan(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member IsSmallerEqualThan : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSmallerThan">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression IsSmallerThan (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression IsSmallerThan(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.IsSmallerThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSmallerThan (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ IsSmallerThan(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member IsSmallerThan : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.IsSmallerThan (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeValueReference this[Mono.CodeGeneration.CodeExpression index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CodeGeneration.CodeValueReference Item(class Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="DocId" Value="P:Mono.CodeGeneration.CodeExpression.Item(Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As CodeExpression) As CodeValueReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Mono::CodeGeneration::CodeValueReference ^ default[Mono::CodeGeneration::CodeExpression ^] { Mono::CodeGeneration::CodeValueReference ^ get(Mono::CodeGeneration::CodeExpression ^ index); };" />
      <MemberSignature Language="F#" Value="member this.Item(Mono.CodeGeneration.CodeExpression) : Mono.CodeGeneration.CodeValueReference" Usage="Mono.CodeGeneration.CodeExpression.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeValueReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeValueReference this[System.Reflection.FieldInfo field] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CodeGeneration.CodeValueReference Item(class System.Reflection.FieldInfo)" />
      <MemberSignature Language="DocId" Value="P:Mono.CodeGeneration.CodeExpression.Item(System.Reflection.FieldInfo)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(field As FieldInfo) As CodeValueReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Mono::CodeGeneration::CodeValueReference ^ default[System::Reflection::FieldInfo ^] { Mono::CodeGeneration::CodeValueReference ^ get(System::Reflection::FieldInfo ^ field); };" />
      <MemberSignature Language="F#" Value="member this.Item(System.Reflection.FieldInfo) : Mono.CodeGeneration.CodeValueReference" Usage="Mono.CodeGeneration.CodeExpression.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeValueReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="field">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeValueReference this[System.Reflection.PropertyInfo prop] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CodeGeneration.CodeValueReference Item(class System.Reflection.PropertyInfo)" />
      <MemberSignature Language="DocId" Value="P:Mono.CodeGeneration.CodeExpression.Item(System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(prop As PropertyInfo) As CodeValueReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Mono::CodeGeneration::CodeValueReference ^ default[System::Reflection::PropertyInfo ^] { Mono::CodeGeneration::CodeValueReference ^ get(System::Reflection::PropertyInfo ^ prop); };" />
      <MemberSignature Language="F#" Value="member this.Item(System.Reflection.PropertyInfo) : Mono.CodeGeneration.CodeValueReference" Usage="Mono.CodeGeneration.CodeExpression.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeValueReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prop" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="prop">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeValueReference this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CodeGeneration.CodeValueReference Item(string)" />
      <MemberSignature Language="DocId" Value="P:Mono.CodeGeneration.CodeExpression.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(name As String) As CodeValueReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Mono::CodeGeneration::CodeValueReference ^ default[System::String ^] { Mono::CodeGeneration::CodeValueReference ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : Mono.CodeGeneration.CodeValueReference" Usage="Mono.CodeGeneration.CodeExpression.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeValueReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemGet">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeValueReference MemGet (System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CodeGeneration.CodeValueReference MemGet(class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.MemGet(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function MemGet (member As MemberInfo) As CodeValueReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mono::CodeGeneration::CodeValueReference ^ MemGet(System::Reflection::MemberInfo ^ member);" />
      <MemberSignature Language="F#" Value="member this.MemGet : System.Reflection.MemberInfo -&gt; Mono.CodeGeneration.CodeValueReference" Usage="codeExpression.MemGet member" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeValueReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="member">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemGet">
      <MemberSignature Language="C#" Value="public Mono.CodeGeneration.CodeValueReference MemGet (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CodeGeneration.CodeValueReference MemGet(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.MemGet(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MemGet (name As String) As CodeValueReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mono::CodeGeneration::CodeValueReference ^ MemGet(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.MemGet : string -&gt; Mono.CodeGeneration.CodeValueReference" Usage="codeExpression.MemGet name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeValueReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Multiply (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Multiply(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.Multiply(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Multiply(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member Multiply : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.Multiply (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Not (Mono.CodeGeneration.CodeExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Not(class Mono.CodeGeneration.CodeExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.Not(Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Not (e As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Not(Mono::CodeGeneration::CodeExpression ^ e);" />
      <MemberSignature Language="F#" Value="static member Not : Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.Not e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression NullValue (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression NullValue(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.NullValue(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ NullValue(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member NullValue : Type -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.NullValue type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Subtract (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Subtract(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeExpression.Subtract(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Subtract(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member Subtract : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.CodeExpression.Subtract (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
