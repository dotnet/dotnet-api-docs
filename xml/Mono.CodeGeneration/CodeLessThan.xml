<Type Name="CodeLessThan" FullName="Mono.CodeGeneration.CodeLessThan">
  <TypeSignature Language="C#" Value="public class CodeLessThan : Mono.CodeGeneration.CodeBinaryComparison" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CodeLessThan extends Mono.CodeGeneration.CodeBinaryComparison" />
  <TypeSignature Language="DocId" Value="T:Mono.CodeGeneration.CodeLessThan" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeLessThan&#xA;Inherits CodeBinaryComparison" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeLessThan : Mono::CodeGeneration::CodeBinaryComparison" />
  <TypeSignature Language="F#" Value="type CodeLessThan = class&#xA;    inherit CodeBinaryComparison" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Mono.CodeGeneration.CodeBinaryComparison</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeLessThan (Mono.CodeGeneration.CodeExpression exp1, Mono.CodeGeneration.CodeExpression exp2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Mono.CodeGeneration.CodeExpression exp1, class Mono.CodeGeneration.CodeExpression exp2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeLessThan.#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exp1 As CodeExpression, exp2 As CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeLessThan(Mono::CodeGeneration::CodeExpression ^ exp1, Mono::CodeGeneration::CodeExpression ^ exp2);" />
      <MemberSignature Language="F#" Value="new Mono.CodeGeneration.CodeLessThan : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeLessThan" Usage="new Mono.CodeGeneration.CodeLessThan (exp1, exp2)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exp1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="exp2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="exp1">To be added.</param>
        <param name="exp2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Generate">
      <MemberSignature Language="C#" Value="public override void Generate (System.Reflection.Emit.ILGenerator gen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Generate(class System.Reflection.Emit.ILGenerator gen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeLessThan.Generate(System.Reflection.Emit.ILGenerator)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Generate (gen As ILGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Generate(System::Reflection::Emit::ILGenerator ^ gen);" />
      <MemberSignature Language="F#" Value="override this.Generate : System.Reflection.Emit.ILGenerator -&gt; unit" Usage="codeLessThan.Generate gen" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gen" Type="System.Reflection.Emit.ILGenerator" />
      </Parameters>
      <Docs>
        <param name="gen">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateForBranch">
      <MemberSignature Language="C#" Value="public override void GenerateForBranch (System.Reflection.Emit.ILGenerator gen, System.Reflection.Emit.Label label, bool branchCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateForBranch(class System.Reflection.Emit.ILGenerator gen, valuetype System.Reflection.Emit.Label label, bool branchCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.CodeLessThan.GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateForBranch (gen As ILGenerator, label As Label, branchCase As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateForBranch(System::Reflection::Emit::ILGenerator ^ gen, System::Reflection::Emit::Label label, bool branchCase);" />
      <MemberSignature Language="F#" Value="override this.GenerateForBranch : System.Reflection.Emit.ILGenerator * System.Reflection.Emit.Label * bool -&gt; unit" Usage="codeLessThan.GenerateForBranch (gen, label, branchCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gen" Type="System.Reflection.Emit.ILGenerator" />
        <Parameter Name="label" Type="System.Reflection.Emit.Label" />
        <Parameter Name="branchCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="gen">To be added.</param>
        <param name="label">To be added.</param>
        <param name="branchCase">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
