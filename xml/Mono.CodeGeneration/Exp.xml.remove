<Type Name="Exp" FullName="Mono.CodeGeneration.Exp">
  <TypeSignature Language="C#" Value="public class Exp" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Exp extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Mono.CodeGeneration.Exp" />
  <TypeSignature Language="VB.NET" Value="Public Class Exp" />
  <TypeSignature Language="C++ CLI" Value="public ref class Exp" />
  <TypeSignature Language="F#" Value="type Exp = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression And (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression And(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.And(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ And(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member And : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.And (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression And (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2, Mono.CodeGeneration.CodeExpression e3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression And(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2, class Mono.CodeGeneration.CodeExpression e3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.And(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (e1 As CodeExpression, e2 As CodeExpression, e3 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ And(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2, Mono::CodeGeneration::CodeExpression ^ e3);" />
      <MemberSignature Language="F#" Value="static member And : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.And (e1, e2, e3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e3" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <param name="e3">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Call (Mono.CodeGeneration.CodeMethod method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Call(class Mono.CodeGeneration.CodeMethod method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.Call(Mono.CodeGeneration.CodeMethod,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As CodeMethod, ParamArray parameters As CodeExpression()) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Call(Mono::CodeGeneration::CodeMethod ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Call : Mono.CodeGeneration.CodeMethod * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.Call (method, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.CodeGeneration.CodeMethod" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Call (System.Reflection.MethodInfo method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Call(class System.Reflection.MethodInfo method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.Call(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, ParamArray parameters As CodeExpression()) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Call(System::Reflection::MethodInfo ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.Call (method, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Call (Mono.CodeGeneration.CodeExpression target, Mono.CodeGeneration.CodeMethod method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Call(class Mono.CodeGeneration.CodeExpression target, class Mono.CodeGeneration.CodeMethod method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.Call(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeMethod,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (target As CodeExpression, method As CodeMethod, ParamArray parameters As CodeExpression()) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Call(Mono::CodeGeneration::CodeExpression ^ target, Mono::CodeGeneration::CodeMethod ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Call : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeMethod * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.Call (target, method, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="method" Type="Mono.CodeGeneration.CodeMethod" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Call (Mono.CodeGeneration.CodeExpression target, System.Reflection.MethodInfo method, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Call(class Mono.CodeGeneration.CodeExpression target, class System.Reflection.MethodInfo method, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.Call(Mono.CodeGeneration.CodeExpression,System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (target As CodeExpression, method As MethodInfo, ParamArray parameters As CodeExpression()) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Call(Mono::CodeGeneration::CodeExpression ^ target, System::Reflection::MethodInfo ^ method, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Call : Mono.CodeGeneration.CodeExpression * System.Reflection.MethodInfo * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.Call (target, method, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="method">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Call (Mono.CodeGeneration.CodeExpression target, string name, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Call(class Mono.CodeGeneration.CodeExpression target, string name, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.Call(Mono.CodeGeneration.CodeExpression,System.String,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (target As CodeExpression, name As String, ParamArray parameters As CodeExpression()) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Call(Mono::CodeGeneration::CodeExpression ^ target, System::String ^ name, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Call : Mono.CodeGeneration.CodeExpression * string * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.Call (target, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Call (Type type, string name, params Mono.CodeGeneration.CodeExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Call(class System.Type type, string name, class Mono.CodeGeneration.CodeExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.Call(System.Type,System.String,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Call(Type ^ type, System::String ^ name, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Call : Type * string * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.Call (type, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inc">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeValueReference Inc (Mono.CodeGeneration.CodeValueReference e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeValueReference Inc(class Mono.CodeGeneration.CodeValueReference e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.Inc(Mono.CodeGeneration.CodeValueReference)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Inc (e As CodeValueReference) As CodeValueReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeValueReference ^ Inc(Mono::CodeGeneration::CodeValueReference ^ e);" />
      <MemberSignature Language="F#" Value="static member Inc : Mono.CodeGeneration.CodeValueReference -&gt; Mono.CodeGeneration.CodeValueReference" Usage="Mono.CodeGeneration.Exp.Inc e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeValueReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Mono.CodeGeneration.CodeValueReference" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Literal (object ob);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Literal(object ob) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.Literal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (ob As Object) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Literal(System::Object ^ ob);" />
      <MemberSignature Language="F#" Value="static member Literal : obj -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.Literal ob" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ob" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ob">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Literal (string ob);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Literal(string ob) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.Literal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (ob As String) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Literal(System::String ^ ob);" />
      <MemberSignature Language="F#" Value="static member Literal : string -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.Literal ob" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ob" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ob">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression New (Type type, params Mono.CodeGeneration.CodeExpression[] pars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression New(class System.Type type, class Mono.CodeGeneration.CodeExpression[] pars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.New(System.Type,Mono.CodeGeneration.CodeExpression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ New(Type ^ type, ... cli::array &lt;Mono::CodeGeneration::CodeExpression ^&gt; ^ pars);" />
      <MemberSignature Language="F#" Value="static member New : Type * Mono.CodeGeneration.CodeExpression[] -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.New (type, pars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="pars" Type="Mono.CodeGeneration.CodeExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="pars">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewArray">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression NewArray (Type type, Mono.CodeGeneration.CodeExpression size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression NewArray(class System.Type type, class Mono.CodeGeneration.CodeExpression size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.NewArray(System.Type,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ NewArray(Type ^ type, Mono::CodeGeneration::CodeExpression ^ size);" />
      <MemberSignature Language="F#" Value="static member NewArray : Type * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.NewArray (type, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="size" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static Mono.CodeGeneration.CodeExpression Or (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CodeGeneration.CodeExpression Or(class Mono.CodeGeneration.CodeExpression e1, class Mono.CodeGeneration.CodeExpression e2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CodeGeneration.Exp.Or(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (e1 As CodeExpression, e2 As CodeExpression) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Mono::CodeGeneration::CodeExpression ^ Or(Mono::CodeGeneration::CodeExpression ^ e1, Mono::CodeGeneration::CodeExpression ^ e2);" />
      <MemberSignature Language="F#" Value="static member Or : Mono.CodeGeneration.CodeExpression * Mono.CodeGeneration.CodeExpression -&gt; Mono.CodeGeneration.CodeExpression" Usage="Mono.CodeGeneration.Exp.Or (e1, e2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CodeGeneration.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e1" Type="Mono.CodeGeneration.CodeExpression" />
        <Parameter Name="e2" Type="Mono.CodeGeneration.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e1">To be added.</param>
        <param name="e2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
