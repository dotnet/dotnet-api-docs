<Type Name="ILoggerProviderConfigurationFactory" FullName="Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory">
  <TypeSignature Language="C#" Value="public interface ILoggerProviderConfigurationFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILoggerProviderConfigurationFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILoggerProviderConfigurationFactory" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILoggerProviderConfigurationFactory" />
  <TypeSignature Language="F#" Value="type ILoggerProviderConfigurationFactory = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.Configuration</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Allows access to configuration section associated with logger provider.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetConfiguration">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Configuration.IConfiguration GetConfiguration (Type providerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Extensions.Configuration.IConfiguration GetConfiguration(class System.Type providerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory.GetConfiguration(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConfiguration (providerType As Type) As IConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Extensions::Configuration::IConfiguration ^ GetConfiguration(Type ^ providerType);" />
      <MemberSignature Language="F#" Value="abstract member GetConfiguration : Type -&gt; Microsoft.Extensions.Configuration.IConfiguration" Usage="iLoggerProviderConfigurationFactory.GetConfiguration providerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Configuration</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Configuration.IConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="providerType">The logger provider type</param>
        <summary>Return configuration section associated with logger provider.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> for the given <paramref name="providerType" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
