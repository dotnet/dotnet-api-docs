<Type Name="ISoapServerVRoot" FullName="System.EnterpriseServices.Internal.ISoapServerVRoot">
  <TypeSignature Language="C#" Value="public interface ISoapServerVRoot" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISoapServerVRoot" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.Internal.ISoapServerVRoot" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISoapServerVRoot" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISoapServerVRoot" />
  <TypeSignature Language="F#" Value="type ISoapServerVRoot = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("A31B6577-71D2-4344-AEDF-ADC1B0DC5347")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Publishes authenticated, encrypted SOAP virtual roots on servers.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 See <xref:System.EnterpriseServices.Internal.SoapServerVRoot> for the default implementation.  
  
 <xref:System.EnterpriseServices.Internal.ISoapServerVRoot> is used internally by the .NET Framework. You do not need to use it directly in your code.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateVirtualRootEx">
      <MemberSignature Language="C#" Value="public void CreateVirtualRootEx (string rootWebServer, string inBaseUrl, string inVirtualRoot, string homePage, string discoFile, string secureSockets, string authentication, string operation, out string baseUrl, out string virtualRoot, out string physicalPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateVirtualRootEx(string rootWebServer, string inBaseUrl, string inVirtualRoot, string homePage, string discoFile, string secureSockets, string authentication, string operation, [out] string&amp; baseUrl, [out] string&amp; virtualRoot, [out] string&amp; physicalPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ISoapServerVRoot.CreateVirtualRootEx(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateVirtualRootEx (rootWebServer As String, inBaseUrl As String, inVirtualRoot As String, homePage As String, discoFile As String, secureSockets As String, authentication As String, operation As String, ByRef baseUrl As String, ByRef virtualRoot As String, ByRef physicalPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateVirtualRootEx(System::String ^ rootWebServer, System::String ^ inBaseUrl, System::String ^ inVirtualRoot, System::String ^ homePage, System::String ^ discoFile, System::String ^ secureSockets, System::String ^ authentication, System::String ^ operation, [Runtime::InteropServices::Out] System::String ^ % baseUrl, [Runtime::InteropServices::Out] System::String ^ % virtualRoot, [Runtime::InteropServices::Out] System::String ^ % physicalPath);" />
      <MemberSignature Language="F#" Value="abstract member CreateVirtualRootEx : string * string * string * string * string * string * string * string *  *  *  -&gt; unit" Usage="iSoapServerVRoot.CreateVirtualRootEx (rootWebServer, inBaseUrl, inVirtualRoot, homePage, discoFile, secureSockets, authentication, operation, baseUrl, virtualRoot, physicalPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootWebServer" Type="System.String" />
        <Parameter Name="inBaseUrl" Type="System.String" />
        <Parameter Name="inVirtualRoot" Type="System.String" />
        <Parameter Name="homePage" Type="System.String" />
        <Parameter Name="discoFile" Type="System.String" />
        <Parameter Name="secureSockets" Type="System.String" />
        <Parameter Name="authentication" Type="System.String" />
        <Parameter Name="operation" Type="System.String" />
        <Parameter Name="baseUrl" Type="System.String" RefType="out" />
        <Parameter Name="virtualRoot" Type="System.String" RefType="out" />
        <Parameter Name="physicalPath" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rootWebServer">The root Web server.</param>
        <param name="inBaseUrl">The base URL that contains the virtual root.</param>
        <param name="inVirtualRoot">The name of the virtual root.</param>
        <param name="homePage">
          <see langword="true" /> if the <see langword="EnableDefaultDoc" /> property is to be set; otherwise, <see langword="false" />.</param>
        <param name="discoFile">
          <see langword="true" /> if a default discovery file is to be created; <see langword="false" /> if there is to be no discovery file. If <see langword="false" /> and a Default.disco file exists, the file is deleted.</param>
        <param name="secureSockets">
          <see langword="true" /> if SSL encryption is required; otherwise, <see langword="false" />.</param>
        <param name="authentication">Specify "anonymous" if no authentication is to be used (anonymous user). Otherwise, specify an empty string.</param>
        <param name="operation">Not used. Specify <see langword="null" /> for this parameter.</param>
        <param name="baseUrl">When this method returns, this parameter contains the base URL.</param>
        <param name="virtualRoot">When this method returns, this parameter contains the name of the virtual root.</param>
        <param name="physicalPath">When this method returns, this parameter contains the disk address of the Virtual Root directory.</param>
        <summary>Creates a SOAP virtual root with security options.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVirtualRootEx">
      <MemberSignature Language="C#" Value="public void DeleteVirtualRootEx (string rootWebServer, string baseUrl, string virtualRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteVirtualRootEx(string rootWebServer, string baseUrl, string virtualRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ISoapServerVRoot.DeleteVirtualRootEx(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteVirtualRootEx (rootWebServer As String, baseUrl As String, virtualRoot As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteVirtualRootEx(System::String ^ rootWebServer, System::String ^ baseUrl, System::String ^ virtualRoot);" />
      <MemberSignature Language="F#" Value="abstract member DeleteVirtualRootEx : string * string * string -&gt; unit" Usage="iSoapServerVRoot.DeleteVirtualRootEx (rootWebServer, baseUrl, virtualRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootWebServer" Type="System.String" />
        <Parameter Name="baseUrl" Type="System.String" />
        <Parameter Name="virtualRoot" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rootWebServer">The root Web server.</param>
        <param name="baseUrl">The base URL that contains the virtual root.</param>
        <param name="virtualRoot">The name of the virtual root.</param>
        <summary>Deletes a virtual root. Not fully implemented.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The functionality to delete a virtual root is not currently available in the implementation of this interface. The implementation returns without deleting the root.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available.</exception>
        <exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to identify the system directory failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetVirtualRootStatus">
      <MemberSignature Language="C#" Value="public void GetVirtualRootStatus (string rootWebServer, string inBaseUrl, string inVirtualRoot, out string exists, out string secureSockets, out string windowsAuth, out string anonymous, out string homePage, out string discoFile, out string physicalPath, out string baseUrl, out string virtualRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetVirtualRootStatus(string rootWebServer, string inBaseUrl, string inVirtualRoot, [out] string&amp; exists, [out] string&amp; secureSockets, [out] string&amp; windowsAuth, [out] string&amp; anonymous, [out] string&amp; homePage, [out] string&amp; discoFile, [out] string&amp; physicalPath, [out] string&amp; baseUrl, [out] string&amp; virtualRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ISoapServerVRoot.GetVirtualRootStatus(System.String,System.String,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetVirtualRootStatus (rootWebServer As String, inBaseUrl As String, inVirtualRoot As String, ByRef exists As String, ByRef secureSockets As String, ByRef windowsAuth As String, ByRef anonymous As String, ByRef homePage As String, ByRef discoFile As String, ByRef physicalPath As String, ByRef baseUrl As String, ByRef virtualRoot As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetVirtualRootStatus(System::String ^ rootWebServer, System::String ^ inBaseUrl, System::String ^ inVirtualRoot, [Runtime::InteropServices::Out] System::String ^ % exists, [Runtime::InteropServices::Out] System::String ^ % secureSockets, [Runtime::InteropServices::Out] System::String ^ % windowsAuth, [Runtime::InteropServices::Out] System::String ^ % anonymous, [Runtime::InteropServices::Out] System::String ^ % homePage, [Runtime::InteropServices::Out] System::String ^ % discoFile, [Runtime::InteropServices::Out] System::String ^ % physicalPath, [Runtime::InteropServices::Out] System::String ^ % baseUrl, [Runtime::InteropServices::Out] System::String ^ % virtualRoot);" />
      <MemberSignature Language="F#" Value="abstract member GetVirtualRootStatus : string * string * string *  *  *  *  *  *  *  *  *  -&gt; unit" Usage="iSoapServerVRoot.GetVirtualRootStatus (rootWebServer, inBaseUrl, inVirtualRoot, exists, secureSockets, windowsAuth, anonymous, homePage, discoFile, physicalPath, baseUrl, virtualRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootWebServer" Type="System.String" />
        <Parameter Name="inBaseUrl" Type="System.String" />
        <Parameter Name="inVirtualRoot" Type="System.String" />
        <Parameter Name="exists" Type="System.String" RefType="out" />
        <Parameter Name="secureSockets" Type="System.String" RefType="out" />
        <Parameter Name="windowsAuth" Type="System.String" RefType="out" />
        <Parameter Name="anonymous" Type="System.String" RefType="out" />
        <Parameter Name="homePage" Type="System.String" RefType="out" />
        <Parameter Name="discoFile" Type="System.String" RefType="out" />
        <Parameter Name="physicalPath" Type="System.String" RefType="out" />
        <Parameter Name="baseUrl" Type="System.String" RefType="out" />
        <Parameter Name="virtualRoot" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rootWebServer">The root Web server.</param>
        <param name="inBaseUrl">The base URL that contains the virtual root.</param>
        <param name="inVirtualRoot">The name of the virtual root.</param>
        <param name="exists">When this method returns, this parameter contains a <see langword="true" /> if the virtual directory exists; otherwise, <see langword="false" />.</param>
        <param name="secureSockets">When this method returns, this parameter contains a <see langword="true" /> if SSL encryption is required; otherwise, <see langword="false" />.</param>
        <param name="windowsAuth">When this method returns, this parameter contains <see langword="true" /> if Windows authentication is set, otherwise, <see langword="false" />.</param>
        <param name="anonymous">When this method returns, this parameter contains <see langword="true" /> if no authentication is set (anonymous user); otherwise, <see langword="false" />.</param>
        <param name="homePage">When this method returns, this parameter contains a <see langword="true" /> if the Virtual Root directory's <see langword="EnableDefaultDoc" /> property is set; otherwise, <see langword="false" />.</param>
        <param name="discoFile">When this method returns, this parameter contains a <see langword="true" /> if a Default.disco file exists; otherwise, <see langword="false" />.</param>
        <param name="physicalPath">When this method returns, this parameter contains the disk address of the Virtual Root directory.</param>
        <param name="baseUrl">When this method returns, this parameter contains the base URL.</param>
        <param name="virtualRoot">When this method returns, this parameter contains the name of the virtual root.</param>
        <summary>Returns the security status of an existing SOAP virtual root.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
