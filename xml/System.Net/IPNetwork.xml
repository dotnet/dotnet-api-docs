<Type Name="IPNetwork" FullName="System.Net.IPNetwork">
  <TypeSignature Language="C#" Value="public readonly struct IPNetwork : IEquatable&lt;System.Net.IPNetwork&gt;, IParsable&lt;System.Net.IPNetwork&gt;, ISpanFormattable, ISpanParsable&lt;System.Net.IPNetwork&gt;, IUtf8SpanFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit IPNetwork extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Net.IPNetwork&gt;, class System.IFormattable, class System.IParsable`1&lt;valuetype System.Net.IPNetwork&gt;, class System.ISpanFormattable, class System.ISpanParsable`1&lt;valuetype System.Net.IPNetwork&gt;, class System.IUtf8SpanFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Net.IPNetwork" />
  <TypeSignature Language="VB.NET" Value="Public Structure IPNetwork&#xA;Implements IEquatable(Of IPNetwork), IParsable(Of IPNetwork), ISpanFormattable, ISpanParsable(Of IPNetwork), IUtf8SpanFormattable" />
  <TypeSignature Language="F#" Value="type IPNetwork = struct&#xA;    interface IFormattable&#xA;    interface IParsable&lt;IPNetwork&gt;&#xA;    interface ISpanFormattable&#xA;    interface ISpanParsable&lt;IPNetwork&gt;&#xA;    interface IUtf8SpanFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class IPNetwork : IEquatable&lt;System::Net::IPNetwork&gt;, IParsable&lt;System::Net::IPNetwork&gt;, ISpanFormattable, ISpanParsable&lt;System::Net::IPNetwork&gt;, IUtf8SpanFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Primitives</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Net.IPNetwork&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IParsable&lt;System.Net.IPNetwork&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanParsable&lt;System.Net.IPNetwork&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IUtf8SpanFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an IP network with an <see cref="T:System.Net.IPAddress" /> containing the network prefix and an <see cref="T:System.Int32" /> defining the prefix length.</summary>
    <remarks>This type disallows arbitrary IP-address/prefix-length CIDR pairs. <see cref="P:System.Net.IPNetwork.BaseAddress" /> must be defined so that all bits after the network prefix are set to zero.
 In other words, <see cref="P:System.Net.IPNetwork.BaseAddress" /> is always the first usable address of the network.
 The constructor and the parsing methods will throw in case there are non-zero bits after the prefix.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPNetwork (System.Net.IPAddress baseAddress, int prefixLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress baseAddress, int32 prefixLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (baseAddress As IPAddress, prefixLength As Integer)" />
      <MemberSignature Language="F#" Value="new System.Net.IPNetwork : System.Net.IPAddress * int -&gt; System.Net.IPNetwork" Usage="new System.Net.IPNetwork (baseAddress, prefixLength)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPNetwork(System::Net::IPAddress ^ baseAddress, int prefixLength);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="baseAddress" Type="System.Net.IPAddress" />
        <Parameter Name="prefixLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="baseAddress">The <see cref="T:System.Net.IPAddress" /> that represents the prefix of the network.</param>
        <param name="prefixLength">The length of the prefix in bits.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.IPNetwork" /> class with the specified <see cref="T:System.Net.IPAddress" /> and prefix length.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The specified <paramref name="baseAddress" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="prefixLength" /> is smaller than `0` or longer than maximum length of <paramref name="prefixLength" />'s <see cref="T:System.Net.Sockets.AddressFamily" />.</exception>
        <exception cref="T:System.ArgumentException">The specified <paramref name="baseAddress" /> has non-zero bits after the network prefix.</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress BaseAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPNetwork.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseAddress As IPAddress" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : System.Net.IPAddress" Usage="System.Net.IPNetwork.BaseAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ BaseAddress { System::Net::IPAddress ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Net.IPAddress" /> that represents the prefix of the network.</summary>
        <value>The <see cref="T:System.Net.IPAddress" /> that represents the prefix of the network.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.Contains(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (address As IPAddress) As Boolean" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Net.IPAddress -&gt; bool" Usage="iPNetwork.Contains address" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Net::IPAddress ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">The <see cref="T:System.Net.IPAddress" /> to check.</param>
        <summary>Determines whether a given <see cref="T:System.Net.IPAddress" /> is part of the network.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Net.IPAddress" /> is part of the network; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The specified <paramref name="address" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Net.IPNetwork other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Net.IPNetwork other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.Equals(System.Net.IPNetwork)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As IPNetwork) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Net.IPNetwork -&gt; bool" Usage="iPNetwork.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Net::IPNetwork other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Net.IPNetwork" />
      </Parameters>
      <Docs>
        <param name="other">An object to compare with this object.</param>
        <summary>Indicates whether the current object is equal to another object of the same type.</summary>
        <returns>
          <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.IPNetwork" /> instance is uninitialized.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="iPNetwork.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="obj">The <see cref="T:System.Net.IPNetwork" /> instance to compare to this instance.</param>
        <summary>Determines whether two <see cref="T:System.Net.IPNetwork" /> instances are equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> is an <see cref="T:System.Net.IPNetwork" /> instance and the networks are equal; otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Net.IPNetwork" /> instance is uninitialized.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="iPNetwork.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>An integer hash value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Net.IPNetwork left, System.Net.IPNetwork right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Net.IPNetwork left, valuetype System.Net.IPNetwork right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.op_Equality(System.Net.IPNetwork,System.Net.IPNetwork)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As IPNetwork, right As IPNetwork) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Net.IPNetwork * System.Net.IPNetwork -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Net::IPNetwork left, System::Net::IPNetwork right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Net.IPNetwork" />
        <Parameter Name="right" Type="System.Net.IPNetwork" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether the specified instances of <see cref="T:System.Net.IPNetwork" /> are equal.</summary>
        <returns>
          <see langword="true" /> if the networks are equal; otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Net.IPNetwork left, System.Net.IPNetwork right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Net.IPNetwork left, valuetype System.Net.IPNetwork right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.op_Inequality(System.Net.IPNetwork,System.Net.IPNetwork)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As IPNetwork, right As IPNetwork) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Net.IPNetwork * System.Net.IPNetwork -&gt; bool" Usage="System.Net.IPNetwork.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Net::IPNetwork left, System::Net::IPNetwork right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Net.IPNetwork" />
        <Parameter Name="right" Type="System.Net.IPNetwork" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether the specified instances of <see cref="T:System.Net.IPNetwork" /> are not equal.</summary>
        <returns>
          <see langword="true" /> if the networks are not equal; otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.IPNetwork Parse (ReadOnlySpan&lt;char&gt; s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Net.IPNetwork Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.Parse(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char)) As IPNetwork" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; -&gt; System.Net.IPNetwork" Usage="System.Net.IPNetwork.Parse s" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IPNetwork Parse(ReadOnlySpan&lt;char&gt; s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPNetwork</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="s">A character span that defines an IP network in CIDR notation.</param>
        <summary>Converts a CIDR character span to an <see cref="T:System.Net.IPNetwork" /> instance.</summary>
        <returns>An <see cref="T:System.Net.IPNetwork" /> instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not a valid CIDR network string, or the address contains non-zero bits after the network prefix.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.IPNetwork Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Net.IPNetwork Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As IPNetwork" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Net.IPNetwork" Usage="System.Net.IPNetwork.Parse s" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IPNetwork Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPNetwork</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A <see cref="T:System.String" /> that defines an IP network in CIDR notation.</param>
        <summary>Converts a CIDR <see cref="T:System.String" /> to an <see cref="T:System.Net.IPNetwork" /> instance.</summary>
        <returns>An <see cref="T:System.Net.IPNetwork" /> instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The specified string is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not a valid CIDR network string, or the address contains non-zero bits after the network prefix.</exception>
      </Docs>
    </Member>
    <Member MemberName="PrefixLength">
      <MemberSignature Language="C#" Value="public int PrefixLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PrefixLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPNetwork.PrefixLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrefixLength As Integer" />
      <MemberSignature Language="F#" Value="member this.PrefixLength : int" Usage="System.Net.IPNetwork.PrefixLength" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PrefixLength { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the length of the network prefix in bits.</summary>
        <value>The length of the network prefix in bits.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="F#" Value="abstract member System.IFormattable.ToString : string * IFormatProvider -&gt; string&#xA;override this.System.IFormattable.ToString : string * IFormatProvider -&gt; string" Usage="iPNetwork.System.IFormattable.ToString (format, provider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">The format to use.   
 -or-   
 A <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
        <param name="provider">The provider to use to format the value.   
 -or-   
 A <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
        <summary>Formats the value of the current instance using the specified format.</summary>
        <returns>The value of the current instance in the specified format.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IParsable&lt;System.Net.IPNetwork&gt;.Parse">
      <MemberSignature Language="C#" Value="static System.Net.IPNetwork IParsable&lt;IPNetwork&gt;.Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method static hidebysig valuetype System.Net.IPNetwork System.IParsable&lt;System.Net.IPNetwork&gt;.Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.System#IParsable&lt;System#Net#IPNetwork&gt;#Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value=" Shared Function Parse (s As String, provider As IFormatProvider) As IPNetwork Implements IParsable(Of IPNetwork).Parse" />
      <MemberSignature Language="F#" Value="static member System.IParsable&lt;System.Net.IPNetwork&gt;.Parse : string * IFormatProvider -&gt; System.Net.IPNetwork" Usage="System.Net.IPNetwork.System.IParsable&lt;System.Net.IPNetwork&gt;.Parse (s, provider)" />
      <MemberSignature Language="C++ CLI" Value=" static System::Net::IPNetwork System.IParsable&lt;System.Net.IPNetwork&gt;.Parse(System::String ^ s, IFormatProvider ^ provider) = IParsable&lt;System::Net::IPNetwork&gt;::Parse;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IParsable`1.Parse(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPNetwork</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNull]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">The string to parse.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <summary>Parses a string into a value.</summary>
        <returns>The result of parsing <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IParsable&lt;System.Net.IPNetwork&gt;.TryParse">
      <MemberSignature Language="C#" Value="static bool IParsable&lt;IPNetwork&gt;.TryParse (string s, IFormatProvider provider, out System.Net.IPNetwork result);" />
      <MemberSignature Language="ILAsm" Value=".method static hidebysig bool System.IParsable&lt;System.Net.IPNetwork&gt;.TryParse(string s, class System.IFormatProvider provider, [out] valuetype System.Net.IPNetwork&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.System#IParsable&lt;System#Net#IPNetwork&gt;#TryParse(System.String,System.IFormatProvider,System.Net.IPNetwork@)" />
      <MemberSignature Language="VB.NET" Value=" Shared Function TryParse (s As String, provider As IFormatProvider, ByRef result As IPNetwork) As Boolean Implements IParsable(Of IPNetwork).TryParse" />
      <MemberSignature Language="F#" Value="static member System.IParsable&lt;System.Net.IPNetwork&gt;.TryParse : string * IFormatProvider * IPNetwork -&gt; bool" Usage="System.Net.IPNetwork.System.IParsable&lt;System.Net.IPNetwork&gt;.TryParse (s, provider, result)" />
      <MemberSignature Language="C++ CLI" Value=" static bool System.IParsable&lt;System.Net.IPNetwork&gt;.TryParse(System::String ^ s, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Net::IPNetwork % result) = IParsable&lt;System::Net::IPNetwork&gt;::TryParse;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Net.IPNetwork" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">The string to parse.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
        <summary>Tries to parse a string into an <see cref="T:System.Net.IPNetwork" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ISpanFormattable.TryFormat">
      <MemberSignature Language="C#" Value="bool ISpanFormattable.TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.ISpanFormattable.TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.System#ISpanFormattable#TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, format As ReadOnlySpan(Of Char), provider As IFormatProvider) As Boolean Implements ISpanFormattable.TryFormat" />
      <MemberSignature Language="F#" Value="abstract member System.ISpanFormattable.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool&#xA;override this.System.ISpanFormattable.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="iPNetwork.System.ISpanFormattable.TryFormat (destination, charsWritten, format, provider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.ISpanFormattable.TryFormat(Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider) = ISpanFormattable::TryFormat;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ISpanFormattable.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">The span in which to write this instance's value formatted as a span of characters.</param>
        <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination" />.</param>
        <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
        <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
        <summary>Tries to format the value of the current instance into the provided span of characters.</summary>
        <returns>
          <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ISpanParsable&lt;System.Net.IPNetwork&gt;.Parse">
      <MemberSignature Language="C#" Value="static System.Net.IPNetwork ISpanParsable&lt;IPNetwork&gt;.Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method static hidebysig valuetype System.Net.IPNetwork System.ISpanParsable&lt;System.Net.IPNetwork&gt;.Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.System#ISpanParsable&lt;System#Net#IPNetwork&gt;#Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value=" Shared Function Parse (s As ReadOnlySpan(Of Char), provider As IFormatProvider) As IPNetwork Implements ISpanParsable(Of IPNetwork).Parse" />
      <MemberSignature Language="F#" Value="static member System.ISpanParsable&lt;System.Net.IPNetwork&gt;.Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; System.Net.IPNetwork" Usage="System.Net.IPNetwork.System.ISpanParsable&lt;System.Net.IPNetwork&gt;.Parse (s, provider)" />
      <MemberSignature Language="C++ CLI" Value=" static System::Net::IPNetwork System.ISpanParsable&lt;System.Net.IPNetwork&gt;.Parse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider) = ISpanParsable&lt;System::Net::IPNetwork&gt;::Parse;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ISpanParsable`1.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPNetwork</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">The span of characters to parse.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <summary>Parses a span of characters into a value.</summary>
        <returns>The result of parsing <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ISpanParsable&lt;System.Net.IPNetwork&gt;.TryParse">
      <MemberSignature Language="C#" Value="static bool ISpanParsable&lt;IPNetwork&gt;.TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, out System.Net.IPNetwork result);" />
      <MemberSignature Language="ILAsm" Value=".method static hidebysig bool System.ISpanParsable&lt;System.Net.IPNetwork&gt;.TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, [out] valuetype System.Net.IPNetwork&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.System#ISpanParsable&lt;System#Net#IPNetwork&gt;#TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Net.IPNetwork@)" />
      <MemberSignature Language="VB.NET" Value=" Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, ByRef result As IPNetwork) As Boolean Implements ISpanParsable(Of IPNetwork).TryParse" />
      <MemberSignature Language="F#" Value="static member System.ISpanParsable&lt;System.Net.IPNetwork&gt;.TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * IPNetwork -&gt; bool" Usage="System.Net.IPNetwork.System.ISpanParsable&lt;System.Net.IPNetwork&gt;.TryParse (s, provider, result)" />
      <MemberSignature Language="C++ CLI" Value=" static bool System.ISpanParsable&lt;System.Net.IPNetwork&gt;.TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Net::IPNetwork % result) = ISpanParsable&lt;System::Net::IPNetwork&gt;::TryParse;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Net.IPNetwork" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">The span of characters to parse.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
        <summary>Tries to parse a span of characters into a value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IUtf8SpanFormattable.TryFormat">
      <MemberSignature Language="C#" Value="bool IUtf8SpanFormattable.TryFormat (Span&lt;byte&gt; utf8Destination, out int bytesWritten, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IUtf8SpanFormattable.TryFormat(valuetype System.Span`1&lt;unsigned int8&gt; utf8Destination, [out] int32&amp; bytesWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.System#IUtf8SpanFormattable#TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function TryFormat (utf8Destination As Span(Of Byte), ByRef bytesWritten As Integer, format As ReadOnlySpan(Of Char), provider As IFormatProvider) As Boolean Implements IUtf8SpanFormattable.TryFormat" />
      <MemberSignature Language="F#" Value="abstract member System.IUtf8SpanFormattable.TryFormat : Span&lt;byte&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool&#xA;override this.System.IUtf8SpanFormattable.TryFormat : Span&lt;byte&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="iPNetwork.System.IUtf8SpanFormattable.TryFormat (utf8Destination, bytesWritten, format, provider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IUtf8SpanFormattable.TryFormat(Span&lt;System::Byte&gt; utf8Destination, [Runtime::InteropServices::Out] int % bytesWritten, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider) = IUtf8SpanFormattable::TryFormat;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IUtf8SpanFormattable.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="utf8Destination">The span in which to write this instance's value formatted as a span of bytes.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes that were written in <paramref name="utf8Destination" />.</param>
        <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format for <paramref name="utf8Destination" />.</param>
        <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="utf8Destination" />.</param>
        <summary>Tries to format the value of the current instance as UTF-8 into the provided span of bytes.</summary>
        <returns>
          <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="iPNetwork.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the instance to a string containing the <see cref="T:System.Net.IPNetwork" />'s CIDR notation.</summary>
        <returns>The <see cref="T:System.String" /> containing the <see cref="T:System.Net.IPNetwork" />'s CIDR notation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;byte&gt; utf8Destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;unsigned int8&gt; utf8Destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.TryFormat(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (utf8Destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;byte&gt; * int -&gt; bool" Usage="iPNetwork.TryFormat (utf8Destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryFormat(Span&lt;System::Byte&gt; utf8Destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="utf8Destination">The destination span of UTF-8 bytes.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes that were written to <paramref name="utf8Destination" />.</param>
        <summary>Attempts to write the <see cref="T:System.Net.IPNetwork" />'s CIDR notation to the given <paramref name="utf8Destination" /> UTF-8 span and returns a value indicating whether the operation succeeded.</summary>
        <returns>
          <see langword="true" /> if the formatting was successful; otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.TryFormat(System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int -&gt; bool" Usage="iPNetwork.TryFormat (destination, charsWritten)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryFormat(Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">The destination span of characters.</param>
        <param name="charsWritten">When this method returns, contains the number of characters that were written to <paramref name="destination" />.</param>
        <summary>Attempts to write the <see cref="T:System.Net.IPNetwork" />'s CIDR notation to the given <paramref name="destination" /> span and returns a value indicating whether the operation succeeded.</summary>
        <returns>
          <see langword="true" /> if the formatting was successful; otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out System.Net.IPNetwork result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.Net.IPNetwork&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.TryParse(System.ReadOnlySpan{System.Char},System.Net.IPNetwork@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As IPNetwork) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IPNetwork -&gt; bool" Usage="System.Net.IPNetwork.TryParse (s, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] System::Net::IPNetwork % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Net.IPNetwork" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A <see cref="T:System.String" /> that defines an IP network in CIDR notation.</param>
        <param name="result">When the method returns, contains an <see cref="T:System.Net.IPNetwork" /> instance if the conversion succeeds.</param>
        <summary>Converts the specified CIDR character span to an <see cref="T:System.Net.IPNetwork" /> instance and returns a value indicating whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string? s, out System.Net.IPNetwork result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.Net.IPNetwork&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPNetwork.TryParse(System.String,System.Net.IPNetwork@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As IPNetwork) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IPNetwork -&gt; bool" Usage="System.Net.IPNetwork.TryParse (s, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] System::Net::IPNetwork % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Net.IPNetwork" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A <see cref="T:System.String" /> that defines an IP network in CIDR notation.</param>
        <param name="result">When the method returns, contains an <see cref="T:System.Net.IPNetwork" /> instance if the conversion succeeds.</param>
        <summary>Converts the specified CIDR string to an <see cref="T:System.Net.IPNetwork" /> instance and returns a value indicating whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the conversion was successful; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
