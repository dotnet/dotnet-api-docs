<Type Name="CommandLineConfiguration" FullName="System.CommandLine.CommandLineConfiguration">
  <TypeSignature Language="C#" Value="public class CommandLineConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandLineConfiguration extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.CommandLineConfiguration" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandLineConfiguration" />
  <TypeSignature Language="F#" Value="type CommandLineConfiguration = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandLineConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents the configuration used by the <see cref="T:System.CommandLine.Parsing.Parser" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandLineConfiguration (System.CommandLine.Command command, bool enablePosixBundling = true, bool enableDirectives = true, bool enableLegacyDoubleDashBehavior = false, System.CommandLine.LocalizationResources? resources = default, System.CommandLine.Parsing.ResponseFileHandling responseFileHandling = System.CommandLine.Parsing.ResponseFileHandling.ParseArgsAsLineSeparated, System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Invocation.InvocationMiddleware&gt;? middlewarePipeline = default, Func&lt;System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder&gt;? helpBuilderFactory = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CommandLine.Command command, bool enablePosixBundling, bool enableDirectives, bool enableLegacyDoubleDashBehavior, class System.CommandLine.LocalizationResources resources, valuetype System.CommandLine.Parsing.ResponseFileHandling responseFileHandling, class System.Collections.Generic.IReadOnlyList`1&lt;class System.CommandLine.Invocation.InvocationMiddleware&gt; middlewarePipeline, class System.Func`2&lt;class System.CommandLine.Binding.BindingContext, class System.CommandLine.Help.HelpBuilder&gt; helpBuilderFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.CommandLineConfiguration.#ctor(System.CommandLine.Command,System.Boolean,System.Boolean,System.Boolean,System.CommandLine.LocalizationResources,System.CommandLine.Parsing.ResponseFileHandling,System.Collections.Generic.IReadOnlyList{System.CommandLine.Invocation.InvocationMiddleware},System.Func{System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As Command, Optional enablePosixBundling As Boolean = true, Optional enableDirectives As Boolean = true, Optional enableLegacyDoubleDashBehavior As Boolean = false, Optional resources As LocalizationResources = Nothing, Optional responseFileHandling As ResponseFileHandling = System.CommandLine.Parsing.ResponseFileHandling.ParseArgsAsLineSeparated, Optional middlewarePipeline As IReadOnlyList(Of InvocationMiddleware) = Nothing, Optional helpBuilderFactory As Func(Of BindingContext, HelpBuilder) = Nothing)" />
      <MemberSignature Language="F#" Value="new System.CommandLine.CommandLineConfiguration : System.CommandLine.Command * bool * bool * bool * System.CommandLine.LocalizationResources * System.CommandLine.Parsing.ResponseFileHandling * System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Invocation.InvocationMiddleware&gt; * Func&lt;System.CommandLine.Binding.BindingContext, System.CommandLine.Help.HelpBuilder&gt; -&gt; System.CommandLine.CommandLineConfiguration" Usage="new System.CommandLine.CommandLineConfiguration (command, enablePosixBundling, enableDirectives, enableLegacyDoubleDashBehavior, resources, responseFileHandling, middlewarePipeline, helpBuilderFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="enablePosixBundling" Type="System.Boolean" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="enableDirectives" Type="System.Boolean" Index="2" FrameworkAlternate="system-commandline" />
        <Parameter Name="enableLegacyDoubleDashBehavior" Type="System.Boolean" Index="3" FrameworkAlternate="system-commandline" />
        <Parameter Name="resources" Type="System.CommandLine.LocalizationResources" Index="4" FrameworkAlternate="system-commandline" />
        <Parameter Name="responseFileHandling" Type="System.CommandLine.Parsing.ResponseFileHandling" Index="5" FrameworkAlternate="system-commandline" />
        <Parameter Name="middlewarePipeline" Type="System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Invocation.InvocationMiddleware&gt;" Index="6" FrameworkAlternate="system-commandline" />
        <Parameter Name="helpBuilderFactory" Type="System.Func&lt;System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder&gt;" Index="7" FrameworkAlternate="system-commandline" />
      </Parameters>
      <Docs>
        <param name="command">The root command for the parser.</param>
        <param name="enablePosixBundling">
          <see langword="true" /> to enable POSIX bundling; otherwise, <see langword="false" />.</param>
        <param name="enableDirectives">
          <see langword="true" /> to enable directive parsing; otherwise, <see langword="false" />.</param>
        <param name="enableLegacyDoubleDashBehavior">Enables the legacy behavior of the <c>--</c> token, which is to ignore parsing of subsequent tokens and place them in the <see cref="P:System.CommandLine.Parsing.ParseResult.UnparsedTokens" /> list.</param>
        <param name="resources">Provide custom validation messages.</param>
        <param name="responseFileHandling">One of the enumeration values that specifies how response files (.rsp) are handled.</param>
        <param name="middlewarePipeline">Provide a custom middleware pipeline.</param>
        <param name="helpBuilderFactory">Provide a custom help builder.</param>
        <summary>
            Initializes a new instance of the CommandLineConfiguration class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandLineConfiguration (System.CommandLine.Command command, bool enablePosixBundling = true, bool enableDirectives = true, bool enableLegacyDoubleDashBehavior = false, bool enableTokenReplacement = true, System.CommandLine.LocalizationResources? resources = default, System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Invocation.InvocationMiddleware&gt;? middlewarePipeline = default, Func&lt;System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder&gt;? helpBuilderFactory = default, System.CommandLine.Parsing.TryReplaceToken? tokenReplacer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CommandLine.Command command, bool enablePosixBundling, bool enableDirectives, bool enableLegacyDoubleDashBehavior, bool enableTokenReplacement, class System.CommandLine.LocalizationResources resources, class System.Collections.Generic.IReadOnlyList`1&lt;class System.CommandLine.Invocation.InvocationMiddleware&gt; middlewarePipeline, class System.Func`2&lt;class System.CommandLine.Binding.BindingContext, class System.CommandLine.Help.HelpBuilder&gt; helpBuilderFactory, class System.CommandLine.Parsing.TryReplaceToken tokenReplacer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.CommandLineConfiguration.#ctor(System.CommandLine.Command,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.CommandLine.LocalizationResources,System.Collections.Generic.IReadOnlyList{System.CommandLine.Invocation.InvocationMiddleware},System.Func{System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder},System.CommandLine.Parsing.TryReplaceToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As Command, Optional enablePosixBundling As Boolean = true, Optional enableDirectives As Boolean = true, Optional enableLegacyDoubleDashBehavior As Boolean = false, Optional enableTokenReplacement As Boolean = true, Optional resources As LocalizationResources = Nothing, Optional middlewarePipeline As IReadOnlyList(Of InvocationMiddleware) = Nothing, Optional helpBuilderFactory As Func(Of BindingContext, HelpBuilder) = Nothing, Optional tokenReplacer As TryReplaceToken = Nothing)" />
      <MemberSignature Language="F#" Value="new System.CommandLine.CommandLineConfiguration : System.CommandLine.Command * bool * bool * bool * bool * System.CommandLine.LocalizationResources * System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Invocation.InvocationMiddleware&gt; * Func&lt;System.CommandLine.Binding.BindingContext, System.CommandLine.Help.HelpBuilder&gt; * System.CommandLine.Parsing.TryReplaceToken -&gt; System.CommandLine.CommandLineConfiguration" Usage="new System.CommandLine.CommandLineConfiguration (command, enablePosixBundling, enableDirectives, enableLegacyDoubleDashBehavior, enableTokenReplacement, resources, middlewarePipeline, helpBuilderFactory, tokenReplacer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="enablePosixBundling" Type="System.Boolean" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="enableDirectives" Type="System.Boolean" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="enableLegacyDoubleDashBehavior" Type="System.Boolean" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="enableTokenReplacement" Type="System.Boolean" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="resources" Type="System.CommandLine.LocalizationResources" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="middlewarePipeline" Type="System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Invocation.InvocationMiddleware&gt;" Index="6" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="helpBuilderFactory" Type="System.Func&lt;System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder&gt;" Index="7" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="tokenReplacer" Type="System.CommandLine.Parsing.TryReplaceToken" Index="8" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="enablePosixBundling">To be added.</param>
        <param name="enableDirectives">To be added.</param>
        <param name="enableLegacyDoubleDashBehavior">To be added.</param>
        <param name="enableTokenReplacement">To be added.</param>
        <param name="resources">To be added.</param>
        <param name="middlewarePipeline">To be added.</param>
        <param name="helpBuilderFactory">To be added.</param>
        <param name="tokenReplacer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDirectives">
      <MemberSignature Language="C#" Value="public bool EnableDirectives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDirectives" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.CommandLineConfiguration.EnableDirectives" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnableDirectives As Boolean" />
      <MemberSignature Language="F#" Value="member this.EnableDirectives : bool" Usage="System.CommandLine.CommandLineConfiguration.EnableDirectives" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDirectives { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets whether directives are enabled.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableLegacyDoubleDashBehavior">
      <MemberSignature Language="C#" Value="public bool EnableLegacyDoubleDashBehavior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableLegacyDoubleDashBehavior" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.CommandLineConfiguration.EnableLegacyDoubleDashBehavior" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnableLegacyDoubleDashBehavior As Boolean" />
      <MemberSignature Language="F#" Value="member this.EnableLegacyDoubleDashBehavior : bool" Usage="System.CommandLine.CommandLineConfiguration.EnableLegacyDoubleDashBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableLegacyDoubleDashBehavior { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Enables the legacy behavior of the <c>--</c> token, which is to ignore parsing of subsequent tokens and place them in the <see cref="P:System.CommandLine.Parsing.ParseResult.UnparsedTokens" /> list.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePosixBundling">
      <MemberSignature Language="C#" Value="public bool EnablePosixBundling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePosixBundling" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.CommandLineConfiguration.EnablePosixBundling" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnablePosixBundling As Boolean" />
      <MemberSignature Language="F#" Value="member this.EnablePosixBundling : bool" Usage="System.CommandLine.CommandLineConfiguration.EnablePosixBundling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePosixBundling { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets whether POSIX bundling is enabled.
            </summary>
        <value>To be added.</value>
        <remarks>
            POSIX recommends that single-character options be allowed to be specified together after a single <c>-</c> prefix.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableTokenReplacement">
      <MemberSignature Language="C#" Value="public bool EnableTokenReplacement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTokenReplacement" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.CommandLineConfiguration.EnableTokenReplacement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnableTokenReplacement As Boolean" />
      <MemberSignature Language="F#" Value="member this.EnableTokenReplacement : bool" Usage="System.CommandLine.CommandLineConfiguration.EnableTokenReplacement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableTokenReplacement { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizationResources">
      <MemberSignature Language="C#" Value="public System.CommandLine.LocalizationResources LocalizationResources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.LocalizationResources LocalizationResources" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.CommandLineConfiguration.LocalizationResources" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalizationResources As LocalizationResources" />
      <MemberSignature Language="F#" Value="member this.LocalizationResources : System.CommandLine.LocalizationResources" Usage="System.CommandLine.CommandLineConfiguration.LocalizationResources" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::LocalizationResources ^ LocalizationResources { System::CommandLine::LocalizationResources ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.LocalizationResources</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the localizable resources.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootCommand">
      <MemberSignature Language="C#" Value="public System.CommandLine.Command RootCommand { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.Command RootCommand" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.CommandLineConfiguration.RootCommand" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootCommand As Command" />
      <MemberSignature Language="F#" Value="member this.RootCommand : System.CommandLine.Command" Usage="System.CommandLine.CommandLineConfiguration.RootCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::Command ^ RootCommand { System::CommandLine::Command ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Command</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the root command.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfInvalid">
      <MemberSignature Language="C#" Value="public void ThrowIfInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.CommandLineConfiguration.ThrowIfInvalid" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfInvalid ()" />
      <MemberSignature Language="F#" Value="member this.ThrowIfInvalid : unit -&gt; unit" Usage="commandLineConfiguration.ThrowIfInvalid " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfInvalid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws an exception if the parser configuration is ambiguous or otherwise not valid.
            </summary>
        <remarks>Due to the performance cost of this method, it is recommended to be used in unit testing or in scenarios where the parser is configured dynamically at runtime.</remarks>
        <exception cref="T:System.CommandLine.CommandLineConfigurationException">Thrown if the configuration is found to be invalid.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
