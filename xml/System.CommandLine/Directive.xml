<Type Name="Directive" FullName="System.CommandLine.Directive">
  <TypeSignature Language="C#" Value="public class Directive : System.CommandLine.Symbol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Directive extends System.CommandLine.Symbol" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.Directive" />
  <TypeSignature Language="VB.NET" Value="Public Class Directive&#xA;Inherits Symbol" />
  <TypeSignature Language="F#" Value="type Directive = class&#xA;    inherit Symbol" />
  <TypeSignature Language="C++ CLI" Value="public ref class Directive : System::CommandLine::Symbol" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CommandLine.Symbol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            The purpose of directives is to provide cross-cutting functionality that can apply across command-line apps.
            Because directives are syntactically distinct from the app's own syntax, they can provide functionality that applies across apps.
            
            A directive must conform to the following syntax rules:
            * It's a token on the command line that comes after the app's name but before any subcommands or options.
            * It's enclosed in square brackets.
            * It doesn't contain spaces.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Directive (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Directive.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="F#" Value="new System.CommandLine.Directive : string -&gt; System.CommandLine.Directive" Usage="new System.CommandLine.Directive name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Directive(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the directive. It can't contain whitespaces.</param>
        <summary>
            Initializes a new instance of the Directive class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public virtual System.CommandLine.Invocation.CommandLineAction? Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.Invocation.CommandLineAction Action" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Directive.Action" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Action As CommandLineAction" />
      <MemberSignature Language="F#" Value="member this.Action : System.CommandLine.Invocation.CommandLineAction with get, set" Usage="System.CommandLine.Directive.Action" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CommandLine::Invocation::CommandLineAction ^ Action { System::CommandLine::Invocation::CommandLineAction ^ get(); void set(System::CommandLine::Invocation::CommandLineAction ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Invocation.CommandLineAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the <see cref="T:System.CommandLine.Invocation.CommandLineAction" /> for the Directive. The handler represents the action
            that will be performed when the Directive is invoked.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompletions">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;System.CommandLine.Completions.CompletionItem&gt; GetCompletions (System.CommandLine.Completions.CompletionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.CommandLine.Completions.CompletionItem&gt; GetCompletions(class System.CommandLine.Completions.CompletionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Directive.GetCompletions(System.CommandLine.Completions.CompletionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCompletions (context As CompletionContext) As IEnumerable(Of CompletionItem)" />
      <MemberSignature Language="F#" Value="override this.GetCompletions : System.CommandLine.Completions.CompletionContext -&gt; seq&lt;System.CommandLine.Completions.CompletionItem&gt;" Usage="directive.GetCompletions context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;System::CommandLine::Completions::CompletionItem ^&gt; ^ GetCompletions(System::CommandLine::Completions::CompletionContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.CommandLine.Completions.CompletionItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.CommandLine.Completions.CompletionContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
