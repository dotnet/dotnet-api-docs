<Type Name="Command" FullName="System.CommandLine.Command">
  <TypeSignature Language="C#" Value="public class Command : System.CommandLine.Symbol, System.Collections.IEnumerable" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Command extends System.CommandLine.Symbol implements class System.Collections.IEnumerable" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.Command" />
  <TypeSignature Language="VB.NET" Value="Public Class Command&#xA;Inherits Symbol&#xA;Implements IEnumerable" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
  <TypeSignature Language="F#" Value="type Command = class&#xA;    inherit Symbol&#xA;    interface IEnumerable" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
  <TypeSignature Language="C++ CLI" Value="public ref class Command : System::CommandLine::Symbol, System::Collections::IEnumerable" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
  <TypeSignature Language="C#" Value="public class Command : System.CommandLine.IdentifierSymbol, System.Collections.Generic.IEnumerable&lt;System.CommandLine.Symbol&gt;" FrameworkAlternate="system-commandline" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Command extends System.CommandLine.IdentifierSymbol implements class System.Collections.Generic.IEnumerable`1&lt;class System.CommandLine.Symbol&gt;, class System.Collections.IEnumerable" FrameworkAlternate="system-commandline" />
  <TypeSignature Language="VB.NET" Value="Public Class Command&#xA;Inherits IdentifierSymbol&#xA;Implements IEnumerable(Of Symbol)" FrameworkAlternate="system-commandline" />
  <TypeSignature Language="F#" Value="type Command = class&#xA;    inherit IdentifierSymbol&#xA;    interface seq&lt;Symbol&gt;&#xA;    interface IEnumerable" FrameworkAlternate="system-commandline" />
  <TypeSignature Language="C++ CLI" Value="public ref class Command : System::CommandLine::IdentifierSymbol, System::Collections::Generic::IEnumerable&lt;System::CommandLine::Symbol ^&gt;" FrameworkAlternate="system-commandline" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CommandLine.Symbol</BaseTypeName>
    <BaseTypeName FrameworkAlternate="system-commandline">System.CommandLine.IdentifierSymbol</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="system-commandline">
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.CommandLine.Symbol&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a specific action that the application performs.
            </summary>
    <remarks>
            Use the Command object for actions that correspond to a specific string (the command name). See
            <see cref="T:System.CommandLine.RootCommand" /> for simple applications that only have one action. For example, <c>dotnet run</c>
            uses <c>run</c> as the command.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Command (string name, string? description = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, Optional description As String = Nothing)" />
      <MemberSignature Language="F#" Value="new System.CommandLine.Command : string * string -&gt; System.CommandLine.Command" Usage="new System.CommandLine.Command (name, description)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">The name of the command.</param>
        <param name="description">The description of the command, shown in help.</param>
        <summary>
            Initializes a new instance of the Command class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public System.CommandLine.Invocation.CommandLineAction? Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.Invocation.CommandLineAction Action" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Command.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As CommandLineAction" />
      <MemberSignature Language="F#" Value="member this.Action : System.CommandLine.Invocation.CommandLineAction with get, set" Usage="System.CommandLine.Command.Action" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::Invocation::CommandLineAction ^ Action { System::CommandLine::Invocation::CommandLineAction ^ get(); void set(System::CommandLine::Invocation::CommandLineAction ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CommandLine.Invocation.CommandLineAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.CommandLine.Argument argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.CommandLine.Argument argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.Add(System.CommandLine.Argument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (argument As Argument)" />
      <MemberSignature Language="F#" Value="member this.Add : System.CommandLine.Argument -&gt; unit" Usage="command.Add argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::CommandLine::Argument ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument" />
      </Parameters>
      <Docs>
        <param name="argument">The argument to add to the command.</param>
        <summary>
            Adds an <see cref="T:System.CommandLine.Argument" /> to the command.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.CommandLine.Command command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.CommandLine.Command command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.Add(System.CommandLine.Command)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (command As Command)" />
      <MemberSignature Language="F#" Value="member this.Add : System.CommandLine.Command -&gt; unit" Usage="command.Add command" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::CommandLine::Command ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" />
      </Parameters>
      <Docs>
        <param name="command">The subcommand to add to the command.</param>
        <summary>
            Adds a subcommand to the command.
            </summary>
        <remarks>Commands can be nested to an arbitrary depth.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.CommandLine.Option option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.CommandLine.Option option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.Add(System.CommandLine.Option)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (option As Option)" />
      <MemberSignature Language="F#" Value="member this.Add : System.CommandLine.Option -&gt; unit" Usage="command.Add option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::CommandLine::Option ^ option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option" />
      </Parameters>
      <Docs>
        <param name="option">The option to add to the command.</param>
        <summary>
            Adds an <see cref="T:System.CommandLine.Option" /> to the command.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public void AddArgument (System.CommandLine.Argument argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArgument(class System.CommandLine.Argument argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.AddArgument(System.CommandLine.Argument)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddArgument (argument As Argument)" />
      <MemberSignature Language="F#" Value="member this.AddArgument : System.CommandLine.Argument -&gt; unit" Usage="command.AddArgument argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddArgument(System::CommandLine::Argument ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument" Index="0" FrameworkAlternate="system-commandline" />
      </Parameters>
      <Docs>
        <param name="argument">The argument to add to the command.</param>
        <summary>
            Adds an <see cref="T:System.CommandLine.Argument" /> to the command.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public void AddCommand (System.CommandLine.Command command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCommand(class System.CommandLine.Command command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.AddCommand(System.CommandLine.Command)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommand (command As Command)" />
      <MemberSignature Language="F#" Value="member this.AddCommand : System.CommandLine.Command -&gt; unit" Usage="command.AddCommand command" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommand(System::CommandLine::Command ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" Index="0" FrameworkAlternate="system-commandline" />
      </Parameters>
      <Docs>
        <param name="command">The subcommand to add to the command.</param>
        <summary>
            Adds a subcommand to the command.
            </summary>
        <remarks>Commands can be nested to an arbitrary depth.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddGlobalOption">
      <MemberSignature Language="C#" Value="public void AddGlobalOption (System.CommandLine.Option option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddGlobalOption(class System.CommandLine.Option option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.AddGlobalOption(System.CommandLine.Option)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddGlobalOption (option As Option)" />
      <MemberSignature Language="F#" Value="member this.AddGlobalOption : System.CommandLine.Option -&gt; unit" Usage="command.AddGlobalOption option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddGlobalOption(System::CommandLine::Option ^ option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option" Index="0" FrameworkAlternate="system-commandline" />
      </Parameters>
      <Docs>
        <param name="option">The global option to add to the command.</param>
        <summary>
            Adds a global <see cref="T:System.CommandLine.Option" /> to the command.
            </summary>
        <remarks>Global options are applied to the command and recursively to subcommands. They do not apply to
            parent commands.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOption">
      <MemberSignature Language="C#" Value="public void AddOption (System.CommandLine.Option option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOption(class System.CommandLine.Option option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.AddOption(System.CommandLine.Option)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOption (option As Option)" />
      <MemberSignature Language="F#" Value="member this.AddOption : System.CommandLine.Option -&gt; unit" Usage="command.AddOption option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddOption(System::CommandLine::Option ^ option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option" Index="0" FrameworkAlternate="system-commandline" />
      </Parameters>
      <Docs>
        <param name="option">The option to add to the command.</param>
        <summary>
            Adds an <see cref="T:System.CommandLine.Option" /> to the command.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddValidator">
      <MemberSignature Language="C#" Value="public void AddValidator (System.CommandLine.Parsing.ValidateSymbolResult&lt;System.CommandLine.Parsing.CommandResult&gt; validate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValidator(class System.CommandLine.Parsing.ValidateSymbolResult`1&lt;class System.CommandLine.Parsing.CommandResult&gt; validate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.AddValidator(System.CommandLine.Parsing.ValidateSymbolResult{System.CommandLine.Parsing.CommandResult})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddValidator (validate As ValidateSymbolResult(Of CommandResult))" />
      <MemberSignature Language="F#" Value="member this.AddValidator : System.CommandLine.Parsing.ValidateSymbolResult&lt;System.CommandLine.Parsing.CommandResult&gt; -&gt; unit" Usage="command.AddValidator validate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddValidator(System::CommandLine::Parsing::ValidateSymbolResult&lt;System::CommandLine::Parsing::CommandResult ^&gt; ^ validate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validate" Type="System.CommandLine.Parsing.ValidateSymbolResult&lt;System.CommandLine.Parsing.CommandResult&gt;" Index="0" FrameworkAlternate="system-commandline" />
      </Parameters>
      <Docs>
        <param name="validate">The delegate to validate the symbols during parsing.</param>
        <summary>
            Adds a custom validator to the command. Validators can be used
            to create custom validation logic.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aliases">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;string&gt; Aliases { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;string&gt; Aliases" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Command.Aliases" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Aliases As ICollection(Of String)" />
      <MemberSignature Language="F#" Value="member this.Aliases : System.Collections.Generic.ICollection&lt;string&gt;" Usage="System.CommandLine.Command.Aliases" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;System::String ^&gt; ^ Aliases { System::Collections::Generic::ICollection&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.CommandLine.Argument&gt; Arguments { get; }" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.CommandLine.Argument&gt; Arguments" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Command.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Arguments As IList(Of Argument)" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="F#" Value="member this.Arguments : System.Collections.Generic.IList&lt;System.CommandLine.Argument&gt;" Usage="System.CommandLine.Command.Arguments" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::CommandLine::Argument ^&gt; ^ Arguments { System::Collections::Generic::IList&lt;System::CommandLine::Argument ^&gt; ^ get(); };" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Argument&gt; Arguments { get; }" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.CommandLine.Argument&gt; Arguments" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Arguments As IReadOnlyList(Of Argument)" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="F#" Value="member this.Arguments : System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Argument&gt;" Usage="System.CommandLine.Command.Arguments" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;System::CommandLine::Argument ^&gt; ^ Arguments { System::Collections::Generic::IReadOnlyList&lt;System::CommandLine::Argument ^&gt; ^ get(); };" FrameworkAlternate="system-commandline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp">System.Collections.Generic.IList&lt;System.CommandLine.Argument&gt;</ReturnType>
        <ReturnType FrameworkAlternate="system-commandline">System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Argument&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Represents all of the arguments for the command.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.CommandLine.Symbol&gt; Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.CommandLine.Symbol&gt; Children" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Command.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As IEnumerable(Of Symbol)" />
      <MemberSignature Language="F#" Value="member this.Children : seq&lt;System.CommandLine.Symbol&gt;" Usage="System.CommandLine.Command.Children" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::CommandLine::Symbol ^&gt; ^ Children { System::Collections::Generic::IEnumerable&lt;System::CommandLine::Symbol ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp">
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.CommandLine.Command+&lt;get_Children&gt;d__7))]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.CommandLine.Command+&lt;get_Children&gt;d__7))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="system-commandline">
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.CommandLine.Command+&lt;get_Children&gt;d__6))]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.CommandLine.Command+&lt;get_Children&gt;d__6))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.CommandLine.Symbol&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the child symbols.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompletions">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;System.CommandLine.Completions.CompletionItem&gt; GetCompletions (System.CommandLine.Completions.CompletionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.CommandLine.Completions.CompletionItem&gt; GetCompletions(class System.CommandLine.Completions.CompletionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.GetCompletions(System.CommandLine.Completions.CompletionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCompletions (context As CompletionContext) As IEnumerable(Of CompletionItem)" />
      <MemberSignature Language="F#" Value="override this.GetCompletions : System.CommandLine.Completions.CompletionContext -&gt; seq&lt;System.CommandLine.Completions.CompletionItem&gt;" Usage="command.GetCompletions context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;System::CommandLine::Completions::CompletionItem ^&gt; ^ GetCompletions(System::CommandLine::Completions::CompletionContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.CommandLine.Completions.CompletionItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.CommandLine.Completions.CompletionContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.CommandLine.Symbol&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.CommandLine.Symbol&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Symbol)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.CommandLine.Symbol&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.CommandLine.Symbol&gt;" Usage="command.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::CommandLine::Symbol ^&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.CommandLine.Symbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Represents all of the symbols for the command.
            </summary>
        <returns>An enumerator that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handler">
      <MemberSignature Language="C#" Value="public System.CommandLine.Invocation.ICommandHandler? Handler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.Invocation.ICommandHandler Handler" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Command.Handler" />
      <MemberSignature Language="VB.NET" Value="Public Property Handler As ICommandHandler" />
      <MemberSignature Language="F#" Value="member this.Handler : System.CommandLine.Invocation.ICommandHandler with get, set" Usage="System.CommandLine.Command.Handler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::Invocation::ICommandHandler ^ Handler { System::CommandLine::Invocation::ICommandHandler ^ get(); void set(System::CommandLine::Invocation::ICommandHandler ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Invocation.ICommandHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the <see cref="T:System.CommandLine.Invocation.ICommandHandler" /> for the command. The handler represents the action
            that will be performed when the command is invoked.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>Use one of the <see cref="M:System.CommandLine.Handler.SetHandler(System.CommandLine.Command,System.Action)" /> overloads to construct a handler.</para>
          <para>If the handler is not specified, parser errors will be generated for command line input that
            invokes this command.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.CommandLine.Option&gt; Options { get; }" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.CommandLine.Option&gt; Options" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Command.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As IList(Of Option)" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="F#" Value="member this.Options : System.Collections.Generic.IList&lt;System.CommandLine.Option&gt;" Usage="System.CommandLine.Command.Options" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::CommandLine::Option ^&gt; ^ Options { System::Collections::Generic::IList&lt;System::CommandLine::Option ^&gt; ^ get(); };" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Option&gt; Options { get; }" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.CommandLine.Option&gt; Options" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As IReadOnlyList(Of Option)" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="F#" Value="member this.Options : System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Option&gt;" Usage="System.CommandLine.Command.Options" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;System::CommandLine::Option ^&gt; ^ Options { System::Collections::Generic::IReadOnlyList&lt;System::CommandLine::Option ^&gt; ^ get(); };" FrameworkAlternate="system-commandline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp">System.Collections.Generic.IList&lt;System.CommandLine.Option&gt;</ReturnType>
        <ReturnType FrameworkAlternate="system-commandline">System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Option&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Represents all of the options for the command, including global options that have been applied to any of the command's ancestors.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public System.CommandLine.ParseResult Parse (System.Collections.Generic.IReadOnlyList&lt;string&gt; args, System.CommandLine.ParserConfiguration? configuration = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CommandLine.ParseResult Parse(class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; args, class System.CommandLine.ParserConfiguration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.Parse(System.Collections.Generic.IReadOnlyList{System.String},System.CommandLine.ParserConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (args As IReadOnlyList(Of String), Optional configuration As ParserConfiguration = Nothing) As ParseResult" />
      <MemberSignature Language="F#" Value="member this.Parse : System.Collections.Generic.IReadOnlyList&lt;string&gt; * System.CommandLine.ParserConfiguration -&gt; System.CommandLine.ParseResult" Usage="command.Parse (args, configuration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.ParseResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Collections.Generic.IReadOnlyList&lt;System.String&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="configuration" Type="System.CommandLine.ParserConfiguration" Index="1" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <param name="configuration">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public System.CommandLine.ParseResult Parse (string commandLine, System.CommandLine.ParserConfiguration? configuration = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CommandLine.ParseResult Parse(string commandLine, class System.CommandLine.ParserConfiguration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.Parse(System.String,System.CommandLine.ParserConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (commandLine As String, Optional configuration As ParserConfiguration = Nothing) As ParseResult" />
      <MemberSignature Language="F#" Value="member this.Parse : string * System.CommandLine.ParserConfiguration -&gt; System.CommandLine.ParseResult" Usage="command.Parse (commandLine, configuration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.ParseResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLine" Type="System.String" Index="0" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="configuration" Type="System.CommandLine.ParserConfiguration" Index="1" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandLine">To be added.</param>
        <param name="configuration">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAction">
      <MemberSignature Language="C#" Value="public void SetAction (Action&lt;System.CommandLine.ParseResult&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAction(class System.Action`1&lt;class System.CommandLine.ParseResult&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.SetAction(System.Action{System.CommandLine.ParseResult})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAction (action As Action(Of ParseResult))" />
      <MemberSignature Language="F#" Value="member this.SetAction : Action&lt;System.CommandLine.ParseResult&gt; -&gt; unit" Usage="command.SetAction action" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAction(Action&lt;System::CommandLine::ParseResult ^&gt; ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.CommandLine.ParseResult&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAction">
      <MemberSignature Language="C#" Value="public void SetAction (Func&lt;System.CommandLine.ParseResult,int&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAction(class System.Func`2&lt;class System.CommandLine.ParseResult, int32&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.SetAction(System.Func{System.CommandLine.ParseResult,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAction (action As Func(Of ParseResult, Integer))" />
      <MemberSignature Language="F#" Value="member this.SetAction : Func&lt;System.CommandLine.ParseResult, int&gt; -&gt; unit" Usage="command.SetAction action" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAction(Func&lt;System::CommandLine::ParseResult ^, int&gt; ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Func&lt;System.CommandLine.ParseResult,System.Int32&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAction">
      <MemberSignature Language="C#" Value="public void SetAction (Func&lt;System.CommandLine.ParseResult,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;int&gt;&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAction(class System.Func`3&lt;class System.CommandLine.ParseResult, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;int32&gt;&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.SetAction(System.Func{System.CommandLine.ParseResult,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAction (action As Func(Of ParseResult, CancellationToken, Task(Of Integer)))" />
      <MemberSignature Language="F#" Value="member this.SetAction : Func&lt;System.CommandLine.ParseResult, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;int&gt;&gt; -&gt; unit" Usage="command.SetAction action" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAction(Func&lt;System::CommandLine::ParseResult ^, System::Threading::CancellationToken, System::Threading::Tasks::Task&lt;int&gt; ^&gt; ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Func&lt;System.CommandLine.ParseResult,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Int32&gt;&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAction">
      <MemberSignature Language="C#" Value="public void SetAction (Func&lt;System.CommandLine.ParseResult,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAction(class System.Func`3&lt;class System.CommandLine.ParseResult, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.SetAction(System.Func{System.CommandLine.ParseResult,System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAction (action As Func(Of ParseResult, CancellationToken, Task))" />
      <MemberSignature Language="F#" Value="member this.SetAction : Func&lt;System.CommandLine.ParseResult, System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; unit" Usage="command.SetAction action" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAction(Func&lt;System::CommandLine::ParseResult ^, System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Func&lt;System.CommandLine.ParseResult,System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAction">
      <MemberSignature Language="C#" Value="public void SetAction (Func&lt;System.CommandLine.ParseResult,System.Threading.Tasks.Task&lt;int&gt;&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAction(class System.Func`2&lt;class System.CommandLine.ParseResult, class System.Threading.Tasks.Task`1&lt;int32&gt;&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.SetAction(System.Func{System.CommandLine.ParseResult,System.Threading.Tasks.Task{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAction (action As Func(Of ParseResult, Task(Of Integer)))" />
      <MemberSignature Language="F#" Value="member this.SetAction : Func&lt;System.CommandLine.ParseResult, System.Threading.Tasks.Task&lt;int&gt;&gt; -&gt; unit" Usage="command.SetAction action" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAction(Func&lt;System::CommandLine::ParseResult ^, System::Threading::Tasks::Task&lt;int&gt; ^&gt; ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Func&lt;System.CommandLine.ParseResult,System.Threading.Tasks.Task&lt;System.Int32&gt;&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAction">
      <MemberSignature Language="C#" Value="public void SetAction (Func&lt;System.CommandLine.ParseResult,System.Threading.Tasks.Task&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAction(class System.Func`2&lt;class System.CommandLine.ParseResult, class System.Threading.Tasks.Task&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.SetAction(System.Func{System.CommandLine.ParseResult,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAction (action As Func(Of ParseResult, Task))" />
      <MemberSignature Language="F#" Value="member this.SetAction : Func&lt;System.CommandLine.ParseResult, System.Threading.Tasks.Task&gt; -&gt; unit" Usage="command.SetAction action" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAction(Func&lt;System::CommandLine::ParseResult ^, System::Threading::Tasks::Task ^&gt; ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Func&lt;System.CommandLine.ParseResult,System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subcommands">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.CommandLine.Command&gt; Subcommands { get; }" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.CommandLine.Command&gt; Subcommands" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Command.Subcommands" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Subcommands As IList(Of Command)" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="F#" Value="member this.Subcommands : System.Collections.Generic.IList&lt;System.CommandLine.Command&gt;" Usage="System.CommandLine.Command.Subcommands" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::CommandLine::Command ^&gt; ^ Subcommands { System::Collections::Generic::IList&lt;System::CommandLine::Command ^&gt; ^ get(); };" FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Command&gt; Subcommands { get; }" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.CommandLine.Command&gt; Subcommands" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Subcommands As IReadOnlyList(Of Command)" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="F#" Value="member this.Subcommands : System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Command&gt;" Usage="System.CommandLine.Command.Subcommands" FrameworkAlternate="system-commandline" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;System::CommandLine::Command ^&gt; ^ Subcommands { System::Collections::Generic::IReadOnlyList&lt;System::CommandLine::Command ^&gt; ^ get(); };" FrameworkAlternate="system-commandline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp">System.Collections.Generic.IList&lt;System.CommandLine.Command&gt;</ReturnType>
        <ReturnType FrameworkAlternate="system-commandline">System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Command&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Represents all of the subcommands for the command.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Command.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="command.System.Collections.IEnumerable.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through a collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This member is an explicit interface member implementation. It can be used only when the <xref:System.CommandLine.Command> instance is cast to an <xref:System.Collections.IEnumerable> interface.

          ]]></format>
        </remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TreatUnmatchedTokensAsErrors">
      <MemberSignature Language="C#" Value="public bool TreatUnmatchedTokensAsErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TreatUnmatchedTokensAsErrors" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Command.TreatUnmatchedTokensAsErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property TreatUnmatchedTokensAsErrors As Boolean" />
      <MemberSignature Language="F#" Value="member this.TreatUnmatchedTokensAsErrors : bool with get, set" Usage="System.CommandLine.Command.TreatUnmatchedTokensAsErrors" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TreatUnmatchedTokensAsErrors { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value that indicates whether unmatched tokens should be treated as errors. For example,
            if set to <see langword="true" /> and an extra command or argument is provided, validation will fail.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;Action&lt;System.CommandLine.Parsing.CommandResult&gt;&gt; Validators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class System.Action`1&lt;class System.CommandLine.Parsing.CommandResult&gt;&gt; Validators" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Command.Validators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Validators As List(Of Action(Of CommandResult))" />
      <MemberSignature Language="F#" Value="member this.Validators : System.Collections.Generic.List&lt;Action&lt;System.CommandLine.Parsing.CommandResult&gt;&gt;" Usage="System.CommandLine.Command.Validators" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::List&lt;Action&lt;System::CommandLine::Parsing::CommandResult ^&gt; ^&gt; ^ Validators { System::Collections::Generic::List&lt;Action&lt;System::CommandLine::Parsing::CommandResult ^&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Action&lt;System.CommandLine.Parsing.CommandResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
