<Type Name="OptionExtensions" FullName="System.CommandLine.OptionExtensions">
  <TypeSignature Language="C#" Value="public static class OptionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit OptionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.OptionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module OptionExtensions" />
  <TypeSignature Language="F#" Value="type OptionExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class OptionExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides extension methods for <see cref="T:System.CommandLine.Option" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddCompletions&lt;TOption&gt;">
      <MemberSignature Language="C#" Value="public static TOption AddCompletions&lt;TOption&gt; (this TOption option, System.CommandLine.Completions.CompletionDelegate complete) where TOption : System.CommandLine.Option;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOption AddCompletions&lt;(class System.CommandLine.Option) TOption&gt;(!!TOption option, class System.CommandLine.Completions.CompletionDelegate complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.AddCompletions``1(``0,System.CommandLine.Completions.CompletionDelegate)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddCompletions(Of TOption As Option) (option As TOption, complete As CompletionDelegate) As TOption" />
      <MemberSignature Language="F#" Value="static member AddCompletions : 'Option * System.CommandLine.Completions.CompletionDelegate -&gt; 'Option (requires 'Option :&gt; System.CommandLine.Option)" Usage="System.CommandLine.OptionExtensions.AddCompletions (option, complete)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOption&gt;&#xA; where TOption : System::CommandLine::Option[System::Runtime::CompilerServices::Extension]&#xA; static TOption AddCompletions(TOption option, System::CommandLine::Completions::CompletionDelegate ^ complete);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOption</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOption">
          <Constraints>
            <BaseTypeName>System.CommandLine.Option</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="option" Type="TOption" RefType="this" />
        <Parameter Name="complete" Type="System.CommandLine.Completions.CompletionDelegate" />
      </Parameters>
      <Docs>
        <typeparam name="TOption">The type of the option.</typeparam>
        <param name="option">The option for which to add completions.</param>
        <param name="complete">A <see cref="T:System.CommandLine.Completions.CompletionDelegate" /> that will be called to provide completions.</param>
        <summary>
            Adds completions for an option.
            </summary>
        <returns>The option being extended.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCompletions&lt;TOption&gt;">
      <MemberSignature Language="C#" Value="public static TOption AddCompletions&lt;TOption&gt; (this TOption option, Func&lt;System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable&lt;string&gt;&gt; complete) where TOption : System.CommandLine.Option;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOption AddCompletions&lt;(class System.CommandLine.Option) TOption&gt;(!!TOption option, class System.Func`2&lt;class System.CommandLine.Completions.CompletionContext, class System.Collections.Generic.IEnumerable`1&lt;string&gt;&gt; complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.AddCompletions``1(``0,System.Func{System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable{System.String}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddCompletions(Of TOption As Option) (option As TOption, complete As Func(Of CompletionContext, IEnumerable(Of String))) As TOption" />
      <MemberSignature Language="F#" Value="static member AddCompletions : 'Option * Func&lt;System.CommandLine.Completions.CompletionContext, seq&lt;string&gt;&gt; -&gt; 'Option (requires 'Option :&gt; System.CommandLine.Option)" Usage="System.CommandLine.OptionExtensions.AddCompletions (option, complete)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOption&gt;&#xA; where TOption : System::CommandLine::Option[System::Runtime::CompilerServices::Extension]&#xA; static TOption AddCompletions(TOption option, Func&lt;System::CommandLine::Completions::CompletionContext ^, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^&gt; ^ complete);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOption</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOption">
          <Constraints>
            <BaseTypeName>System.CommandLine.Option</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="option" Type="TOption" RefType="this" />
        <Parameter Name="complete" Type="System.Func&lt;System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable&lt;System.String&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOption">The type of the option.</typeparam>
        <param name="option">The option for which to add completions.</param>
        <param name="complete">A <see cref="T:System.CommandLine.Completions.CompletionDelegate" /> that will be called to provide completions.</param>
        <summary>
            Adds completions for an option.
            </summary>
        <returns>The option being extended.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCompletions&lt;TOption&gt;">
      <MemberSignature Language="C#" Value="public static TOption AddCompletions&lt;TOption&gt; (this TOption option, params string[] values) where TOption : System.CommandLine.Option;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOption AddCompletions&lt;(class System.CommandLine.Option) TOption&gt;(!!TOption option, string[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.AddCompletions``1(``0,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddCompletions(Of TOption As Option) (option As TOption, ParamArray values As String()) As TOption" />
      <MemberSignature Language="F#" Value="static member AddCompletions : 'Option * string[] -&gt; 'Option (requires 'Option :&gt; System.CommandLine.Option)" Usage="System.CommandLine.OptionExtensions.AddCompletions (option, values)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOption&gt;&#xA; where TOption : System::CommandLine::Option[System::Runtime::CompilerServices::Extension]&#xA; static TOption AddCompletions(TOption option, ... cli::array &lt;System::String ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOption</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOption">
          <Constraints>
            <BaseTypeName>System.CommandLine.Option</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="option" Type="TOption" RefType="this" />
        <Parameter Name="values" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOption">The type of the <see cref="T:System.CommandLine.Option" />.</typeparam>
        <param name="option">The option for which to add completions.</param>
        <param name="values">The completions to add.</param>
        <summary>
            Adds completions for an option.
            </summary>
        <returns>The option being extended.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExistingOnly">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Option&lt;System.IO.DirectoryInfo&gt; ExistingOnly (this System.CommandLine.Option&lt;System.IO.DirectoryInfo&gt; option);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Option`1&lt;class System.IO.DirectoryInfo&gt; ExistingOnly(class System.CommandLine.Option`1&lt;class System.IO.DirectoryInfo&gt; option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.ExistingOnly(System.CommandLine.Option{System.IO.DirectoryInfo})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExistingOnly (option As Option(Of DirectoryInfo)) As Option(Of DirectoryInfo)" />
      <MemberSignature Language="F#" Value="static member ExistingOnly : System.CommandLine.Option&lt;System.IO.DirectoryInfo&gt; -&gt; System.CommandLine.Option&lt;System.IO.DirectoryInfo&gt;" Usage="System.CommandLine.OptionExtensions.ExistingOnly option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Option&lt;System::IO::DirectoryInfo ^&gt; ^ ExistingOnly(System::CommandLine::Option&lt;System::IO::DirectoryInfo ^&gt; ^ option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Option&lt;System.IO.DirectoryInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option&lt;System.IO.DirectoryInfo&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="option">The option to configure.</param>
        <summary>
            Configures an option to accept only values corresponding to an existing directory.
            </summary>
        <returns>The option being extended.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExistingOnly">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Option&lt;System.IO.FileInfo&gt; ExistingOnly (this System.CommandLine.Option&lt;System.IO.FileInfo&gt; option);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Option`1&lt;class System.IO.FileInfo&gt; ExistingOnly(class System.CommandLine.Option`1&lt;class System.IO.FileInfo&gt; option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.ExistingOnly(System.CommandLine.Option{System.IO.FileInfo})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExistingOnly (option As Option(Of FileInfo)) As Option(Of FileInfo)" />
      <MemberSignature Language="F#" Value="static member ExistingOnly : System.CommandLine.Option&lt;System.IO.FileInfo&gt; -&gt; System.CommandLine.Option&lt;System.IO.FileInfo&gt;" Usage="System.CommandLine.OptionExtensions.ExistingOnly option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Option&lt;System::IO::FileInfo ^&gt; ^ ExistingOnly(System::CommandLine::Option&lt;System::IO::FileInfo ^&gt; ^ option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Option&lt;System.IO.FileInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option&lt;System.IO.FileInfo&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="option">The option to configure.</param>
        <summary>
            Configures an option to accept only values corresponding to an existing file.
            </summary>
        <returns>The option being extended.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExistingOnly">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Option&lt;System.IO.FileSystemInfo&gt; ExistingOnly (this System.CommandLine.Option&lt;System.IO.FileSystemInfo&gt; option);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Option`1&lt;class System.IO.FileSystemInfo&gt; ExistingOnly(class System.CommandLine.Option`1&lt;class System.IO.FileSystemInfo&gt; option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.ExistingOnly(System.CommandLine.Option{System.IO.FileSystemInfo})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExistingOnly (option As Option(Of FileSystemInfo)) As Option(Of FileSystemInfo)" />
      <MemberSignature Language="F#" Value="static member ExistingOnly : System.CommandLine.Option&lt;System.IO.FileSystemInfo&gt; -&gt; System.CommandLine.Option&lt;System.IO.FileSystemInfo&gt;" Usage="System.CommandLine.OptionExtensions.ExistingOnly option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Option&lt;System::IO::FileSystemInfo ^&gt; ^ ExistingOnly(System::CommandLine::Option&lt;System::IO::FileSystemInfo ^&gt; ^ option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Option&lt;System.IO.FileSystemInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option&lt;System.IO.FileSystemInfo&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="option">The option to configure.</param>
        <summary>
            Configures an option to accept only values corresponding to an existing file or directory.
            </summary>
        <returns>The option being extended.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExistingOnly&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Option&lt;T&gt; ExistingOnly&lt;T&gt; (this System.CommandLine.Option&lt;T&gt; option) where T : System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Option`1&lt;!!T&gt; ExistingOnly&lt;(class System.Collections.Generic.IEnumerable`1&lt;class System.IO.FileSystemInfo&gt;) T&gt;(class System.CommandLine.Option`1&lt;!!T&gt; option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.ExistingOnly``1(System.CommandLine.Option{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExistingOnly(Of T As IEnumerable(Of FileSystemInfo)) (option As Option(Of T)) As Option(Of T)" />
      <MemberSignature Language="F#" Value="static member ExistingOnly : System.CommandLine.Option&lt;#seq&lt;System.IO.FileSystemInfo&gt;&gt; -&gt; System.CommandLine.Option&lt;#seq&lt;System.IO.FileSystemInfo&gt;&gt;" Usage="System.CommandLine.OptionExtensions.ExistingOnly option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Collections::Generic::IEnumerable&lt;System::IO::FileSystemInfo ^&gt;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Option&lt;T&gt; ^ ExistingOnly(System::CommandLine::Option&lt;T&gt; ^ option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Option&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="option">The option to configure.</param>
        <summary>
            Configures an option to accept only values corresponding to a existing files or directories.
            </summary>
        <returns>The option being extended.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAmong&lt;TOption&gt;">
      <MemberSignature Language="C#" Value="public static TOption FromAmong&lt;TOption&gt; (this TOption option, params string[] values) where TOption : System.CommandLine.Option;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOption FromAmong&lt;(class System.CommandLine.Option) TOption&gt;(!!TOption option, string[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.FromAmong``1(``0,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FromAmong(Of TOption As Option) (option As TOption, ParamArray values As String()) As TOption" />
      <MemberSignature Language="F#" Value="static member FromAmong : 'Option * string[] -&gt; 'Option (requires 'Option :&gt; System.CommandLine.Option)" Usage="System.CommandLine.OptionExtensions.FromAmong (option, values)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOption&gt;&#xA; where TOption : System::CommandLine::Option[System::Runtime::CompilerServices::Extension]&#xA; static TOption FromAmong(TOption option, ... cli::array &lt;System::String ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOption</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOption">
          <Constraints>
            <BaseTypeName>System.CommandLine.Option</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="option" Type="TOption" RefType="this" />
        <Parameter Name="values" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOption">The type of the option's parsed value.</typeparam>
        <param name="option">The option to configure.</param>
        <param name="values">The values that are allowed for the option.</param>
        <summary>
            Configures an option to accept only the specified values, and to suggest them as command line completions.
            </summary>
        <returns>The configured argument.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LegalFileNamesOnly&lt;TOption&gt;">
      <MemberSignature Language="C#" Value="public static TOption LegalFileNamesOnly&lt;TOption&gt; (this TOption option) where TOption : System.CommandLine.Option;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOption LegalFileNamesOnly&lt;(class System.CommandLine.Option) TOption&gt;(!!TOption option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.LegalFileNamesOnly``1(``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LegalFileNamesOnly(Of TOption As Option) (option As TOption) As TOption" />
      <MemberSignature Language="F#" Value="static member LegalFileNamesOnly : 'Option -&gt; 'Option (requires 'Option :&gt; System.CommandLine.Option)" Usage="System.CommandLine.OptionExtensions.LegalFileNamesOnly option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOption&gt;&#xA; where TOption : System::CommandLine::Option[System::Runtime::CompilerServices::Extension]&#xA; static TOption LegalFileNamesOnly(TOption option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOption</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOption">
          <Constraints>
            <BaseTypeName>System.CommandLine.Option</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="option" Type="TOption" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOption">To be added.</typeparam>
        <param name="option">The option to configure.</param>
        <summary>
            Configures an option to accept only values representing legal file names.
            </summary>
        <returns>The option being extended.</returns>
        <remarks>A parse error will result, for example, if file path separators are found in the parsed value.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LegalFilePathsOnly&lt;TOption&gt;">
      <MemberSignature Language="C#" Value="public static TOption LegalFilePathsOnly&lt;TOption&gt; (this TOption option) where TOption : System.CommandLine.Option;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOption LegalFilePathsOnly&lt;(class System.CommandLine.Option) TOption&gt;(!!TOption option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.LegalFilePathsOnly``1(``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LegalFilePathsOnly(Of TOption As Option) (option As TOption) As TOption" />
      <MemberSignature Language="F#" Value="static member LegalFilePathsOnly : 'Option -&gt; 'Option (requires 'Option :&gt; System.CommandLine.Option)" Usage="System.CommandLine.OptionExtensions.LegalFilePathsOnly option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOption&gt;&#xA; where TOption : System::CommandLine::Option[System::Runtime::CompilerServices::Extension]&#xA; static TOption LegalFilePathsOnly(TOption option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOption</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOption">
          <Constraints>
            <BaseTypeName>System.CommandLine.Option</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="option" Type="TOption" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOption">To be added.</typeparam>
        <param name="option">The option to configure.</param>
        <summary>
            Configures an option to accept only values representing legal file paths.
            </summary>
        <returns>The option being extended.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Parsing.ParseResult Parse (this System.CommandLine.Option option, string commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Parsing.ParseResult Parse(class System.CommandLine.Option option, string commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.Parse(System.CommandLine.Option,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Parse (option As Option, commandLine As String) As ParseResult" />
      <MemberSignature Language="F#" Value="static member Parse : System.CommandLine.Option * string -&gt; System.CommandLine.Parsing.ParseResult" Usage="System.CommandLine.OptionExtensions.Parse (option, commandLine)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Parsing::ParseResult ^ Parse(System::CommandLine::Option ^ option, System::String ^ commandLine);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.ParseResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option" RefType="this" />
        <Parameter Name="commandLine" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="option">The option to use to parse the command line input.</param>
        <param name="commandLine">A command line string to parse, which can include spaces and quotes equivalent to what can be entered into a terminal.</param>
        <summary>
            Parses a command line string value using an option.
            </summary>
        <returns>A parse result describing the outcome of the parse operation.</returns>
        <remarks>The command line string input will be split into tokens as if it had been passed on the command line.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Parsing.ParseResult Parse (this System.CommandLine.Option option, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Parsing.ParseResult Parse(class System.CommandLine.Option option, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.OptionExtensions.Parse(System.CommandLine.Option,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Parse (option As Option, args As String()) As ParseResult" />
      <MemberSignature Language="F#" Value="static member Parse : System.CommandLine.Option * string[] -&gt; System.CommandLine.Parsing.ParseResult" Usage="System.CommandLine.OptionExtensions.Parse (option, args)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Parsing::ParseResult ^ Parse(System::CommandLine::Option ^ option, cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.ParseResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option" RefType="this" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="option">The option to use to parse the command line input.</param>
        <param name="args">The string options to parse.</param>
        <summary>
            Parses a command line string value using an option.
            </summary>
        <returns>A parse result describing the outcome of the parse operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
