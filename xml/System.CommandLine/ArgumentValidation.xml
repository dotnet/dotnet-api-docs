<Type Name="ArgumentValidation" FullName="System.CommandLine.ArgumentValidation">
  <TypeSignature Language="C#" Value="public static class ArgumentValidation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ArgumentValidation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.ArgumentValidation" />
  <TypeSignature Language="VB.NET" Value="Public Module ArgumentValidation" />
  <TypeSignature Language="F#" Value="type ArgumentValidation = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ArgumentValidation abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AcceptExistingOnly">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Argument&lt;System.IO.DirectoryInfo&gt; AcceptExistingOnly (this System.CommandLine.Argument&lt;System.IO.DirectoryInfo&gt; argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Argument`1&lt;class System.IO.DirectoryInfo&gt; AcceptExistingOnly(class System.CommandLine.Argument`1&lt;class System.IO.DirectoryInfo&gt; argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.ArgumentValidation.AcceptExistingOnly(System.CommandLine.Argument{System.IO.DirectoryInfo})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AcceptExistingOnly (argument As Argument(Of DirectoryInfo)) As Argument(Of DirectoryInfo)" />
      <MemberSignature Language="F#" Value="static member AcceptExistingOnly : System.CommandLine.Argument&lt;System.IO.DirectoryInfo&gt; -&gt; System.CommandLine.Argument&lt;System.IO.DirectoryInfo&gt;" Usage="System.CommandLine.ArgumentValidation.AcceptExistingOnly argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Argument&lt;System::IO::DirectoryInfo ^&gt; ^ AcceptExistingOnly(System::CommandLine::Argument&lt;System::IO::DirectoryInfo ^&gt; ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Argument&lt;System.IO.DirectoryInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument&lt;System.IO.DirectoryInfo&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptExistingOnly">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Argument&lt;System.IO.FileInfo&gt; AcceptExistingOnly (this System.CommandLine.Argument&lt;System.IO.FileInfo&gt; argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Argument`1&lt;class System.IO.FileInfo&gt; AcceptExistingOnly(class System.CommandLine.Argument`1&lt;class System.IO.FileInfo&gt; argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.ArgumentValidation.AcceptExistingOnly(System.CommandLine.Argument{System.IO.FileInfo})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AcceptExistingOnly (argument As Argument(Of FileInfo)) As Argument(Of FileInfo)" />
      <MemberSignature Language="F#" Value="static member AcceptExistingOnly : System.CommandLine.Argument&lt;System.IO.FileInfo&gt; -&gt; System.CommandLine.Argument&lt;System.IO.FileInfo&gt;" Usage="System.CommandLine.ArgumentValidation.AcceptExistingOnly argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Argument&lt;System::IO::FileInfo ^&gt; ^ AcceptExistingOnly(System::CommandLine::Argument&lt;System::IO::FileInfo ^&gt; ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Argument&lt;System.IO.FileInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument&lt;System.IO.FileInfo&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptExistingOnly">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Argument&lt;System.IO.FileSystemInfo&gt; AcceptExistingOnly (this System.CommandLine.Argument&lt;System.IO.FileSystemInfo&gt; argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Argument`1&lt;class System.IO.FileSystemInfo&gt; AcceptExistingOnly(class System.CommandLine.Argument`1&lt;class System.IO.FileSystemInfo&gt; argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.ArgumentValidation.AcceptExistingOnly(System.CommandLine.Argument{System.IO.FileSystemInfo})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AcceptExistingOnly (argument As Argument(Of FileSystemInfo)) As Argument(Of FileSystemInfo)" />
      <MemberSignature Language="F#" Value="static member AcceptExistingOnly : System.CommandLine.Argument&lt;System.IO.FileSystemInfo&gt; -&gt; System.CommandLine.Argument&lt;System.IO.FileSystemInfo&gt;" Usage="System.CommandLine.ArgumentValidation.AcceptExistingOnly argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Argument&lt;System::IO::FileSystemInfo ^&gt; ^ AcceptExistingOnly(System::CommandLine::Argument&lt;System::IO::FileSystemInfo ^&gt; ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Argument&lt;System.IO.FileSystemInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument&lt;System.IO.FileSystemInfo&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptExistingOnly&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Argument&lt;T&gt; AcceptExistingOnly&lt;T&gt; (this System.CommandLine.Argument&lt;T&gt; argument) where T : System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Argument`1&lt;!!T&gt; AcceptExistingOnly&lt;(class System.Collections.Generic.IEnumerable`1&lt;class System.IO.FileSystemInfo&gt;) T&gt;(class System.CommandLine.Argument`1&lt;!!T&gt; argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.ArgumentValidation.AcceptExistingOnly``1(System.CommandLine.Argument{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AcceptExistingOnly(Of T As IEnumerable(Of FileSystemInfo)) (argument As Argument(Of T)) As Argument(Of T)" />
      <MemberSignature Language="F#" Value="static member AcceptExistingOnly : System.CommandLine.Argument&lt;#seq&lt;System.IO.FileSystemInfo&gt;&gt; -&gt; System.CommandLine.Argument&lt;#seq&lt;System.IO.FileSystemInfo&gt;&gt;" Usage="System.CommandLine.ArgumentValidation.AcceptExistingOnly argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Collections::Generic::IEnumerable&lt;System::IO::FileSystemInfo ^&gt;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Argument&lt;T&gt; ^ AcceptExistingOnly(System::CommandLine::Argument&lt;T&gt; ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Argument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="argument">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptLegalFileNamesOnly&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Argument&lt;T&gt; AcceptLegalFileNamesOnly&lt;T&gt; (this System.CommandLine.Argument&lt;T&gt; argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Argument`1&lt;!!T&gt; AcceptLegalFileNamesOnly&lt;T&gt;(class System.CommandLine.Argument`1&lt;!!T&gt; argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.ArgumentValidation.AcceptLegalFileNamesOnly``1(System.CommandLine.Argument{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AcceptLegalFileNamesOnly(Of T) (argument As Argument(Of T)) As Argument(Of T)" />
      <MemberSignature Language="F#" Value="static member AcceptLegalFileNamesOnly : System.CommandLine.Argument&lt;'T&gt; -&gt; System.CommandLine.Argument&lt;'T&gt;" Usage="System.CommandLine.ArgumentValidation.AcceptLegalFileNamesOnly argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Argument&lt;T&gt; ^ AcceptLegalFileNamesOnly(System::CommandLine::Argument&lt;T&gt; ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Argument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="argument">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptLegalFilePathsOnly&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Argument&lt;T&gt; AcceptLegalFilePathsOnly&lt;T&gt; (this System.CommandLine.Argument&lt;T&gt; argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Argument`1&lt;!!T&gt; AcceptLegalFilePathsOnly&lt;T&gt;(class System.CommandLine.Argument`1&lt;!!T&gt; argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.ArgumentValidation.AcceptLegalFilePathsOnly``1(System.CommandLine.Argument{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AcceptLegalFilePathsOnly(Of T) (argument As Argument(Of T)) As Argument(Of T)" />
      <MemberSignature Language="F#" Value="static member AcceptLegalFilePathsOnly : System.CommandLine.Argument&lt;'T&gt; -&gt; System.CommandLine.Argument&lt;'T&gt;" Usage="System.CommandLine.ArgumentValidation.AcceptLegalFilePathsOnly argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Argument&lt;T&gt; ^ AcceptLegalFilePathsOnly(System::CommandLine::Argument&lt;T&gt; ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Argument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="argument">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptOnlyFromAmong&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Argument&lt;T&gt; AcceptOnlyFromAmong&lt;T&gt; (this System.CommandLine.Argument&lt;T&gt; argument, params string[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Argument`1&lt;!!T&gt; AcceptOnlyFromAmong&lt;T&gt;(class System.CommandLine.Argument`1&lt;!!T&gt; argument, string[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.ArgumentValidation.AcceptOnlyFromAmong``1(System.CommandLine.Argument{``0},System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AcceptOnlyFromAmong(Of T) (argument As Argument(Of T), ParamArray values As String()) As Argument(Of T)" />
      <MemberSignature Language="F#" Value="static member AcceptOnlyFromAmong : System.CommandLine.Argument&lt;'T&gt; * string[] -&gt; System.CommandLine.Argument&lt;'T&gt;" Usage="System.CommandLine.ArgumentValidation.AcceptOnlyFromAmong (argument, values)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Argument&lt;T&gt; ^ AcceptOnlyFromAmong(System::CommandLine::Argument&lt;T&gt; ^ argument, ... cli::array &lt;System::String ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Argument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument&lt;T&gt;" RefType="this" />
        <Parameter Name="values" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="argument">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
