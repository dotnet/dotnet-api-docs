<Type Name="Handler" FullName="System.CommandLine.Handler">
  <TypeSignature Language="C#" Value="public static class Handler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Handler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.Handler" />
  <TypeSignature Language="VB.NET" Value="Public Module Handler" />
  <TypeSignature Language="F#" Value="type Handler = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class Handler abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides methods for creating and working with command handlers.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="SetHandler">
      <MemberSignature Language="C#" Value="public static void SetHandler (this System.CommandLine.Command command, Action handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler(class System.CommandLine.Command command, class System.Action handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler(System.CommandLine.Command,System.Action)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler (command As Command, handle As Action)" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action ^ handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" />
        <Parameter Name="handle" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler">
      <MemberSignature Language="C#" Value="public static void SetHandler (this System.CommandLine.Command command, Action&lt;System.CommandLine.Invocation.InvocationContext&gt; handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler(class System.CommandLine.Command command, class System.Action`1&lt;class System.CommandLine.Invocation.InvocationContext&gt; handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler(System.CommandLine.Command,System.Action{System.CommandLine.Invocation.InvocationContext})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler (command As Command, handle As Action(Of InvocationContext))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;System.CommandLine.Invocation.InvocationContext&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;System::CommandLine::Invocation::InvocationContext ^&gt; ^ handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Action&lt;System.CommandLine.Invocation.InvocationContext&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler">
      <MemberSignature Language="C#" Value="public static void SetHandler (this System.CommandLine.Command command, Func&lt;System.CommandLine.Invocation.InvocationContext,System.Threading.Tasks.Task&gt; handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler(class System.CommandLine.Command command, class System.Func`2&lt;class System.CommandLine.Invocation.InvocationContext, class System.Threading.Tasks.Task&gt; handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler(System.CommandLine.Command,System.Func{System.CommandLine.Invocation.InvocationContext,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler (command As Command, handle As Func(Of InvocationContext, Task))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;System.CommandLine.Invocation.InvocationContext, System.Threading.Tasks.Task&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;System::CommandLine::Invocation::InvocationContext ^, System::Threading::Tasks::Task ^&gt; ^ handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Func&lt;System.CommandLine.Invocation.InvocationContext,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler">
      <MemberSignature Language="C#" Value="public static void SetHandler (this System.CommandLine.Command command, Func&lt;System.Threading.Tasks.Task&gt; handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler(class System.CommandLine.Command command, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler(System.CommandLine.Command,System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler (command As Command, handle As Func(Of Task))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;System.Threading.Tasks.Task&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;System::Threading::Tasks::Task ^&gt; ^ handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" />
        <Parameter Name="handle" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`1" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T&gt; (this System.CommandLine.Command command, Action&lt;T&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T&gt;(class System.CommandLine.Command command, class System.Action`1&lt;!!T&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``1(System.CommandLine.Command,System.Action{``0},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T) (command As Command, handle As Action(Of T), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`1" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T&gt; (this System.CommandLine.Command command, Action&lt;T&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T&gt; symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T&gt;(class System.CommandLine.Command command, class System.Action`1&lt;!!T&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T&gt; symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``1(System.CommandLine.Command,System.Action{``0},System.CommandLine.Binding.IValueDescriptor{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T) (command As Command, handle As Action(Of T), symbol As IValueDescriptor(Of T))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T&gt; ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Action&lt;T&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol" Type="System.CommandLine.Binding.IValueDescriptor&lt;T&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T&gt; (this System.CommandLine.Command command, Func&lt;T,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T&gt;(class System.CommandLine.Command command, class System.Func`2&lt;!!T, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``1(System.CommandLine.Command,System.Func{``0,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T) (command As Command, handle As Func(Of T, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`2" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T&gt; (this System.CommandLine.Command command, Func&lt;T,System.Threading.Tasks.Task&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T&gt; symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T&gt;(class System.CommandLine.Command command, class System.Func`2&lt;!!T, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T&gt; symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``1(System.CommandLine.Command,System.Func{``0,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T) (command As Command, handle As Func(Of T, Task), symbol As IValueDescriptor(Of T))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T, System::Threading::Tasks::Task ^&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T&gt; ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Func&lt;T,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol" Type="System.CommandLine.Binding.IValueDescriptor&lt;T&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2&gt; (this System.CommandLine.Command command, Action&lt;T1,T2&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2&gt;(class System.CommandLine.Command command, class System.Action`2&lt;!!T1, !!T2&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``2(System.CommandLine.Command,System.Action{``0,``1},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2) (command As Command, handle As Action(Of T1, T2), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`2" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2&gt;(class System.CommandLine.Command command, class System.Func`3&lt;!!T1, !!T2, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``2(System.CommandLine.Command,System.Func{``0,``1,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2) (command As Command, handle As Func(Of T1, T2, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`3" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2&gt; (this System.CommandLine.Command command, Action&lt;T1,T2&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2&gt;(class System.CommandLine.Command command, class System.Action`2&lt;!!T1, !!T2&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``2(System.CommandLine.Command,System.Action{``0,``1},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2) (command As Command, handle As Action(Of T1, T2), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,System.Threading.Tasks.Task&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2&gt;(class System.CommandLine.Command command, class System.Func`3&lt;!!T1, !!T2, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``2(System.CommandLine.Command,System.Func{``0,``1,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2) (command As Command, handle As Func(Of T1, T2, Task), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, System::Threading::Tasks::Task ^&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3&gt;(class System.CommandLine.Command command, class System.Action`3&lt;!!T1, !!T2, !!T3&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``3(System.CommandLine.Command,System.Action{``0,``1,``2},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3) (command As Command, handle As Action(Of T1, T2, T3), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`3" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3&gt;(class System.CommandLine.Command command, class System.Func`4&lt;!!T1, !!T2, !!T3, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``3(System.CommandLine.Command,System.Func{``0,``1,``2,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3) (command As Command, handle As Func(Of T1, T2, T3, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`4" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3&gt;(class System.CommandLine.Command command, class System.Action`3&lt;!!T1, !!T2, !!T3&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``3(System.CommandLine.Command,System.Action{``0,``1,``2},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3) (command As Command, handle As Action(Of T1, T2, T3), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,System.Threading.Tasks.Task&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3&gt;(class System.CommandLine.Command command, class System.Func`4&lt;!!T1, !!T2, !!T3, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``3(System.CommandLine.Command,System.Func{``0,``1,``2,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3) (command As Command, handle As Func(Of T1, T2, T3, Task), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, System::Threading::Tasks::Task ^&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4&gt;(class System.CommandLine.Command command, class System.Action`4&lt;!!T1, !!T2, !!T3, !!T4&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``4(System.CommandLine.Command,System.Action{``0,``1,``2,``3},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4) (command As Command, handle As Action(Of T1, T2, T3, T4), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`4" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4&gt;(class System.CommandLine.Command command, class System.Func`5&lt;!!T1, !!T2, !!T3, !!T4, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``4(System.CommandLine.Command,System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4) (command As Command, handle As Func(Of T1, T2, T3, T4, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`5" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3, System.CommandLine.Binding.IValueDescriptor&lt;T4&gt; symbol4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4&gt;(class System.CommandLine.Command command, class System.Action`4&lt;!!T1, !!T2, !!T3, !!T4&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T4&gt; symbol4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``4(System.CommandLine.Command,System.Action{``0,``1,``2,``3},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4) (command As Command, handle As Action(Of T1, T2, T3, T4), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3), symbol4 As IValueDescriptor(Of T4))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T4&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3, symbol4)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3, System::CommandLine::Binding::IValueDescriptor&lt;T4&gt; ^ symbol4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol4" Type="System.CommandLine.Binding.IValueDescriptor&lt;T4&gt;" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <param name="symbol4">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,System.Threading.Tasks.Task&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3, System.CommandLine.Binding.IValueDescriptor&lt;T4&gt; symbol4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4&gt;(class System.CommandLine.Command command, class System.Func`5&lt;!!T1, !!T2, !!T3, !!T4, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T4&gt; symbol4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``4(System.CommandLine.Command,System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4) (command As Command, handle As Func(Of T1, T2, T3, T4, Task), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3), symbol4 As IValueDescriptor(Of T4))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T4&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3, symbol4)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, System::Threading::Tasks::Task ^&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3, System::CommandLine::Binding::IValueDescriptor&lt;T4&gt; ^ symbol4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol4" Type="System.CommandLine.Binding.IValueDescriptor&lt;T4&gt;" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <param name="symbol4">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5&gt;(class System.CommandLine.Command command, class System.Action`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``5(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5) (command As Command, handle As Action(Of T1, T2, T3, T4, T5), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`5" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5&gt;(class System.CommandLine.Command command, class System.Func`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``5(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`6" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3, System.CommandLine.Binding.IValueDescriptor&lt;T4&gt; symbol4, System.CommandLine.Binding.IValueDescriptor&lt;T5&gt; symbol5);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5&gt;(class System.CommandLine.Command command, class System.Action`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T4&gt; symbol4, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T5&gt; symbol5) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``5(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5) (command As Command, handle As Action(Of T1, T2, T3, T4, T5), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3), symbol4 As IValueDescriptor(Of T4), symbol5 As IValueDescriptor(Of T5))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T4&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T5&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3, symbol4, symbol5)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3, System::CommandLine::Binding::IValueDescriptor&lt;T4&gt; ^ symbol4, System::CommandLine::Binding::IValueDescriptor&lt;T5&gt; ^ symbol5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol4" Type="System.CommandLine.Binding.IValueDescriptor&lt;T4&gt;" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol5" Type="System.CommandLine.Binding.IValueDescriptor&lt;T5&gt;" Index="6" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <param name="symbol4">To be added.</param>
        <param name="symbol5">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,System.Threading.Tasks.Task&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3, System.CommandLine.Binding.IValueDescriptor&lt;T4&gt; symbol4, System.CommandLine.Binding.IValueDescriptor&lt;T5&gt; symbol5);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5&gt;(class System.CommandLine.Command command, class System.Func`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T4&gt; symbol4, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T5&gt; symbol5) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``5(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, Task), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3), symbol4 As IValueDescriptor(Of T4), symbol5 As IValueDescriptor(Of T5))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T4&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T5&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3, symbol4, symbol5)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, System::Threading::Tasks::Task ^&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3, System::CommandLine::Binding::IValueDescriptor&lt;T4&gt; ^ symbol4, System::CommandLine::Binding::IValueDescriptor&lt;T5&gt; ^ symbol5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol4" Type="System.CommandLine.Binding.IValueDescriptor&lt;T4&gt;" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol5" Type="System.CommandLine.Binding.IValueDescriptor&lt;T5&gt;" Index="6" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <param name="symbol4">To be added.</param>
        <param name="symbol5">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6&gt;(class System.CommandLine.Command command, class System.Action`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``6(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`6" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6&gt;(class System.CommandLine.Command command, class System.Func`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``6(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`7" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3, System.CommandLine.Binding.IValueDescriptor&lt;T4&gt; symbol4, System.CommandLine.Binding.IValueDescriptor&lt;T5&gt; symbol5, System.CommandLine.Binding.IValueDescriptor&lt;T6&gt; symbol6);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6&gt;(class System.CommandLine.Command command, class System.Action`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T4&gt; symbol4, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T5&gt; symbol5, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T6&gt; symbol6) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``6(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3), symbol4 As IValueDescriptor(Of T4), symbol5 As IValueDescriptor(Of T5), symbol6 As IValueDescriptor(Of T6))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T4&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T5&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T6&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3, System::CommandLine::Binding::IValueDescriptor&lt;T4&gt; ^ symbol4, System::CommandLine::Binding::IValueDescriptor&lt;T5&gt; ^ symbol5, System::CommandLine::Binding::IValueDescriptor&lt;T6&gt; ^ symbol6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol4" Type="System.CommandLine.Binding.IValueDescriptor&lt;T4&gt;" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol5" Type="System.CommandLine.Binding.IValueDescriptor&lt;T5&gt;" Index="6" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol6" Type="System.CommandLine.Binding.IValueDescriptor&lt;T6&gt;" Index="7" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <param name="symbol4">To be added.</param>
        <param name="symbol5">To be added.</param>
        <param name="symbol6">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,System.Threading.Tasks.Task&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3, System.CommandLine.Binding.IValueDescriptor&lt;T4&gt; symbol4, System.CommandLine.Binding.IValueDescriptor&lt;T5&gt; symbol5, System.CommandLine.Binding.IValueDescriptor&lt;T6&gt; symbol6);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6&gt;(class System.CommandLine.Command command, class System.Func`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T4&gt; symbol4, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T5&gt; symbol5, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T6&gt; symbol6) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``6(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, Task), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3), symbol4 As IValueDescriptor(Of T4), symbol5 As IValueDescriptor(Of T5), symbol6 As IValueDescriptor(Of T6))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T4&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T5&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T6&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, System::Threading::Tasks::Task ^&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3, System::CommandLine::Binding::IValueDescriptor&lt;T4&gt; ^ symbol4, System::CommandLine::Binding::IValueDescriptor&lt;T5&gt; ^ symbol5, System::CommandLine::Binding::IValueDescriptor&lt;T6&gt; ^ symbol6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol4" Type="System.CommandLine.Binding.IValueDescriptor&lt;T4&gt;" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol5" Type="System.CommandLine.Binding.IValueDescriptor&lt;T5&gt;" Index="6" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol6" Type="System.CommandLine.Binding.IValueDescriptor&lt;T6&gt;" Index="7" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <param name="symbol4">To be added.</param>
        <param name="symbol5">To be added.</param>
        <param name="symbol6">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7&gt;(class System.CommandLine.Command command, class System.Action`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``7(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`7" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7&gt;(class System.CommandLine.Command command, class System.Func`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``7(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`8" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3, System.CommandLine.Binding.IValueDescriptor&lt;T4&gt; symbol4, System.CommandLine.Binding.IValueDescriptor&lt;T5&gt; symbol5, System.CommandLine.Binding.IValueDescriptor&lt;T6&gt; symbol6, System.CommandLine.Binding.IValueDescriptor&lt;T7&gt; symbol7);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7&gt;(class System.CommandLine.Command command, class System.Action`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T4&gt; symbol4, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T5&gt; symbol5, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T6&gt; symbol6, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T7&gt; symbol7) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``7(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5},System.CommandLine.Binding.IValueDescriptor{``6})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3), symbol4 As IValueDescriptor(Of T4), symbol5 As IValueDescriptor(Of T5), symbol6 As IValueDescriptor(Of T6), symbol7 As IValueDescriptor(Of T7))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T4&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T5&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T6&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T7&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3, System::CommandLine::Binding::IValueDescriptor&lt;T4&gt; ^ symbol4, System::CommandLine::Binding::IValueDescriptor&lt;T5&gt; ^ symbol5, System::CommandLine::Binding::IValueDescriptor&lt;T6&gt; ^ symbol6, System::CommandLine::Binding::IValueDescriptor&lt;T7&gt; ^ symbol7);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol4" Type="System.CommandLine.Binding.IValueDescriptor&lt;T4&gt;" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol5" Type="System.CommandLine.Binding.IValueDescriptor&lt;T5&gt;" Index="6" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol6" Type="System.CommandLine.Binding.IValueDescriptor&lt;T6&gt;" Index="7" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol7" Type="System.CommandLine.Binding.IValueDescriptor&lt;T7&gt;" Index="8" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <param name="symbol4">To be added.</param>
        <param name="symbol5">To be added.</param>
        <param name="symbol6">To be added.</param>
        <param name="symbol7">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,System.Threading.Tasks.Task&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3, System.CommandLine.Binding.IValueDescriptor&lt;T4&gt; symbol4, System.CommandLine.Binding.IValueDescriptor&lt;T5&gt; symbol5, System.CommandLine.Binding.IValueDescriptor&lt;T6&gt; symbol6, System.CommandLine.Binding.IValueDescriptor&lt;T7&gt; symbol7);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7&gt;(class System.CommandLine.Command command, class System.Func`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T4&gt; symbol4, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T5&gt; symbol5, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T6&gt; symbol6, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T7&gt; symbol7) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``7(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5},System.CommandLine.Binding.IValueDescriptor{``6})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, Task), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3), symbol4 As IValueDescriptor(Of T4), symbol5 As IValueDescriptor(Of T5), symbol6 As IValueDescriptor(Of T6), symbol7 As IValueDescriptor(Of T7))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T4&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T5&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T6&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T7&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, System::Threading::Tasks::Task ^&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3, System::CommandLine::Binding::IValueDescriptor&lt;T4&gt; ^ symbol4, System::CommandLine::Binding::IValueDescriptor&lt;T5&gt; ^ symbol5, System::CommandLine::Binding::IValueDescriptor&lt;T6&gt; ^ symbol6, System::CommandLine::Binding::IValueDescriptor&lt;T7&gt; ^ symbol7);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol4" Type="System.CommandLine.Binding.IValueDescriptor&lt;T4&gt;" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol5" Type="System.CommandLine.Binding.IValueDescriptor&lt;T5&gt;" Index="6" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol6" Type="System.CommandLine.Binding.IValueDescriptor&lt;T6&gt;" Index="7" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol7" Type="System.CommandLine.Binding.IValueDescriptor&lt;T7&gt;" Index="8" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <param name="symbol4">To be added.</param>
        <param name="symbol5">To be added.</param>
        <param name="symbol6">To be added.</param>
        <param name="symbol7">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(class System.CommandLine.Command command, class System.Action`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``8(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7, T8), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`8" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(class System.CommandLine.Command command, class System.Func`9&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``8(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`9" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3, System.CommandLine.Binding.IValueDescriptor&lt;T4&gt; symbol4, System.CommandLine.Binding.IValueDescriptor&lt;T5&gt; symbol5, System.CommandLine.Binding.IValueDescriptor&lt;T6&gt; symbol6, System.CommandLine.Binding.IValueDescriptor&lt;T7&gt; symbol7, System.CommandLine.Binding.IValueDescriptor&lt;T8&gt; symbol8);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(class System.CommandLine.Command command, class System.Action`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T4&gt; symbol4, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T5&gt; symbol5, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T6&gt; symbol6, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T7&gt; symbol7, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T8&gt; symbol8) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``8(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5},System.CommandLine.Binding.IValueDescriptor{``6},System.CommandLine.Binding.IValueDescriptor{``7})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7, T8), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3), symbol4 As IValueDescriptor(Of T4), symbol5 As IValueDescriptor(Of T5), symbol6 As IValueDescriptor(Of T6), symbol7 As IValueDescriptor(Of T7), symbol8 As IValueDescriptor(Of T8))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T4&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T5&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T6&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T7&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T8&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3, System::CommandLine::Binding::IValueDescriptor&lt;T4&gt; ^ symbol4, System::CommandLine::Binding::IValueDescriptor&lt;T5&gt; ^ symbol5, System::CommandLine::Binding::IValueDescriptor&lt;T6&gt; ^ symbol6, System::CommandLine::Binding::IValueDescriptor&lt;T7&gt; ^ symbol7, System::CommandLine::Binding::IValueDescriptor&lt;T8&gt; ^ symbol8);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol4" Type="System.CommandLine.Binding.IValueDescriptor&lt;T4&gt;" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol5" Type="System.CommandLine.Binding.IValueDescriptor&lt;T5&gt;" Index="6" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol6" Type="System.CommandLine.Binding.IValueDescriptor&lt;T6&gt;" Index="7" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol7" Type="System.CommandLine.Binding.IValueDescriptor&lt;T7&gt;" Index="8" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol8" Type="System.CommandLine.Binding.IValueDescriptor&lt;T8&gt;" Index="9" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <param name="symbol4">To be added.</param>
        <param name="symbol5">To be added.</param>
        <param name="symbol6">To be added.</param>
        <param name="symbol7">To be added.</param>
        <param name="symbol8">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,System.Threading.Tasks.Task&gt; handle, System.CommandLine.Binding.IValueDescriptor&lt;T1&gt; symbol1, System.CommandLine.Binding.IValueDescriptor&lt;T2&gt; symbol2, System.CommandLine.Binding.IValueDescriptor&lt;T3&gt; symbol3, System.CommandLine.Binding.IValueDescriptor&lt;T4&gt; symbol4, System.CommandLine.Binding.IValueDescriptor&lt;T5&gt; symbol5, System.CommandLine.Binding.IValueDescriptor&lt;T6&gt; symbol6, System.CommandLine.Binding.IValueDescriptor&lt;T7&gt; symbol7, System.CommandLine.Binding.IValueDescriptor&lt;T8&gt; symbol8);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(class System.CommandLine.Command command, class System.Func`9&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T1&gt; symbol1, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T2&gt; symbol2, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T3&gt; symbol3, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T4&gt; symbol4, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T5&gt; symbol5, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T6&gt; symbol6, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T7&gt; symbol7, class System.CommandLine.Binding.IValueDescriptor`1&lt;!!T8&gt; symbol8) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``8(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5},System.CommandLine.Binding.IValueDescriptor{``6},System.CommandLine.Binding.IValueDescriptor{``7})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, Task), symbol1 As IValueDescriptor(Of T1), symbol2 As IValueDescriptor(Of T2), symbol3 As IValueDescriptor(Of T3), symbol4 As IValueDescriptor(Of T4), symbol5 As IValueDescriptor(Of T5), symbol6 As IValueDescriptor(Of T6), symbol7 As IValueDescriptor(Of T7), symbol8 As IValueDescriptor(Of T8))" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T1&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T2&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T3&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T4&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T5&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T6&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T7&gt; * System.CommandLine.Binding.IValueDescriptor&lt;'T8&gt; -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, System::Threading::Tasks::Task ^&gt; ^ handle, System::CommandLine::Binding::IValueDescriptor&lt;T1&gt; ^ symbol1, System::CommandLine::Binding::IValueDescriptor&lt;T2&gt; ^ symbol2, System::CommandLine::Binding::IValueDescriptor&lt;T3&gt; ^ symbol3, System::CommandLine::Binding::IValueDescriptor&lt;T4&gt; ^ symbol4, System::CommandLine::Binding::IValueDescriptor&lt;T5&gt; ^ symbol5, System::CommandLine::Binding::IValueDescriptor&lt;T6&gt; ^ symbol6, System::CommandLine::Binding::IValueDescriptor&lt;T7&gt; ^ symbol7, System::CommandLine::Binding::IValueDescriptor&lt;T8&gt; ^ symbol8);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol1" Type="System.CommandLine.Binding.IValueDescriptor&lt;T1&gt;" Index="2" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol2" Type="System.CommandLine.Binding.IValueDescriptor&lt;T2&gt;" Index="3" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol3" Type="System.CommandLine.Binding.IValueDescriptor&lt;T3&gt;" Index="4" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol4" Type="System.CommandLine.Binding.IValueDescriptor&lt;T4&gt;" Index="5" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol5" Type="System.CommandLine.Binding.IValueDescriptor&lt;T5&gt;" Index="6" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol6" Type="System.CommandLine.Binding.IValueDescriptor&lt;T6&gt;" Index="7" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol7" Type="System.CommandLine.Binding.IValueDescriptor&lt;T7&gt;" Index="8" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
        <Parameter Name="symbol8" Type="System.CommandLine.Binding.IValueDescriptor&lt;T8&gt;" Index="9" FrameworkAlternate="net-10.0-pp;net-6.0-pp;net-7.0-pp;net-8.0-pp;net-9.0-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbol1">To be added.</param>
        <param name="symbol2">To be added.</param>
        <param name="symbol3">To be added.</param>
        <param name="symbol4">To be added.</param>
        <param name="symbol5">To be added.</param>
        <param name="symbol6">To be added.</param>
        <param name="symbol7">To be added.</param>
        <param name="symbol8">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(class System.CommandLine.Command command, class System.Action`9&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``9(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`9" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(class System.CommandLine.Command command, class System.Func`10&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``9(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`10" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(class System.CommandLine.Command command, class System.Action`10&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``10(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`10" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(class System.CommandLine.Command command, class System.Func`11&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``10(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`11" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt;(class System.CommandLine.Command command, class System.Action`11&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``11(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`11" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt;(class System.CommandLine.Command command, class System.Func`12&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``11(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`12" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt;(class System.CommandLine.Command command, class System.Action`12&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, !!T12&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``12(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
        <TypeParameter Name="T12" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <typeparam name="T12">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`12" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt;(class System.CommandLine.Command command, class System.Func`13&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, !!T12, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``12(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
        <TypeParameter Name="T12" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <typeparam name="T12">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`13" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt;(class System.CommandLine.Command command, class System.Action`13&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, !!T12, !!T13&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``13(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
        <TypeParameter Name="T12" />
        <TypeParameter Name="T13" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <typeparam name="T12">To be added.</typeparam>
        <typeparam name="T13">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`13" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt;(class System.CommandLine.Command command, class System.Func`14&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, !!T12, !!T13, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``13(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
        <TypeParameter Name="T12" />
        <TypeParameter Name="T13" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <typeparam name="T12">To be added.</typeparam>
        <typeparam name="T13">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`14" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt;(class System.CommandLine.Command command, class System.Action`14&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``14(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
        <TypeParameter Name="T12" />
        <TypeParameter Name="T13" />
        <TypeParameter Name="T14" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <typeparam name="T12">To be added.</typeparam>
        <typeparam name="T13">To be added.</typeparam>
        <typeparam name="T14">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`14" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt;(class System.CommandLine.Command command, class System.Func`15&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``14(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
        <TypeParameter Name="T12" />
        <TypeParameter Name="T13" />
        <TypeParameter Name="T14" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <typeparam name="T12">To be added.</typeparam>
        <typeparam name="T13">To be added.</typeparam>
        <typeparam name="T14">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`15" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;(class System.CommandLine.Command command, class System.Action`15&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, !!T15&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``15(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
        <TypeParameter Name="T12" />
        <TypeParameter Name="T13" />
        <TypeParameter Name="T14" />
        <TypeParameter Name="T15" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <typeparam name="T12">To be added.</typeparam>
        <typeparam name="T13">To be added.</typeparam>
        <typeparam name="T14">To be added.</typeparam>
        <typeparam name="T15">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`15" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;(class System.CommandLine.Command command, class System.Func`16&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, !!T15, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``15(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
        <TypeParameter Name="T12" />
        <TypeParameter Name="T13" />
        <TypeParameter Name="T14" />
        <TypeParameter Name="T15" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <typeparam name="T12">To be added.</typeparam>
        <typeparam name="T13">To be added.</typeparam>
        <typeparam name="T14">To be added.</typeparam>
        <typeparam name="T15">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`16" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt; (this System.CommandLine.Command command, Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt;(class System.CommandLine.Command command, class System.Action`16&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, !!T15, !!T16&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``16(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) (command As Command, handle As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'T16&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Action&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
        <TypeParameter Name="T12" />
        <TypeParameter Name="T13" />
        <TypeParameter Name="T14" />
        <TypeParameter Name="T15" />
        <TypeParameter Name="T16" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <typeparam name="T12">To be added.</typeparam>
        <typeparam name="T13">To be added.</typeparam>
        <typeparam name="T14">To be added.</typeparam>
        <typeparam name="T15">To be added.</typeparam>
        <typeparam name="T16">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on an <see cref="T:System.Action`16" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;">
      <MemberSignature Language="C#" Value="public static void SetHandler&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt; (this System.CommandLine.Command command, Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,System.Threading.Tasks.Task&gt; handle, params System.CommandLine.Binding.IValueDescriptor[] symbols);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetHandler&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt;(class System.CommandLine.Command command, class System.Func`17&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, !!T15, !!T16, class System.Threading.Tasks.Task&gt; handle, class System.CommandLine.Binding.IValueDescriptor[] symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Handler.SetHandler``16(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetHandler(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) (command As Command, handle As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task), ParamArray symbols As IValueDescriptor())" />
      <MemberSignature Language="F#" Value="static member SetHandler : System.CommandLine.Command * Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11, 'T12, 'T13, 'T14, 'T15, 'T16, System.Threading.Tasks.Task&gt; * System.CommandLine.Binding.IValueDescriptor[] -&gt; unit" Usage="System.CommandLine.Handler.SetHandler (command, handle, symbols)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetHandler(System::CommandLine::Command ^ command, Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, System::Threading::Tasks::Task ^&gt; ^ handle, ... cli::array &lt;System::CommandLine::Binding::IValueDescriptor ^&gt; ^ symbols);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
        <TypeParameter Name="T9" />
        <TypeParameter Name="T10" />
        <TypeParameter Name="T11" />
        <TypeParameter Name="T12" />
        <TypeParameter Name="T13" />
        <TypeParameter Name="T14" />
        <TypeParameter Name="T15" />
        <TypeParameter Name="T16" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" Index="0" FrameworkAlternate="system-commandline" />
        <Parameter Name="handle" Type="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,System.Threading.Tasks.Task&gt;" Index="1" FrameworkAlternate="system-commandline" />
        <Parameter Name="symbols" Type="System.CommandLine.Binding.IValueDescriptor[]" Index="2" FrameworkAlternate="system-commandline">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="T3">To be added.</typeparam>
        <typeparam name="T4">To be added.</typeparam>
        <typeparam name="T5">To be added.</typeparam>
        <typeparam name="T6">To be added.</typeparam>
        <typeparam name="T7">To be added.</typeparam>
        <typeparam name="T8">To be added.</typeparam>
        <typeparam name="T9">To be added.</typeparam>
        <typeparam name="T10">To be added.</typeparam>
        <typeparam name="T11">To be added.</typeparam>
        <typeparam name="T12">To be added.</typeparam>
        <typeparam name="T13">To be added.</typeparam>
        <typeparam name="T14">To be added.</typeparam>
        <typeparam name="T15">To be added.</typeparam>
        <typeparam name="T16">To be added.</typeparam>
        <param name="command">To be added.</param>
        <param name="handle">To be added.</param>
        <param name="symbols">To be added.</param>
        <summary>
            Sets a command's handler based on a <see cref="T:System.Func`17" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
