<Type Name="CommandExtensions" FullName="System.CommandLine.CommandExtensions">
  <TypeSignature Language="C#" Value="public static class CommandExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CommandExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.CommandExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module CommandExtensions" />
  <TypeSignature Language="F#" Value="type CommandExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides extension methods for <see cref="T:System.CommandLine.Command" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static int Invoke (this System.CommandLine.Command command, string commandLine, System.CommandLine.IConsole? console = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Invoke(class System.CommandLine.Command command, string commandLine, class System.CommandLine.IConsole console) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.CommandExtensions.Invoke(System.CommandLine.Command,System.String,System.CommandLine.IConsole)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Invoke (command As Command, commandLine As String, Optional console As IConsole = Nothing) As Integer" />
      <MemberSignature Language="F#" Value="static member Invoke : System.CommandLine.Command * string * System.CommandLine.IConsole -&gt; int" Usage="System.CommandLine.CommandExtensions.Invoke (command, commandLine, console)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" />
        <Parameter Name="commandLine" Type="System.String" />
        <Parameter Name="console" Type="System.CommandLine.IConsole" />
      </Parameters>
      <Docs>
        <param name="command">The command to invoke.</param>
        <param name="commandLine">The command line to parse.</param>
        <param name="console">The console to which output is written during invocation.</param>
        <summary>
            Parses and invokes a command.
            </summary>
        <returns>The exit code for the invocation.</returns>
        <remarks>The command line string input will be split into tokens as if it had been passed on the command line.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static int Invoke (this System.CommandLine.Command command, string[] args, System.CommandLine.IConsole? console = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Invoke(class System.CommandLine.Command command, string[] args, class System.CommandLine.IConsole console) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.CommandExtensions.Invoke(System.CommandLine.Command,System.String[],System.CommandLine.IConsole)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Invoke (command As Command, args As String(), Optional console As IConsole = Nothing) As Integer" />
      <MemberSignature Language="F#" Value="static member Invoke : System.CommandLine.Command * string[] * System.CommandLine.IConsole -&gt; int" Usage="System.CommandLine.CommandExtensions.Invoke (command, args, console)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" />
        <Parameter Name="args" Type="System.String[]" />
        <Parameter Name="console" Type="System.CommandLine.IConsole" />
      </Parameters>
      <Docs>
        <param name="command">The command to invoke.</param>
        <param name="args">The arguments to parse.</param>
        <param name="console">The console to which output is written during invocation.</param>
        <summary>
            Parses and invokes a command.
            </summary>
        <returns>The exit code for the invocation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; InvokeAsync (this System.CommandLine.Command command, string commandLine, System.CommandLine.IConsole? console = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; InvokeAsync(class System.CommandLine.Command command, string commandLine, class System.CommandLine.IConsole console) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.CommandExtensions.InvokeAsync(System.CommandLine.Command,System.String,System.CommandLine.IConsole)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InvokeAsync (command As Command, commandLine As String, Optional console As IConsole = Nothing) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="static member InvokeAsync : System.CommandLine.Command * string * System.CommandLine.IConsole -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.CommandLine.CommandExtensions.InvokeAsync (command, commandLine, console)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" />
        <Parameter Name="commandLine" Type="System.String" />
        <Parameter Name="console" Type="System.CommandLine.IConsole" />
      </Parameters>
      <Docs>
        <param name="command">The command to invoke.</param>
        <param name="commandLine">The command line to parse.</param>
        <param name="console">The console to which output is written during invocation.</param>
        <summary>
            Parses and invokes a command.
            </summary>
        <returns>The exit code for the invocation.</returns>
        <remarks>The command line string input will be split into tokens as if it had been passed on the command line.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; InvokeAsync (this System.CommandLine.Command command, string[] args, System.CommandLine.IConsole? console = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; InvokeAsync(class System.CommandLine.Command command, string[] args, class System.CommandLine.IConsole console) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.CommandExtensions.InvokeAsync(System.CommandLine.Command,System.String[],System.CommandLine.IConsole)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function InvokeAsync (command As Command, args As String(), Optional console As IConsole = Nothing) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="static member InvokeAsync : System.CommandLine.Command * string[] * System.CommandLine.IConsole -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.CommandLine.CommandExtensions.InvokeAsync (command, args, console)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" />
        <Parameter Name="args" Type="System.String[]" />
        <Parameter Name="console" Type="System.CommandLine.IConsole" />
      </Parameters>
      <Docs>
        <param name="command">The command to invoke.</param>
        <param name="args">The arguments to parse.</param>
        <param name="console">The console to which output is written during invocation.</param>
        <summary>
            Parses and invokes a command.
            </summary>
        <returns>The exit code for the invocation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Parsing.ParseResult Parse (this System.CommandLine.Command command, string commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Parsing.ParseResult Parse(class System.CommandLine.Command command, string commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.CommandExtensions.Parse(System.CommandLine.Command,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Parse (command As Command, commandLine As String) As ParseResult" />
      <MemberSignature Language="F#" Value="static member Parse : System.CommandLine.Command * string -&gt; System.CommandLine.Parsing.ParseResult" Usage="System.CommandLine.CommandExtensions.Parse (command, commandLine)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Parsing::ParseResult ^ Parse(System::CommandLine::Command ^ command, System::String ^ commandLine);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.ParseResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" />
        <Parameter Name="commandLine" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="command">The command to use to parse the command line input.</param>
        <param name="commandLine">A command line string to parse, which can include spaces and quotes equivalent to what can be entered into a terminal.</param>
        <summary>
            Parses a command line string value using the specified command.
            </summary>
        <returns>A parse result describing the outcome of the parse operation.</returns>
        <remarks>The command line string input will be split into tokens as if it had been passed on the command line.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Parsing.ParseResult Parse (this System.CommandLine.Command command, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Parsing.ParseResult Parse(class System.CommandLine.Command command, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.CommandExtensions.Parse(System.CommandLine.Command,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Parse (command As Command, ParamArray args As String()) As ParseResult" />
      <MemberSignature Language="F#" Value="static member Parse : System.CommandLine.Command * string[] -&gt; System.CommandLine.Parsing.ParseResult" Usage="System.CommandLine.CommandExtensions.Parse (command, args)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Parsing::ParseResult ^ Parse(System::CommandLine::Command ^ command, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.ParseResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" RefType="this" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="command">The command to use to parse the command line input.</param>
        <param name="args">The string arguments to parse.</param>
        <summary>
            Parses an array strings using the specified command.
            </summary>
        <returns>A parse result describing the outcome of the parse operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
