<Type Name="ParserConfiguration" FullName="System.CommandLine.ParserConfiguration">
  <TypeSignature Language="C#" Value="public class ParserConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParserConfiguration extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.ParserConfiguration" />
  <TypeSignature Language="VB.NET" Value="Public Class ParserConfiguration" />
  <TypeSignature Language="F#" Value="type ParserConfiguration = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParserConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents the configuration used by the <see cref="T:System.CommandLine.Parsing.CommandLineParser" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParserConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.ParserConfiguration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ParserConfiguration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePosixBundling">
      <MemberSignature Language="C#" Value="public bool EnablePosixBundling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePosixBundling" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.ParserConfiguration.EnablePosixBundling" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePosixBundling As Boolean" />
      <MemberSignature Language="F#" Value="member this.EnablePosixBundling : bool with get, set" Usage="System.CommandLine.ParserConfiguration.EnablePosixBundling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePosixBundling { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="value">
          <see langword="true" /> to parse POSIX bundles; otherwise, <see langword="false" />.</param>
        <summary>
             Enables the parser to recognize and expand POSIX-style bundled options.
             </summary>
        <value>To be added.</value>
        <remarks>
             POSIX conventions recommend that single-character options be allowed to be specified together after a single <c>-</c> prefix. When <see cref="P:System.CommandLine.ParserConfiguration.EnablePosixBundling" /> is set to <see langword="true" />, the following command lines are equivalent:
             
             <code>
                 &gt; myapp -a -b -c
                 &gt; myapp -abc
             </code>
             
             If an argument is provided after an option bundle, it applies to the last option in the bundle. When <see cref="P:System.CommandLine.ParserConfiguration.EnablePosixBundling" /> is set to <see langword="true" />, all of the following command lines are equivalent:
             <code>
                 &gt; myapp -a -b -c arg
                 &gt; myapp -abc arg
                 &gt; myapp -abcarg
             </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseFileTokenReplacer">
      <MemberSignature Language="C#" Value="public System.CommandLine.Parsing.TryReplaceToken? ResponseFileTokenReplacer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.Parsing.TryReplaceToken ResponseFileTokenReplacer" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.ParserConfiguration.ResponseFileTokenReplacer" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseFileTokenReplacer As TryReplaceToken" />
      <MemberSignature Language="F#" Value="member this.ResponseFileTokenReplacer : System.CommandLine.Parsing.TryReplaceToken with get, set" Usage="System.CommandLine.ParserConfiguration.ResponseFileTokenReplacer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::Parsing::TryReplaceToken ^ ResponseFileTokenReplacer { System::CommandLine::Parsing::TryReplaceToken ^ get(); void set(System::CommandLine::Parsing::TryReplaceToken ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.TryReplaceToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Response file token replacer, enabled by default.
            To disable response files support, this property needs to be set to null.
            </summary>
        <value>To be added.</value>
        <remarks>
            When enabled, any token prefixed with <code>@</code> can be replaced with zero or more other tokens. This is mostly commonly used to expand tokens from response files and interpolate them into a command line prior to parsing.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
