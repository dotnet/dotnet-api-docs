<Type Name="IndirectAttackEvaluator" FullName="Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator">
  <TypeSignature Language="C#" Value="public sealed class IndirectAttackEvaluator : Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyEvaluator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IndirectAttackEvaluator extends Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyEvaluator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndirectAttackEvaluator&#xA;Inherits ContentSafetyEvaluator" />
  <TypeSignature Language="F#" Value="type IndirectAttackEvaluator = class&#xA;    inherit ContentSafetyEvaluator" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndirectAttackEvaluator sealed : Microsoft::Extensions::AI::Evaluation::Safety::ContentSafetyEvaluator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Evaluation.Safety</AssemblyName>
    <AssemblyVersion>9.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyEvaluator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <param name="contentSafetyServiceConfiguration">
            Specifies the Azure AI project that should be used and credentials that should be used when this
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyEvaluator" /> communicates with the Azure AI Content Safety service to perform
            evaluations.
            </param>
    <summary>
            An <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluator" /> that utilizes the Azure AI Content Safety service to evaluate responses produced by an
            AI model for the presence of indirect attacks such as manipulated content, intrusion and information gathering.
            </summary>
    <remarks>
      <para>
            Indirect attacks, also known as cross-domain prompt injected attacks (XPIA), are when jailbreak attacks are
            injected into the context of a document or source that may result in an altered, unexpected behavior. Indirect
            attacks evaluations are broken down into three subcategories:
            </para>
      <para>
            Manipulated Content: This category involves commands that aim to alter or fabricate information, often to mislead
            or deceive.It includes actions like spreading false information, altering language or formatting, and hiding or
            emphasizing specific details.The goal is often to manipulate perceptions or behaviors by controlling the flow and
            presentation of information.
            </para>
      <para>
            Intrusion: This category encompasses commands that attempt to breach systems, gain unauthorized access, or elevate
            privileges illicitly. It includes creating backdoors, exploiting vulnerabilities, and traditional jailbreaks to
            bypass security measures.The intent is often to gain control or access sensitive data without detection.
            </para>
      <para>
            Information Gathering: This category pertains to accessing, deleting, or modifying data without authorization,
            often for malicious purposes. It includes exfiltrating sensitive data, tampering with system records, and removing
            or altering existing information. The focus is on acquiring or manipulating data to exploit or compromise systems
            and individuals.
            </para>
      <para>
        <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator" /> returns a <see cref="T:Microsoft.Extensions.AI.Evaluation.BooleanMetric" /> with a value of <see langword="true" />
            indicating the presence of an indirect attack in the response, and a value of <see langword="false" /> indicating
            the absence of an indirect attack.
            </para>
      <para>
            Note that <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator" /> does not support evaluation of multimodal content present in the
            evaluated responses. Images and other multimodal content present in the evaluated responses will be ignored.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndirectAttackEvaluator (Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyServiceConfiguration contentSafetyServiceConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyServiceConfiguration contentSafetyServiceConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator.#ctor(Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyServiceConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contentSafetyServiceConfiguration As ContentSafetyServiceConfiguration)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator : Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyServiceConfiguration -&gt; Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator" Usage="new Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator contentSafetyServiceConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndirectAttackEvaluator(Microsoft::Extensions::AI::Evaluation::Safety::ContentSafetyServiceConfiguration ^ contentSafetyServiceConfiguration);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Safety</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contentSafetyServiceConfiguration" Type="Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyServiceConfiguration" />
      </Parameters>
      <Docs>
        <param name="contentSafetyServiceConfiguration">
            Specifies the Azure AI project that should be used and credentials that should be used when this
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyEvaluator" /> communicates with the Azure AI Content Safety service to perform
            evaluations.
            </param>
        <summary>
            An <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluator" /> that utilizes the Azure AI Content Safety service to evaluate responses produced by an
            AI model for the presence of indirect attacks such as manipulated content, intrusion and information gathering.
            </summary>
        <remarks>
          <para>
            Indirect attacks, also known as cross-domain prompt injected attacks (XPIA), are when jailbreak attacks are
            injected into the context of a document or source that may result in an altered, unexpected behavior. Indirect
            attacks evaluations are broken down into three subcategories:
            </para>
          <para>
            Manipulated Content: This category involves commands that aim to alter or fabricate information, often to mislead
            or deceive.It includes actions like spreading false information, altering language or formatting, and hiding or
            emphasizing specific details.The goal is often to manipulate perceptions or behaviors by controlling the flow and
            presentation of information.
            </para>
          <para>
            Intrusion: This category encompasses commands that attempt to breach systems, gain unauthorized access, or elevate
            privileges illicitly. It includes creating backdoors, exploiting vulnerabilities, and traditional jailbreaks to
            bypass security measures.The intent is often to gain control or access sensitive data without detection.
            </para>
          <para>
            Information Gathering: This category pertains to accessing, deleting, or modifying data without authorization,
            often for malicious purposes. It includes exfiltrating sensitive data, tampering with system records, and removing
            or altering existing information. The focus is on acquiring or manipulating data to exploit or compromise systems
            and individuals.
            </para>
          <para>
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator" /> returns a <see cref="T:Microsoft.Extensions.AI.Evaluation.BooleanMetric" /> with a value of <see langword="true" />
            indicating the presence of an indirect attack in the response, and a value of <see langword="false" /> indicating
            the absence of an indirect attack.
            </para>
          <para>
            Note that <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator" /> does not support evaluation of multimodal content present in the
            evaluated responses. Images and other multimodal content present in the evaluated responses will be ignored.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt; EvaluateAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt; messages, Microsoft.Extensions.AI.ChatResponse modelResponse, Microsoft.Extensions.AI.Evaluation.ChatConfiguration? chatConfiguration = default, System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt;? additionalContext = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt; EvaluateAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt; messages, class Microsoft.Extensions.AI.ChatResponse modelResponse, class Microsoft.Extensions.AI.Evaluation.ChatConfiguration chatConfiguration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt; additionalContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator.EvaluateAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatResponse,Microsoft.Extensions.AI.Evaluation.ChatConfiguration,System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.Evaluation.EvaluationContext},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EvaluateAsync (messages As IEnumerable(Of ChatMessage), modelResponse As ChatResponse, Optional chatConfiguration As ChatConfiguration = Nothing, Optional additionalContext As IEnumerable(Of EvaluationContext) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of EvaluationResult)" />
      <MemberSignature Language="F#" Value="override this.EvaluateAsync : seq&lt;Microsoft.Extensions.AI.ChatMessage&gt; * Microsoft.Extensions.AI.ChatResponse * Microsoft.Extensions.AI.Evaluation.ChatConfiguration * seq&lt;Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt;" Usage="indirectAttackEvaluator.EvaluateAsync (messages, modelResponse, chatConfiguration, additionalContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Safety</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt;" />
        <Parameter Name="modelResponse" Type="Microsoft.Extensions.AI.ChatResponse" />
        <Parameter Name="chatConfiguration" Type="Microsoft.Extensions.AI.Evaluation.ChatConfiguration">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="additionalContext" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="messages">To be added.</param>
        <param name="modelResponse">To be added.</param>
        <param name="chatConfiguration">To be added.</param>
        <param name="additionalContext">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="EvaluationMetricNames">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IReadOnlyCollection&lt;string&gt; EvaluationMetricNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyCollection`1&lt;string&gt; EvaluationMetricNames" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator.EvaluationMetricNames" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EvaluationMetricNames As IReadOnlyCollection(Of String)" />
      <MemberSignature Language="F#" Value="member this.EvaluationMetricNames : System.Collections.Generic.IReadOnlyCollection&lt;string&gt;" Usage="Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator.EvaluationMetricNames" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IReadOnlyCollection&lt;System::String ^&gt; ^ EvaluationMetricNames { System::Collections::Generic::IReadOnlyCollection&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Safety</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="IndirectAttackMetricName">
      <MemberSignature Language="C#" Value="public static string IndirectAttackMetricName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string IndirectAttackMetricName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator.IndirectAttackMetricName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IndirectAttackMetricName As String" />
      <MemberSignature Language="F#" Value="static member IndirectAttackMetricName : string" Usage="Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator.IndirectAttackMetricName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ IndirectAttackMetricName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Safety</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Microsoft.Extensions.AI.Evaluation.EvaluationMetric.Name" /> of the <see cref="T:Microsoft.Extensions.AI.Evaluation.BooleanMetric" /> returned by
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.IndirectAttackEvaluator" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
