<Type Name="CodeVulnerabilityEvaluator" FullName="Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator">
  <TypeSignature Language="C#" Value="public sealed class CodeVulnerabilityEvaluator : Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyEvaluator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CodeVulnerabilityEvaluator extends Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyEvaluator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CodeVulnerabilityEvaluator&#xA;Inherits ContentSafetyEvaluator" />
  <TypeSignature Language="F#" Value="type CodeVulnerabilityEvaluator = class&#xA;    inherit ContentSafetyEvaluator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeVulnerabilityEvaluator sealed : Microsoft::Extensions::AI::Evaluation::Safety::ContentSafetyEvaluator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Evaluation.Safety</AssemblyName>
    <AssemblyVersion>9.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyEvaluator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <param name="contentSafetyServiceConfiguration">
            Specifies the Azure AI project that should be used and credentials that should be used when this
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.ContentSafetyEvaluator" /> communicates with the Azure AI Content Safety service to perform
            evaluations.
            </param>
    <summary>
            An <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluator" /> that utilizes the Azure AI Foundry Evaluation service to evaluate code completion
            responses produced by an AI model for the presence of vulnerable code.
            </summary>
    <remarks>
      <para>
        <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator" /> supports evaluation of code vulnerabilities in the following programming
            languages: Python, Java, C++, C#, Go, JavaScript and SQL. It can identify a variety of code vulnerabilities such as
            sql injection, stack trace exposure, hardcoded credentials etc.
            </para>
      <para>
        <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator" /> returns a <see cref="T:Microsoft.Extensions.AI.Evaluation.BooleanMetric" /> with a value of
            <see langword="true" /> indicating the presence of an vulnerable code in the evaluated response, and a value of
            <see langword="false" /> indicating the absence of vulnerable code.
            </para>
      <para>
            Note that <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator" /> does not support evaluation of multimodal content present in
            the evaluated responses. Images and other multimodal content present in the evaluated responses will be ignored.
            Also note that if a multi-turn conversation is supplied as input, <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator" /> will
            only evaluate the code present in the last conversation turn. Any code present in the previous conversation turns
            will be ignored.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeVulnerabilityEvaluator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeVulnerabilityEvaluator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Safety</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            An <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluator" /> that utilizes the Azure AI Foundry Evaluation service to evaluate code completion
            responses produced by an AI model for the presence of vulnerable code.
            </summary>
        <remarks>
          <para>
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator" /> supports evaluation of code vulnerabilities in the following programming
            languages: Python, Java, C++, C#, Go, JavaScript and SQL. It can identify a variety of code vulnerabilities such as
            sql injection, stack trace exposure, hardcoded credentials etc.
            </para>
          <para>
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator" /> returns a <see cref="T:Microsoft.Extensions.AI.Evaluation.BooleanMetric" /> with a value of
            <see langword="true" /> indicating the presence of an vulnerable code in the evaluated response, and a value of
            <see langword="false" /> indicating the absence of vulnerable code.
            </para>
          <para>
            Note that <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator" /> does not support evaluation of multimodal content present in
            the evaluated responses. Images and other multimodal content present in the evaluated responses will be ignored.
            Also note that if a multi-turn conversation is supplied as input, <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator" /> will
            only evaluate the code present in the last conversation turn. Any code present in the previous conversation turns
            will be ignored.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeVulnerabilityMetricName">
      <MemberSignature Language="C#" Value="public static string CodeVulnerabilityMetricName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CodeVulnerabilityMetricName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator.CodeVulnerabilityMetricName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CodeVulnerabilityMetricName As String" />
      <MemberSignature Language="F#" Value="static member CodeVulnerabilityMetricName : string" Usage="Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator.CodeVulnerabilityMetricName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CodeVulnerabilityMetricName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Safety</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Microsoft.Extensions.AI.Evaluation.EvaluationMetric.Name" /> of the <see cref="T:Microsoft.Extensions.AI.Evaluation.BooleanMetric" /> returned by
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt; EvaluateAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt; messages, Microsoft.Extensions.AI.ChatResponse modelResponse, Microsoft.Extensions.AI.Evaluation.ChatConfiguration? chatConfiguration = default, System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt;? additionalContext = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt; EvaluateAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt; messages, class Microsoft.Extensions.AI.ChatResponse modelResponse, class Microsoft.Extensions.AI.Evaluation.ChatConfiguration chatConfiguration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt; additionalContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Safety.CodeVulnerabilityEvaluator.EvaluateAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatResponse,Microsoft.Extensions.AI.Evaluation.ChatConfiguration,System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.Evaluation.EvaluationContext},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EvaluateAsync (messages As IEnumerable(Of ChatMessage), modelResponse As ChatResponse, Optional chatConfiguration As ChatConfiguration = Nothing, Optional additionalContext As IEnumerable(Of EvaluationContext) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of EvaluationResult)" />
      <MemberSignature Language="F#" Value="override this.EvaluateAsync : seq&lt;Microsoft.Extensions.AI.ChatMessage&gt; * Microsoft.Extensions.AI.ChatResponse * Microsoft.Extensions.AI.Evaluation.ChatConfiguration * seq&lt;Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt;" Usage="codeVulnerabilityEvaluator.EvaluateAsync (messages, modelResponse, chatConfiguration, additionalContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Safety</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt;" />
        <Parameter Name="modelResponse" Type="Microsoft.Extensions.AI.ChatResponse" />
        <Parameter Name="chatConfiguration" Type="Microsoft.Extensions.AI.Evaluation.ChatConfiguration">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="additionalContext" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="messages">To be added.</param>
        <param name="modelResponse">To be added.</param>
        <param name="chatConfiguration">To be added.</param>
        <param name="additionalContext">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
