<Type Name="LogPropertiesAttribute" FullName="Microsoft.Extensions.Logging.LogPropertiesAttribute">
  <TypeSignature Language="C#" Value="public sealed class LogPropertiesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogPropertiesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.LogPropertiesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogPropertiesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type LogPropertiesAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogPropertiesAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.4.0.0</AssemblyVersion>
    <AssemblyVersion>8.5.0.0</AssemblyVersion>
    <AssemblyVersion>8.6.0.0</AssemblyVersion>
    <AssemblyVersion>8.7.0.0</AssemblyVersion>
    <AssemblyVersion>8.8.0.0</AssemblyVersion>
    <AssemblyVersion>8.9.1.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Parameter | System.AttributeTargets.Property)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Parameter | System.AttributeTargets.Property)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Marks a logging method parameter whose public properties need to be logged as log tags.
            </summary>
    <remarks>To be added.</remarks>
    <altmember cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogPropertiesAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.LogPropertiesAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LogPropertiesAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.9.1.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitReferenceName">
      <MemberSignature Language="C#" Value="public bool OmitReferenceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitReferenceName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.LogPropertiesAttribute.OmitReferenceName" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitReferenceName As Boolean" />
      <MemberSignature Language="F#" Value="member this.OmitReferenceName : bool with get, set" Usage="Microsoft.Extensions.Logging.LogPropertiesAttribute.OmitReferenceName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitReferenceName { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.9.1.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether to prefix the name of the parameter or property to the generated name of each tag being logged.
            </summary>
        <value>
            Defaults to <see langword="false" />.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipNullProperties">
      <MemberSignature Language="C#" Value="public bool SkipNullProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipNullProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.LogPropertiesAttribute.SkipNullProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipNullProperties As Boolean" />
      <MemberSignature Language="F#" Value="member this.SkipNullProperties : bool with get, set" Usage="Microsoft.Extensions.Logging.LogPropertiesAttribute.SkipNullProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipNullProperties { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.9.1.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether <see langword="null" /> properties are logged.
            </summary>
        <value>
            Defaults to <see langword="false" />.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transitive">
      <MemberSignature Language="C#" Value="public bool Transitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Transitive" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.LogPropertiesAttribute.Transitive" />
      <MemberSignature Language="VB.NET" Value="Public Property Transitive As Boolean" />
      <MemberSignature Language="F#" Value="member this.Transitive : bool with get, set" Usage="Microsoft.Extensions.Logging.LogPropertiesAttribute.Transitive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Transitive { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.9.1.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0003", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0003", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether to transitively visit properties which are complex objects.
            </summary>
        <value>
            Defaults to <see langword="false" />.
            </value>
        <remarks>
            When logging the properties of an object, this property controls the behavior for each encountered property.
            When this property is <see langword="false" />, then each property is serialized by calling <see cref="M:System.Object.ToString" /> to
            generate a string for the property. When this property is <see langword="true" />, then each property of any complex objects are
            expanded individually.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
