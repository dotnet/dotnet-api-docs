<Type Name="ConsoleLoggerExtensions" FullName="Microsoft.Extensions.Logging.ConsoleLoggerExtensions">
  <TypeSignature Language="C#" Value="public static class ConsoleLoggerExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ConsoleLoggerExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.ConsoleLoggerExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ConsoleLoggerExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleLoggerExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type ConsoleLoggerExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsole (factory As ILoggerFactory) As ILoggerFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggerFactory ^ AddConsole(Microsoft::Extensions::Logging::ILoggerFactory ^ factory);" />
      <MemberSignature Language="F#" Value="static member AddConsole : Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.Extensions.Logging.ILoggerFactory" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.2">
          <AttributeName Language="C#">[System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="factory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to use.</param>
        <summary>Adds a console logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />.Information or higher.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddConsole (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddConsole(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsole (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddConsole(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member AddConsole : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to use.</param>
        <summary>Adds a console logger named 'Console' to the factory.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Configuration.IConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, class Microsoft.Extensions.Configuration.IConfiguration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Configuration.IConfiguration)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsole (factory As ILoggerFactory, configuration As IConfiguration) As ILoggerFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggerFactory ^ AddConsole(Microsoft::Extensions::Logging::ILoggerFactory ^ factory, Microsoft::Extensions::Configuration::IConfiguration ^ configuration);" />
      <MemberSignature Language="F#" Value="static member AddConsole : Microsoft.Extensions.Logging.ILoggerFactory * Microsoft.Extensions.Configuration.IConfiguration -&gt; Microsoft.Extensions.Logging.ILoggerFactory" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole (factory, configuration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.2">
          <AttributeName Language="C#">[System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" Index="1" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="factory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to use.</param>
        <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> to use for <see cref="T:Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings" />.</param>
        <summary />
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, class Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsole (factory As ILoggerFactory, settings As IConsoleLoggerSettings) As ILoggerFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggerFactory ^ AddConsole(Microsoft::Extensions::Logging::ILoggerFactory ^ factory, Microsoft::Extensions::Logging::Console::IConsoleLoggerSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member AddConsole : Microsoft.Extensions.Logging.ILoggerFactory * Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings -&gt; Microsoft.Extensions.Logging.ILoggerFactory" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole (factory, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.2">
          <AttributeName Language="C#">[System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="settings" Type="Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings" Index="1" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="factory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to use.</param>
        <param name="settings">The settings to apply to created <see cref="T:Microsoft.Extensions.Logging.Console.ConsoleLogger" />'s.</param>
        <summary />
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Logging.LogLevel minLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, valuetype Microsoft.Extensions.Logging.LogLevel minLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsole (factory As ILoggerFactory, minLevel As LogLevel) As ILoggerFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggerFactory ^ AddConsole(Microsoft::Extensions::Logging::ILoggerFactory ^ factory, Microsoft::Extensions::Logging::LogLevel minLevel);" />
      <MemberSignature Language="F#" Value="static member AddConsole : Microsoft.Extensions.Logging.ILoggerFactory * Microsoft.Extensions.Logging.LogLevel -&gt; Microsoft.Extensions.Logging.ILoggerFactory" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole (factory, minLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.2">
          <AttributeName Language="C#">[System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="minLevel" Type="Microsoft.Extensions.Logging.LogLevel" Index="1" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="factory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to use.</param>
        <param name="minLevel">The minimum <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> to be logged</param>
        <summary>Adds a console logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />s of minLevel or higher.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, bool includeScopes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, bool includeScopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsole (factory As ILoggerFactory, includeScopes As Boolean) As ILoggerFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggerFactory ^ AddConsole(Microsoft::Extensions::Logging::ILoggerFactory ^ factory, bool includeScopes);" />
      <MemberSignature Language="F#" Value="static member AddConsole : Microsoft.Extensions.Logging.ILoggerFactory * bool -&gt; Microsoft.Extensions.Logging.ILoggerFactory" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole (factory, includeScopes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.2">
          <AttributeName Language="C#">[System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="includeScopes" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="factory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to use.</param>
        <param name="includeScopes">A value which indicates whether log scope information should be displayed
            in the output.</param>
        <summary>Adds a console logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />.Information or higher.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsole (factory As ILoggerFactory, filter As Func(Of String, LogLevel, Boolean)) As ILoggerFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggerFactory ^ AddConsole(Microsoft::Extensions::Logging::ILoggerFactory ^ factory, Func&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ filter);" />
      <MemberSignature Language="F#" Value="static member AddConsole : Microsoft.Extensions.Logging.ILoggerFactory * Func&lt;string, Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.ILoggerFactory" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole (factory, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.2">
          <AttributeName Language="C#">[System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="filter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="factory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to use.</param>
        <param name="filter">The category filter to apply to logs.</param>
        <summary>Adds a console logger that is enabled as defined by the filter function.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddConsole (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Action&lt;Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddConsole(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsole (builder As ILoggingBuilder, configure As Action(Of ConsoleLoggerOptions)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddConsole(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Action&lt;Microsoft::Extensions::Logging::Console::ConsoleLoggerOptions ^&gt; ^ configure);" />
      <MemberSignature Language="F#" Value="static member AddConsole : Microsoft.Extensions.Logging.ILoggingBuilder * Action&lt;Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole (builder, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to use.</param>
        <param name="configure">A delegate to configure the <see cref="T:Microsoft.Extensions.Logging.Console.ConsoleLogger" />.</param>
        <summary>Adds a console logger named 'Console' to the factory.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Microsoft.Extensions.Logging.LogLevel minLevel, bool includeScopes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, valuetype Microsoft.Extensions.Logging.LogLevel minLevel, bool includeScopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsole (factory As ILoggerFactory, minLevel As LogLevel, includeScopes As Boolean) As ILoggerFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggerFactory ^ AddConsole(Microsoft::Extensions::Logging::ILoggerFactory ^ factory, Microsoft::Extensions::Logging::LogLevel minLevel, bool includeScopes);" />
      <MemberSignature Language="F#" Value="static member AddConsole : Microsoft.Extensions.Logging.ILoggerFactory * Microsoft.Extensions.Logging.LogLevel * bool -&gt; Microsoft.Extensions.Logging.ILoggerFactory" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole (factory, minLevel, includeScopes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.2">
          <AttributeName Language="C#">[System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="minLevel" Type="Microsoft.Extensions.Logging.LogLevel" Index="1" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="includeScopes" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="factory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to use.</param>
        <param name="minLevel">The minimum <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> to be logged</param>
        <param name="includeScopes">A value which indicates whether log scope information should be displayed
            in the output.</param>
        <summary>Adds a console logger that is enabled for <see cref="T:Microsoft.Extensions.Logging.LogLevel" />s of minLevel or higher.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggerFactory AddConsole (this Microsoft.Extensions.Logging.ILoggerFactory factory, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter, bool includeScopes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggerFactory AddConsole(class Microsoft.Extensions.Logging.ILoggerFactory factory, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter, bool includeScopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsole (factory As ILoggerFactory, filter As Func(Of String, LogLevel, Boolean), includeScopes As Boolean) As ILoggerFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggerFactory ^ AddConsole(Microsoft::Extensions::Logging::ILoggerFactory ^ factory, Func&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ filter, bool includeScopes);" />
      <MemberSignature Language="F#" Value="static member AddConsole : Microsoft.Extensions.Logging.ILoggerFactory * Func&lt;string, Microsoft.Extensions.Logging.LogLevel, bool&gt; * bool -&gt; Microsoft.Extensions.Logging.ILoggerFactory" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole (factory, filter, includeScopes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.2">
          <AttributeName Language="C#">[System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method is obsolete and will be removed in a future version. The recommended alternative is AddConsole(this ILoggingBuilder builder).")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggerFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Extensions.Logging.ILoggerFactory" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="filter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
        <Parameter Name="includeScopes" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-plat-ext-1.0;dotnet-plat-ext-1.1;dotnet-plat-ext-2.0;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      </Parameters>
      <Docs>
        <param name="factory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to use.</param>
        <param name="filter">The category filter to apply to logs.</param>
        <param name="includeScopes">A value which indicates whether log scope information should be displayed
            in the output.</param>
        <summary>Adds a console logger that is enabled as defined by the filter function.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsoleFormatter&lt;TFormatter,TOptions&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleFormatter&lt;TFormatter,TOptions&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder) where TFormatter : Microsoft.Extensions.Logging.Console.ConsoleFormatter where TOptions : Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleFormatter&lt;(class Microsoft.Extensions.Logging.Console.ConsoleFormatter) TFormatter, (class Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions) TOptions&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsoleFormatter``2(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsoleFormatter(Of TFormatter As ConsoleFormatter, TOptions As ConsoleFormatter) (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFormatter, typename TOptions&gt;&#xA; where TFormatter : Microsoft::Extensions::Logging::Console::ConsoleFormatter where TOptions : Microsoft::Extensions::Logging::Console::ConsoleFormatterOptions[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddConsoleFormatter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member AddConsoleFormatter : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder (requires 'Formatter :&gt; Microsoft.Extensions.Logging.Console.ConsoleFormatter and 'Options :&gt; Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions)" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsoleFormatter builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFormatter">
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.Logging.Console.ConsoleFormatter</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TOptions">
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TFormatter">The custom console logger formatter.</typeparam>
        <typeparam name="TOptions">The configuration options.</typeparam>
        <param name="builder">The current logging builder instance to use.</param>
        <summary>Adds a custom console logger formatter.</summary>
        <returns>The current logging builder instance so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConsoleFormatter&lt;TFormatter,TOptions&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleFormatter&lt;TFormatter,TOptions&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Action&lt;TOptions&gt; configure) where TFormatter : Microsoft.Extensions.Logging.Console.ConsoleFormatter where TOptions : Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddConsoleFormatter&lt;(class Microsoft.Extensions.Logging.Console.ConsoleFormatter) TFormatter, (class Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions) TOptions&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Action`1&lt;!!TOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsoleFormatter``2(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConsoleFormatter(Of TFormatter As ConsoleFormatter, TOptions As ConsoleFormatter) (builder As ILoggingBuilder, configure As Action(Of TOptions)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFormatter, typename TOptions&gt;&#xA; where TFormatter : Microsoft::Extensions::Logging::Console::ConsoleFormatter where TOptions : Microsoft::Extensions::Logging::Console::ConsoleFormatterOptions[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddConsoleFormatter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Action&lt;TOptions&gt; ^ configure);" />
      <MemberSignature Language="F#" Value="static member AddConsoleFormatter : Microsoft.Extensions.Logging.ILoggingBuilder * Action&lt;'Options (requires 'Options :&gt; Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions)&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder (requires 'Formatter :&gt; Microsoft.Extensions.Logging.Console.ConsoleFormatter and 'Options :&gt; Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions)" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsoleFormatter (builder, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFormatter">
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.Logging.Console.ConsoleFormatter</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TOptions">
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0" />
        <Parameter Name="configure" Type="System.Action&lt;TOptions&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TFormatter">The custom console logger formatter.</typeparam>
        <typeparam name="TOptions">The configuration options.</typeparam>
        <param name="builder">The current logging builder instance to use.</param>
        <param name="configure">A delegate to configure <paramref name="TOptions" /> for the custom formatter <paramref name="TFormatter" />.</param>
        <summary>Adds a custom console logger formatter to be configured with the specified options.</summary>
        <returns>The current logging builder instance so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJsonConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddJsonConsole (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddJsonConsole(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddJsonConsole(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddJsonConsole (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddJsonConsole(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member AddJsonConsole : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddJsonConsole builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">The current logging builder instance to use.</param>
        <summary>Adds a console log formatter named 'json' to the factory with default properties.</summary>
        <returns>The current logging builder instance so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJsonConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddJsonConsole (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Action&lt;Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddJsonConsole(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddJsonConsole(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddJsonConsole (builder As ILoggingBuilder, configure As Action(Of JsonConsoleFormatterOptions)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddJsonConsole(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Action&lt;Microsoft::Extensions::Logging::Console::JsonConsoleFormatterOptions ^&gt; ^ configure);" />
      <MemberSignature Language="F#" Value="static member AddJsonConsole : Microsoft.Extensions.Logging.ILoggingBuilder * Action&lt;Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddJsonConsole (builder, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0" />
      </Parameters>
      <Docs>
        <param name="builder">The current logging builder instance to use.</param>
        <param name="configure">A delegate to configure the console logger options for the built-in json log formatter.</param>
        <summary>Adds a console log formatter named 'json'  to the factory configured with the specified Json console formatter options.</summary>
        <returns>The current logging builder instance so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSimpleConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddSimpleConsole (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddSimpleConsole(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSimpleConsole(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddSimpleConsole (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddSimpleConsole(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member AddSimpleConsole : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSimpleConsole builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">The current logging builder instance to use.</param>
        <summary>Adds the default console log formatter named 'simple' to the factory with default properties.</summary>
        <returns>The current logging builder instance so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSimpleConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddSimpleConsole (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Action&lt;Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddSimpleConsole(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSimpleConsole(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddSimpleConsole (builder As ILoggingBuilder, configure As Action(Of SimpleConsoleFormatterOptions)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddSimpleConsole(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Action&lt;Microsoft::Extensions::Logging::Console::SimpleConsoleFormatterOptions ^&gt; ^ configure);" />
      <MemberSignature Language="F#" Value="static member AddSimpleConsole : Microsoft.Extensions.Logging.ILoggingBuilder * Action&lt;Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSimpleConsole (builder, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0" />
      </Parameters>
      <Docs>
        <param name="builder">The current logging builder instance to use.</param>
        <param name="configure">A delegate to configure the console logger options for the built-in default log formatter.</param>
        <summary>Adds a console log formatter named 'simple' to the factory configured with the specified simple console formatter options.</summary>
        <returns>The current logging builder instance so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSystemdConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddSystemdConsole (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddSystemdConsole(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSystemdConsole(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddSystemdConsole (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddSystemdConsole(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member AddSystemdConsole : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSystemdConsole builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">The current logging builder instance to use.</param>
        <summary>Adds a console log formatter named 'systemd' to the factory with default properties.</summary>
        <returns>The current logging builder instance so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSystemdConsole">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddSystemdConsole (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Action&lt;Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddSystemdConsole(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSystemdConsole(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddSystemdConsole (builder As ILoggingBuilder, configure As Action(Of ConsoleFormatterOptions)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddSystemdConsole(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Action&lt;Microsoft::Extensions::Logging::Console::ConsoleFormatterOptions ^&gt; ^ configure);" />
      <MemberSignature Language="F#" Value="static member AddSystemdConsole : Microsoft.Extensions.Logging.ILoggingBuilder * Action&lt;Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddSystemdConsole (builder, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0" />
      </Parameters>
      <Docs>
        <param name="builder">The current logging builder instance to use.</param>
        <param name="configure">A delegate to configure the console logger options for the built-in systemd log formatter.</param>
        <summary>Adds a console log formatter named 'systemd' to the factory configured with the specified console formatter options.</summary>
        <returns>The current logging builder instance so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
