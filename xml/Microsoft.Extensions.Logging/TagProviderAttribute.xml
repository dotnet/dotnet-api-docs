<Type Name="TagProviderAttribute" FullName="Microsoft.Extensions.Logging.TagProviderAttribute">
  <TypeSignature Language="C#" Value="public sealed class TagProviderAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TagProviderAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.TagProviderAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TagProviderAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type TagProviderAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class TagProviderAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.4.0.0</AssemblyVersion>
    <AssemblyVersion>8.5.0.0</AssemblyVersion>
    <AssemblyVersion>8.6.0.0</AssemblyVersion>
    <AssemblyVersion>8.7.0.0</AssemblyVersion>
    <AssemblyVersion>8.8.0.0</AssemblyVersion>
    <AssemblyVersion>8.9.1.0</AssemblyVersion>
    <AssemblyVersion>8.10.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Parameter | System.AttributeTargets.Property)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Parameter | System.AttributeTargets.Property)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("CODE_GENERATION_ATTRIBUTES")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Defines a method to invoke to generate logging tags for a referenced object.
            </summary>
    <remarks>To be added.</remarks>
    <altmember cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TagProviderAttribute (Type providerType, string providerMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type providerType, string providerMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.TagProviderAttribute.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerType As Type, providerMethod As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Logging.TagProviderAttribute : Type * string -&gt; Microsoft.Extensions.Logging.TagProviderAttribute" Usage="new Microsoft.Extensions.Logging.TagProviderAttribute (providerType, providerMethod)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TagProviderAttribute(Type ^ providerType, System::String ^ providerMethod);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerType" Type="System.Type" />
        <Parameter Name="providerMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerType">A type containing a method that provides a custom set of tags to log.</param>
        <param name="providerMethod">The name of a method on the provider type that generates a custom set of tags to log.</param>
        <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.TagProviderAttribute" /> class with custom tags provider.
             </summary>
        <remarks>
             You can create your own method that will generate the exact set of tags to log
             for a given input object.
            
             The method referenced by this constructor should be non-generic, <c>static</c>, and <c>public</c>, and it should have two parameters:
             <list type="bullet"><item><description>First parameter of type <see cref="T:Microsoft.Extensions.Logging.ITagCollector" />.</description></item><item><description>
                 Second parameter of type <c>T?</c>, where <c>T</c> is the type of logging method parameter that you want to log.
                 </description></item></list></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerMethod" /> or <paramref name="providerType" /> is <see langword="null" />.
             </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="providerMethod" /> is either an empty string or contains only whitespace.
             </exception>
        <example>
          <code language="csharp">
             [LoggerMessage(1, LogLevel.Warning, "Custom tags for {Param}.")]
             static partial void LogMethod(ILogger logger,
                 [TagProvider(typeof(CustomProvider), nameof(CustomProvider.GetTagsToLog))] ClassToLog o);
            
             public static class CustomProvider
             {
                 public static void GetTagsToLog(ITagCollector collector, ClassToLog? param)
                 {
                     collector.Add("Custom_tag_name", param?.MyProperty);
                     collector.Add(nameof(ClassToLog.AnotherProperty), param?.AnotherProperty);
                     // ...
                 }
             }
             </code>
        </example>
        <altmember cref="T:Microsoft.Extensions.Logging.ITagCollector" />
      </Docs>
    </Member>
    <Member MemberName="OmitReferenceName">
      <MemberSignature Language="C#" Value="public bool OmitReferenceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitReferenceName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.TagProviderAttribute.OmitReferenceName" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitReferenceName As Boolean" />
      <MemberSignature Language="F#" Value="member this.OmitReferenceName : bool with get, set" Usage="Microsoft.Extensions.Logging.TagProviderAttribute.OmitReferenceName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitReferenceName { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether to prefix the name of the parameter or property to the generated name of each tag being logged.
            </summary>
        <value>
            Defaults to <see langword="false" />.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderMethod">
      <MemberSignature Language="C#" Value="public string ProviderMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderMethod" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.TagProviderAttribute.ProviderMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderMethod As String" />
      <MemberSignature Language="F#" Value="member this.ProviderMethod : string" Usage="Microsoft.Extensions.Logging.TagProviderAttribute.ProviderMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderMethod { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the method that provides tags to be logged.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderType">
      <MemberSignature Language="C#" Value="public Type ProviderType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ProviderType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.TagProviderAttribute.ProviderType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderType As Type" />
      <MemberSignature Language="F#" Value="member this.ProviderType : Type" Usage="Microsoft.Extensions.Logging.TagProviderAttribute.ProviderType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ProviderType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Abstractions</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:System.Type" /> containing the method that provides tags to be logged.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
