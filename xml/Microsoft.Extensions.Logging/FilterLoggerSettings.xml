<Type Name="FilterLoggerSettings" FullName="Microsoft.Extensions.Logging.FilterLoggerSettings">
  <TypeSignature Language="C#" Value="public class FilterLoggerSettings : Microsoft.Extensions.Logging.IFilterLoggerSettings, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.Extensions.Logging.LogLevel&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilterLoggerSettings extends System.Object implements class Microsoft.Extensions.Logging.IFilterLoggerSettings, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.FilterLoggerSettings" />
  <TypeSignature Language="VB.NET" Value="Public Class FilterLoggerSettings&#xA;Implements IEnumerable(Of KeyValuePair(Of String, LogLevel)), IFilterLoggerSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilterLoggerSettings : Microsoft::Extensions::Logging::IFilterLoggerSettings, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel&gt;&gt;" />
  <TypeSignature Language="F#" Value="type FilterLoggerSettings = class&#xA;    interface IFilterLoggerSettings&#xA;    interface seq&lt;KeyValuePair&lt;string, LogLevel&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.IFilterLoggerSettings</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Extensions.Logging.LogLevel&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Filter settings for messages logged by an <see cref="T:Microsoft.Extensions.Logging.ILogger" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilterLoggerSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggerSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilterLoggerSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string categoryName, Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string categoryName, valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggerSettings.Add(System.String,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (categoryName As String, logLevel As LogLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ categoryName, Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberSignature Language="F#" Value="member this.Add : string * Microsoft.Extensions.Logging.LogLevel -&gt; unit" Usage="filterLoggerSettings.Add (categoryName, logLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="categoryName">The logger category name.</param>
        <param name="logLevel">The log level.</param>
        <summary>Adds a filter for given logger category name and <see cref="T:Microsoft.Extensions.Logging.LogLevel" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken">
      <MemberSignature Language="C#" Value="Microsoft.Extensions.Primitives.IChangeToken Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Primitives.IChangeToken Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ChangeToken As IChangeToken Implements IFilterLoggerSettings.ChangeToken" />
      <MemberSignature Language="C++ CLI" Value="property Microsoft::Extensions::Primitives::IChangeToken ^ Microsoft::Extensions::Logging::IFilterLoggerSettings::ChangeToken { Microsoft::Extensions::Primitives::IChangeToken ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken : Microsoft.Extensions.Primitives.IChangeToken" Usage="Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Primitives.IChangeToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload">
      <MemberSignature Language="C#" Value="Microsoft.Extensions.Logging.IFilterLoggerSettings IFilterLoggerSettings.Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.Extensions.Logging.IFilterLoggerSettings Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload" />
      <MemberSignature Language="VB.NET" Value="Function Reload () As IFilterLoggerSettings Implements IFilterLoggerSettings.Reload" />
      <MemberSignature Language="C++ CLI" Value=" virtual Microsoft::Extensions::Logging::IFilterLoggerSettings ^ Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload() = Microsoft::Extensions::Logging::IFilterLoggerSettings::Reload;" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload : unit -&gt; Microsoft.Extensions.Logging.IFilterLoggerSettings&#xA;override this.Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload : unit -&gt; Microsoft.Extensions.Logging.IFilterLoggerSettings" Usage="filterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.IFilterLoggerSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switches">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,Microsoft.Extensions.Logging.LogLevel&gt; Switches { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel&gt; Switches" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.FilterLoggerSettings.Switches" />
      <MemberSignature Language="VB.NET" Value="Public Property Switches As IDictionary(Of String, LogLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel&gt; ^ Switches { System::Collections::Generic::IDictionary&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel&gt; ^ get(); void set(System::Collections::Generic::IDictionary&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Switches : System.Collections.Generic.IDictionary&lt;string, Microsoft.Extensions.Logging.LogLevel&gt; with get, set" Usage="Microsoft.Extensions.Logging.FilterLoggerSettings.Switches" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,Microsoft.Extensions.Logging.LogLevel&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Extensions.Logging.LogLevel&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.Extensions.Logging.LogLevel&gt;&gt; IEnumerable&lt;KeyValuePair&lt;string,LogLevel&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Extensions.Logging.LogLevel&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggerSettings.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;System#String,Microsoft#Extensions#Logging#LogLevel&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, LogLevel)) Implements IEnumerable(Of KeyValuePair(Of String, LogLevel)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Extensions.Logging.LogLevel&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel&gt;&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Extensions.Logging.LogLevel&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, Microsoft.Extensions.Logging.LogLevel&gt;&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Extensions.Logging.LogLevel&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, Microsoft.Extensions.Logging.LogLevel&gt;&gt;" Usage="filterLoggerSettings.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Extensions.Logging.LogLevel&gt;&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.Extensions.Logging.LogLevel&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggerSettings.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="filterLoggerSettings.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public bool TryGetSwitch (string name, out Microsoft.Extensions.Logging.LogLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSwitch(string name, [out] valuetype Microsoft.Extensions.Logging.LogLevel&amp; level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSwitch (name As String, ByRef level As LogLevel) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetSwitch(System::String ^ name, [Runtime::InteropServices::Out] Microsoft::Extensions::Logging::LogLevel % level);" />
      <MemberSignature Language="F#" Value="abstract member TryGetSwitch : string * LogLevel -&gt; bool&#xA;override this.TryGetSwitch : string * LogLevel -&gt; bool" Usage="filterLoggerSettings.TryGetSwitch (name, level)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="level">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
