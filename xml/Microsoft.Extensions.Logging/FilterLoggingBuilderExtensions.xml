<Type Name="FilterLoggingBuilderExtensions" FullName="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class FilterLoggingBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit FilterLoggingBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module FilterLoggingBuilderExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilterLoggingBuilderExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type FilterLoggingBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Extension methods for setting up logging services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter (builder As ILoggingBuilder, levelFilter As Func(Of LogLevel, Boolean)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFilter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Func&lt;Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ levelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.ILoggingBuilder * Func&lt;Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, levelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="levelFilter">The filter to be added.</param>
        <summary>Adds a log filter to the factory.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; categoryLevelFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; categoryLevelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter (builder As ILoggingBuilder, categoryLevelFilter As Func(Of String, LogLevel, Boolean)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFilter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Func&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ categoryLevelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.ILoggingBuilder * Func&lt;string, Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, categoryLevelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="categoryLevelFilter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="categoryLevelFilter">The filter to be added.</param>
        <summary>Adds a log filter to the factory.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Func&lt;string,string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Func`4&lt;string, string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter (builder As ILoggingBuilder, filter As Func(Of String, String, LogLevel, Boolean)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFilter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Func&lt;System::String ^, System::String ^, Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ filter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.ILoggingBuilder * Func&lt;string, string, Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="filter" Type="System.Func&lt;System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="filter">The filter to be added.</param>
        <summary>Adds a log filter to the factory.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter (builder As LoggerFilterOptions, levelFilter As Func(Of LogLevel, Boolean)) As LoggerFilterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::LoggerFilterOptions ^ AddFilter(Microsoft::Extensions::Logging::LoggerFilterOptions ^ builder, Func&lt;Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ levelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.LoggerFilterOptions * Func&lt;Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.LoggerFilterOptions" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, levelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
        <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="levelFilter">The filter function to apply.</param>
        <summary>Adds a log filter to the factory.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; categoryLevelFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; categoryLevelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter (builder As LoggerFilterOptions, categoryLevelFilter As Func(Of String, LogLevel, Boolean)) As LoggerFilterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::LoggerFilterOptions ^ AddFilter(Microsoft::Extensions::Logging::LoggerFilterOptions ^ builder, Func&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ categoryLevelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.LoggerFilterOptions * Func&lt;string, Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.LoggerFilterOptions" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, categoryLevelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
        <Parameter Name="categoryLevelFilter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="categoryLevelFilter">The filter function to apply.</param>
        <summary>Adds a log filter to the factory.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, Func&lt;string,string,Microsoft.Extensions.Logging.LogLevel,bool&gt; filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, class System.Func`4&lt;string, string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter (builder As LoggerFilterOptions, filter As Func(Of String, String, LogLevel, Boolean)) As LoggerFilterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::LoggerFilterOptions ^ AddFilter(Microsoft::Extensions::Logging::LoggerFilterOptions ^ builder, Func&lt;System::String ^, System::String ^, Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ filter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.LoggerFilterOptions * Func&lt;string, string, Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.LoggerFilterOptions" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
        <Parameter Name="filter" Type="System.Func&lt;System.String,System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="filter">The filter function to apply.</param>
        <summary>Adds a log filter to the factory.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, Microsoft.Extensions.Logging.LogLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter (builder As ILoggingBuilder, category As String, level As LogLevel) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFilter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, System::String ^ category, Microsoft::Extensions::Logging::LogLevel level);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.ILoggingBuilder * string * Microsoft.Extensions.Logging.LogLevel -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, category, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="category">The category to filter.</param>
        <param name="level">The level to filter.</param>
        <summary>Adds a log filter to the factory.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter (this Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter(class Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter (builder As ILoggingBuilder, category As String, levelFilter As Func(Of LogLevel, Boolean)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFilter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, System::String ^ category, Func&lt;Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ levelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.ILoggingBuilder * string * Func&lt;Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, category, levelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="category">The category to filter.</param>
        <param name="levelFilter">The filter function to apply.</param>
        <summary>Adds a log filter to the factory.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, Microsoft.Extensions.Logging.LogLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter (builder As LoggerFilterOptions, category As String, level As LogLevel) As LoggerFilterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::LoggerFilterOptions ^ AddFilter(Microsoft::Extensions::Logging::LoggerFilterOptions ^ builder, System::String ^ category, Microsoft::Extensions::Logging::LogLevel level);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.LoggerFilterOptions * string * Microsoft.Extensions.Logging.LogLevel -&gt; Microsoft.Extensions.Logging.LoggerFilterOptions" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, category, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="category">The category to filter.</param>
        <param name="level">The level to filter.</param>
        <summary>Adds a log filter to the factory.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter (builder As LoggerFilterOptions, category As String, levelFilter As Func(Of LogLevel, Boolean)) As LoggerFilterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::LoggerFilterOptions ^ AddFilter(Microsoft::Extensions::Logging::LoggerFilterOptions ^ builder, System::String ^ category, Func&lt;Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ levelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.LoggerFilterOptions * string * Func&lt;Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.LoggerFilterOptions" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, category, levelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="category">The category to filter.</param>
        <param name="levelFilter">The filter function to apply.</param>
        <summary>Adds a log filter to the factory.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter(Of T As ILoggerProvider) (builder As ILoggingBuilder, levelFilter As Func(Of LogLevel, Boolean)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Extensions::Logging::ILoggerProvider[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFilter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Func&lt;Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ levelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.ILoggingBuilder * Func&lt;Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder (requires 'T :&gt; Microsoft.Extensions.Logging.ILoggerProvider)" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, levelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> which this filter will be added for.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="levelFilter">The filter to be added.</param>
        <summary>Adds a log filter for the given <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; categoryLevelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; categoryLevelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter(Of T As ILoggerProvider) (builder As ILoggingBuilder, categoryLevelFilter As Func(Of String, LogLevel, Boolean)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Extensions::Logging::ILoggerProvider[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFilter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Func&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ categoryLevelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.ILoggingBuilder * Func&lt;string, Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder (requires 'T :&gt; Microsoft.Extensions.Logging.ILoggerProvider)" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, categoryLevelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="categoryLevelFilter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> which this filter will be added for.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="categoryLevelFilter">The filter to be added.</param>
        <summary>Adds a log filter for the given <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter(Of T As ILoggerProvider) (builder As LoggerFilterOptions, levelFilter As Func(Of LogLevel, Boolean)) As LoggerFilterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Extensions::Logging::ILoggerProvider[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::LoggerFilterOptions ^ AddFilter(Microsoft::Extensions::Logging::LoggerFilterOptions ^ builder, Func&lt;Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ levelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.LoggerFilterOptions * Func&lt;Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.LoggerFilterOptions (requires 'T :&gt; Microsoft.Extensions.Logging.ILoggerProvider)" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, levelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
        <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> which this filter will be added for.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="levelFilter">The filter function to apply.</param>
        <summary>Adds a log filter for the given <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, Func&lt;string,Microsoft.Extensions.Logging.LogLevel,bool&gt; categoryLevelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, class System.Func`3&lt;string, valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; categoryLevelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter(Of T As ILoggerProvider) (builder As LoggerFilterOptions, categoryLevelFilter As Func(Of String, LogLevel, Boolean)) As LoggerFilterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Extensions::Logging::ILoggerProvider[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::LoggerFilterOptions ^ AddFilter(Microsoft::Extensions::Logging::LoggerFilterOptions ^ builder, Func&lt;System::String ^, Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ categoryLevelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.LoggerFilterOptions * Func&lt;string, Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.LoggerFilterOptions (requires 'T :&gt; Microsoft.Extensions.Logging.ILoggerProvider)" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, categoryLevelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
        <Parameter Name="categoryLevelFilter" Type="System.Func&lt;System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> which this filter will be added for.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="categoryLevelFilter">The filter function to apply.</param>
        <summary>Adds a log filter for the given <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, Microsoft.Extensions.Logging.LogLevel level) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter(Of T As ILoggerProvider) (builder As ILoggingBuilder, category As String, level As LogLevel) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Extensions::Logging::ILoggerProvider[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFilter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, System::String ^ category, Microsoft::Extensions::Logging::LogLevel level);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.ILoggingBuilder * string * Microsoft.Extensions.Logging.LogLevel -&gt; Microsoft.Extensions.Logging.ILoggingBuilder (requires 'T :&gt; Microsoft.Extensions.Logging.ILoggerProvider)" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, category, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <typeparam name="T">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> which this filter will be added for.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="category">The category to filter.</param>
        <param name="level">The level to filter.</param>
        <summary>Adds a log filter for the given <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder, string category, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter(Of T As ILoggerProvider) (builder As ILoggingBuilder, category As String, levelFilter As Func(Of LogLevel, Boolean)) As ILoggingBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Extensions::Logging::ILoggerProvider[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFilter(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, System::String ^ category, Func&lt;Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ levelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.ILoggingBuilder * string * Func&lt;Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder (requires 'T :&gt; Microsoft.Extensions.Logging.ILoggerProvider)" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, category, levelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> which this filter will be added for.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="category">The category to filter.</param>
        <param name="levelFilter">The filter function to apply.</param>
        <summary>Adds a log filter for the given <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, Microsoft.Extensions.Logging.LogLevel level) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, valuetype Microsoft.Extensions.Logging.LogLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter(Of T As ILoggerProvider) (builder As LoggerFilterOptions, category As String, level As LogLevel) As LoggerFilterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Extensions::Logging::ILoggerProvider[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::LoggerFilterOptions ^ AddFilter(Microsoft::Extensions::Logging::LoggerFilterOptions ^ builder, System::String ^ category, Microsoft::Extensions::Logging::LogLevel level);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.LoggerFilterOptions * string * Microsoft.Extensions.Logging.LogLevel -&gt; Microsoft.Extensions.Logging.LoggerFilterOptions (requires 'T :&gt; Microsoft.Extensions.Logging.ILoggerProvider)" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, category, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <typeparam name="T">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> which this filter will be added for.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="category">The category to filter.</param>
        <param name="level">The level to filter.</param>
        <summary>Adds a log filter for the given <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;T&gt; (this Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, Func&lt;Microsoft.Extensions.Logging.LogLevel,bool&gt; levelFilter) where T : Microsoft.Extensions.Logging.ILoggerProvider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.LoggerFilterOptions AddFilter&lt;(class Microsoft.Extensions.Logging.ILoggerProvider) T&gt;(class Microsoft.Extensions.Logging.LoggerFilterOptions builder, string category, class System.Func`2&lt;valuetype Microsoft.Extensions.Logging.LogLevel, bool&gt; levelFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter``1(Microsoft.Extensions.Logging.LoggerFilterOptions,System.String,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFilter(Of T As ILoggerProvider) (builder As LoggerFilterOptions, category As String, levelFilter As Func(Of LogLevel, Boolean)) As LoggerFilterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Extensions::Logging::ILoggerProvider[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::LoggerFilterOptions ^ AddFilter(Microsoft::Extensions::Logging::LoggerFilterOptions ^ builder, System::String ^ category, Func&lt;Microsoft::Extensions::Logging::LogLevel, bool&gt; ^ levelFilter);" />
      <MemberSignature Language="F#" Value="static member AddFilter : Microsoft.Extensions.Logging.LoggerFilterOptions * string * Func&lt;Microsoft.Extensions.Logging.LogLevel, bool&gt; -&gt; Microsoft.Extensions.Logging.LoggerFilterOptions (requires 'T :&gt; Microsoft.Extensions.Logging.ILoggerProvider)" Usage="Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions.AddFilter (builder, category, levelFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LoggerFilterOptions</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.Extensions.Logging.ILoggerProvider</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.LoggerFilterOptions" RefType="this" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="levelFilter" Type="System.Func&lt;Microsoft.Extensions.Logging.LogLevel,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> which this filter will be added for.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> to add the filter to.</param>
        <param name="category">The category to filter.</param>
        <param name="levelFilter">The filter function to apply.</param>
        <summary>Adds a log filter for the given <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</summary>
        <returns>The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /> so that additional calls can be chained.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
