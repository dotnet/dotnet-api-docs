<Type Name="SamplingLoggerBuilderExtensions" FullName="Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class SamplingLoggerBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SamplingLoggerBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module SamplingLoggerBuilderExtensions" />
  <TypeSignature Language="F#" Value="type SamplingLoggerBuilderExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class SamplingLoggerBuilderExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
    <AssemblyVersion>9.4.0.0</AssemblyVersion>
    <AssemblyVersion>9.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0003", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("EXTEXP0003", UrlFormat="https://aka.ms/dotnet-extensions-warnings/{0}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Extensions for configuring logging sampling.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddRandomProbabilisticSampler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddRandomProbabilisticSampler (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Microsoft.Extensions.Configuration.IConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddRandomProbabilisticSampler(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class Microsoft.Extensions.Configuration.IConfiguration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddRandomProbabilisticSampler(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Configuration.IConfiguration)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddRandomProbabilisticSampler (builder As ILoggingBuilder, configuration As IConfiguration) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddRandomProbabilisticSampler : Microsoft.Extensions.Logging.ILoggingBuilder * Microsoft.Extensions.Configuration.IConfiguration -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddRandomProbabilisticSampler (builder, configuration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddRandomProbabilisticSampler(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Microsoft::Extensions::Configuration::IConfiguration ^ configuration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>9.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="configuration" Type="Microsoft.Extensions.Configuration.IConfiguration" />
      </Parameters>
      <Docs>
        <param name="builder">The dependency injection container to add logging to.</param>
        <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> to add.</param>
        <summary>
            Adds Random Probabilistic logging sampler to the logging infrastructure.
            </summary>
        <returns>The value of <paramref name="builder" />.</returns>
        <remarks>
            Matched logs will be randomly sampled according to the configured probability.
            Higher the probability value, higher is the probability of a given log record to be sampled in.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddRandomProbabilisticSampler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddRandomProbabilisticSampler (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Action&lt;Microsoft.Extensions.Diagnostics.Sampling.RandomProbabilisticSamplerOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddRandomProbabilisticSampler(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Diagnostics.Sampling.RandomProbabilisticSamplerOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddRandomProbabilisticSampler(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Diagnostics.Sampling.RandomProbabilisticSamplerOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddRandomProbabilisticSampler (builder As ILoggingBuilder, configure As Action(Of RandomProbabilisticSamplerOptions)) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddRandomProbabilisticSampler : Microsoft.Extensions.Logging.ILoggingBuilder * Action&lt;Microsoft.Extensions.Diagnostics.Sampling.RandomProbabilisticSamplerOptions&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddRandomProbabilisticSampler (builder, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddRandomProbabilisticSampler(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Action&lt;Microsoft::Extensions::Diagnostics::Sampling::RandomProbabilisticSamplerOptions ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>9.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Diagnostics.Sampling.RandomProbabilisticSamplerOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The dependency injection container to add logging to.</param>
        <param name="configure">The <see cref="T:Microsoft.Extensions.Diagnostics.Sampling.RandomProbabilisticSamplerOptions" /> configuration delegate.</param>
        <summary>
            Adds Random Probabilistic logging sampler to the logging infrastructure.
            </summary>
        <returns>The value of <paramref name="builder" />.</returns>
        <remarks>
            Matched logs will be randmoly sampled according to the configured probability.
            Higher the probability value, higher is the probability of a given log record to be sampled in.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> or <paramref name="configure" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddRandomProbabilisticSampler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddRandomProbabilisticSampler (this Microsoft.Extensions.Logging.ILoggingBuilder builder, double probability, Microsoft.Extensions.Logging.LogLevel? level = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddRandomProbabilisticSampler(class Microsoft.Extensions.Logging.ILoggingBuilder builder, float64 probability, valuetype System.Nullable`1&lt;valuetype Microsoft.Extensions.Logging.LogLevel&gt; level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddRandomProbabilisticSampler(Microsoft.Extensions.Logging.ILoggingBuilder,System.Double,System.Nullable{Microsoft.Extensions.Logging.LogLevel})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddRandomProbabilisticSampler (builder As ILoggingBuilder, probability As Double, Optional level As Nullable(Of LogLevel) = Nothing) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddRandomProbabilisticSampler : Microsoft.Extensions.Logging.ILoggingBuilder * double * Nullable&lt;Microsoft.Extensions.Logging.LogLevel&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddRandomProbabilisticSampler (builder, probability, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>9.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="level" Type="System.Nullable&lt;Microsoft.Extensions.Logging.LogLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The dependency injection container to add logging to.</param>
        <param name="probability">Probability from 0.0 to 1.0.</param>
        <param name="level">The log level (and below) to apply the sampler to.</param>
        <summary>
            Adds Random Probabilistic logging sampler to the logging infrastructure.
            </summary>
        <returns>The value of <paramref name="builder" />.</returns>
        <remarks>
            Matched logs will be randomly sampled according to the configured <paramref name="probability" />.
            Higher the probability value, higher is the probability of a given log record to be sampled in.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="probability" /> is less than 0 or greater than 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSampler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddSampler (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Microsoft.Extensions.Logging.LoggingSampler sampler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddSampler(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class Microsoft.Extensions.Logging.LoggingSampler sampler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddSampler(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Logging.LoggingSampler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddSampler (builder As ILoggingBuilder, sampler As LoggingSampler) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddSampler : Microsoft.Extensions.Logging.ILoggingBuilder * Microsoft.Extensions.Logging.LoggingSampler -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddSampler (builder, sampler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddSampler(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Microsoft::Extensions::Logging::LoggingSampler ^ sampler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>9.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="sampler" Type="Microsoft.Extensions.Logging.LoggingSampler" />
      </Parameters>
      <Docs>
        <param name="builder">The dependency injection container to add logging to.</param>
        <param name="sampler">The sampler instance to add.</param>
        <summary>
            Adds a logging sampler instance to the logging infrastructure.
            </summary>
        <returns>The value of <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> or <paramref name="sampler" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSampler&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddSampler&lt;T&gt; (this Microsoft.Extensions.Logging.ILoggingBuilder builder) where T : Microsoft.Extensions.Logging.LoggingSampler;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddSampler&lt;(class Microsoft.Extensions.Logging.LoggingSampler) T&gt;(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddSampler``1(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddSampler(Of T As LoggingSampler) (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddSampler : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder (requires 'T :&gt; Microsoft.Extensions.Logging.LoggingSampler)" Usage="Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddSampler builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Extensions::Logging::LoggingSampler[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddSampler(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>9.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.Logging.LoggingSampler</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">Logging sampler type.</typeparam>
        <param name="builder">The dependency injection container to add logging to.</param>
        <summary>
            Adds a logging sampler type to the logging infrastructure.
            </summary>
        <returns>The value of <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTraceBasedSampler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddTraceBasedSampler (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddTraceBasedSampler(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddTraceBasedSampler(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddTraceBasedSampler (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddTraceBasedSampler : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Logging.SamplingLoggerBuilderExtensions.AddTraceBasedSampler builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddTraceBasedSampler(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry</AssemblyName>
        <AssemblyVersion>9.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">The dependency injection container to add logging to.</param>
        <summary>
            Adds Trace-based logging sampler to the logging infrastructure.
            </summary>
        <returns>The value of <paramref name="builder" />.</returns>
        <remarks>Sampling decisions for logs match exactly the sampling decisions for the underlying <see cref="T:System.Diagnostics.Activity" />.
            You may want to configure Tracing Sampling separately as part of OpenTelemetry .NET.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
