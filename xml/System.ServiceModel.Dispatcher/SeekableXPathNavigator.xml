<Type Name="SeekableXPathNavigator" FullName="System.ServiceModel.Dispatcher.SeekableXPathNavigator">
  <TypeSignature Language="C#" Value="public abstract class SeekableXPathNavigator : System.Xml.XPath.XPathNavigator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SeekableXPathNavigator extends System.Xml.XPath.XPathNavigator" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SeekableXPathNavigator&#xA;Inherits XPathNavigator" />
  <TypeSignature Language="F#" Value="type SeekableXPathNavigator = class&#xA;    inherit XPathNavigator" />
  <TypeSignature Language="C++ CLI" Value="public ref class SeekableXPathNavigator abstract : System::Xml::XPath::XPathNavigator" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XPath.XPathNavigator</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides read-only, random access to data contained in XML documents and enables efficient querying for specified nodes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SOAP messages passed between parts of the Windows Communication Foundation (WCF) system are handled by various components of the system that must inspect these messages to determine what actions to take in processing them. The XPath engine is a component that queries messages for this purpose and it requires a navigator to read SOAP messages and other XML documents. A navigator provides a cursor that moves from node to node tracking where the XML document is actually being read.  
  
 The XPath engine works with a <xref:System.ServiceModel.Dispatcher.SeekableXPathNavigator>, which extends the <xref:System.Xml.XPath.XPathNavigator> class by adding a <xref:System.ServiceModel.Dispatcher.SeekableXPathNavigator.CurrentPosition%2A> property. This property allows positions within the XML document to be saved and loaded quickly without having to clone the navigator, an expensive memory allocation that the <xref:System.Xml.XPath.XPathNavigator> requires for such an operation. The XPath engine must frequently record the position of the cursor in the course of executing queries on XML documents, so the <xref:System.ServiceModel.Dispatcher.SeekableXPathNavigator> provides an important optimization for message processing.  
  
 Note that the value of the <xref:System.ServiceModel.Dispatcher.SeekableXPathNavigator.CurrentPosition%2A> property is implementation-specific and may not map to node position or character position. Its value is only meaningful to the <xref:System.ServiceModel.Dispatcher.SeekableXPathNavigator> implementation (and instance) that supplied it.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SeekableXPathNavigator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SeekableXPathNavigator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.SeekableXPathNavigator" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparePosition">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNodeOrder ComparePosition (long firstPosition, long secondPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Xml.XmlNodeOrder ComparePosition(int64 firstPosition, int64 secondPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.ComparePosition(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ComparePosition (firstPosition As Long, secondPosition As Long) As XmlNodeOrder" />
      <MemberSignature Language="F#" Value="override this.ComparePosition : int64 * int64 -&gt; System.Xml.XmlNodeOrder" Usage="seekableXPathNavigator.ComparePosition (firstPosition, secondPosition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Xml::XmlNodeOrder ComparePosition(long firstPosition, long secondPosition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeOrder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstPosition" Type="System.Int64" />
        <Parameter Name="secondPosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="firstPosition">The first position in the comparison.</param>
        <param name="secondPosition">The second position in the comparison.</param>
        <summary>When overridden in a derived class, returns a value that describes the document order of the two specified positions.</summary>
        <returns>One of the <see cref="T:System.Xml.XmlNodeOrder" /> values that describes the relation of <paramref name="firstPosition" /> to <paramref name="secondPosition" /> in the document.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="firstPosition" /> or <paramref name="secondPosition" /> is not valid.</exception>
        <block subset="none" type="overrides">
          <para>This method should throw an exception for invalid position values.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CurrentPosition">
      <MemberSignature Language="C#" Value="public abstract long CurrentPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 CurrentPosition" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.SeekableXPathNavigator.CurrentPosition" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property CurrentPosition As Long" />
      <MemberSignature Language="F#" Value="member this.CurrentPosition : int64 with get, set" Usage="System.ServiceModel.Dispatcher.SeekableXPathNavigator.CurrentPosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property long CurrentPosition { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets or sets a value associated with the node in the data where the XPath navigator is positioned.</summary>
        <value>A value that is associated with the navigator's current position.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `set` operation moves the navigator to the position associated with the value specified. The `get` operation returns a value associated with the current position of the navigator.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>This property does not have any intrinsic meaning: it is an opaque <see cref="T:System.Int64" /> value that an implementation associates with the navigator's current position. No restrictions or requirements are placed on the value itself. No assumptions about its internal data structure can be made.  
  
 It is not required that the values be sequential, or even that a navigator position map to a unique value. Multiple values can refer to the same navigator position, so comparing two values does not provide useful information.  
  
 Any value supplied by a <see langword="get" /> operation must be valid for a <see langword="set" /> operation. It is not necessarily an error for a <see langword="set" /> operation to use a value not first acquired by a <see langword="get" /> operation. A value not returned by <see cref="P:System.ServiceModel.Dispatcher.SeekableXPathNavigator.CurrentPosition" /> that has been acquired some other way may or may not be considered valid by the implementation: this choice is up to the implementer.  
  
 The meaning of a value must not change during the life of its navigator while it navigates the same document. Also, the meaning of values must be shared by any two navigators that are related by cloning, again, provided they still navigate the same document. All values supplied by a <see langword="get" /> operation must remain valid for the life of a navigator and any of its clones as long as the instance still navigates the same document.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalName">
      <MemberSignature Language="C#" Value="public abstract string GetLocalName (long nodePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetLocalName(int64 nodePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetLocalName(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetLocalName (nodePosition As Long) As String" />
      <MemberSignature Language="F#" Value="abstract member GetLocalName : int64 -&gt; string" Usage="seekableXPathNavigator.GetLocalName nodePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetLocalName(long nodePosition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="nodePosition">The position of the node whose local name is being retrieved.</param>
        <summary>When overridden in a derived class, returns the local name of the node at the position specified.</summary>
        <returns>The local name of the node at the specified position. <see cref="F:System.String.Empty" /> is returned if the node does not have a local name, for example if the current position references a text node.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="nodePosition" /> is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public abstract string GetName (long nodePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetName(int64 nodePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetName(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetName (nodePosition As Long) As String" />
      <MemberSignature Language="F#" Value="abstract member GetName : int64 -&gt; string" Usage="seekableXPathNavigator.GetName nodePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetName(long nodePosition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="nodePosition">The position of the node whose name is being retrieved.</param>
        <summary>When overridden in a derived class, returns the name of the node at the specified position.</summary>
        <returns>The name of the node at <paramref name="nodePosition" />. <see cref="F:System.String.Empty" /> is returned if the node does not have a name.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The name is the name of the XML element at `nodePosition` and typically includes a namespace prefix.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="nodePosition" /> is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNamespace">
      <MemberSignature Language="C#" Value="public abstract string GetNamespace (long nodePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetNamespace(int64 nodePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetNamespace(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNamespace (nodePosition As Long) As String" />
      <MemberSignature Language="F#" Value="override this.GetNamespace : int64 -&gt; string" Usage="seekableXPathNavigator.GetNamespace nodePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetNamespace(long nodePosition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="nodePosition">The position of the node whose namespace is being retrieved.</param>
        <summary>When overridden in a derived class, returns the namespace of the node at the specified position.</summary>
        <returns>The namespace of the node at <paramref name="nodePosition" />. <see cref="F:System.String.Empty" /> is returned if the node does not have a namespace.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="nodePosition" /> is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XPath.XPathNodeType GetNodeType (long nodePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Xml.XPath.XPathNodeType GetNodeType(int64 nodePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetNodeType(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNodeType (nodePosition As Long) As XPathNodeType" />
      <MemberSignature Language="F#" Value="abstract member GetNodeType : int64 -&gt; System.Xml.XPath.XPathNodeType" Usage="seekableXPathNavigator.GetNodeType nodePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Xml::XPath::XPathNodeType GetNodeType(long nodePosition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNodeType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="nodePosition">The position of the node whose node type is being retrieved.</param>
        <summary>When overridden in a derived class, returns the type of the node at the specified position.</summary>
        <returns>One of the <see cref="T:System.Xml.XPath.XPathNodeType" /> values that indicate the type of the XML node.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="nodePosition" /> is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract string GetValue (long nodePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetValue(int64 nodePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.SeekableXPathNavigator.GetValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetValue (nodePosition As Long) As String" />
      <MemberSignature Language="F#" Value="abstract member GetValue : int64 -&gt; string" Usage="seekableXPathNavigator.GetValue nodePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetValue(long nodePosition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodePosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="nodePosition">The position of the node whose text value is being retrieved.</param>
        <summary>When overridden in a derived class, returns the text value of the node at the specified position.</summary>
        <returns>The text value of the node at <paramref name="nodePosition" />. <see cref="F:System.String.Empty" /> is returned if the node does not have a text value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For elements, this method returns the concatenation of all text descendents of the node at the specified position, similar to the <xref:System.Xml.XmlElement.InnerText%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="nodePosition" /> is invalid.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
