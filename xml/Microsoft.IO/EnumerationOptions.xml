<Type Name="EnumerationOptions" FullName="Microsoft.IO.EnumerationOptions">
  <TypeSignature Language="C#" Value="public class EnumerationOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EnumerationOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IO.EnumerationOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class EnumerationOptions" />
  <TypeSignature Language="F#" Value="type EnumerationOptions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class EnumerationOptions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IO.Redist</AssemblyName>
    <AssemblyVersion>6.0.0.1</AssemblyVersion>
    <AssemblyVersion>6.1.0.0</AssemblyVersion>
    <AssemblyVersion>6.1.1.0</AssemblyVersion>
    <AssemblyVersion>6.1.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides file and directory enumeration options.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnumerationOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IO.EnumerationOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnumerationOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IO.Redist</AssemblyName>
        <AssemblyVersion>6.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.IO.EnumerationOptions" /> class with the recommended default options.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributesToSkip">
      <MemberSignature Language="C#" Value="public System.IO.FileAttributes AttributesToSkip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAttributes AttributesToSkip" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IO.EnumerationOptions.AttributesToSkip" />
      <MemberSignature Language="VB.NET" Value="Public Property AttributesToSkip As FileAttributes" />
      <MemberSignature Language="F#" Value="member this.AttributesToSkip : System.IO.FileAttributes with get, set" Usage="Microsoft.IO.EnumerationOptions.AttributesToSkip" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAttributes AttributesToSkip { System::IO::FileAttributes get(); void set(System::IO::FileAttributes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IO.Redist</AssemblyName>
        <AssemblyVersion>6.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the attributes to skip. The default is <c>FileAttributes.Hidden | FileAttributes.System</c>.</summary>
        <value>The attributes to skip.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public int BufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BufferSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IO.EnumerationOptions.BufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BufferSize As Integer" />
      <MemberSignature Language="F#" Value="member this.BufferSize : int with get, set" Usage="Microsoft.IO.EnumerationOptions.BufferSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IO.Redist</AssemblyName>
        <AssemblyVersion>6.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the suggested buffer size, in bytes. The default is 0 (no suggestion).</summary>
        <value>The buffer size.</value>
        <remarks>Not all platforms use user allocated buffers, and some require either fixed buffers or a buffer that has enough space to return a full result.
            One scenario where this option is useful is with remote share enumeration on Windows. Having a large buffer may result in better performance as more results can be batched over the wire (for example, over a network share).
            A "large" buffer, for example, would be 16K. Typical is 4K.
            The suggested buffer size will not be used if it has no meaning for the native APIs on the current platform or if it would be too small for getting at least a single result.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreInaccessible">
      <MemberSignature Language="C#" Value="public bool IgnoreInaccessible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreInaccessible" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IO.EnumerationOptions.IgnoreInaccessible" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreInaccessible As Boolean" />
      <MemberSignature Language="F#" Value="member this.IgnoreInaccessible : bool with get, set" Usage="Microsoft.IO.EnumerationOptions.IgnoreInaccessible" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreInaccessible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IO.Redist</AssemblyName>
        <AssemblyVersion>6.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether to skip files or directories when access is denied (for example, <see cref="T:System.UnauthorizedAccessException" /> or <see cref="T:System.Security.SecurityException" />). The default is <see langword="true" />.</summary>
        <value>
          <see langword="true" /> to skip innacessible files or directories; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchCasing">
      <MemberSignature Language="C#" Value="public Microsoft.IO.MatchCasing MatchCasing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.IO.MatchCasing MatchCasing" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IO.EnumerationOptions.MatchCasing" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchCasing As MatchCasing" />
      <MemberSignature Language="F#" Value="member this.MatchCasing : Microsoft.IO.MatchCasing with get, set" Usage="Microsoft.IO.EnumerationOptions.MatchCasing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::IO::MatchCasing MatchCasing { Microsoft::IO::MatchCasing get(); void set(Microsoft::IO::MatchCasing value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IO.Redist</AssemblyName>
        <AssemblyVersion>6.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IO.MatchCasing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the case matching behavior.</summary>
        <value>One of the enumeration values that indicates the case matching behavior.</value>
        <remarks>For APIs that allow specifying a match expression, this property allows you to specify the case matching behavior.
            The default is to match platform defaults, which are gleaned from the case sensitivity of the temporary folder.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchType">
      <MemberSignature Language="C#" Value="public Microsoft.IO.MatchType MatchType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.IO.MatchType MatchType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IO.EnumerationOptions.MatchType" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchType As MatchType" />
      <MemberSignature Language="F#" Value="member this.MatchType : Microsoft.IO.MatchType with get, set" Usage="Microsoft.IO.EnumerationOptions.MatchType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::IO::MatchType MatchType { Microsoft::IO::MatchType get(); void set(Microsoft::IO::MatchType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IO.Redist</AssemblyName>
        <AssemblyVersion>6.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IO.MatchType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the match type.</summary>
        <value>One of the enumeration values that indicates the match type.</value>
        <remarks>For APIs that allow specifying a match expression, this property allows you to specify how to interpret the match expression.
            The default is simple matching where '*' is always 0 or more characters and '?' is a single character.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxRecursionDepth">
      <MemberSignature Language="C#" Value="public int MaxRecursionDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxRecursionDepth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IO.EnumerationOptions.MaxRecursionDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxRecursionDepth As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxRecursionDepth : int with get, set" Usage="Microsoft.IO.EnumerationOptions.MaxRecursionDepth" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxRecursionDepth { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IO.Redist</AssemblyName>
        <AssemblyVersion>6.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates the maximum directory depth to recurse while enumerating, when <see cref="P:Microsoft.IO.EnumerationOptions.RecurseSubdirectories" /> is set to <see langword="true" />.</summary>
        <value>A number that represents the maximum directory depth to recurse while enumerating. The default value is <see cref="F:System.Int32.MaxValue" />.</value>
        <remarks>If <see cref="P:Microsoft.IO.EnumerationOptions.MaxRecursionDepth" /> is set to a negative number, the default value <see cref="F:System.Int32.MaxValue" /> is used.
            If <see cref="P:Microsoft.IO.EnumerationOptions.MaxRecursionDepth" /> is set to zero, enumeration returns the contents of the initial directory.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecurseSubdirectories">
      <MemberSignature Language="C#" Value="public bool RecurseSubdirectories { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecurseSubdirectories" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IO.EnumerationOptions.RecurseSubdirectories" />
      <MemberSignature Language="VB.NET" Value="Public Property RecurseSubdirectories As Boolean" />
      <MemberSignature Language="F#" Value="member this.RecurseSubdirectories : bool with get, set" Usage="Microsoft.IO.EnumerationOptions.RecurseSubdirectories" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RecurseSubdirectories { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IO.Redist</AssemblyName>
        <AssemblyVersion>6.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether to recurse into subdirectories while enumerating. The default is <see langword="false" />.</summary>
        <value>
          <see langword="true" /> to recurse into subdirectories; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnSpecialDirectories">
      <MemberSignature Language="C#" Value="public bool ReturnSpecialDirectories { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReturnSpecialDirectories" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IO.EnumerationOptions.ReturnSpecialDirectories" />
      <MemberSignature Language="VB.NET" Value="Public Property ReturnSpecialDirectories As Boolean" />
      <MemberSignature Language="F#" Value="member this.ReturnSpecialDirectories : bool with get, set" Usage="Microsoft.IO.EnumerationOptions.ReturnSpecialDirectories" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReturnSpecialDirectories { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IO.Redist</AssemblyName>
        <AssemblyVersion>6.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether to return the special directory entries "." and "..".</summary>
        <value>
          <see langword="true" /> to return the special directory entries "." and ".."; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
