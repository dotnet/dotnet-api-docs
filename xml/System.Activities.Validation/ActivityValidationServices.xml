<Type Name="ActivityValidationServices" FullName="System.Activities.Validation.ActivityValidationServices">
  <TypeSignature Language="C#" Value="public static class ActivityValidationServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ActivityValidationServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Validation.ActivityValidationServices" />
  <TypeSignature Language="VB.NET" Value="Public Class ActivityValidationServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class ActivityValidationServices abstract sealed" />
  <TypeSignature Language="F#" Value="type ActivityValidationServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the functionality to validate a workflow.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public static System.Activities.Activity Resolve (System.Activities.Activity root, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.Activity Resolve(class System.Activities.Activity root, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Validation.ActivityValidationServices.Resolve(System.Activities.Activity,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Resolve (root As Activity, id As String) As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Activities::Activity ^ Resolve(System::Activities::Activity ^ root, System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member Resolve : System.Activities.Activity * string -&gt; System.Activities.Activity" Usage="System.Activities.Validation.ActivityValidationServices.Resolve (root, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Activities.Activity" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="root">The root workflow activity that contains the activity element to access.</param>
        <param name="id">An identifier that is associated with an activity.</param>
        <summary>Retrieves the workflow activity with the specified ID in the specified workflow.</summary>
        <returns>A workflow activity.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Verifies that a workflow activity is correctly configured according to the validation logic. This logic can be the <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" /> method of the activities to validate, or build and policy constraints.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Custom activity authors can provide validation logic in an activity's <xref:System.Activities.CodeActivity.CacheMetadata%2A> override. Any exceptions that are thrown from <xref:System.Activities.CodeActivity.CacheMetadata%2A> are not treated as validation errors. These exceptions will escape from the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> and must be handled by the caller.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static System.Activities.Validation.ValidationResults Validate (System.Activities.Activity toValidate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.Validation.ValidationResults Validate(class System.Activities.Activity toValidate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Validate (toValidate As Activity) As ValidationResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Activities::Validation::ValidationResults ^ Validate(System::Activities::Activity ^ toValidate);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Activities.Activity -&gt; System.Activities.Validation.ValidationResults" Usage="System.Activities.Validation.ActivityValidationServices.Validate toValidate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Validation.ValidationResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toValidate" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="toValidate">An element from a workflow activity tree.</param>
        <summary>Verifies that a workflow activity is correctly configured according to the validation logic. This logic can be the <see cref="M:System.Activities.CodeActivity.CacheMetadata(System.Activities.CodeActivityMetadata)" /> method of the activities to validate, or build and policy constraints.</summary>
        <returns>A collection of validation errors, each of which can contain the name of the validated activity, a descriptive message, an error code, and other information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Custom activity authors can provide validation logic in an activity's <xref:System.Activities.CodeActivity.CacheMetadata%2A> override. Any exceptions that are thrown from <xref:System.Activities.CodeActivity.CacheMetadata%2A> are not treated as validation errors. These exceptions will escape from the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> and must be handled by the caller.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static System.Activities.Validation.ValidationResults Validate (System.Activities.Activity toValidate, System.Activities.Validation.ValidationSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.Validation.ValidationResults Validate(class System.Activities.Activity toValidate, class System.Activities.Validation.ValidationSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Validation.ActivityValidationServices.Validate(System.Activities.Activity,System.Activities.Validation.ValidationSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Validate (toValidate As Activity, settings As ValidationSettings) As ValidationResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Activities::Validation::ValidationResults ^ Validate(System::Activities::Activity ^ toValidate, System::Activities::Validation::ValidationSettings ^ settings);" />
      <MemberSignature Language="F#" Value="static member Validate : System.Activities.Activity * System.Activities.Validation.ValidationSettings -&gt; System.Activities.Validation.ValidationResults" Usage="System.Activities.Validation.ActivityValidationServices.Validate (toValidate, settings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Validation.ValidationResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toValidate" Type="System.Activities.Activity" />
        <Parameter Name="settings" Type="System.Activities.Validation.ValidationSettings" />
      </Parameters>
      <Docs>
        <param name="toValidate">An activity from a workflow activity tree.</param>
        <param name="settings">An object that determines the behavior of the validation method on the workflow , can suppress the internal validation logic, and can also contain the policy constraints.</param>
        <summary>Verifies that a workflow activity is correctly configured according to the validation logic. This logic can be the cacheMetadata method of the activities to validate, or build and policy constraints.</summary>
        <returns>A collection of validation errors, each of which can contain the name of the activity that is configured incorrectly, a descriptive message, an error or warning code , and other information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Custom activity authors can provide validation logic in an activity's <xref:System.Activities.CodeActivity.CacheMetadata%2A> override. Any exceptions that are thrown from <xref:System.Activities.CodeActivity.CacheMetadata%2A> are not treated as validation errors. These exceptions will escape from the call to <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> and must be handled by the caller.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
