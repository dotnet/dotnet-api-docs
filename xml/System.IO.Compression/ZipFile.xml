<Type Name="ZipFile" FullName="System.IO.Compression.ZipFile">
  <TypeSignature Language="C#" Value="public static class ZipFile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ZipFile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Compression.ZipFile" />
  <TypeSignature Language="VB.NET" Value="Public Class ZipFile" />
  <TypeSignature Language="F#" Value="type ZipFile = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ZipFile abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.IO.Compression.ZipFile" ToVersion="10.0.0.0" FrameworkAlternate="net-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.IO.Compression.ZipFile" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.IO.Compression.ZipFile" ToVersion="6.0.0.0" FrameworkAlternate="net-6.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.IO.Compression.ZipFile" ToVersion="7.0.0.0" FrameworkAlternate="net-7.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.IO.Compression.ZipFile" ToVersion="8.0.0.0" FrameworkAlternate="net-8.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.IO.Compression.ZipFile" ToVersion="9.0.0.0" FrameworkAlternate="net-9.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides static methods for creating, extracting, and opening zip archives.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

[!INCLUDE[remarks](~/includes/remarks/System.IO.Compression/ZipFile/ZipFile.md)]

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateFromDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates a zip archive that contains the files and directories from the specified directory.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, class System.IO.Stream destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destination As Stream)" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * System.IO.Stream -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::IO::Stream ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" Index="0" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="destination" Type="System.IO.Stream" Index="1" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="destination">The stream where the zip archive is to be stored.</param>
        <summary>Creates a zip archive in the specified stream that contains the files and directories from the specified directory.</summary>
        <remarks>The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created.
             This method overload does not include the base directory in the archive and does not allow you to specify a compression level.
             If you want to include the base directory or specify a compression level, call the <see cref="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)" /> method overload.
             If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <see cref="T:System.IO.IOException" /> exception.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

-or-

The <paramref name="destination" /> stream does not support writing.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destination" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="sourceDirectoryName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">A file in the specified directory could not be opened.

-or-

An I/O error occurred while opening a file to be archived.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> contains an invalid format.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destinationArchiveFileName As String)" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="destinationArchiveFileName">The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <summary>Creates a zip archive that contains the files and directories from the specified directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created. This method overload does not include the base directory in the archive and does not allow you to specify a compression level. If you want to include the base directory or specify a compression level, call the <xref:System.IO.Compression.ZipFile.CreateFromDirectory%28System.String%2CSystem.String%2CSystem.IO.Compression.CompressionLevel%2CSystem.Boolean%29> method overload.

 If the archive already exists, an <xref:System.IO.IOException> exception is thrown. If an entry with the specified name already exists in the archive, a second entry is created with an identical name.

 If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <xref:System.IO.IOException> exception.

## Examples
 This example shows how to create and extract a zip archive by using the <xref:System.IO.Compression.ZipFile> class. It compresses the contents of a folder into a zip archive, and then extracts that content to a new folder. To use the <xref:System.IO.Compression.ZipFile> class, you must reference the `System.IO.Compression.FileSystem` assembly in your project.

 :::code language="csharp" source="~/snippets/csharp/System.IO.Compression/ZipFile/CreateFromDirectory/program1.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System.IO.Compression/ZipFile/CreateFromDirectory/program1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/System.IO.Compression/ZipFile/CreateFromDirectory/program1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destinationArchiveFileName" /> already exists.

 -or-

 A file in the specified directory could not be opened.

-or-

An I/O error occurred while opening a file to be archived.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="destinationArchiveFileName" /> specifies a directory.

 -or-

 The caller does not have the required permission to access the directory specified in <paramref name="sourceDirectoryName" /> or the file specified in <paramref name="destinationArchiveFileName" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> contains an invalid format.

 -or-

 The zip archive does not support writing.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, System.IO.Stream destination, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, class System.IO.Stream destination, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destination As Stream, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean)" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * System.IO.Stream * System.IO.Compression.CompressionLevel * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destination, compressionLevel, includeBaseDirectory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::IO::Stream ^ destination, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" Index="0" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="destination" Type="System.IO.Stream" Index="1" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" Index="2" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" Index="3" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="destination">The stream where the zip archive is to be stored.</param>
        <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to include the directory name from <paramref name="sourceDirectoryName" /> at the root of the archive; <see langword="false" /> to include only the contents of the directory.</param>
        <summary>Creates a zip archive in the specified stream that contains the files and directories from the specified directory, uses the specified compression level, and optionally includes the base directory.</summary>
        <remarks>The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created.
             Use this method overload to specify the compression level and whether to include the base directory in the archive.
             If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <see cref="T:System.IO.IOException" /> exception.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

-or-

The <paramref name="destination" /> stream does not support writing.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destination" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="sourceDirectoryName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">A file in the specified directory could not be opened.

-or-

An I/O error occurred while opening a file to be archived.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="compressionLevel" /> is not a valid <see cref="T:System.IO.Compression.CompressionLevel" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destinationArchiveFileName As String, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean)" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="destinationArchiveFileName">The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to include the directory name from <paramref name="sourceDirectoryName" /> at the root of the archive; <see langword="false" /> to include only the contents of the directory.</param>
        <summary>Creates a zip archive that contains the files and directories from the specified directory, uses the specified compression level, and optionally includes the base directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created. Use this method overload to specify the compression level and whether to include the base directory in the archive.

 If the archive already exists, an <xref:System.IO.IOException> exception is thrown. If an entry with the specified name already exists in the archive, a second entry is created with an identical name.

 If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <xref:System.IO.IOException> exception.

## Examples
 This example shows how to create and extract a zip archive by using the <xref:System.IO.Compression.ZipFile> class. It compresses the contents of a folder into a zip archive, and then extracts that content to a new folder. When compressing the archive, the base directory is included and the compression level is set to emphasize the speed of the operation over efficiency. To use the <xref:System.IO.Compression.ZipFile> class, you must reference the `System.IO.Compression.FileSystem` assembly in your project.

 :::code language="csharp" source="~/snippets/csharp/System.IO.Compression/ZipFile/CreateFromDirectory/program2.cs" id="Snippet2":::
 :::code language="fsharp" source="~/snippets/fsharp/System.IO.Compression/ZipFile/CreateFromDirectory/program2.fs" id="Snippet2":::
 :::code language="vb" source="~/snippets/visualbasic/System.IO.Compression/ZipFile/CreateFromDirectory/program2.vb" id="Snippet2":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destinationArchiveFileName" /> already exists.

 -or-

 A file in the specified directory could not be opened.

-or-

An I/O error occurred while opening a file to be archived.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="destinationArchiveFileName" /> specifies a directory.

 -or-

 The caller does not have the required permission to access the directory specified in <paramref name="sourceDirectoryName" /> or the file specified in <paramref name="destinationArchiveFileName" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> contains an invalid format.

 -or-

 The zip archive does not support writing.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, System.IO.Stream destination, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding? entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, class System.IO.Stream destination, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destination As Stream, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean, entryNameEncoding As Encoding)" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * System.IO.Stream * System.IO.Compression.CompressionLevel * bool * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destination, compressionLevel, includeBaseDirectory, entryNameEncoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::IO::Stream ^ destination, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" Index="0" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="destination" Type="System.IO.Stream" Index="1" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" Index="2" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" Index="3" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="4" FrameworkAlternate="net-8.0;net-9.0;net-10.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="destination">The stream where the zip archive is to be stored.</param>
        <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to include the directory name from <paramref name="sourceDirectoryName" /> at the root of the archive; <see langword="false" /> to include only the contents of the directory.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names or comments.</param>
        <summary>Creates a zip archive in the specified stream that contains the files and directories from the specified directory, uses the specified compression level and character encoding for entry names and comments, and optionally includes the base directory.</summary>
        <remarks>The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created.
             Use this method overload to specify the compression level and character encoding, and whether to include the base directory in the archive.
             If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <see cref="T:System.IO.IOException" /> exception.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

-or-

The <paramref name="destination" /> stream does not support writing.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destination" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="sourceDirectoryName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">A file in the specified directory could not be opened.

-or-

An I/O error occurred while opening a file to be archived.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="compressionLevel" /> is not a valid <see cref="T:System.IO.Compression.CompressionLevel" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding entryNameEncoding);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destinationArchiveFileName As String, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean, entryNameEncoding As Encoding)" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * System.IO.Compression.CompressionLevel * bool * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.CreateFromDirectory (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory, entryNameEncoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationArchiveFileName, System::IO::Compression::CompressionLevel compressionLevel, bool includeBaseDirectory, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding? entryNameEncoding);" FrameworkAlternate="net-10.0;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="destinationArchiveFileName">The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to include the directory name from <paramref name="sourceDirectoryName" /> at the root of the archive; <see langword="false" /> to include only the contents of the directory.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names or comments.</param>
        <summary>Creates a zip archive that contains the files and directories from the specified directory, uses the specified compression level and character encoding for entry names and comments, and optionally includes the base directory.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created. Use this method overload to specify the compression level and character encoding, and whether to include the base directory in the archive.

 If the archive already exists, an <xref:System.IO.IOException> exception is thrown. If an entry with the specified name already exists in the archive, a second entry is created with an identical name.

 If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <xref:System.IO.IOException> exception.

 If `entryNameEncoding` is set to a value other than `null`, the entry names and comments are encoded by using the specified encoding. If the specified encoding is a UTF-8 encoding, the language encoding flag (in the general-purpose bit flag of the local file header) is set for each entry.

 If `entryNameEncoding` is set to `null`, the entry names and comments are encoded according to the following rules:

- For entry names and comments that contain characters outside the ASCII range, the language encoding flag is set, and UTF-8 is used to encode the entry name and comment.

- For entry names and comments that contain only ASCII characters, the language encoding flag is not set, and the current system default code page is used to encode the entry names and comments.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

 -or-

 <paramref name="entryNameEncoding" /> is set to a Unicode encoding other than UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destinationArchiveFileName" /> already exists.

 -or-

 A file in the specified directory could not be opened.

-or-

An I/O error occurred while opening a file to be archived.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="destinationArchiveFileName" /> specifies a directory.

 -or-

 The caller does not have the required permission to access the directory specified in <paramref name="sourceDirectoryName" /> or the file specified in <paramref name="destinationArchiveFileName" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> contains an invalid format.

 -or-

 The zip archive does not support writing.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateFromDirectoryAsync (string sourceDirectoryName, System.IO.Stream destination, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateFromDirectoryAsync(string sourceDirectoryName, class System.IO.Stream destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectoryAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromDirectoryAsync (sourceDirectoryName As String, destination As Stream, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectoryAsync : string * System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.CreateFromDirectoryAsync (sourceDirectoryName, destination, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destination" Type="System.IO.Stream" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="destination">The stream where the zip archive is to be stored.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>Asynchronously creates a zip archive in the specified stream that contains the files and directories from the specified directory.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created.</para>
          <para>This method overload does not include the base directory in the archive and does not allow you to specify a compression level.</para>
          <para>If you want to include the base directory or specify a compression level, call the <see cref="M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)" /> method overload.</para>
          <para>If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <see cref="T:System.IO.IOException" /> exception.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="sourceDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</para>
          <para>-or-</para>
          <para>The <paramref name="destination" /> stream does not support writing.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destination" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="sourceDirectoryName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <para>A file in the specified directory could not be opened.</para>
          <para>-or-</para>
          <para>An I/O error occurred while opening a file to be archived.</para>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateFromDirectoryAsync (string sourceDirectoryName, string destinationArchiveFileName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateFromDirectoryAsync(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectoryAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromDirectoryAsync (sourceDirectoryName As String, destinationArchiveFileName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectoryAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.CreateFromDirectoryAsync (sourceDirectoryName, destinationArchiveFileName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory on the file system to be archived.</param>
        <param name="destinationArchiveFileName">The name of the archive to be created.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>
          Asynchronously creates a zip archive at the path <paramref name="destinationArchiveFileName" /> that contains the files and directories from the directory specified by <paramref name="sourceDirectoryName" />.
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The directory structure is preserved in the archive, and a recursive search is done for files to be archived. The archive must not exist. If the directory is empty, an empty archive is created. If a file in the directory cannot be added to the archive, the archive will be left incomplete and invalid and the method will throw an exception. This method does not include the base directory into the archive.</para>
          <para>If an error is encountered while adding files to the archive, this method stops adding files and leaves the archive in an invalid state. The paths are permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. If a file in the archive has data in the last write time field that is not a valid zip timestamp, an indicator value of 1980 January 1 at midnight will be used for the file's last modified time.If an entry with the specified name already exists in the archive, a second entry is created that has an identical name. Since no <code>CompressionLevel</code> is specified, the default provided by the implementation of the underlying compression algorithm is used; the <code>ZipArchive</code> will not impose its own default.</para>
          <para>(Currently, the underlying compression algorithm is provided by the <see cref="T:System.IO.Compression.DeflateStream" /> class.)</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by <code>InvalidPathChars</code>.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>In <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" />, the specified path, file name, or both exceed the system-defined maximum length.</para>
          <para>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>The path specified in <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is invalid, (for example, it is on an unmapped drive).</para>
          <para>-or-</para>
          <para>The directory specified by <paramref name="sourceDirectoryName" /> does not exist.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <paramref name="destinationArchiveFileName" /> already exists.</para>
          <para>-or-</para>
          <para>An I/O error occurred while opening a file to be archived.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>
            <paramref name="destinationArchiveFileName" /> specified a directory.</para>
          <para>-or-</para>
          <para>The caller does not have the required permission.</para>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <para>
            <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is in an invalid format.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateFromDirectoryAsync (string sourceDirectoryName, System.IO.Stream destination, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateFromDirectoryAsync(string sourceDirectoryName, class System.IO.Stream destination, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectoryAsync(System.String,System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromDirectoryAsync (sourceDirectoryName As String, destination As Stream, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectoryAsync : string * System.IO.Stream * System.IO.Compression.CompressionLevel * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.CreateFromDirectoryAsync (sourceDirectoryName, destination, compressionLevel, includeBaseDirectory, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destination" Type="System.IO.Stream" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" Index="2" FrameworkAlternate="net-10.0" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" Index="3" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="destination">The stream where the zip archive is to be stored.</param>
        <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to include the directory name from <paramref name="sourceDirectoryName" /> at the root of the archive; <see langword="false" /> to include only the contents of the directory.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        <summary>Asynchronously creates a zip archive in the specified stream that contains the files and directories from the specified directory, using the specified compression level, and optionally including the base directory.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created.</para>
          <para>Use this method overload to specify the compression level and whether to include the base directory in the archive.</para>
          <para>If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <see cref="T:System.IO.IOException" /> exception.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="sourceDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</para>
          <para>-or-</para>
          <para>The <paramref name="destination" /> stream does not support writing.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destination" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="sourceDirectoryName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <para>A file in the specified directory could not be opened.</para>
          <para>-or-</para>
          <para>An I/O error occurred while opening a file to be archived.</para>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="compressionLevel" /> is not a valid <see cref="T:System.IO.Compression.CompressionLevel" /> value.</exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateFromDirectoryAsync (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateFromDirectoryAsync(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectoryAsync(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromDirectoryAsync (sourceDirectoryName As String, destinationArchiveFileName As String, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectoryAsync : string * string * System.IO.Compression.CompressionLevel * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.CreateFromDirectoryAsync (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" Index="2" FrameworkAlternate="net-10.0" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" Index="3" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory on the file system to be archived.</param>
        <param name="destinationArchiveFileName">The name of the archive to be created.</param>
        <param name="compressionLevel">One of the enumeration values that specifies the level of the compression (speed/memory vs. compressed size trade-off).</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to indicate that a directory named <paramref name="sourceDirectoryName" /> should be included at the root of the archive. <see langword="false" /> to indicate that the files and directories in <paramref name="sourceDirectoryName" /> should be included directly in the archive.
        </param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>
          Asynchronously creates a zip archive at the path <paramref name="destinationArchiveFileName" /> that contains the files and directories in the directory specified by <paramref name="sourceDirectoryName" />.
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The directory structure is preserved in the archive, and a recursive search is done for files to be archived. The archive must not exist. If the directory is empty, an empty archive will be created.</para>
          <para>If a file in the directory cannot be added to the archive, the archive will be left incomplete and invalid and the method will throw an exception. This method optionally includes the base directory in the archive.</para>
          <para>If an error is encountered while adding files to the archive, this method will stop adding files and leave the archive in an invalid state. The paths are permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. If a file in the archive has data in the last write time field that is not a valid zip timestamp, an indicator value of 1980 January 1 at midnight will be used for the file's last modified time.If an entry with the specified name already exists in the archive, a second entry will be created that has an identical name. Since no <code>CompressionLevel</code> is specified, the default provided by the implementation of the underlying compression algorithm will be used; the <code>ZipArchive</code> will not impose its own default.</para>
          <para>(Currently, the underlying compression algorithm is provided by the <see cref="T:System.IO.Compression.DeflateStream" /> class.)</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by <code>InvalidPathChars</code>.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>In <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" />, the specified path, file name, or both exceed the system-defined maximum length.</para>
          <para>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>The path specified in <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is invalid, (for example, it is on an unmapped drive).</para>
          <para>-or-</para>
          <para>The directory specified by <paramref name="sourceDirectoryName" /> does not exist.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <paramref name="destinationArchiveFileName" /> already exists.</para>
          <para>-or-</para>
          <para>An I/O error occurred while opening a file to be archived.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>
            <paramref name="destinationArchiveFileName" /> specified a directory.</para>
          <para>-or-</para>
          <para>The caller does not have the required permission.</para>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <para>
            <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is in an invalid format.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateFromDirectoryAsync (string sourceDirectoryName, System.IO.Stream destination, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding? entryNameEncoding, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateFromDirectoryAsync(string sourceDirectoryName, class System.IO.Stream destination, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, class System.Text.Encoding entryNameEncoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectoryAsync(System.String,System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromDirectoryAsync (sourceDirectoryName As String, destination As Stream, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean, entryNameEncoding As Encoding, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectoryAsync : string * System.IO.Stream * System.IO.Compression.CompressionLevel * bool * System.Text.Encoding * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.CreateFromDirectoryAsync (sourceDirectoryName, destination, compressionLevel, includeBaseDirectory, entryNameEncoding, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destination" Type="System.IO.Stream" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" Index="2" FrameworkAlternate="net-10.0" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" Index="3" FrameworkAlternate="net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="4" FrameworkAlternate="net-10.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="destination">The stream where the zip archive is to be stored.</param>
        <param name="compressionLevel">One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to include the directory name from <paramref name="sourceDirectoryName" /> at the root of the archive; <see langword="false" /> to include only the contents of the directory.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names or comments.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>Asynchronously creates a zip archive in the specified stream that contains the files and directories from the specified directory, using the specified compression level and character encoding for entry names, and optionally including the base directory.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created.</para>
          <para>Use this method overload to specify the compression level and character encoding, and whether to include the base directory in the archive.</para>
          <para>If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <see cref="T:System.IO.IOException" /> exception.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="sourceDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</para>
          <para>-or-</para>
          <para>The <paramref name="destination" /> stream does not support writing.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destination" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="sourceDirectoryName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceDirectoryName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <para>A file in the specified directory could not be opened.</para>
          <para>-or-</para>
          <para>An I/O error occurred while opening a file to be archived.</para>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="compressionLevel" /> is not a valid <see cref="T:System.IO.Compression.CompressionLevel" /> value.</exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateFromDirectoryAsync (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding? entryNameEncoding, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateFromDirectoryAsync(string sourceDirectoryName, string destinationArchiveFileName, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, class System.Text.Encoding entryNameEncoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.CreateFromDirectoryAsync(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromDirectoryAsync (sourceDirectoryName As String, destinationArchiveFileName As String, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean, entryNameEncoding As Encoding, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectoryAsync : string * string * System.IO.Compression.CompressionLevel * bool * System.Text.Encoding * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.CreateFromDirectoryAsync (sourceDirectoryName, destinationArchiveFileName, compressionLevel, includeBaseDirectory, entryNameEncoding, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationArchiveFileName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" Index="2" FrameworkAlternate="net-10.0" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" Index="3" FrameworkAlternate="net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="4" FrameworkAlternate="net-10.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="5" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path to the directory on the file system to be archived.</param>
        <param name="destinationArchiveFileName">The name of the archive to be created.</param>
        <param name="compressionLevel">One of the enumeration values that specifies the level of the compression (speed/memory vs. compressed size trade-off).</param>
        <param name="includeBaseDirectory">
          <para>
            <see langword="true" /> to indicate that a directory named <paramref name="sourceDirectoryName" /> should be included at the root of the archive. <see langword="false" /> to indicate that the files and directories in <paramref name="sourceDirectoryName" /> should be included directly in the archive.</para>
        </param>
        <param name="entryNameEncoding">
          The encoding to use when reading or writing entry names and comments in this ZipArchive.
        </param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>
          Asynchronously creates a zip archive at the path <paramref name="destinationArchiveFileName" /> that contains the files and directories in the directory specified by <paramref name="sourceDirectoryName" />.
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The directory structure is preserved in the archive, and a recursive search is done for files to be archived. The archive must not exist. If the directory is empty, an empty archive will be created.</para>
          <para>If a file in the directory cannot be added to the archive, the archive will be left incomplete and invalid and the method will throw an exception. This method optionally includes the base directory in the archive.</para>
          <para>If an error is encountered while adding files to the archive, this method will stop adding files and leave the archive in an invalid state. The paths are permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. If a file in the archive has data in the last write time field that is not a valid zip timestamp, an indicator value of 1980 January 1 at midnight will be used for the file's last modified time.If an entry with the specified name already exists in the archive, a second entry will be created that has an identical name. Since no <code>CompressionLevel</code> is specified, the default provided by the implementation of the underlying compression algorithm will be used; the <code>ZipArchive</code> will not impose its own default.</para>
          <para>(Currently, the underlying compression algorithm is provided by the <see cref="T:System.IO.Compression.DeflateStream" /> class.)</para>
          <para>Specifying a value for <paramref name="entryNameEncoding" /> other than <see langword="null" /> is discouraged.</para>
          <para>However, this may be necessary for interoperability with zip archive tools and libraries that do not correctly support UTF-8 encoding for entry names or comments.</para>
          <ul>
            <li>If <paramref name="entryNameEncoding" /> is not specified (<code>== null</code>):
              <ul><li>For file names or comments that contain characters outside the ASCII range:
                  <br />The language encoding flag (EFS) will be set in the general purpose bit flag of the local file header of the corresponding entry, and UTF-8 (<code>Encoding.UTF8</code>) will be used to encode the entry name and comment into bytes.</li><li>For file names or comments that do not contain characters outside the ASCII range:
                  <br />The language encoding flag (EFS) will not be set in the general purpose bit flag of the local file header of the corresponding entry, and the current system default code page (<code>Encoding.Default</code>) will be used to encode the entry names and comments into bytes.</li></ul></li>
            <li>If <paramref name="entryNameEncoding" /> is specified (<code>!= null</code>):
              <ul><li>The specified <paramref name="entryNameEncoding" /> will always be used to encode the entry names and comments into bytes.
                  <br />The language encoding flag (EFS) in the general purpose bit flag of the local file header for each entry will be set if and only if the specified <paramref name="entryNameEncoding" /> is a UTF-8 encoding.</li></ul></li>
          </ul>
          <para>Unicode encodings other than UTF-8 can't be used for the <paramref name="entryNameEncoding" />, otherwise an <see cref="T:System.ArgumentException" /> is thrown.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by <code>InvalidPathChars</code>.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>In <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" />, the specified path, file name, or both exceed the system-defined maximum length.</para>
          <para>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>The path specified in <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is invalid, (for example, it is on an unmapped drive).</para>
          <para>-or-</para>
          <para>The directory specified by <paramref name="sourceDirectoryName" /> does not exist.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <paramref name="destinationArchiveFileName" /> already exists.</para>
          <para>-or-</para>
          <para>An I/O error occurred while opening a file to be archived.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>
            <paramref name="destinationArchiveFileName" /> specified a directory.</para>
          <para>-or-</para>
          <para>The caller does not have the required permission.</para>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <para>
            <paramref name="sourceDirectoryName" /> or <paramref name="destinationArchiveFileName" /> is in an invalid format.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExtractToDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Extracts all the files in the specified zip archive to a directory on the file system.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (System.IO.Stream source, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(class System.IO.Stream source, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.IO.Stream,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (source As Stream, destinationDirectoryName As String)" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : System.IO.Stream * string -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (source, destinationDirectoryName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::IO::Stream ^ source, System::String ^ destinationDirectoryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
      </Parameters>
      <Docs>
        <param name="source">The stream from which the zip archive is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <summary>Extracts all the files from the zip archive stored in the specified stream and places them in the specified destination directory on the file system.</summary>
        <remarks>This method creates the specified directory and all subdirectories. The destination directory cannot already exist.
            Exceptions related to validating the paths in the <paramref name="destinationDirectoryName" /> or the files in the zip archive contained in <paramref name="source" /> parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted.
            Each extracted file has the same relative path to the directory specified by <paramref name="destinationDirectoryName" /> as its source entry has to the root of the archive.
            If a file to be archived has an invalid last modified time, the first date and time representable in the zip timestamp format (midnight on January 1, 1980) will be used.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> or <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path in <paramref name="destinationDirectoryName" /> exceeds the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">The name of an entry in the archive is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

-or-

Extracting an archive entry would create a file that is outside the directory specified by <paramref name="destinationDirectoryName" />. (For example, this might happen if the entry name contains parent directory accessors.)

-or-

An archive entry to extract has the same name as an entry that has already been extracted or that exists in <paramref name="destinationDirectoryName" />.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">The archive contained in the <paramref name="source" /> stream is not a valid zip archive.

-or-

An archive entry was not found or was corrupt.

-or-

An archive entry was compressed by using a compression method that isn't supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">The path to the archive that is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <summary>Extracts all the files in the specified zip archive to a directory on the file system.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 This method creates the specified directory and all subdirectories. The destination directory cannot already exist. Exceptions related to validating the paths in the `destinationDirectoryName` or `sourceArchiveFileName` parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted. Each extracted file has the same relative path to the directory specified by `destinationDirectoryName` as its source entry has to the root of the archive.

## Examples
 This example shows how to create and extract a zip archive by using the <xref:System.IO.Compression.ZipFile> class. It compresses the contents of a folder into a zip archive and extracts that content to a new folder. To use the <xref:System.IO.Compression.ZipFile> class, you must reference the `System.IO.Compression.FileSystem` assembly in your project.

 :::code language="csharp" source="~/snippets/csharp/System.IO.Compression/ZipFile/CreateFromDirectory/program1.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System.IO.Compression/ZipFile/CreateFromDirectory/program1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/System.IO.Compression/ZipFile/CreateFromDirectory/program1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationDirectoryName" /> or <paramref name="sourceArchiveFileName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> or <paramref name="sourceArchiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path in <paramref name="destinationDirectoryName" /> or <paramref name="sourceArchiveFileName" /> exceeds the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">The name of an entry in the archive is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

 -or-

 Extracting an archive entry would create a file that is outside the directory specified by <paramref name="destinationDirectoryName" />. (For example, this might happen if the entry name contains parent directory accessors.)

 -or-

 An archive entry to extract has the same name as an entry that has already been extracted or that exists in <paramref name="destinationDirectoryName" />.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> or <paramref name="sourceArchiveFileName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceArchiveFileName" /> was not found.</exception>
        <exception cref="T:System.IO.InvalidDataException">The archive specified by <paramref name="sourceArchiveFileName" /> is not a valid zip archive.

 -or-

 An archive entry was not found or was corrupt.

 -or-

 An archive entry was compressed by using a compression method that isn't supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (System.IO.Stream source, string destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(class System.IO.Stream source, string destinationDirectoryName, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.IO.Stream,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (source As Stream, destinationDirectoryName As String, overwriteFiles As Boolean)" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : System.IO.Stream * string * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (source, destinationDirectoryName, overwriteFiles)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::IO::Stream ^ source, System::String ^ destinationDirectoryName, bool overwriteFiles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="2" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
      </Parameters>
      <Docs>
        <param name="source">The stream from which the zip archive is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files; <see langword="false" /> otherwise.</param>
        <summary>Extracts all the files from the zip archive stored in the specified stream and places them in the specified destination directory on the file system, and optionally allows choosing if the files in the destination directory should be overwritten.</summary>
        <remarks>This method creates the specified directory and all subdirectories. The destination directory cannot already exist.
            Exceptions related to validating the paths in the <paramref name="destinationDirectoryName" /> or the files in the zip archive contained in <paramref name="source" /> parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted.
            Each extracted file has the same relative path to the directory specified by <paramref name="destinationDirectoryName" /> as its source entry has to the root of the archive.
            If a file to be archived has an invalid last modified time, the first date and time representable in the zip timestamp format (midnight on January 1, 1980) will be used.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> or <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path in <paramref name="destinationDirectoryName" /> exceeds the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">The name of an entry in the archive is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

-or-

Extracting an archive entry would create a file that is outside the directory specified by <paramref name="destinationDirectoryName" />. (For example, this might happen if the entry name contains parent directory accessors.)

-or-

<paramref name="overwriteFiles" /> is <see langword="false" /> and an archive entry to extract has the same name as an entry that has already been extracted or that exists in <paramref name="destinationDirectoryName" />.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">The archive contained in the <paramref name="source" /> stream is not a valid zip archive.

-or-

An archive entry was not found or was corrupt.

-or-

An archive entry was compressed by using a compression method that isn't supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (System.IO.Stream source, string destinationDirectoryName, System.Text.Encoding? entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(class System.IO.Stream source, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.IO.Stream,System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (source As Stream, destinationDirectoryName As String, entryNameEncoding As Encoding)" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : System.IO.Stream * string * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (source, destinationDirectoryName, entryNameEncoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::IO::Stream ^ source, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="net-8.0;net-9.0;net-10.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="source">The stream from which the zip archive is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names or comments.</param>
        <summary>Extracts all the files from the zip archive stored in the specified stream and places them in the specified destination directory on the file system and uses the specified character encoding for entry names and comments.</summary>
        <remarks>This method creates the specified directory and all subdirectories. The destination directory cannot already exist.
            Exceptions related to validating the paths in the <paramref name="destinationDirectoryName" /> or the files in the zip archive contained in <paramref name="source" /> parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted.
            Each extracted file has the same relative path to the directory specified by <paramref name="destinationDirectoryName" /> as its source entry has to the root of the archive.
            If a file to be archived has an invalid last modified time, the first date and time representable in the zip timestamp format (midnight on January 1, 1980) will be used.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

-or-

<paramref name="entryNameEncoding" /> is set to a Unicode encoding other than UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> or <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path in <paramref name="destinationDirectoryName" /> exceeds the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">The name of an entry in the archive is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

-or-

Extracting an archive entry would create a file that is outside the directory specified by <paramref name="destinationDirectoryName" />. (For example, this might happen if the entry name contains parent directory accessors.)

-or-

An archive entry to extract has the same name as an entry that has already been extracted or that exists in <paramref name="destinationDirectoryName" />.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">The archive contained in the <paramref name="source" /> stream is not a valid zip archive.

-or-

An archive entry was not found or was corrupt.

-or-

An archive entry was compressed by using a compression method that isn't supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, overwriteFiles As Boolean)" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, overwriteFiles)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, bool overwriteFiles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0;net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0;net-10.0" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0;net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">The path on the file system to the archive that is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the destination directory on the file system.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files; <see langword="false" /> otherwise.</param>
        <summary>Extracts all of the files in the specified archive to a directory on the file system.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

If there is an error while extracting the archive, the archive will remain partially extracted.

Each entry will be extracted such that the extracted file has the same relative path to the `destinationDirectoryName` as the entry has to the archive.

The `sourceArchiveFileName` and `destinationDirectoryName` parameters accept both relative and absolute paths. A relative path is interpreted as relative to the current working directory.

If a file to be archived has an invalid last modified time, the first date and time representable in the zip timestamp format (midnight on January 1, 1980) will be used.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> specifies a path, a file name, or both that exceed the system-defined maximum length. </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="overwriteFiles" /> is <see langword="false" /> and <paramref name="destinationDirectoryName" /> already contains a file with the same name as a file that's being extracted.

-or-

An I/O error has occurred.

-or-

The name of a <see cref="T:System.IO.Compression.ZipArchiveEntry" /> is zero-length, contains only whitespace, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.

-or-

Extracting a <see cref="T:System.IO.Compression.ZipArchiveEntry" /> would result in a file destination that is outside the destination directory (for example, because of parent directory accessors).

-or-

A <see cref="T:System.IO.Compression.ZipArchiveEntry" /> has the same name as an entry from the same archive that's already been extracted.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is in an invalid format. </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceArchiveFileName" /> was not found.
        </exception>
        <exception cref="T:System.IO.InvalidDataException">The archive specified by <paramref name="sourceArchiveFileName" /> is not a valid <see cref="T:System.IO.Compression.ZipArchive" />.

-or-

A <see cref="T:System.IO.Compression.ZipArchiveEntry" /> was not found or was corrupt.

-or-

A <see cref="T:System.IO.Compression.ZipArchiveEntry" /> has been compressed using a compression method that isn't supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding)" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding? entryNameEncoding);" FrameworkAlternate="net-10.0;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">The path to the archive that is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names or comments.</param>
        <summary>Extracts all the files in the specified zip archive to a directory on the file system and uses the specified character encoding for entry names and comments.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method creates the specified directory and all subdirectories, if necessary. Exceptions related to validating the paths in the `destinationDirectoryName` or `sourceArchiveFileName` parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted. Each extracted file has the same relative path to the directory specified by `destinationDirectoryName` as its source entry has to the root of the archive.

If `entryNameEncoding` is set to a value other than `null`, entry names and comments are decoded according to the following rules:

- For entries where the language encoding flag (in the general-purpose bit flag of the local file header) is not set, the entry names and comments are decoded by using the specified encoding.
- For entries where the language encoding flag is set, the entry names and comments are decoded by using UTF-8.

If `entryNameEncoding` is set to `null`, entry names and comments are decoded according to the following rules:

- For entries where the language encoding flag (in the general-purpose bit flag of the local file header) is not set, entry names and comments are decoded by using the current system default code page.
- For entries where the language encoding flag is set, the entry names and comments are decoded by using UTF-8.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationDirectoryName" /> or <paramref name="sourceArchiveFileName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

 -or-

 <paramref name="entryNameEncoding" /> is set to a Unicode encoding other than UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> or <paramref name="sourceArchiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path in <paramref name="destinationDirectoryName" /> or <paramref name="sourceArchiveFileName" /> exceeds the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">The name of an entry in the archive is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

 -or-

 Extracting an archive entry would create a file that is outside the directory specified by <paramref name="destinationDirectoryName" />. (For example, this might happen if the entry name contains parent directory accessors.)

 -or-

 An archive entry to extract has the same name as an entry that has already been extracted or that exists in <paramref name="destinationDirectoryName" />.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> or <paramref name="sourceArchiveFileName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceArchiveFileName" /> was not found.</exception>
        <exception cref="T:System.IO.InvalidDataException">The archive specified by <paramref name="sourceArchiveFileName" /> is not a valid zip archive.

 -or-

 An archive entry was not found or was corrupt.

 -or-

 An archive entry was compressed by using a compression method that isn't supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (System.IO.Stream source, string destinationDirectoryName, System.Text.Encoding? entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(class System.IO.Stream source, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.IO.Stream,System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (source As Stream, destinationDirectoryName As String, entryNameEncoding As Encoding, overwriteFiles As Boolean)" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : System.IO.Stream * string * System.Text.Encoding * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (source, destinationDirectoryName, entryNameEncoding, overwriteFiles)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::IO::Stream ^ source, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding, bool overwriteFiles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="net-8.0;net-9.0;net-10.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="3" FrameworkAlternate="net-8.0;net-9.0;net-10.0" />
      </Parameters>
      <Docs>
        <param name="source">The stream from which the zip archive is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names or comments.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files; <see langword="false" /> otherwise.</param>
        <summary>Extracts all the files from the zip archive stored in the specified stream and places them in the specified destination directory on the file system, uses the specified character encoding for entry names and comments, and optionally allows choosing if the files in the destination directory should be overwritten.</summary>
        <remarks>This method creates the specified directory and all subdirectories. The destination directory cannot already exist.
            Exceptions related to validating the paths in the <paramref name="destinationDirectoryName" /> or the files in the zip archive contained in <paramref name="source" /> parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted.
            Each extracted file has the same relative path to the directory specified by <paramref name="destinationDirectoryName" /> as its source entry has to the root of the archive.
            If a file to be archived has an invalid last modified time, the first date and time representable in the zip timestamp format (midnight on January 1, 1980) will be used.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

-or-

<paramref name="entryNameEncoding" /> is set to a Unicode encoding other than UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> or <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path in <paramref name="destinationDirectoryName" /> exceeds the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">The name of an entry in the archive is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

-or-

Extracting an archive entry would create a file that is outside the directory specified by <paramref name="destinationDirectoryName" />. (For example, this might happen if the entry name contains parent directory accessors.)

-or-

<paramref name="overwriteFiles" /> is <see langword="false" /> and an archive entry to extract has the same name as an entry that has already been extracted or that exists in <paramref name="destinationDirectoryName" />.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">The archive contained in the <paramref name="source" /> stream is not a valid zip archive.

-or-

An archive entry was not found or was corrupt.

-or-

An archive entry was compressed by using a compression method that isn't supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding? entryNameEncoding, bool overwriteFiles);" FrameworkAlternate="net-10.0;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding, overwriteFiles As Boolean)" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * System.Text.Encoding * bool -&gt; unit" Usage="System.IO.Compression.ZipFile.ExtractToDirectory (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding, overwriteFiles)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceArchiveFileName, System::String ^ destinationDirectoryName, System::Text::Encoding ^ entryNameEncoding, bool overwriteFiles);" />
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding, bool overwriteFiles);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0;net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0;net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0;net-10.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0;net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">The path on the file system to the archive that is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the destination directory on the file system.</param>
        <param name="entryNameEncoding">The encoding to use when reading entry names and comments in this <see cref="T:System.IO.Compression.ZipArchive" />.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files; <see langword="false" /> otherwise.</param>
        <summary>Extracts all of the files in the specified archive to a directory on the file system.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 If there is an error while extracting the archive, the archive will remain partially extracted.

 Each entry will be extracted such that the extracted file has the same relative path to the `destinationDirectoryName` as the entry has to the archive.

 The `sourceArchiveFileName` and `destinationDirectoryName` parameters accept both relative and absolute paths. A relative path is interpreted as relative to the current working directory.

 If a file to be archived has an invalid last modified time, the first date and time representable in the zip timestamp format (midnight on January 1, 1980) will be used.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.

 -or-

 <paramref name="entryNameEncoding" /> is set to a Unicode encoding other than UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> specifies a path, a file name, or both that exceed the system-defined maximum length. </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="overwriteFiles" /> is <see langword="false" /> and an archive entry to extract has the same name as a file that already exists in <paramref name="destinationDirectoryName" />.

-or-

An I/O error has occurred.

-or-

The name of a <see cref="T:System.IO.Compression.ZipArchiveEntry" /> is zero-length, contains only whitespace, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.

-or-

Extracting a <see cref="T:System.IO.Compression.ZipArchiveEntry" /> would result in a file destination that is outside the destination directory (for example, because of parent directory accessors).

-or-

A <see cref="T:System.IO.Compression.ZipArchiveEntry" /> has the same name as an already extracted entry from the same archive.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is in an invalid format. </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceArchiveFileName" /> was not found.</exception>
        <exception cref="T:System.IO.InvalidDataException">The archive specified by <paramref name="sourceArchiveFileName" /> is not a valid <see cref="T:System.IO.Compression.ZipArchive" />.

-or-

An archive entry was not found or was corrupt.

-or-

An archive entry has been compressed using a compression method that isn't supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExtractToDirectoryAsync (System.IO.Stream source, string destinationDirectoryName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExtractToDirectoryAsync(class System.IO.Stream source, string destinationDirectoryName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectoryAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractToDirectoryAsync (source As Stream, destinationDirectoryName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectoryAsync : System.IO.Stream * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.ExtractToDirectoryAsync (source, destinationDirectoryName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="source">The stream from which the zip archive is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>Asynchronously extracts all the files from the zip archive stored in the specified stream and places them in the specified destination directory on the file system.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method creates the specified directory and all subdirectories. The destination directory cannot already exist.</para>
          <para>Exceptions related to validating the paths in the <paramref name="destinationDirectoryName" /> or the files in the zip archive contained in <paramref name="source" /> parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted.</para>
          <para>Each extracted file has the same relative path to the directory specified by <paramref name="destinationDirectoryName" /> as its source entry has to the root of the archive.</para>
          <para>If a file to be archived has an invalid last modified time, the first date and time representable in the zip timestamp format (midnight on January 1, 1980) will be used.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> or <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path in <paramref name="destinationDirectoryName" /> exceeds the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <para>The name of an entry in the archive is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</para>
          <para>-or-</para>
          <para>Extracting an archive entry would create a file that is outside the directory specified by <paramref name="destinationDirectoryName" />. (For example, this might happen if the entry name contains parent directory accessors.)</para>
          <para>-or-</para>
          <para>An archive entry to extract has the same name as an entry that has already been extracted or that exists in <paramref name="destinationDirectoryName" />.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <para>The archive contained in the <paramref name="source" /> stream is not a valid zip archive.</para>
          <para>-or-</para>
          <para>An archive entry was not found or was corrupt.</para>
          <para>-or-</para>
          <para>An archive entry was compressed by using a compression method that isn't supported.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExtractToDirectoryAsync (string sourceArchiveFileName, string destinationDirectoryName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExtractToDirectoryAsync(string sourceArchiveFileName, string destinationDirectoryName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectoryAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractToDirectoryAsync (sourceArchiveFileName As String, destinationDirectoryName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectoryAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.ExtractToDirectoryAsync (sourceArchiveFileName, destinationDirectoryName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">The path to the archive on the file system that is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>
          Asynchronously extracts all of the files in the specified archive to a directory on the file system.
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The specified directory must not exist. This method will create all subdirectories and the specified directory.</para>
          <para>If there is an error while extracting the archive, the archive will remain partially extracted. Each entry will be extracted such that the extracted file has the same relative path to the destinationDirectoryName as the entry has to the archive. The path is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. If a file to be archived has an invalid last modified time, the first datetime representable in the zip timestamp format (midnight on January 1, 1980) will be used.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> specifies a path, file name, or both that exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>The path specified by <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is invalid, (for example, it is on an unmapped drive).</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>An I/O error has occurred.</para>
          <para>-or-</para>
          <para>An archive entry's name is zero-length, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.</para>
          <para>-or-</para>
          <para>Extracting an archive entry would result in a file destination that is outside the destination directory (for example, because of parent directory accessors).</para>
          <para>-or-</para>
          <para>An archive entry has the same name as an already extracted entry from the same archive.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is in an invalid format.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceArchiveFileName" /> was not found.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <para>The archive specified by <paramref name="sourceArchiveFileName" /> is not a valid ZipArchive.</para>
          <para>-or-</para>
          <para>An archive entry was not found or was corrupt.</para>
          <para>-or-</para>
          <para>An archive entry has been compressed using a compression method that isn't supported.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExtractToDirectoryAsync (System.IO.Stream source, string destinationDirectoryName, bool overwriteFiles, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExtractToDirectoryAsync(class System.IO.Stream source, string destinationDirectoryName, bool overwriteFiles, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectoryAsync(System.IO.Stream,System.String,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractToDirectoryAsync (source As Stream, destinationDirectoryName As String, overwriteFiles As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectoryAsync : System.IO.Stream * string * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.ExtractToDirectoryAsync (source, destinationDirectoryName, overwriteFiles, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="2" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="source">The stream from which the zip archive is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files; <see langword="false" /> otherwise.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>Asynchronously extracts all the files from the zip archive stored in the specified stream and places them in the specified destination directory on the file system, and optionally allows choosing if the files in the destination directory should be overwritten.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method creates the specified directory and all subdirectories. The destination directory cannot already exist.</para>
          <para>Exceptions related to validating the paths in the <paramref name="destinationDirectoryName" /> or the files in the zip archive contained in <paramref name="source" /> parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted.</para>
          <para>Each extracted file has the same relative path to the directory specified by <paramref name="destinationDirectoryName" /> as its source entry has to the root of the archive.</para>
          <para>If a file to be archived has an invalid last modified time, the first date and time representable in the zip timestamp format (midnight on January 1, 1980) will be used.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> or <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path in <paramref name="destinationDirectoryName" /> exceeds the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <para>The name of an entry in the archive is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</para>
          <para>-or-</para>
          <para>Extracting an archive entry would create a file that is outside the directory specified by <paramref name="destinationDirectoryName" />. (For example, this might happen if the entry name contains parent directory accessors.)</para>
          <para>-or-</para>
          <para>
            <paramref name="overwriteFiles" /> is <see langword="false" /> and an archive entry to extract has the same name as an entry that has already been extracted or that exists in <paramref name="destinationDirectoryName" />.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <para>The archive contained in the <paramref name="source" /> stream is not a valid zip archive.</para>
          <para>-or-</para>
          <para>An archive entry was not found or was corrupt.</para>
          <para>-or-</para>
          <para>An archive entry was compressed by using a compression method that isn't supported.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExtractToDirectoryAsync (System.IO.Stream source, string destinationDirectoryName, System.Text.Encoding? entryNameEncoding, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExtractToDirectoryAsync(class System.IO.Stream source, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectoryAsync(System.IO.Stream,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractToDirectoryAsync (source As Stream, destinationDirectoryName As String, entryNameEncoding As Encoding, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectoryAsync : System.IO.Stream * string * System.Text.Encoding * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.ExtractToDirectoryAsync (source, destinationDirectoryName, entryNameEncoding, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="net-10.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="source">The stream from which the zip archive is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names or comments.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>Asynchronously extracts all the files from the zip archive stored in the specified stream and places them in the specified destination directory on the file system and uses the specified character encoding for entry names.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method creates the specified directory and all subdirectories. The destination directory cannot already exist.</para>
          <para>Exceptions related to validating the paths in the <paramref name="destinationDirectoryName" /> or the files in the zip archive contained in <paramref name="source" /> parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted.</para>
          <para>Each extracted file has the same relative path to the directory specified by <paramref name="destinationDirectoryName" /> as its source entry has to the root of the archive.</para>
          <para>If a file to be archived has an invalid last modified time, the first date and time representable in the zip timestamp format (midnight on January 1, 1980) will be used.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="destinationDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</para>
          <para>-or-</para>
          <para>
            <paramref name="entryNameEncoding" /> is set to a Unicode encoding other than UTF-8.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> or <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path in <paramref name="destinationDirectoryName" /> exceeds the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <para>The name of an entry in the archive is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</para>
          <para>-or-</para>
          <para>Extracting an archive entry would create a file that is outside the directory specified by <paramref name="destinationDirectoryName" />. (For example, this might happen if the entry name contains parent directory accessors.)</para>
          <para>-or-</para>
          <para>An archive entry to extract has the same name as an entry that has already been extracted or that exists in <paramref name="destinationDirectoryName" />.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <para>The archive contained in the <paramref name="source" /> stream is not a valid zip archive.</para>
          <para>-or-</para>
          <para>An archive entry was not found or was corrupt.</para>
          <para>-or-</para>
          <para>An archive entry was compressed by using a compression method that isn't supported.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExtractToDirectoryAsync (string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExtractToDirectoryAsync(string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectoryAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractToDirectoryAsync (sourceArchiveFileName As String, destinationDirectoryName As String, overwriteFiles As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectoryAsync : string * string * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.ExtractToDirectoryAsync (sourceArchiveFileName, destinationDirectoryName, overwriteFiles, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="2" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">The path to the archive on the file system that is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files; <see langword="false" /> otherwise.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>
          Asynchronously extracts all of the files in the specified archive to a directory on the file system.
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The specified directory must not exist. This method will create all subdirectories and the specified directory.</para>
          <para>If there is an error while extracting the archive, the archive will remain partially extracted. Each entry will be extracted such that the extracted file has the same relative path to the destinationDirectoryName as the entry has to the archive. The path is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. If a file to be archived has an invalid last modified time, the first datetime representable in the zip timestamp format (midnight on January 1, 1980) will be used.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> specifies a path, file name, or both that exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>The path specified by <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is invalid, (for example, it is on an unmapped drive).</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>An I/O error has occurred.</para>
          <para>-or-</para>
          <para>An archive entry's name is zero-length, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.</para>
          <para>-or-</para>
          <para>Extracting an archive entry would result in a file destination that is outside the destination directory (for example, because of parent directory accessors).</para>
          <para>-or-</para>
          <para>An archive entry has the same name as an already extracted entry from the same archive.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is in an invalid format.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceArchiveFileName" /> was not found.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <para>
            <paramref name="sourceArchiveFileName" /> not a valid ZipArchive.</para>
          <para>-or-</para>
          <para>An archive entry was not found or was corrupt.</para>
          <para>-or-</para>
          <para>An archive entry has been compressed using a compression method that isn't supported.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExtractToDirectoryAsync (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding? entryNameEncoding, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExtractToDirectoryAsync(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectoryAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractToDirectoryAsync (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectoryAsync : string * string * System.Text.Encoding * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.ExtractToDirectoryAsync (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="net-10.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">The path to the archive on the file system that is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory on the file system. The directory specified must not exist, but the directory that it is contained in must exist.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this ZipArchive.
        </param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>
          Asynchronously extracts all of the files in the specified archive to a directory on the file system.
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The specified directory must not exist. This method will create all subdirectories and the specified directory.</para>
          <para>If there is an error while extracting the archive, the archive will remain partially extracted. Each entry will be extracted such that the extracted file has the same relative path to the destinationDirectoryName as the entry has to the archive. The path is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. If a file to be archived has an invalid last modified time, the first datetime representable in the zip timestamp format (midnight on January 1, 1980) will be used.</para>
          <para>Specifying a value other than <see langword="null" /> for <paramref name="entryNameEncoding" /> is discouraged. However, this might be necessary for interoperability with zip archive tools and libraries that do not correctly support UTF-8 encoding for entry names or comments.</para>
          <para>This value is used as follows:</para>
          <ul>
            <li>If <paramref name="entryNameEncoding" /> is not specified (<code>== null</code>):
              <ul><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set, use the current system default code page (<code>Encoding.Default</code>) to decode the entry name and comment.</li><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set, use UTF-8 (<code>Encoding.UTF8</code>) to decode the entry name and comment.</li></ul></li>
            <li>If <paramref name="entryNameEncoding" /> is specified (<code>!= null</code>):
              <ul><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set, use the specified <paramref name="entryNameEncoding" /> to decode the entry name and comment.</li><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set, use UTF-8 (<code>Encoding.UTF8</code>) to decode the entry name and comment.</li></ul></li>
          </ul>
          <para>Unicode encodings other than UTF-8 can't be used for the <paramref name="entryNameEncoding" />, otherwise an <see cref="T:System.ArgumentException" /> is thrown.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> specifies a path, file name, or both that exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          The path specified by <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is invalid, (for example, it is on an unmapped drive).
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>An I/O error has occurred.</para>
          <para>-or-</para>
          <para>An archive entry's name is zero-length, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.</para>
          <para>-or-</para>
          <para>Extracting an archive entry would result in a file destination that is outside the destination directory (for example, because of parent directory accessors).</para>
          <para>-or-</para>
          <para>An archive entry has the same name as an already extracted entry from the same archive.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is in an invalid format.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceArchiveFileName" /> was not found.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <para>The archive specified by <paramref name="sourceArchiveFileName" /> is not a valid ZipArchive.</para>
          <para>-or-</para>
          <para>An archive entry was not found or was corrupt.</para>
          <para>-or-</para>
          <para>An archive entry has been compressed using a compression method that isn't supported.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExtractToDirectoryAsync (System.IO.Stream source, string destinationDirectoryName, System.Text.Encoding? entryNameEncoding, bool overwriteFiles, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExtractToDirectoryAsync(class System.IO.Stream source, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, bool overwriteFiles, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectoryAsync(System.IO.Stream,System.String,System.Text.Encoding,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractToDirectoryAsync (source As Stream, destinationDirectoryName As String, entryNameEncoding As Encoding, overwriteFiles As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectoryAsync : System.IO.Stream * string * System.Text.Encoding * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.ExtractToDirectoryAsync (source, destinationDirectoryName, entryNameEncoding, overwriteFiles, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="net-10.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="3" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="source">The stream from which the zip archive is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names or comments.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files; <see langword="false" /> otherwise.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>Asynchronously extracts all the files from the zip archive stored in the specified stream and places them in the specified destination directory on the file system, uses the specified character encoding for entry names, and optionally allows choosing if the files in the destination directory should be overwritten.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method creates the specified directory and all subdirectories. The destination directory cannot already exist.</para>
          <para>Exceptions related to validating the paths in the <paramref name="destinationDirectoryName" /> or the files in the zip archive contained in <paramref name="source" /> parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted.</para>
          <para>Each extracted file has the same relative path to the directory specified by <paramref name="destinationDirectoryName" /> as its source entry has to the root of the archive.</para>
          <para>If a file to be archived has an invalid last modified time, the first date and time representable in the zip timestamp format (midnight on January 1, 1980) will be used.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="destinationDirectoryName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</para>
          <para>-or-</para>
          <para>
            <paramref name="entryNameEncoding" /> is set to a Unicode encoding other than UTF-8.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> or <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path in <paramref name="destinationDirectoryName" /> exceeds the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <para>The name of an entry in the archive is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</para>
          <para>-or-</para>
          <para>Extracting an archive entry would create a file that is outside the directory specified by <paramref name="destinationDirectoryName" />. (For example, this might happen if the entry name contains parent directory accessors.)</para>
          <para>-or-</para>
          <para>
            <paramref name="overwriteFiles" /> is <see langword="false" /> and an archive entry to extract has the same name as an entry that has already been extracted or that exists in <paramref name="destinationDirectoryName" />.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission to access the archive or the destination directory.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="destinationDirectoryName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <para>The archive contained in the <paramref name="source" /> stream is not a valid zip archive.</para>
          <para>-or-</para>
          <para>An archive entry was not found or was corrupt.</para>
          <para>-or-</para>
          <para>An archive entry was compressed by using a compression method that isn't supported.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExtractToDirectoryAsync (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding? entryNameEncoding, bool overwriteFiles, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExtractToDirectoryAsync(string sourceArchiveFileName, string destinationDirectoryName, class System.Text.Encoding entryNameEncoding, bool overwriteFiles, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.ExtractToDirectoryAsync(System.String,System.String,System.Text.Encoding,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractToDirectoryAsync (sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding, overwriteFiles As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectoryAsync : string * string * System.Text.Encoding * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.IO.Compression.ZipFile.ExtractToDirectoryAsync (sourceArchiveFileName, destinationDirectoryName, entryNameEncoding, overwriteFiles, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceArchiveFileName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="destinationDirectoryName" Type="System.String" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="net-10.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="overwriteFiles" Type="System.Boolean" Index="3" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="sourceArchiveFileName">The path to the archive on the file system that is to be extracted.</param>
        <param name="destinationDirectoryName">The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this ZipArchive.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files; <see langword="false" /> otherwise.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>
          <para>Asynchronously extracts all of the files in the specified archive to a directory on the file system.</para>
          <para>The specified directory must not exist. This method will create all subdirectories and the specified directory.</para>
          <para>If there is an error while extracting the archive, the archive will remain partially extracted. Each entry will be extracted such that the extracted file has the same relative path to the destinationDirectoryName as the entry has to the archive. The path is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. If a file to be archived has an invalid last modified time, the first datetime representable in the zip timestamp format (midnight on January 1, 1980) will be used.</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Specifying a value other than <see langword="null" /> for <paramref name="entryNameEncoding" /> is discouraged. However, this might be necessary for interoperability with zip archive tools and libraries that do not correctly support UTF-8 encoding for entry names or comments.</para>
          <para>This value is used as follows:</para>
          <ul>
            <li>If <paramref name="entryNameEncoding" /> is not specified (<code>== null</code>):
              <ul><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set, use the current system default code page (<code>Encoding.Default</code>) to decode the entry name and comment.</li><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set, use UTF-8 (<code>Encoding.UTF8</code>) to decode the entry name and comment.</li></ul></li>
            <li>If <paramref name="entryNameEncoding" /> is specified (<code>!= null</code>):
              <ul><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set, use the specified <paramref name="entryNameEncoding" /> to decode the entry name and comment.</li><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set, use UTF-8 (<code>Encoding.UTF8</code>) to decode the entry name and comment.</li></ul></li>
          </ul>
          <para>Unicode encodings other than UTF-8 can't be used for the <paramref name="entryNameEncoding" />, otherwise an <see cref="T:System.ArgumentException" /> is thrown.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>
            <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> specifies a path, file name, or both that exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>The path specified by <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is invalid, (for example, it is on an unmapped drive).</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>An I/O error has occurred.</para>
          <para>-or-</para>
          <para>An archive entry's name is zero-length, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.</para>
          <para>-or-</para>
          <para>Extracting an archive entry would result in a file destination that is outside the destination directory (for example, because of parent directory accessors).</para>
          <para>-or-</para>
          <para>An archive entry has the same name as an already extracted entry from the same archive.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceArchiveFileName" /> or <paramref name="destinationDirectoryName" /> is in an invalid format.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceArchiveFileName" /> was not found.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <para>The archive specified by <paramref name="sourceArchiveFileName" /> is not a valid ZipArchive.</para>
          <para>-or-</para>
          <para>An archive entry was not found or was corrupt.</para>
          <para>-or-</para>
          <para>An archive entry has been compressed using a compression method that isn't supported.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Opens a zip archive at the specified path and in the specified mode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode) As ZipArchive" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="mode">One of the enumeration values that specifies the actions that are allowed on the entries in the opened archive.</param>
        <summary>Opens a zip archive at the specified path and in the specified mode.</summary>
        <returns>The opened zip archive.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 When you set the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode.Read>, the archive is opened with <xref:System.IO.FileMode.Open> from the <xref:System.IO.FileMode> enumeration as the file mode value. If the archive does not exist, a <xref:System.IO.FileNotFoundException> exception is thrown. Setting the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode.Read> is equivalent to calling the <xref:System.IO.Compression.ZipFile.OpenRead%2A> method.

 When you set the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode.Create>, the archive is opened with <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> as the file mode value. If the archive already exists, an <xref:System.IO.IOException> is thrown.

 When you set the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode.Update>,  the archive is opened with <xref:System.IO.FileMode.OpenOrCreate?displayProperty=nameWithType> as the file mode value. If the archive exists, it is opened. The existing entries can be modified and new entries can be created. If the archive does not exist, a new archive is created; however, creating a zip archive in <xref:System.IO.Compression.ZipArchiveMode.Update> mode is not as efficient as creating it in <xref:System.IO.Compression.ZipArchiveMode.Create> mode.

## Examples
 The following example shows how to open a zip archive in the update mode and add an entry to the archive.

 :::code language="csharp" source="~/snippets/csharp/System.IO.Compression/ZipArchive/Entries/program3.cs" id="Snippet3":::
 :::code language="fsharp" source="~/snippets/fsharp/System.IO.Compression/ZipArchive/Entries/program3.fs" id="Snippet3":::
 :::code language="vb" source="~/snippets/visualbasic/System.IO.Compression/ZipArchive/Entries/program3.vb" id="Snippet3":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveFileName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="archiveFileName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="archiveFileName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="archiveFileName" /> could not be opened.

 -or-

 <paramref name="mode" /> is set to <see cref="F:System.IO.Compression.ZipArchiveMode.Create" />, but the file specified in <paramref name="archiveFileName" /> already exists.

-or-

An unspecified I/O error occurred while opening the file.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="archiveFileName" /> specifies a directory.

 -or-

 The caller does not have the required permission to access the file specified in <paramref name="archiveFileName" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> specifies an invalid value.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="mode" /> is set to <see cref="F:System.IO.Compression.ZipArchiveMode.Read" />, but the file specified in <paramref name="archiveFileName" /> is not found.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="archiveFileName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <paramref name="archiveFileName" /> could not be interpreted as a zip archive.

 -or-

 <paramref name="mode" /> is <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, but an entry is missing or corrupt and cannot be read.

 -or-

 <paramref name="mode" /> is <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, but an entry is too large to fit into memory.</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding entryNameEncoding);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-4.8.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive Open(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (archiveFileName As String, mode As ZipArchiveMode, entryNameEncoding As Encoding) As ZipArchive" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.Compression.ZipArchiveMode * System.Text.Encoding -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.Open (archiveFileName, mode, entryNameEncoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ Open(System::String ^ archiveFileName, System::IO::Compression::ZipArchiveMode mode, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding? entryNameEncoding);" FrameworkAlternate="net-10.0;net-5.0;net-6.0;net-7.0;net-8.0;net-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="archiveFileName">The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <param name="mode">One of the enumeration values that specifies the actions that are allowed on the entries in the opened archive.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names or comments.</param>
        <summary>Opens a zip archive at the specified path, in the specified mode, and by using the specified character encoding for entry names and comments.</summary>
        <returns>The opened zip archive.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

[!INCLUDE[remarks](~/includes/remarks/System.IO.Compression/ZipFile/Open.md)]

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveFileName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.

 -or-

 <paramref name="entryNameEncoding" /> is set to a Unicode encoding other than UTF-8.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="archiveFileName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="archiveFileName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="archiveFileName" /> could not be opened.

 -or-

 <paramref name="mode" /> is set to <see cref="F:System.IO.Compression.ZipArchiveMode.Create" />, but the file specified in <paramref name="archiveFileName" /> already exists.

-or-

An unspecified I/O error occurred while opening the file.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="archiveFileName" /> specifies a directory.

 -or-

 The caller does not have the required permission to access the file specified in <paramref name="archiveFileName" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> specifies an invalid value.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="mode" /> is set to <see cref="F:System.IO.Compression.ZipArchiveMode.Read" />, but the file specified in <paramref name="archiveFileName" /> is not found.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="archiveFileName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <paramref name="archiveFileName" /> could not be interpreted as a zip archive.

 -or-

 <paramref name="mode" /> is <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, but an entry is missing or corrupt and cannot be read.

 -or-

 <paramref name="mode" /> is <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />, but an entry is too large to fit into memory.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.IO.Compression.ZipArchive&gt; OpenAsync (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.IO.Compression.ZipArchive&gt; OpenAsync(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.OpenAsync(System.String,System.IO.Compression.ZipArchiveMode,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenAsync (archiveFileName As String, mode As ZipArchiveMode, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ZipArchive)" />
      <MemberSignature Language="F#" Value="static member OpenAsync : string * System.IO.Compression.ZipArchiveMode * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Compression.ZipArchive&gt;" Usage="System.IO.Compression.ZipFile.OpenAsync (archiveFileName, mode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Compression.ZipArchive&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">The path on the filesystem to open the archive on.</param>
        <param name="mode">One of the enumeration values that specifies the actions that are allowed on the entries in the opened archive.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>Asynchronously opens a <code>ZipArchive</code> on the specified <paramref name="archiveFileName" /> in the specified <code>ZipArchiveMode</code> mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>For <paramref name="archiveFileName" />:</para>
          <para>The path is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory.</para>
          <para>For <paramref name="mode" />:</para>
          <para>If <see cref="F:System.IO.Compression.ZipArchiveMode.Read" /> is specified, the file is opened with <code>System.IO.FileMode.Open</code>, and will throw a <code>FileNotFoundException</code> if the file does not exist.</para>
          <para>If <see cref="F:System.IO.Compression.ZipArchiveMode.Create" /> is specified, the file is opened with <code>System.IO.FileMode.CreateNew</code>, and will throw a <code>System.IO.IOException</code> if the file already exists.</para>
          <para>If <see cref="F:System.IO.Compression.ZipArchiveMode.Update" /> is specified, the file is opened with <code>System.IO.FileMode.OpenOrCreate</code>.</para>
          <para>If the file exists and is a zip file, its entries will become accessible and can be modified, and new entries can be created.</para>
          <para>If the file exists and is not a zip file, a <see cref="T:System.IO.InvalidDataException" /> is thrown.</para>
          <para>If the file exists and is empty or does not exist, a new zip file will be created.</para>
          <para>Creating a zip file with the <see cref="F:System.IO.Compression.ZipArchiveMode.Create" /> mode is more efficient when creating a new zip file.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveFileName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="archiveFileName" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="archiveFileName" /> is invalid, (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">An unspecified I/O error occurred while opening the file.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>
            <paramref name="archiveFileName" /> specified a directory.</para>
          <para>-or-</para>
          <para>The caller does not have the required permission.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> specified an invalid value.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="archiveFileName" /> was not found.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="archiveFileName" /> is in an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <para>The specified file could not be interpreted as a zip file.</para>
          <para>-or-</para>
          <para>
            <paramref name="mode" /> is <see cref="F:System.IO.Compression.ZipArchiveMode.Update" /> and an entry is missing from the archive or is corrupt and cannot be read.</para>
          <para>-or-</para>
          <para>
            <paramref name="mode" /> is <see cref="F:System.IO.Compression.ZipArchiveMode.Update" /> and an entry is too large to fit into memory.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.IO.Compression.ZipArchive&gt; OpenAsync (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding? entryNameEncoding, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.IO.Compression.ZipArchive&gt; OpenAsync(string archiveFileName, valuetype System.IO.Compression.ZipArchiveMode mode, class System.Text.Encoding entryNameEncoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.OpenAsync(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenAsync (archiveFileName As String, mode As ZipArchiveMode, entryNameEncoding As Encoding, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ZipArchive)" />
      <MemberSignature Language="F#" Value="static member OpenAsync : string * System.IO.Compression.ZipArchiveMode * System.Text.Encoding * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Compression.ZipArchive&gt;" Usage="System.IO.Compression.ZipFile.OpenAsync (archiveFileName, mode, entryNameEncoding, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Compression.ZipArchive&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" Index="1" FrameworkAlternate="net-10.0" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" Index="2" FrameworkAlternate="net-10.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">The path on the filesystem to open the archive on.</param>
        <param name="mode">One of the enumeration values that specifies the actions that are allowed on the entries in the opened archive.</param>
        <param name="entryNameEncoding">The encoding to use when reading or writing entry names and comments in this ZipArchive.</param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>Asynchronously opens a <code>ZipArchive</code> on the specified <paramref name="archiveFileName" /> in the specified <code>ZipArchiveMode</code> mode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>For <paramref name="archiveFileName" />:</para>
          <para>The path is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory.</para>
          <para>For <paramref name="mode" />:</para>
          <para>If <see cref="F:System.IO.Compression.ZipArchiveMode.Read" /> is specified, the file is opened with <code>System.IO.FileMode.Open</code>, and will throw a <code>FileNotFoundException</code> if the file does not exist.</para>
          <para>If <see cref="F:System.IO.Compression.ZipArchiveMode.Create" /> is specified, the file is opened with <code>System.IO.FileMode.CreateNew</code>, and will throw a <code>System.IO.IOException</code> if the file already exists.</para>
          <para>If <see cref="F:System.IO.Compression.ZipArchiveMode.Update" /> is specified, the file is opened with <code>System.IO.FileMode.OpenOrCreate</code>.</para>
          <para>If the file exists and is a zip file, its entries will become accessible and can be modified, and new entries can be created.</para>
          <para>If the file exists and is not a zip file, a <see cref="T:System.IO.InvalidDataException" /> is thrown.</para>
          <para>If the file exists and is empty or does not exist, a new zip file will be created.</para>
          <para>Creating a zip file with the <see cref="F:System.IO.Compression.ZipArchiveMode.Create" /> mode is more efficient when creating a new zip file.</para>
          <para>Specifying a value other than <see langword="null" /> for <paramref name="entryNameEncoding" /> is discouraged. However, this might be necessary for interoperability with zip archive tools and libraries that do not correctly support UTF-8 encoding for entry names or comments.</para>
          <para>This value is used as follows:</para>
          <dl>
            <li>
              <strong>Reading (opening) ZIP archive files:</strong>
              <ul>
                <li>If <paramref name="entryNameEncoding" /> is not specified (<c>== null</c>):
                  <ul><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set, use the current system default code page (<c>Encoding.Default</c>) to decode the entry name and comment.</li><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set, use UTF-8 (<c>Encoding.UTF8</c>) to decode the entry name and comment.</li></ul></li>
                <li>If <paramref name="entryNameEncoding" /> is specified (<c>!= null</c>):
                  <ul><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header is <em>not</em> set, use the specified <paramref name="entryNameEncoding" /> to decode the entry name and comment.</li><li>For entries where the language encoding flag (EFS) in the general purpose bit flag of the local file header <em>is</em> set, use UTF-8 (<c>Encoding.UTF8</c>) to decode the entry name and comment.</li></ul></li>
              </ul>
            </li>
            <li>
              <strong>Writing (saving) ZIP archive files:</strong>
              <ul>
                <li>If <paramref name="entryNameEncoding" /> is not specified (<c>== null</c>):
                  <ul><li>For entry names and comments that contain characters outside the ASCII range, the language encoding flag (EFS) will be set in the general purpose bit flag of the local file header, and UTF-8 (<c>Encoding.UTF8</c>) will be used to encode the entry name and comment into bytes.</li><li>For entry names and comments that don't contain characters outside the ASCII range, the language encoding flag (EFS) will not be set in the general purpose bit flag of the local file header, and the current system default code page (<c>Encoding.Default</c>) will be used to encode the entry names and comments into bytes.</li></ul></li>
                <li>If <paramref name="entryNameEncoding" /> is specified (<c>!= null</c>):
                  <ul><li>The specified <paramref name="entryNameEncoding" /> will always be used to encode the entry names and comments into bytes.</li><li>The language encoding flag (EFS) in the general purpose bit flag of the local file header will be set if and only if the specified <paramref name="entryNameEncoding" /> is a UTF-8 encoding.</li></ul></li>
              </ul>
            </li>
          </dl>
          <para>Unicode encodings other than UTF-8 can't be used for the <paramref name="entryNameEncoding" />, otherwise an <see cref="T:System.ArgumentException" /> is thrown.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveFileName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="archiveFileName" /> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="archiveFileName" /> is invalid, (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">An unspecified I/O error occurred while opening the file.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>
            <paramref name="archiveFileName" /> specified a directory.</para>
          <para>-or-</para>
          <para>The caller does not have the required permission.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> specified an invalid value.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="archiveFileName" /> was not found.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="archiveFileName" /> is in an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <para>The specified file could not be interpreted as a zip file.</para>
          <para>-or-</para>
          <para>
            <paramref name="mode" /> is <see cref="F:System.IO.Compression.ZipArchiveMode.Update" /> and an entry is missing from the archive or is corrupt and cannot be read.</para>
          <para>-or-</para>
          <para>
            <paramref name="mode" /> is <see cref="F:System.IO.Compression.ZipArchiveMode.Update" /> and an entry is too large to fit into memory.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public static System.IO.Compression.ZipArchive OpenRead (string archiveFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Compression.ZipArchive OpenRead(string archiveFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenRead (archiveFileName As String) As ZipArchive" />
      <MemberSignature Language="F#" Value="static member OpenRead : string -&gt; System.IO.Compression.ZipArchive" Usage="System.IO.Compression.ZipFile.OpenRead archiveFileName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Compression::ZipArchive ^ OpenRead(System::String ^ archiveFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.FileSystem</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchive</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</param>
        <summary>Opens a zip archive for reading at the specified path.</summary>
        <returns>The opened zip archive.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

This method is equivalent to calling the <xref:System.IO.Compression.ZipFile.Open%2A> method and setting the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode.Read>. The archive is opened with <xref:System.IO.FileMode.Open?displayProperty=nameWithType> as the file mode value. If the archive does not exist, a <xref:System.IO.FileNotFoundException> exception is thrown.

## Examples

The following example shows how to open a zip archive for reading.

:::code language="csharp" source="~/snippets/csharp/System.IO.Compression/ZipArchive/Entries/program1.cs" id="Snippet1":::
:::code language="fsharp" source="~/snippets/fsharp/System.IO.Compression/ZipArchive/Entries/program1.fs" id="Snippet1":::
:::code language="vb" source="~/snippets/visualbasic/System.IO.Compression/ZipArchive/Entries/program1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveFileName" /> is <see cref="F:System.String.Empty" />, contains only white space, or contains at least one invalid character.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">In <paramref name="archiveFileName" />, the specified path, file name, or both exceed the system-defined maximum length.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="archiveFileName" /> is invalid or does not exist (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="archiveFileName" /> could not be opened.

-or-

An unspecified I/O error occurred while opening the file.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="archiveFileName" /> specifies a directory.

 -or-

 The caller does not have the required permission to access the file specified in <paramref name="archiveFileName" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="archiveFileName" /> is not found.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="archiveFileName" /> contains an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">
          <paramref name="archiveFileName" /> could not be interpreted as a zip archive.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.IO.Compression.ZipArchive&gt; OpenReadAsync (string archiveFileName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.IO.Compression.ZipArchive&gt; OpenReadAsync(string archiveFileName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipFile.OpenReadAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenReadAsync (archiveFileName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ZipArchive)" />
      <MemberSignature Language="F#" Value="static member OpenReadAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Compression.ZipArchive&gt;" Usage="System.IO.Compression.ZipFile.OpenReadAsync (archiveFileName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Compression.ZipArchive&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="archiveFileName" Type="System.String" Index="0" FrameworkAlternate="net-10.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-10.0" />
      </Parameters>
      <Docs>
        <param name="archiveFileName">
          <para>A string specifying the path on the filesystem to open the archive on. The path is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory.</para>
        </param>
        <param name="cancellationToken">The cancellation token to monitor for cancellation requests.</param>
        <summary>Asynchronously opens a <code>ZipArchive</code> on the specified path for reading. The specified file is opened with <code>FileMode.Open</code>.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="archiveFileName" /> is a zero-length string, contains only whitespace, or contains one or more invalid characters as defined by InvalidPathChars.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">archiveFileName is <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>The specified archiveFileName exceeds the system-defined maximum length.</para>
          <para>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The specified archiveFileName is invalid, (for example, it is on an unmapped drive).</exception>
        <exception cref="T:System.IO.IOException">An unspecified I/O error occurred while opening the file.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>
            <paramref name="archiveFileName" /> specified a directory.</para>
          <para>-or-</para>
          <para>The caller does not have the required permission.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">The file specified in archiveFileName was not found.</exception>
        <exception cref="T:System.NotSupportedException">archiveFileName is in an invalid format.</exception>
        <exception cref="T:System.IO.InvalidDataException">The specified file could not be interpreted as a zip file.</exception>
        <exception cref="T:System.OperationCanceledException">An asynchronous operation is cancelled.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
