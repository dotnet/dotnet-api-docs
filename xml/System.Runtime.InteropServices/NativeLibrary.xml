<Type Name="NativeLibrary" FullName="System.Runtime.InteropServices.NativeLibrary">
  <TypeSignature Language="C#" Value="public static class NativeLibrary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit NativeLibrary extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.NativeLibrary" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeLibrary" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeLibrary abstract sealed" />
  <TypeSignature Language="F#" Value="type NativeLibrary = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides APIs for managing Native Libraries.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Free">
      <MemberSignature Language="C#" Value="public static void Free (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Free(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Free (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Free(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member Free : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.NativeLibrary.Free handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">The native library handle to be freed.</param>
        <summary>Frees a given a loaded library handle. No action if the input handle is <see langword="null" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExport">
      <MemberSignature Language="C#" Value="public static IntPtr GetExport (IntPtr handle, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetExport(native int handle, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExport (handle As IntPtr, name As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetExport(IntPtr handle, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetExport : nativeint * string -&gt; nativeint" Usage="System.Runtime.InteropServices.NativeLibrary.GetExport (handle, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">The native library handle.</param>
        <param name="name">The name of the exported symbol.</param>
        <summary>Get the address of an exported Symbol This is a simple wrapper around OS calls, and does not perform any name mangling.</summary>
        <returns>The address of the symbol.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If the handle or the name is <see langword="null" />.</exception>
        <exception cref="T:System.EntryPointNotFoundException">If the symbol is not found.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static IntPtr Load (string libraryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Load(string libraryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (libraryPath As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Load(System::String ^ libraryPath);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; nativeint" Usage="System.Runtime.InteropServices.NativeLibrary.Load libraryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="libraryPath">The name of the native library to be loaded.</param>
        <summary>NativeLibrary Loader: Simple API. This method is a wrapper around OS loader, using "default" flags.</summary>
        <returns>The handle for the loaded native library.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If libraryPath is <see langword="null" />.</exception>
        <exception cref="T:System.DllNotFoundException">If the library can't be found.</exception>
        <exception cref="T:System.BadImageFormatException">If the library is not valid.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static IntPtr Load (string libraryName, System.Reflection.Assembly assembly, Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Load(string libraryName, class System.Reflection.Assembly assembly, valuetype System.Nullable`1&lt;valuetype System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Load(System::String ^ libraryName, System::Reflection::Assembly ^ assembly, Nullable&lt;System::Runtime::InteropServices::DllImportSearchPath&gt; searchPath);" />
      <MemberSignature Language="F#" Value="static member Load : string * System.Reflection.Assembly * Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; -&gt; nativeint" Usage="System.Runtime.InteropServices.NativeLibrary.Load (libraryName, assembly, searchPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="searchPath" Type="System.Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt;" />
      </Parameters>
      <Docs>
        <param name="libraryName">The name of the native library to be loaded.</param>
        <param name="assembly">The assembly loading the native library.</param>
        <param name="searchPath">The search path.</param>
        <summary>NativeLibrary Loader: High-level API.
Given a library name, this function searches specific paths based on the  runtime configuration, input parameters, and attributes of the calling assembly. If DllImportSearchPath parameter is non-null, the flags in this enumeration are used. Otherwise, the flags specified by the DefaultDllImportSearchPaths attribute on the calling assembly (if any) are used. This LoadLibrary() method does not invoke the managed call-backs for native library resolution: 
* The per-assembly registered callback.
* AssemblyLoadContext.LoadUnmanagedDll().
* AssemblyLoadContext.ResolvingUnmanagedDllEvent.</summary>
        <returns>The handle for the loaded library.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If libraryPath or assembly is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">If assembly is not a RuntimeAssembly.</exception>
        <exception cref="T:System.DllNotFoundException">If the library can't be found.</exception>
        <exception cref="T:System.BadImageFormatException">If the library is not valid.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetDllImportResolver">
      <MemberSignature Language="C#" Value="public static void SetDllImportResolver (System.Reflection.Assembly assembly, System.Runtime.InteropServices.DllImportResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDllImportResolver(class System.Reflection.Assembly assembly, class System.Runtime.InteropServices.DllImportResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetDllImportResolver(System::Reflection::Assembly ^ assembly, System::Runtime::InteropServices::DllImportResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="static member SetDllImportResolver : System.Reflection.Assembly * System.Runtime.InteropServices.DllImportResolver -&gt; unit" Usage="System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver (assembly, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="resolver" Type="System.Runtime.InteropServices.DllImportResolver" />
      </Parameters>
      <Docs>
        <param name="assembly">The assembly for which the resolver is registered.</param>
        <param name="resolver">The resolver callback to register.</param>
        <summary>Set a callback for resolving native library imports from an assembly.
This per-assembly resolver is the first attempt to resolve native library loads initiated by this assembly.
Only one resolver can be registered per assembly.
Trying to register a second resolver fails with InvalidOperationException.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If assembly or resolver is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">If a resolver is already set for this assembly.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public static bool TryGetExport (IntPtr handle, string name, out IntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetExport(native int handle, string name, [out] native int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetExport (handle As IntPtr, name As String, ByRef address As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetExport(IntPtr handle, System::String ^ name, [Runtime::InteropServices::Out] IntPtr % address);" />
      <MemberSignature Language="F#" Value="static member TryGetExport : nativeint * string *  -&gt; bool" Usage="System.Runtime.InteropServices.NativeLibrary.TryGetExport (handle, name, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="address" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="handle">The  native library handle.</param>
        <param name="name">The name of the exported symbol.</param>
        <param name="address">The out-parameter for the symbol address, if it exists.</param>
        <summary>Get the address of an exported Symbol, but do not throw.</summary>
        <returns><see langword="true" /> on success, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If handle or name is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryLoad">
      <MemberSignature Language="C#" Value="public static bool TryLoad (string libraryPath, out IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryLoad(string libraryPath, [out] native int&amp; handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryLoad (libraryPath As String, ByRef handle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryLoad(System::String ^ libraryPath, [Runtime::InteropServices::Out] IntPtr % handle);" />
      <MemberSignature Language="F#" Value="static member TryLoad : string *  -&gt; bool" Usage="System.Runtime.InteropServices.NativeLibrary.TryLoad (libraryPath, handle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryPath" Type="System.String" />
        <Parameter Name="handle" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="libraryPath">The name of the native library to be loaded.</param>
        <param name="handle">The out-parameter for the loaded native library handle.</param>
        <summary>NativeLibrary Loader: Simple API that doesn't throw.</summary>
        <returns><see langword="true" /> on successful load, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If libraryPath is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryLoad">
      <MemberSignature Language="C#" Value="public static bool TryLoad (string libraryName, System.Reflection.Assembly assembly, Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath, out IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryLoad(string libraryName, class System.Reflection.Assembly assembly, valuetype System.Nullable`1&lt;valuetype System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath, [out] native int&amp; handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryLoad(System::String ^ libraryName, System::Reflection::Assembly ^ assembly, Nullable&lt;System::Runtime::InteropServices::DllImportSearchPath&gt; searchPath, [Runtime::InteropServices::Out] IntPtr % handle);" />
      <MemberSignature Language="F#" Value="static member TryLoad : string * System.Reflection.Assembly * Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.NativeLibrary.TryLoad (libraryName, assembly, searchPath, handle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="searchPath" Type="System.Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt;" />
        <Parameter Name="handle" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="libraryName">The name of the native library to be loaded.</param>
        <param name="assembly">The assembly loading the native library.</param>
        <param name="searchPath">The search path.</param>
        <param name="handle">The out-parameter for the loaded native library handle.</param>
        <summary>NativeLibrary Loader: High-level API that doesn't throw.</summary>
        <returns><see langword="true" /> on successful load, <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If libraryPath or assembly is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">If assembly is not a RuntimeAssembly.</exception>
      </Docs>
    </Member>
  </Members>
</Type>