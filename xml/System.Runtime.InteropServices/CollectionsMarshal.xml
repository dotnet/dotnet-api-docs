<Type Name="CollectionsMarshal" FullName="System.Runtime.InteropServices.CollectionsMarshal">
  <TypeSignature Language="C#" Value="public static class CollectionsMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CollectionsMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.CollectionsMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionsMarshal" />
  <TypeSignature Language="F#" Value="type CollectionsMarshal = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionsMarshal abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>An unsafe class that provides a set of methods to access the underlying data representations of collections.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; AsSpan&lt;T&gt; (System.Collections.Generic.List&lt;T&gt;? list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; AsSpan&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsSpan(Of T) (list As List(Of T)) As Span(Of T)" />
      <MemberSignature Language="F#" Value="static member AsSpan : System.Collections.Generic.List&lt;'T&gt; -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.CollectionsMarshal.AsSpan list" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; AsSpan(System::Collections::Generic::List&lt;T&gt; ^ list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of items in the list.</typeparam>
        <param name="list">List from which to create the <see cref="T:System.Span`1" />.</param>
        <summary>Gets a <see cref="T:System.Span`1" /> view over the data in a list.
 Items should not be added or removed from the <see cref="T:System.Collections.Generic.List`1" /> while the <see cref="T:System.Span`1" /> is in use.</summary>
        <returns>A <see cref="T:System.Span`1" /> instance over the <see cref="T:System.Collections.Generic.List`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueRefOrAddDefault&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static ref TValue? GetValueRefOrAddDefault&lt;TKey,TValue&gt; (System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; dictionary, TKey key, out bool exists);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetValueRefOrAddDefault&lt;TKey, TValue&gt;(class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TValue&gt; dictionary, !!TKey key, [out] bool&amp; exists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrAddDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValueRefOrAddDefault(Of TKey, TValue) (dictionary As Dictionary(Of TKey, TValue), key As TKey, ByRef exists As Boolean) As TValue" />
      <MemberSignature Language="F#" Value="static member GetValueRefOrAddDefault : System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; * 'Key * bool -&gt; 'Value" Usage="System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrAddDefault (dictionary, key, exists)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue % GetValueRefOrAddDefault(System::Collections::Generic::Dictionary&lt;TKey, TValue&gt; ^ dictionary, TKey key, [Runtime::InteropServices::Out] bool % exists);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;" Index="0" FrameworkAlternate="net-6.0;net-7.0" />
        <Parameter Name="key" Type="TKey" Index="1" FrameworkAlternate="net-6.0;net-7.0" />
        <Parameter Name="exists" Type="System.Boolean" RefType="out" Index="2" FrameworkAlternate="net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">The type of a key.</typeparam>
        <typeparam name="TValue">The type of a value.</typeparam>
        <param name="dictionary">The dictionary to get the reference to <typeparamref name="TValue" /> from.</param>
        <param name="key">The key used for lookup.</param>
        <param name="exists">When this method returns, contains <see langword="true" /> if <paramref name="key" /> already existed in the dictionary, and <see langword="false" /> if a new entry was added.</param>
        <summary>Gets a reference to a <typeparamref name="TValue" /> in the specified dictionary, adding a new entry with a default value if the key does not exist.</summary>
        <returns>A reference to a <typeparamref name="TValue" /> in the specified dictionary.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Items should not be added to or removed from the <xref:System.Collections.Generic.Dictionary`2> while the ref `TValue` is in use.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueRefOrNullRef&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static ref TValue GetValueRefOrNullRef&lt;TKey,TValue&gt; (System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; dictionary, TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetValueRefOrNullRef&lt;TKey, TValue&gt;(class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TValue&gt; dictionary, !!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrNullRef``2(System.Collections.Generic.Dictionary{``0,``1},``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValueRefOrNullRef(Of TKey, TValue) (dictionary As Dictionary(Of TKey, TValue), key As TKey) As TValue" />
      <MemberSignature Language="F#" Value="static member GetValueRefOrNullRef : System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt; * 'Key -&gt; 'Value" Usage="System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrNullRef (dictionary, key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue % GetValueRefOrNullRef(System::Collections::Generic::Dictionary&lt;TKey, TValue&gt; ^ dictionary, TKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;" Index="0" FrameworkAlternate="net-6.0;net-7.0" />
        <Parameter Name="key" Type="TKey" Index="1" FrameworkAlternate="net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">The type of a key.</typeparam>
        <typeparam name="TValue">The type of a value.</typeparam>
        <param name="dictionary">The dictionary to get the ref to <typeparamref name="TValue" /> from.</param>
        <param name="key">The key used for lookup.</param>
        <summary>Gets either a reference to a <typeparamref name="TValue" /> in the <see cref="T:System.Collections.Generic.Dictionary`2" /> or a reference <see langword="null" /> if it does not exist in the <paramref name="dictionary" />.</summary>
        <returns>A reference to a <typeparamref name="TValue" /> in the <see cref="T:System.Collections.Generic.Dictionary`2" /> or a reference <see langword="null" /> if it does not exist in the <paramref name="dictionary" />..</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Items should not be added or removed from the <xref:System.Collections.Generic.Dictionary`2> while the ref `TValue` is in use.

The ref `null` can be detected by calling <xref:System.Runtime.CompilerServices.Unsafe.IsNullRef%60%601(%60%600@)?displayProperty=fullName>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
