<Type Name="JsonMarshal" FullName="System.Runtime.InteropServices.JsonMarshal">
  <TypeSignature Language="C#" Value="public static class JsonMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.JsonMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonMarshal" />
  <TypeSignature Language="F#" Value="type JsonMarshal = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonMarshal abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>An unsafe class that provides a set of methods to access the underlying data representations of JSON types.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRawUtf8PropertyName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; GetRawUtf8PropertyName (System.Text.Json.JsonProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; GetRawUtf8PropertyName(valuetype System.Text.Json.JsonProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.JsonMarshal.GetRawUtf8PropertyName(System.Text.Json.JsonProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRawUtf8PropertyName (property As JsonProperty) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="F#" Value="static member GetRawUtf8PropertyName : System.Text.Json.JsonProperty -&gt; ReadOnlySpan&lt;byte&gt;" Usage="System.Runtime.InteropServices.JsonMarshal.GetRawUtf8PropertyName property" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;System::Byte&gt; GetRawUtf8PropertyName(System::Text::Json::JsonProperty property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Text.Json.JsonProperty" Index="0" FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp;netframework-4.6.2-pp;netframework-4.7.1-pp;netframework-4.7.2-pp;netframework-4.7-pp;netframework-4.8.1-pp;netframework-4.8-pp;netstandard-2.0-pp" />
      </Parameters>
      <Docs>
        <param name="property">The JSON property from which to extract the span.</param>
        <summary>Gets a <see cref="T:System.ReadOnlySpan`1" /> view over the raw JSON data of the given <see cref="T:System.Text.Json.JsonProperty" /> name.</summary>
        <returns>The span containing the raw JSON data of the <paramref name="property" /> name. This will not include the enclosing quotes.</returns>
        <remarks>While the method itself does check for disposal of the underlying <see cref="T:System.Text.Json.JsonDocument" />, it is possible that it could be disposed after the method returns, which would result in the span pointing to a buffer that has been returned to the shared pool. Callers should take extra care to make sure that such a scenario isn't possible to avoid potential data corruption.</remarks>
        <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRawUtf8Value">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; GetRawUtf8Value (System.Text.Json.JsonElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; GetRawUtf8Value(valuetype System.Text.Json.JsonElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.JsonMarshal.GetRawUtf8Value(System.Text.Json.JsonElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRawUtf8Value (element As JsonElement) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="F#" Value="static member GetRawUtf8Value : System.Text.Json.JsonElement -&gt; ReadOnlySpan&lt;byte&gt;" Usage="System.Runtime.InteropServices.JsonMarshal.GetRawUtf8Value element" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;System::Byte&gt; GetRawUtf8Value(System::Text::Json::JsonElement element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Text.Json.JsonElement" />
      </Parameters>
      <Docs>
        <param name="element">The JSON element from which to extract the span.</param>
        <summary>Gets a <see cref="T:System.ReadOnlySpan`1" /> view over the raw JSON data of the given <see cref="T:System.Text.Json.JsonElement" />.</summary>
        <returns>The span containing the raw JSON data of<paramref name="element" />.</returns>
        <remarks>
          <para>While the method itself does check for disposal of the underlying <see cref="T:System.Text.Json.JsonDocument" />, it is possible that it could be disposed after the method returns, which would result in the span pointing to a buffer that has been returned to the shared pool. Callers should take extra care to make sure that such a scenario isn't possible to avoid potential data corruption.</para>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The underlying <see cref="T:System.Text.Json.JsonDocument" /> has been disposed.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
