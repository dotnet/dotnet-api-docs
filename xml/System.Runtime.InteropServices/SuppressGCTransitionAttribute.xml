<Type Name="SuppressGCTransitionAttribute" FullName="System.Runtime.InteropServices.SuppressGCTransitionAttribute">
  <TypeSignature Language="C#" Value="public sealed class SuppressGCTransitionAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SuppressGCTransitionAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SuppressGCTransitionAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class SuppressGCTransitionAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type SuppressGCTransitionAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indicates that a garbage collection transition should be skipped when an unmanaged function call is made.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

This attribute is ignored if applied to a method without the <xref:System.Runtime.InteropServices.DllImportAttribute>.
 
 Forgoing this transition can yield benefits when the cost of the transition is more than the execution time of the unmanaged function. However, avoiding this transition removes some of the guarantees the runtime provides through a normal P/Invoke. When exiting the managed runtime to enter an unmanaged function, the GC must transition from Cooperative mode into Preemptive mode. Full details on these modes can be found at https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/clr-code-guide.md#2.1.8.
 Suppressing the GC transition is an advanced scenario and should not be done without fully understanding potential consequences.
 
 One of these consequences is an impact to [Mixed-mode debugging](https://docs.microsoft.com/visualstudio/debugger/how-to-debug-in-mixed-mode).
 During Mixed-mode debugging, it is not possible to step into or set breakpoints in a P/Invoke that has been marked with this attribute. A workaround is to switch to native debugging and set a breakpoint in the native function.
 In general, usage of this attribute is not recommended if debugging the P/Invoke is important, for example, stepping through the native code or diagnosing an exception thrown from the native code.
 
 The P/Invoke method that this attribute is applied to must have all of the following properties:
 * Native function always executes for a trivial amount of time (less than 1 microsecond).
 * Native function does not perform a blocking syscall (for example, any type of I/O).
 * Native function does not call back into the runtime (for example, Reverse P/Invoke).
 * Native function does not throw exceptions.
 * Native function does not manipulate locks or other concurrency primitives.
 
 Consequences of invalid uses of this attribute include:
 
 * GC starvation.
 * Immediate runtime termination.
 * Data corruption.

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SuppressGCTransitionAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SuppressGCTransitionAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SuppressGCTransitionAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
