<Type Name="UCOMIEnumConnectionPoints" FullName="System.Runtime.InteropServices.UCOMIEnumConnectionPoints">
  <TypeSignature Language="C#" Value="public interface UCOMIEnumConnectionPoints" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract UCOMIEnumConnectionPoints" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.UCOMIEnumConnectionPoints" />
  <TypeSignature Language="VB.NET" Value="Public Interface UCOMIEnumConnectionPoints" />
  <TypeSignature Language="C++ CLI" Value="public interface class UCOMIEnumConnectionPoints" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("b196b285-bab4-101a-b69c-00aa00341d07")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Use <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints" /> instead.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about the `IEnumConnectionPoints` interface, see the MSDN Library.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public void Clone (out System.Runtime.InteropServices.UCOMIEnumConnectionPoints ppenum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clone([out] class System.Runtime.InteropServices.UCOMIEnumConnectionPoints&amp; ppenum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIEnumConnectionPoints.Clone(System.Runtime.InteropServices.UCOMIEnumConnectionPoints@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clone (ByRef ppenum As UCOMIEnumConnectionPoints)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clone([Runtime::InteropServices::Out] System::Runtime::InteropServices::UCOMIEnumConnectionPoints ^ % ppenum);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ppenum" Type="System.Runtime.InteropServices.UCOMIEnumConnectionPoints&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ppenum">On successful return, a reference to the newly created enumerator.</param>
        <summary>Creates another enumerator that contains the same enumeration state as the current one.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IEnumConnectionPoints::Clone`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public int Next (int celt, System.Runtime.InteropServices.UCOMIConnectionPoint[] rgelt, out int pceltFetched);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next(int32 celt, [out] class System.Runtime.InteropServices.UCOMIConnectionPoint[] rgelt, [out] int32&amp; pceltFetched) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.UCOMIConnectionPoint[],System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Next (celt As Integer, rgelt As UCOMIConnectionPoint(), ByRef pceltFetched As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Next(int celt, cli::array &lt;System::Runtime::InteropServices::UCOMIConnectionPoint ^&gt; ^ rgelt, [Runtime::InteropServices::Out] int % pceltFetched);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="celt" Type="System.Int32" />
        <Parameter Name="rgelt" Type="System.Runtime.InteropServices.UCOMIConnectionPoint[]" />
        <Parameter Name="pceltFetched" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="celt">The number of <see langword="IConnectionPoint" /> references to return in <c>rgelt</c>.</param>
        <param name="rgelt">On successful return, a reference to the enumerated connections.</param>
        <param name="pceltFetched">On successful return, a reference to the actual number of connections enumerated in <c>rgelt</c>.</param>
        <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
        <returns>
          <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IEnumConnectionPoints::Next`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public int Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIEnumConnectionPoints.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the enumeration sequence to the beginning.</summary>
        <returns>An HRESULT with the value <see langword="S_OK" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IEnumConnectionPoints::Reset`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public int Skip (int celt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Skip(int32 celt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIEnumConnectionPoints.Skip(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skip (celt As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Skip(int celt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="celt" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="celt">The number of elements to skip in the enumeration.</param>
        <summary>Skips over a specified number of items in the enumeration sequence.</summary>
        <returns>
          <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about `IEnumConnectionPoints::Skip`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>