<Type Name="NFloat" FullName="System.Runtime.InteropServices.NFloat">
  <TypeSignature Language="C#" Value="public readonly struct NFloat : IEquatable&lt;System.Runtime.InteropServices.NFloat&gt;" FrameworkAlternate="net-6.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit NFloat extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;" FrameworkAlternate="net-6.0" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.NFloat" />
  <TypeSignature Language="VB.NET" Value="Public Structure NFloat&#xA;Implements IEquatable(Of NFloat)" FrameworkAlternate="net-6.0" />
  <TypeSignature Language="F#" Value="type NFloat = struct" FrameworkAlternate="net-6.0" />
  <TypeSignature Language="C++ CLI" Value="public value class NFloat : IEquatable&lt;System::Runtime::InteropServices::NFloat&gt;" FrameworkAlternate="net-6.0" />
  <TypeSignature Language="C#" Value="public readonly struct NFloat : IComparable&lt;System.Runtime.InteropServices.NFloat&gt;, IEquatable&lt;System.Runtime.InteropServices.NFloat&gt;, IParsable&lt;System.Runtime.InteropServices.NFloat&gt;, ISpanParsable&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IAdditionOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IAdditiveIdentity&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IBinaryFloatingPointIeee754&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IBinaryNumber&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IBitwiseOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IComparisonOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,bool&gt;, System.Numerics.IDecrementOperators&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IDivisionOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IEqualityOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,bool&gt;, System.Numerics.IExponentialFunctions&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IFloatingPointConstants&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IFloatingPointIeee754&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IHyperbolicFunctions&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IIncrementOperators&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.ILogarithmicFunctions&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IMinMaxValue&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IModulusOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IMultiplicativeIdentity&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IMultiplyOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;, System.Numerics.INumber&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.INumberBase&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IPowerFunctions&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IRootFunctions&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.ISignedNumber&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.ISubtractionOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;, System.Numerics.ITrigonometricFunctions&lt;System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IUnaryNegationOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;, System.Numerics.IUnaryPlusOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;" FrameworkAlternate="net-7.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit NFloat extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.IEquatable`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.IFormattable, class System.IParsable`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.ISpanFormattable, class System.ISpanParsable`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IAdditionOperators`3&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IAdditiveIdentity`2&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IBinaryFloatingPointIeee754`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IBinaryNumber`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IBitwiseOperators`3&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IComparisonOperators`3&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat, bool&gt;, class System.Numerics.IDecrementOperators`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IDivisionOperators`3&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IEqualityOperators`3&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat, bool&gt;, class System.Numerics.IExponentialFunctions`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IFloatingPoint`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IFloatingPointConstants`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IFloatingPointIeee754`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IHyperbolicFunctions`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IIncrementOperators`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.ILogarithmicFunctions`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IMinMaxValue`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IModulusOperators`3&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IMultiplicativeIdentity`2&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IMultiplyOperators`3&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.INumber`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.INumberBase`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IPowerFunctions`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IRootFunctions`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.ISignedNumber`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.ISubtractionOperators`3&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.ITrigonometricFunctions`1&lt;valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IUnaryNegationOperators`2&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt;, class System.Numerics.IUnaryPlusOperators`2&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt;" FrameworkAlternate="net-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Structure NFloat&#xA;Implements IAdditionOperators(Of NFloat, NFloat, NFloat), IAdditiveIdentity(Of NFloat, NFloat), IBinaryFloatingPointIeee754(Of NFloat), IBinaryNumber(Of NFloat), IBitwiseOperators(Of NFloat, NFloat, NFloat), IComparable(Of NFloat), IComparisonOperators(Of NFloat, NFloat, Boolean), IDecrementOperators(Of NFloat), IDivisionOperators(Of NFloat, NFloat, NFloat), IEqualityOperators(Of NFloat, NFloat, Boolean), IEquatable(Of NFloat), IExponentialFunctions(Of NFloat), IFloatingPoint(Of NFloat), IFloatingPointConstants(Of NFloat), IFloatingPointIeee754(Of NFloat), IHyperbolicFunctions(Of NFloat), IIncrementOperators(Of NFloat), ILogarithmicFunctions(Of NFloat), IMinMaxValue(Of NFloat), IModulusOperators(Of NFloat, NFloat, NFloat), IMultiplicativeIdentity(Of NFloat, NFloat), IMultiplyOperators(Of NFloat, NFloat, NFloat), INumber(Of NFloat), INumberBase(Of NFloat), IParsable(Of NFloat), IPowerFunctions(Of NFloat), IRootFunctions(Of NFloat), ISignedNumber(Of NFloat), ISpanParsable(Of NFloat), ISubtractionOperators(Of NFloat, NFloat, NFloat), ITrigonometricFunctions(Of NFloat), IUnaryNegationOperators(Of NFloat, NFloat), IUnaryPlusOperators(Of NFloat, NFloat)" FrameworkAlternate="net-7.0" />
  <TypeSignature Language="F#" Value="type NFloat = struct&#xA;    interface IFormattable&#xA;    interface IParsable&lt;NFloat&gt;&#xA;    interface ISpanFormattable&#xA;    interface ISpanParsable&lt;NFloat&gt;&#xA;    interface IAdditionOperators&lt;NFloat, NFloat, NFloat&gt;&#xA;    interface IAdditiveIdentity&lt;NFloat, NFloat&gt;&#xA;    interface IBinaryFloatingPointIeee754&lt;NFloat&gt;&#xA;    interface IBinaryNumber&lt;NFloat&gt;&#xA;    interface IBitwiseOperators&lt;NFloat, NFloat, NFloat&gt;&#xA;    interface IComparisonOperators&lt;NFloat, NFloat, bool&gt;&#xA;    interface IEqualityOperators&lt;NFloat, NFloat, bool&gt;&#xA;    interface IDecrementOperators&lt;NFloat&gt;&#xA;    interface IDivisionOperators&lt;NFloat, NFloat, NFloat&gt;&#xA;    interface IIncrementOperators&lt;NFloat&gt;&#xA;    interface IModulusOperators&lt;NFloat, NFloat, NFloat&gt;&#xA;    interface IMultiplicativeIdentity&lt;NFloat, NFloat&gt;&#xA;    interface IMultiplyOperators&lt;NFloat, NFloat, NFloat&gt;&#xA;    interface INumber&lt;NFloat&gt;&#xA;    interface INumberBase&lt;NFloat&gt;&#xA;    interface ISubtractionOperators&lt;NFloat, NFloat, NFloat&gt;&#xA;    interface IUnaryNegationOperators&lt;NFloat, NFloat&gt;&#xA;    interface IUnaryPlusOperators&lt;NFloat, NFloat&gt;&#xA;    interface IExponentialFunctions&lt;NFloat&gt;&#xA;    interface IFloatingPointConstants&lt;NFloat&gt;&#xA;    interface IFloatingPoint&lt;NFloat&gt;&#xA;    interface ISignedNumber&lt;NFloat&gt;&#xA;    interface IFloatingPointIeee754&lt;NFloat&gt;&#xA;    interface IHyperbolicFunctions&lt;NFloat&gt;&#xA;    interface ILogarithmicFunctions&lt;NFloat&gt;&#xA;    interface IPowerFunctions&lt;NFloat&gt;&#xA;    interface IRootFunctions&lt;NFloat&gt;&#xA;    interface ITrigonometricFunctions&lt;NFloat&gt;&#xA;    interface IMinMaxValue&lt;NFloat&gt;" FrameworkAlternate="net-7.0" />
  <TypeSignature Language="C++ CLI" Value="public value class NFloat : IComparable&lt;System::Runtime::InteropServices::NFloat&gt;, IEquatable&lt;System::Runtime::InteropServices::NFloat&gt;, IParsable&lt;System::Runtime::InteropServices::NFloat&gt;, ISpanParsable&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IAdditionOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IAdditiveIdentity&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IBinaryFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IBinaryNumber&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IBitwiseOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IComparisonOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, bool&gt;, System::Numerics::IDecrementOperators&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IDivisionOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IEqualityOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, bool&gt;, System::Numerics::IExponentialFunctions&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IFloatingPointConstants&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IHyperbolicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IIncrementOperators&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::ILogarithmicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IMinMaxValue&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IModulusOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IMultiplicativeIdentity&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IMultiplyOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;, System::Numerics::INumber&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IPowerFunctions&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IRootFunctions&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::ISignedNumber&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::ISubtractionOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;, System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IUnaryNegationOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;, System::Numerics::IUnaryPlusOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;" FrameworkAlternate="net-7.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.IComparable&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.IComparable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.IEquatable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.IParsable&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.IParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.ISpanFormattable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.ISpanParsable&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.ISpanParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IAdditionOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IAdditiveIdentity&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IAdditiveIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IBinaryFloatingPointIeee754&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IBinaryNumber&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IBinaryNumber&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IBitwiseOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IBitwiseOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IComparisonOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IComparisonOperators&lt;TSelf,TSelf,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IDecrementOperators&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IDecrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IDivisionOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IEqualityOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IEqualityOperators&lt;TSelf,TOther,TResult&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IEqualityOperators&lt;TSelf,TSelf,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IExponentialFunctions&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IExponentialFunctions&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IFloatingPoint&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IFloatingPointConstants&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IFloatingPointConstants&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IFloatingPointIeee754&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IFloatingPointIeee754&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IHyperbolicFunctions&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IHyperbolicFunctions&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IIncrementOperators&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IIncrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.ILogarithmicFunctions&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.ILogarithmicFunctions&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IMinMaxValue&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IModulusOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IModulusOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IMultiplicativeIdentity&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IMultiplicativeIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IMultiplyOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.INumber&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.INumber&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.INumberBase&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.INumberBase&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IPowerFunctions&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IPowerFunctions&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IRootFunctions&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IRootFunctions&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.ISignedNumber&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.ISignedNumber&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.ISubtractionOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.ITrigonometricFunctions&lt;System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.ITrigonometricFunctions&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IUnaryNegationOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IUnaryNegationOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IUnaryPlusOperators&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.Numerics.IUnaryPlusOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Runtime.InteropServices.NFloat" /> is an immutable value type that represents a floating type that has the same size as the native integer size.
      It is meant to be used as an exchange type at the managed/unmanaged boundary to accurately represent in managed code unmanaged APIs that use a type alias for C or C++'s <c>float</c> on 32-bit platforms or <c>double</c> on 64-bit platforms, such as the CGFloat type in libraries provided by Apple.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

It is meant to be used as an exchange type at the managed/unmanaged boundary to accurately represent in managed code unmanaged APIs that use a type alias for C or C++'s `float` on 32-bit platforms or `double` on 64-bit platforms, such as the `CGFloat` type in libraries provided by Apple.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NFloat (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Double)" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.NFloat : double -&gt; System.Runtime.InteropServices.NFloat" Usage="new System.Runtime.InteropServices.NFloat value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NFloat(double value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The floating-point value.</param>
        <summary>Constructs an instance from a 64-bit floating point value.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NFloat (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.#ctor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Single)" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.NFloat : single -&gt; System.Runtime.InteropServices.NFloat" Usage="new System.Runtime.InteropServices.NFloat value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NFloat(float value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The floating-point value.</param>
        <summary>Constructs an instance from a 32-bit floating point value.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Abs (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Abs(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Abs(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Abs : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Abs value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Abs(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::Abs;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.Abs(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value for which to get its absolute.</param>
        <summary>Computes the absolute of a value.</summary>
        <returns>The absolute of <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.Abs(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Acos (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Acos(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Acos(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Acos : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Acos x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Acos(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Acos;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.Acos(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose arc-cosine is to be computed.</param>
        <summary>Computes the arc-cosine of a value.</summary>
        <returns>The arc-cosine of <paramref name="x" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `arccos(x)` in the interval `[+0, +π]` radians.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Acos(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Acosh (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Acosh(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Acosh(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acosh (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Acosh : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Acosh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Acosh(System::Runtime::InteropServices::NFloat x) = System::Numerics::IHyperbolicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Acosh;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IHyperbolicFunctions`1.Acosh(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic arc-cosine is to be computed.</param>
        <summary>Computes the hyperbolic arc-cosine of a value.</summary>
        <returns>The hyperbolic arc-cosine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Acosh(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AcosPi">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat AcosPi (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat AcosPi(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.AcosPi(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AcosPi (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member AcosPi : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.AcosPi x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat AcosPi(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::AcosPi;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.AcosPi(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose arc-cosine is to be computed.</param>
        <summary>Computes the arc-cosine of a value and divides the result by <c>pi</c>.</summary>
        <returns>The arc-cosine of <paramref name="x" />, divided by <c>pi</c>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `arccos(x) / π` in the interval `[-0.5, +0.5]`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.AcosPi(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Asin (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Asin(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Asin(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Asin : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Asin x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Asin(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Asin;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.Asin(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose arc-sine is to be computed.</param>
        <summary>Computes the arc-sine of a value.</summary>
        <returns>The arc-sine of <paramref name="x" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `arcsin(x)` in the interval `[-π / 2, +π / 2]` radians.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Asin(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Asinh (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Asinh(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Asinh(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asinh (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Asinh : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Asinh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Asinh(System::Runtime::InteropServices::NFloat x) = System::Numerics::IHyperbolicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Asinh;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IHyperbolicFunctions`1.Asinh(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic arc-sine is to be computed.</param>
        <summary>Computes the hyperbolic arc-sine of a value.</summary>
        <returns>The hyperbolic arc-sine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Asinh(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AsinPi">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat AsinPi (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat AsinPi(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.AsinPi(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsinPi (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member AsinPi : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.AsinPi x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat AsinPi(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::AsinPi;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.AsinPi(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose arc-sine is to be computed.</param>
        <summary>Computes the arc-sine of a value and divides the result by <c>pi</c>.</summary>
        <returns>The arc-sine of <paramref name="x" />, divided by <c>pi</c>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `arcsin(x) / π` in the interval `[-0.5, +0.5]`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.AsinPi(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Atan (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Atan(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Atan(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Atan : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Atan x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Atan(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Atan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.Atan(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose arc-tangent is to be computed.</param>
        <summary>Computes the arc-tangent of a value.</summary>
        <returns>The arc-tangent of <paramref name="x" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `arctan(x)` in the interval `[-π / 2, +π / 2]` radians.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Atan(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Atan2 (System.Runtime.InteropServices.NFloat y, System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Atan2(valuetype System.Runtime.InteropServices.NFloat y, valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Atan2(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As NFloat, x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Atan2 : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Atan2 (y, x)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Atan2(System::Runtime::InteropServices::NFloat y, System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;::Atan2;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPointIeee754`1.Atan2(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="y">The y-coordinate of a point.</param>
        <param name="x">The x-coordinate of a point.</param>
        <summary>Computes the arc-tangent of the quotient of two values.</summary>
        <returns>The arc-tangent of <paramref name="y" /> divided-by <paramref name="x" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `arctan(y / x)` in the interval `[-π, +π]` radians.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.Atan2(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="Atan2Pi">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Atan2Pi (System.Runtime.InteropServices.NFloat y, System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Atan2Pi(valuetype System.Runtime.InteropServices.NFloat y, valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Atan2Pi(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2Pi (y As NFloat, x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Atan2Pi : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Atan2Pi (y, x)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Atan2Pi(System::Runtime::InteropServices::NFloat y, System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;::Atan2Pi;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPointIeee754`1.Atan2Pi(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="y">The y-coordinate of a point.</param>
        <param name="x">The x-coordinate of a point.</param>
        <summary>Computes the arc-tangent for the quotient of two values and divides the result by <c>pi</c>.</summary>
        <returns>The arc-tangent of <paramref name="y" /> divided-by <paramref name="x" />, divided by <c>pi</c>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `arctan(y / x) / π` in the interval `[-1, +1]`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.Atan2Pi(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Atanh (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Atanh(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Atanh(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atanh (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Atanh : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Atanh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Atanh(System::Runtime::InteropServices::NFloat x) = System::Numerics::IHyperbolicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Atanh;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IHyperbolicFunctions`1.Atanh(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic arc-tangent is to be computed.</param>
        <summary>Computes the hyperbolic arc-tangent of a value.</summary>
        <returns>The hyperbolic arc-tangent of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Atanh(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AtanPi">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat AtanPi (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat AtanPi(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.AtanPi(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AtanPi (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member AtanPi : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.AtanPi x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat AtanPi(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::AtanPi;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.AtanPi(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose arc-tangent is to be computed.</param>
        <summary>Computes the arc-tangent of a value and divides the result by pi.</summary>
        <returns>The arc-tangent of <paramref name="x" />, divided by <c>pi</c>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `arctan(x) / π` in the interval `[-0.5, +0.5]`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.AtanPi(`0)" />
      </Docs>
    </Member>
    <Member MemberName="BitDecrement">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat BitDecrement (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat BitDecrement(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.BitDecrement(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitDecrement (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member BitDecrement : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.BitDecrement x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat BitDecrement(System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;::BitDecrement;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPointIeee754`1.BitDecrement(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to be bitwise decremented.</param>
        <summary>Decrements a value to the smallest value that compares less than a given value.</summary>
        <returns>The smallest value that compares less than <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.BitDecrement(`0)" />
      </Docs>
    </Member>
    <Member MemberName="BitIncrement">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat BitIncrement (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat BitIncrement(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.BitIncrement(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitIncrement (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member BitIncrement : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.BitIncrement x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat BitIncrement(System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;::BitIncrement;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPointIeee754`1.BitIncrement(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to be bitwise incremented.</param>
        <summary>Increments a value to the smallest value that compares greater than a given value.</summary>
        <returns>The smallest value that compares greater than <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.BitIncrement(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Cbrt (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Cbrt(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Cbrt(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Cbrt : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Cbrt x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Cbrt(System::Runtime::InteropServices::NFloat x) = System::Numerics::IRootFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Cbrt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IRootFunctions`1.Cbrt(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose cube-root is to be computed.</param>
        <summary>Computes the cube-root of a value.</summary>
        <returns>The cube-root of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IRootFunctions`1.Cbrt(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Ceiling (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Ceiling(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Ceiling(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Ceiling : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Ceiling x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Ceiling(System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::Ceiling;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.Ceiling(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose ceiling is to be computed.</param>
        <summary>Computes the ceiling of a value.</summary>
        <returns>The ceiling of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Ceiling(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Clamp (System.Runtime.InteropServices.NFloat value, System.Runtime.InteropServices.NFloat min, System.Runtime.InteropServices.NFloat max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Clamp(valuetype System.Runtime.InteropServices.NFloat value, valuetype System.Runtime.InteropServices.NFloat min, valuetype System.Runtime.InteropServices.NFloat max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Clamp(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As NFloat, min As NFloat, max As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Clamp : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Clamp (value, min, max)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Clamp(System::Runtime::InteropServices::NFloat value, System::Runtime::InteropServices::NFloat min, System::Runtime::InteropServices::NFloat max) = System::Numerics::INumber&lt;System::Runtime::InteropServices::NFloat&gt;::Clamp;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.Clamp(`0,`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="min" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="max" Type="System.Runtime.InteropServices.NFloat" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to clamp.</param>
        <param name="min">The inclusive minimum to which <paramref name="value" /> should clamp.</param>
        <param name="max">The inclusive maximum to which <paramref name="value" /> should clamp.</param>
        <summary>Clamps a value to an inclusive minimum and maximum value.</summary>
        <returns>The result of clamping <paramref name="value" /> to the inclusive range of <paramref name="min" /> and <paramref name="max" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.Clamp(`0,`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="nFloat.CompareTo obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare, or <see langword="null" />.</param>
        <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
        <returns>
          <para>A signed number indicating the relative values of this instance and <paramref name="obj" />.</para>
          <list type="table">
            <listheader>
              <term>Return Value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>Less than zero</term>
              <description>This instance is less than <paramref name="obj" />, or this instance is not a number and <paramref name="obj" /> is a number.</description>
            </item>
            <item>
              <term>Zero</term>
              <description>This instance is equal to <paramref name="obj" />, or both this instance and <paramref name="obj" /> are not a number.</description>
            </item>
            <item>
              <term>Greater than zero</term>
              <description>This instance is greater than <paramref name="obj" />, or this instance is a number and <paramref name="obj" /> is not a number or <paramref name="obj" /> is <see langword="null" />.</description>
            </item>
          </list>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> is not a <see cref="T:System.Runtime.InteropServices.NFloat" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Runtime.InteropServices.NFloat other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Runtime.InteropServices.NFloat other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.CompareTo(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As NFloat) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.Runtime.InteropServices.NFloat -&gt; int&#xA;override this.CompareTo : System.Runtime.InteropServices.NFloat -&gt; int" Usage="nFloat.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Runtime::InteropServices::NFloat other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="other">A floating-point number to compare.</param>
        <summary>Compares this instance to a specified floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified floating-point number.</summary>
        <returns>
          <para>A signed number indicating the relative values of this instance and <paramref name="other" />.</para>
          <list type="table">
            <listheader>
              <term>Return Value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>Less than zero</term>
              <description>This instance is less than <paramref name="other" />, or this instance is not a number and <paramref name="other" /> is a number.</description>
            </item>
            <item>
              <term>Zero</term>
              <description>This instance is equal to <paramref name="other" />, or both this instance and <paramref name="other" /> are not a number.</description>
            </item>
            <item>
              <term>Greater than zero</term>
              <description>This instance is greater than <paramref name="other" />, or this instance is a number and <paramref name="other" /> is not a number.</description>
            </item>
          </list>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopySign">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat CopySign (System.Runtime.InteropServices.NFloat value, System.Runtime.InteropServices.NFloat sign);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat CopySign(valuetype System.Runtime.InteropServices.NFloat value, valuetype System.Runtime.InteropServices.NFloat sign) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.CopySign(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CopySign (value As NFloat, sign As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member CopySign : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.CopySign (value, sign)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat CopySign(System::Runtime::InteropServices::NFloat value, System::Runtime::InteropServices::NFloat sign) = System::Numerics::INumber&lt;System::Runtime::InteropServices::NFloat&gt;::CopySign;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.CopySign(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="sign" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value whose magnitude is used in the result.</param>
        <param name="sign">The value whose sign is used in the result.</param>
        <summary>Copies the sign of a value to the sign of another value.</summary>
        <returns>A value with the magnitude of <paramref name="value" /> and the sign of <paramref name="sign" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.CopySign(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Cos (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Cos(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Cos(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Cos : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Cos x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Cos(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Cos;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.Cos(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose cosine is to be computed.</param>
        <summary>Computes the cosine of a value.</summary>
        <returns>The cosine of <paramref name="x" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `cos(x)`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Cos(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Cosh (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Cosh(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Cosh(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Cosh : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Cosh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Cosh(System::Runtime::InteropServices::NFloat x) = System::Numerics::IHyperbolicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Cosh;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IHyperbolicFunctions`1.Cosh(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic cosine is to be computed.</param>
        <summary>Computes the hyperbolic cosine of a value.</summary>
        <returns>The hyperbolic cosine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Cosh(`0)" />
      </Docs>
    </Member>
    <Member MemberName="CosPi">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat CosPi (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat CosPi(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.CosPi(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CosPi (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member CosPi : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.CosPi x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat CosPi(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::CosPi;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.CosPi(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in half-revolutions, whose cosine is to be computed.</param>
        <summary>Computes the cosine of a value that has been multipled by <c>pi</c>.</summary>
        <returns>The cosine of <paramref name="x" /> multiplied-by <c>pi</c>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `cos(x * π)`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.CosPi(`0)" />
      </Docs>
    </Member>
    <Member MemberName="CreateChecked&lt;TOther&gt;">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat CreateChecked&lt;TOther&gt; (TOther value) where TOther : System.Numerics.INumberBase&lt;TOther&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat CreateChecked&lt;(class System.Numerics.INumberBase`1&lt;!!TOther&gt;) TOther&gt;(!!TOther value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.CreateChecked``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateChecked(Of TOther As INumberBase(Of TOther)) (value As TOther) As NFloat" />
      <MemberSignature Language="F#" Value="static member CreateChecked : 'Other -&gt; System.Runtime.InteropServices.NFloat (requires 'Other :&gt; System.Numerics.INumberBase&lt;'Other&gt;)" Usage="System.Runtime.InteropServices.NFloat.CreateChecked value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOther&gt;&#xA; where TOther : System::Numerics::INumberBase&lt;TOther&gt; static System::Runtime::InteropServices::NFloat CreateChecked(TOther value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::CreateChecked;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.CreateChecked``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOther">
          <Constraints>
            <InterfaceName>System.Numerics.INumberBase&lt;TOther&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TOther" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
        <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
        <summary>Creates an instance of the current type from a value, throwing an overflow exception for any values that fall outside the representable range of the current type.</summary>
        <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateChecked``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="CreateSaturating&lt;TOther&gt;">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat CreateSaturating&lt;TOther&gt; (TOther value) where TOther : System.Numerics.INumberBase&lt;TOther&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat CreateSaturating&lt;(class System.Numerics.INumberBase`1&lt;!!TOther&gt;) TOther&gt;(!!TOther value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.CreateSaturating``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSaturating(Of TOther As INumberBase(Of TOther)) (value As TOther) As NFloat" />
      <MemberSignature Language="F#" Value="static member CreateSaturating : 'Other -&gt; System.Runtime.InteropServices.NFloat (requires 'Other :&gt; System.Numerics.INumberBase&lt;'Other&gt;)" Usage="System.Runtime.InteropServices.NFloat.CreateSaturating value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOther&gt;&#xA; where TOther : System::Numerics::INumberBase&lt;TOther&gt; static System::Runtime::InteropServices::NFloat CreateSaturating(TOther value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::CreateSaturating;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.CreateSaturating``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOther">
          <Constraints>
            <InterfaceName>System.Numerics.INumberBase&lt;TOther&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TOther" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
        <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
        <summary>Creates an instance of the current type from a value, saturating any values that fall outside the representable range of the current type.</summary>
        <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />, saturating if <paramref name="value" /> falls outside the representable range of <typeparamref name="TSelf" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateSaturating``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="CreateTruncating&lt;TOther&gt;">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat CreateTruncating&lt;TOther&gt; (TOther value) where TOther : System.Numerics.INumberBase&lt;TOther&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat CreateTruncating&lt;(class System.Numerics.INumberBase`1&lt;!!TOther&gt;) TOther&gt;(!!TOther value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.CreateTruncating``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateTruncating(Of TOther As INumberBase(Of TOther)) (value As TOther) As NFloat" />
      <MemberSignature Language="F#" Value="static member CreateTruncating : 'Other -&gt; System.Runtime.InteropServices.NFloat (requires 'Other :&gt; System.Numerics.INumberBase&lt;'Other&gt;)" Usage="System.Runtime.InteropServices.NFloat.CreateTruncating value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOther&gt;&#xA; where TOther : System::Numerics::INumberBase&lt;TOther&gt; static System::Runtime::InteropServices::NFloat CreateTruncating(TOther value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::CreateTruncating;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.CreateTruncating``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOther">
          <Constraints>
            <InterfaceName>System.Numerics.INumberBase&lt;TOther&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TOther" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
        <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
        <summary>Creates an instance of the current type from a value, truncating any values that fall outside the representable range of the current type.</summary>
        <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />, truncating if <paramref name="value" /> falls outside the representable range of <typeparamref name="TSelf" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateTruncating``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat E { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.InteropServices.NFloat E" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.E" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property E As NFloat" />
      <MemberSignature Language="F#" Value="static member E : System.Runtime.InteropServices.NFloat" Usage="E" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::InteropServices::NFloat E { System::Runtime::InteropServices::NFloat get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IFloatingPointConstants`1.E</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mathematical constant <c>e</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.IFloatingPointConstants`1.E" />
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Epsilon { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.InteropServices.NFloat Epsilon" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Epsilon As NFloat" />
      <MemberSignature Language="F#" Value="static member Epsilon : System.Runtime.InteropServices.NFloat" Usage="Epsilon" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::InteropServices::NFloat Epsilon { System::Runtime::InteropServices::NFloat get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IFloatingPointIeee754`1.Epsilon</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the smallest positive NFloat value that is greater than zero.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Runtime.InteropServices.NFloat other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Runtime.InteropServices.NFloat other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Equals(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="nFloat.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Runtime::InteropServices::NFloat other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Runtime.InteropServices.NFloat" />
      </Parameters>
      <Docs>
        <param name="other">An <see cref="T:System.Runtime.InteropServices.NFloat" /> value to compare to this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Runtime.InteropServices.CLong" /> value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="other" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? o);" FrameworkAlternate="net-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" FrameworkAlternate="net-6.0" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" FrameworkAlternate="net-6.0" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="nFloat.Equals o" FrameworkAlternate="net-6.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" FrameworkAlternate="net-6.0" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" FrameworkAlternate="net-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" FrameworkAlternate="net-7.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" FrameworkAlternate="net-7.0" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="nFloat.Equals obj" FrameworkAlternate="net-7.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" FrameworkAlternate="net-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" Index="0" FrameworkAlternate="net-6.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-6.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="net-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="o">An object to compare with this instance.</param>
        <param name="obj">An object to compare with this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="o" /> is an instance of <see cref="T:System.Runtime.InteropServices.NFloat" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Exp (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Exp(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Exp(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Exp : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Exp x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Exp(System::Runtime::InteropServices::NFloat x) = System::Numerics::IExponentialFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Exp;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IExponentialFunctions`1.Exp(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>E</c> is raised.</param>
        <summary>Computes <c>E</c> raised to a given power.</summary>
        <returns>
          <c>E</c> raised to the power of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.Exp(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Exp10">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Exp10 (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Exp10(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Exp10(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp10 (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Exp10 : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Exp10 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Exp10(System::Runtime::InteropServices::NFloat x) = System::Numerics::IExponentialFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Exp10;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IExponentialFunctions`1.Exp10(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>10</c> is raised.</param>
        <summary>Computes <c>10</c> raised to a given power.</summary>
        <returns>
          <c>10<sup><paramref name="x" /></sup></c>
        </returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.Exp10(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Exp10M1">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Exp10M1 (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Exp10M1(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Exp10M1(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp10M1 (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Exp10M1 : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Exp10M1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Exp10M1(System::Runtime::InteropServices::NFloat x) = System::Numerics::IExponentialFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Exp10M1;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IExponentialFunctions`1.Exp10M1(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>10</c> is raised.</param>
        <summary>Computes <c>10</c> raised to a given power and subtracts one.</summary>
        <returns>
          <c>10<sup><paramref name="x" /></sup> - 1</c>
        </returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.Exp10M1(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Exp2">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Exp2 (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Exp2(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Exp2(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp2 (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Exp2 : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Exp2 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Exp2(System::Runtime::InteropServices::NFloat x) = System::Numerics::IExponentialFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Exp2;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IExponentialFunctions`1.Exp2(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>2</c> is raised.</param>
        <summary>Computes <c>2</c> raised to a given power.</summary>
        <returns>
          <c>2<sup><paramref name="x" /></sup></c>
        </returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.Exp2(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Exp2M1">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Exp2M1 (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Exp2M1(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Exp2M1(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp2M1 (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Exp2M1 : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Exp2M1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Exp2M1(System::Runtime::InteropServices::NFloat x) = System::Numerics::IExponentialFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Exp2M1;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IExponentialFunctions`1.Exp2M1(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>2</c> is raised.</param>
        <summary>Computes <c>2</c> raised to a given power and subtracts one.</summary>
        <returns>
          <c>2<sup><paramref name="x" /></sup> - 1</c>
        </returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.Exp2M1(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ExpM1">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat ExpM1 (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat ExpM1(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.ExpM1(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExpM1 (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member ExpM1 : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.ExpM1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat ExpM1(System::Runtime::InteropServices::NFloat x) = System::Numerics::IExponentialFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::ExpM1;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IExponentialFunctions`1.ExpM1(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>E</c> is raised.</param>
        <summary>Computes <c>E</c> raised to a given power and subtracts one.</summary>
        <returns>
          <c>E<sup><paramref name="x" /></sup> - 1</c>
        </returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.ExpM1(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Floor (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Floor(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Floor(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Floor : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Floor x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Floor(System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::Floor;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.Floor(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose floor is to be computed.</param>
        <summary>Computes the floor of a value.</summary>
        <returns>The floor of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Floor(`0)" />
      </Docs>
    </Member>
    <Member MemberName="FusedMultiplyAdd">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat FusedMultiplyAdd (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right, System.Runtime.InteropServices.NFloat addend);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat FusedMultiplyAdd(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right, valuetype System.Runtime.InteropServices.NFloat addend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.FusedMultiplyAdd(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FusedMultiplyAdd (left As NFloat, right As NFloat, addend As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member FusedMultiplyAdd : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.FusedMultiplyAdd (left, right, addend)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat FusedMultiplyAdd(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right, System::Runtime::InteropServices::NFloat addend) = System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;::FusedMultiplyAdd;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPointIeee754`1.FusedMultiplyAdd(`0,`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="addend" Type="System.Runtime.InteropServices.NFloat" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value that <paramref name="right" /> multiplies.</param>
        <param name="right">The value that multiplies <paramref name="left" />.</param>
        <param name="addend">The value that is added to the product of <paramref name="left" /> and <paramref name="right" />.</param>
        <summary>Computes the fused multiply-add of three values.</summary>
        <returns>The result of <paramref name="left" /> times <paramref name="right" /> plus <paramref name="addend" /> computed as one ternary operation.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.FusedMultiplyAdd(`0,`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="nFloat.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hypot">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Hypot (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Hypot(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Hypot(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Hypot (x As NFloat, y As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Hypot : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Hypot (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Hypot(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat y) = System::Numerics::IRootFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Hypot;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IRootFunctions`1.Hypot(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to square and add to <paramref name="y" />.</param>
        <param name="y">The value to square and add to <paramref name="x" />.</param>
        <summary>Computes the hypotenuse given two values representing the lengths of the shorter sides in a right-angled triangle.</summary>
        <returns>The square root of <paramref name="x" />-squared plus <paramref name="y" />-squared.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IRootFunctions`1.Hypot(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="Ieee754Remainder">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Ieee754Remainder (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Ieee754Remainder(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Ieee754Remainder(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ieee754Remainder (left As NFloat, right As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Ieee754Remainder : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Ieee754Remainder (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Ieee754Remainder(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;::Ieee754Remainder;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPointIeee754`1.Ieee754Remainder(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value that <paramref name="right" /> divides.</param>
        <param name="right">The value that divides <paramref name="left" />.</param>
        <summary>Computes the remainder of two values as specified by IEEE 754.</summary>
        <returns>The remainder of <paramref name="left" /> divided by <paramref name="right" /> as specified by IEEE 754.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.Ieee754Remainder(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="ILogB">
      <MemberSignature Language="C#" Value="public static int ILogB (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ILogB(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.ILogB(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ILogB (x As NFloat) As Integer" />
      <MemberSignature Language="F#" Value="static member ILogB : System.Runtime.InteropServices.NFloat -&gt; int" Usage="System.Runtime.InteropServices.NFloat.ILogB x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ILogB(System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;::ILogB;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPointIeee754`1.ILogB(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose integer logarithm is to be computed.</param>
        <summary>Computes the integer logarithm of a value.</summary>
        <returns>The integer logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.ILogB(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsEvenInteger">
      <MemberSignature Language="C#" Value="public static bool IsEvenInteger (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEvenInteger(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsEvenInteger(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEvenInteger (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsEvenInteger : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsEvenInteger value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEvenInteger(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsEvenInteger;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsEvenInteger(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value represents an even integral number.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an even integer; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method correctly handles floating-point values and so `2.0` will return `true` while `2.2` will return `false`.

A return value of `false` does not imply that <xref:System.Numerics.INumberBase%601.IsOddInteger(%600)> will return `true`. A number with a fractional portion, for example, `3.3`, is not even or odd.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.IsEvenInteger(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsFinite(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsFinite : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsFinite value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsFinite;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsFinite(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The floating-point value.</param>
        <summary>Determines whether the specified value is finite (zero, subnormal, or normal).</summary>
        <returns>
          <see langword="true" /> if the value is finite (zero, subnormal or normal); <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsInfinity(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsInfinity : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsInfinity value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsInfinity;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsInfinity(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The floating-point value.</param>
        <summary>Determines whether the specified value is infinite (positive or negative infinity).</summary>
        <returns>
          <see langword="true" /> if the value is infinite (positive or negative infinity); <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInteger">
      <MemberSignature Language="C#" Value="public static bool IsInteger (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInteger(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsInteger(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInteger (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsInteger : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsInteger value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInteger(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsInteger;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsInteger(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value represents an integral number.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an integer; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method correctly handles floating-point values and so `2.0` and `3.0` will return `true` while `2.2` and `3.3` will return `false`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.IsInteger(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsNaN(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNaN : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsNaN value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsNaN;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsNaN(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The floating-point value.</param>
        <summary>Determines whether the specified value is NaN (not a number).</summary>
        <returns>
          <see langword="true" /> if the value is NaN (not a number); <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsNegative(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNegative : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsNegative value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsNegative;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsNegative(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The floating-point value.</param>
        <summary>Determines whether the specified value is negative.</summary>
        <returns>
          <see langword="true" /> if the value is negative; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsNegativeInfinity(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNegativeInfinity : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsNegativeInfinity value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsNegativeInfinity;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsNegativeInfinity(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The floating-point value.</param>
        <summary>Determines whether the specified value is negative infinity.</summary>
        <returns>
          <see langword="true" /> if the value is negative infinity; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNormal(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsNormal(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNormal : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsNormal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsNormal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsNormal(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The floating-point value.</param>
        <summary>Determines whether the specified value is normal.</summary>
        <returns>
          <see langword="true" /> if the value is normal; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOddInteger">
      <MemberSignature Language="C#" Value="public static bool IsOddInteger (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsOddInteger(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsOddInteger(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsOddInteger (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsOddInteger : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsOddInteger value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsOddInteger(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsOddInteger;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsOddInteger(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value represents an odd integral number.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an odd integer; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method correctly handles floating-point values and so `3.0` will return `true` while `3.3` will return `false`.

A return value of `false` does not imply that <xref:System.Numerics.INumberBase%601.IsEvenInteger(%600)> will return `true`. A number with a fractional portion, for example, `3.3`, is not even or odd.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.IsOddInteger(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsPositive">
      <MemberSignature Language="C#" Value="public static bool IsPositive (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositive(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsPositive(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositive (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPositive : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsPositive value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositive(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsPositive;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsPositive(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value is positive.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is positive; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

A return value of `false` does not imply that <xref:System.Numerics.INumberBase%601.IsNegative(%600)> will return `true`. A complex number, `a + bi` for non-zero `b`, is not positive or negative

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.IsPositive(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsPositiveInfinity(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPositiveInfinity : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsPositiveInfinity value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsPositiveInfinity;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsPositiveInfinity(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The floating-point value.</param>
        <summary>Determines whether the specified value is positive infinity.</summary>
        <returns>
          <see langword="true" /> if the value is positive infinity; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPow2">
      <MemberSignature Language="C#" Value="public static bool IsPow2 (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPow2(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsPow2(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPow2 (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPow2 : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsPow2 value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPow2(System::Runtime::InteropServices::NFloat value) = System::Numerics::IBinaryNumber&lt;System::Runtime::InteropServices::NFloat&gt;::IsPow2;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryNumber`1.IsPow2(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value is a power of two.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is a power of two; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryNumber`1.IsPow2(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsRealNumber">
      <MemberSignature Language="C#" Value="public static bool IsRealNumber (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsRealNumber(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsRealNumber(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsRealNumber (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsRealNumber : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsRealNumber value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsRealNumber(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsRealNumber;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsRealNumber(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value represents a real number.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is a real number; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This function returns `true` for a complex number `a + bi` where `b` is zero.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.IsRealNumber(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubnormal(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.IsSubnormal(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (value As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSubnormal : System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.IsSubnormal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::IsSubnormal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsSubnormal(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The floating-point value.</param>
        <summary>Determines whether the specified value is subnormal.</summary>
        <returns>
          <see langword="true" /> if the value is subnormal; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Log (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Log(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Log(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Log : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Log x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Log(System::Runtime::InteropServices::NFloat x) = System::Numerics::ILogarithmicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Log;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ILogarithmicFunctions`1.Log(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose natural logarithm is to be computed.</param>
        <summary>Computes the natural (<c>base-E</c> logarithm of a value.</summary>
        <returns>The natural logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.Log(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Log (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat newBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Log(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat newBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Log(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As NFloat, newBase As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Log : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Log (x, newBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Log(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat newBase) = System::Numerics::ILogarithmicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Log;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ILogarithmicFunctions`1.Log(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="newBase" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose logarithm is to be computed.</param>
        <param name="newBase">The base in which the logarithm is to be computed.</param>
        <summary>Computes the logarithm of a value in the specified base.</summary>
        <returns>The base-<paramref name="newBase" /> logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.Log(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Log10 (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Log10(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Log10(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Log10 : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Log10 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Log10(System::Runtime::InteropServices::NFloat x) = System::Numerics::ILogarithmicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Log10;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ILogarithmicFunctions`1.Log10(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose base-10 logarithm is to be computed.</param>
        <summary>Computes the base-10 logarithm of a value.</summary>
        <returns>The base-10 logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.Log10(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Log10P1">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Log10P1 (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Log10P1(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Log10P1(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10P1 (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Log10P1 : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Log10P1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Log10P1(System::Runtime::InteropServices::NFloat x) = System::Numerics::ILogarithmicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Log10P1;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ILogarithmicFunctions`1.Log10P1(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to which one is added before computing the base-10 logarithm.</param>
        <summary>Computes the base-10 logarithm of a value plus one.</summary>
        <returns>
          <c>log<sub>10</sub>(<paramref name="x" /> + 1)</c>
        </returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.Log10P1(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Log2 (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Log2(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Log2(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log2 (value As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Log2 : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Log2 value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Log2(System::Runtime::InteropServices::NFloat value) = System::Numerics::IBinaryNumber&lt;System::Runtime::InteropServices::NFloat&gt;::Log2;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryNumber`1.Log2(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value whose log2 is to be computed.</param>
        <summary>Computes the log2 of a value.</summary>
        <returns>The log2 of <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryNumber`1.Log2(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Log2P1">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Log2P1 (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Log2P1(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Log2P1(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log2P1 (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Log2P1 : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Log2P1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Log2P1(System::Runtime::InteropServices::NFloat x) = System::Numerics::ILogarithmicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Log2P1;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ILogarithmicFunctions`1.Log2P1(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to which one is added before computing the base-2 logarithm.</param>
        <summary>Computes the base-2 logarithm of a value plus one.</summary>
        <returns>
          <c>log<sub>2</sub>(<paramref name="x" /> + 1)</c>
        </returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.Log2P1(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LogP1">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat LogP1 (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat LogP1(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.LogP1(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogP1 (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member LogP1 : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.LogP1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat LogP1(System::Runtime::InteropServices::NFloat x) = System::Numerics::ILogarithmicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::LogP1;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ILogarithmicFunctions`1.LogP1(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to which one is added before computing the natural logarithm.</param>
        <summary>Computes the natural (<c>base-E</c>) logarithm of a value plus one.</summary>
        <returns>
          <c>log<sub>e</sub>(<paramref name="x" /> + 1)</c>
        </returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.LogP1(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Max (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Max(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Max(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (x As NFloat, y As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Max : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Max (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Max(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat y) = System::Numerics::INumber&lt;System::Runtime::InteropServices::NFloat&gt;::Max;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.Max(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to compare with <paramref name="y" />.</param>
        <param name="y">The value to compare with <paramref name="x" />.</param>
        <summary>Compares two values to compute which is greater.</summary>
        <returns>
          <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPoint%601>, this method matches the IEEE 754:2019 `maximum` function. This requires NaN inputs to be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.Max(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MaxMagnitude">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat MaxMagnitude (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat MaxMagnitude(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.MaxMagnitude(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaxMagnitude (x As NFloat, y As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member MaxMagnitude : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.MaxMagnitude (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat MaxMagnitude(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat y) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::MaxMagnitude;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.MaxMagnitude(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to compare with <paramref name="y" />.</param>
        <param name="y">The value to compare with <paramref name="x" />.</param>
        <summary>Compares two values to compute which is greater.</summary>
        <returns>
          <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPointIeee754%601>, this method matches the IEEE 754:2019 `maximumMagnitude` function. This requires NaN inputs to not be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.MaxMagnitude(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MaxMagnitudeNumber">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat MaxMagnitudeNumber (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat MaxMagnitudeNumber(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.MaxMagnitudeNumber(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaxMagnitudeNumber (x As NFloat, y As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member MaxMagnitudeNumber : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.MaxMagnitudeNumber (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat MaxMagnitudeNumber(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat y) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::MaxMagnitudeNumber;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.MaxMagnitudeNumber(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to compare with <paramref name="y" />.</param>
        <param name="y">The value to compare with <paramref name="x" />.</param>
        <summary>Compares two values to compute which has the greater magnitude and returning the other value if an input is <c>NaN</c>.</summary>
        <returns>
          <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPointIeee754%601> this method matches the IEEE 754:2019 `maximumMagnitudeNumber` function. This requires NaN inputs to not be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.MaxMagnitudeNumber(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MaxNumber">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat MaxNumber (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat MaxNumber(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.MaxNumber(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaxNumber (x As NFloat, y As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member MaxNumber : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.MaxNumber (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat MaxNumber(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat y) = System::Numerics::INumber&lt;System::Runtime::InteropServices::NFloat&gt;::MaxNumber;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.MaxNumber(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to compare with <paramref name="y" />.</param>
        <param name="y">The value to compare with <paramref name="x" />.</param>
        <summary>Compares two values to compute which is greater and returning the other value if an input is <c>NaN</c>.</summary>
        <returns>
          <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPoint%601> this method matches the IEEE 754:2019 `maximumNumber` function. This requires NaN inputs to not be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.MaxNumber(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat MaxValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.InteropServices.NFloat MaxValue" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxValue As NFloat" />
      <MemberSignature Language="F#" Value="static member MaxValue : System.Runtime.InteropServices.NFloat" Usage="MaxValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::InteropServices::NFloat MaxValue { System::Runtime::InteropServices::NFloat get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IMinMaxValue`1.MaxValue</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the largest finite value of a NFloat.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Min (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Min(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Min(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (x As NFloat, y As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Min : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Min (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Min(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat y) = System::Numerics::INumber&lt;System::Runtime::InteropServices::NFloat&gt;::Min;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.Min(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to compare with <paramref name="y" />.</param>
        <param name="y">The value to compare with <paramref name="x" />.</param>
        <summary>Compares two values to compute which is lesser.</summary>
        <returns>
          <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPoint%601>, this method matches the IEEE 754:2019 `minimum` function. This requires NaN inputs to be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.Min(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MinMagnitude">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat MinMagnitude (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat MinMagnitude(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.MinMagnitude(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MinMagnitude (x As NFloat, y As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member MinMagnitude : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.MinMagnitude (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat MinMagnitude(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat y) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::MinMagnitude;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.MinMagnitude(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to compare with <paramref name="y" />.</param>
        <param name="y">The value to compare with <paramref name="x" />.</param>
        <summary>Compares two values to compute which is lesser.</summary>
        <returns>
          <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPointIeee754%601>, this method matches the IEEE 754:2019 `minimumMagnitude` function. This requires NaN inputs to not be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.MinMagnitude(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MinMagnitudeNumber">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat MinMagnitudeNumber (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat MinMagnitudeNumber(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.MinMagnitudeNumber(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MinMagnitudeNumber (x As NFloat, y As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member MinMagnitudeNumber : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.MinMagnitudeNumber (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat MinMagnitudeNumber(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat y) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::MinMagnitudeNumber;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.MinMagnitudeNumber(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to compare with <paramref name="y" />.</param>
        <param name="y">The value to compare with <paramref name="x" />.</param>
        <summary>Compares two values to compute which has the lesser magnitude and returning the other value if an input is <c>NaN</c>.</summary>
        <returns>
          <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPointIeee754%601> this method matches the IEEE 754:2019 `minimumMagnitudeNumber` function. This requires NaN inputs to not be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.MinMagnitudeNumber(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MinNumber">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat MinNumber (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat MinNumber(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.MinNumber(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MinNumber (x As NFloat, y As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member MinNumber : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.MinNumber (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat MinNumber(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat y) = System::Numerics::INumber&lt;System::Runtime::InteropServices::NFloat&gt;::MinNumber;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.MinNumber(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to compare with <paramref name="y" />.</param>
        <param name="y">The value to compare with <paramref name="x" />.</param>
        <summary>Compares two values to compute which is lesser and returning the other value if an input is <c>NaN</c>.</summary>
        <returns>
          <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPoint%601> this method matches the IEEE 754:2019 `minimumNumber` function. This requires NaN inputs to not be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.MinNumber(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat MinValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.InteropServices.NFloat MinValue" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinValue As NFloat" />
      <MemberSignature Language="F#" Value="static member MinValue : System.Runtime.InteropServices.NFloat" Usage="MinValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::InteropServices::NFloat MinValue { System::Runtime::InteropServices::NFloat get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IMinMaxValue`1.MinValue</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the smallest finite value of a NFloat.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat NaN { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.InteropServices.NFloat NaN" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NaN As NFloat" />
      <MemberSignature Language="F#" Value="static member NaN : System.Runtime.InteropServices.NFloat" Usage="NaN" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::InteropServices::NFloat NaN { System::Runtime::InteropServices::NFloat get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IFloatingPointIeee754`1.NaN</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents a value that is not a number (NaN).</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat NegativeInfinity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.InteropServices.NFloat NegativeInfinity" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NegativeInfinity As NFloat" />
      <MemberSignature Language="F#" Value="static member NegativeInfinity : System.Runtime.InteropServices.NFloat" Usage="NegativeInfinity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::InteropServices::NFloat NegativeInfinity { System::Runtime::InteropServices::NFloat get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IFloatingPointIeee754`1.NegativeInfinity</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents negative infinity.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegativeZero">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat NegativeZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.InteropServices.NFloat NegativeZero" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.NegativeZero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NegativeZero As NFloat" />
      <MemberSignature Language="F#" Value="static member NegativeZero : System.Runtime.InteropServices.NFloat" Usage="NegativeZero" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::InteropServices::NFloat NegativeZero { System::Runtime::InteropServices::NFloat get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IFloatingPointIeee754`1.NegativeZero</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that represents negative <c>zero</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.IFloatingPointIeee754`1.NegativeZero" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat operator + (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Addition(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Addition(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As NFloat, right As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="left + right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat operator +(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IAdditionOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;::op_Addition;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value to which <paramref name="right" /> is added.</param>
        <param name="right">The value that's added to <paramref name="left" />.</param>
        <summary>Adds two values together to compute their sum.</summary>
        <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_CheckedExplicit">
      <MemberSignature Language="C#" Value="public static byte op_CheckedExplicit (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_CheckedExplicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_CheckedExplicit(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedExplicit (value As NFloat) As Byte" />
      <MemberSignature Language="F#" Value="static member op_CheckedExplicit : System.Runtime.InteropServices.NFloat -&gt; byte" Usage="System.Runtime.InteropServices.NFloat.op_CheckedExplicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte op_CheckedExplicit(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat operator -- (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Decrement(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Decrement(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Decrement (value As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Decrement : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Decrement value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat operator --(System::Runtime::InteropServices::NFloat value) = System::Numerics::IDecrementOperators&lt;System::Runtime::InteropServices::NFloat&gt;::op_Decrement;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IDecrementOperators`1.op_Decrement(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to decrement.</param>
        <summary>Decrements a value.</summary>
        <returns>The result of decrementing <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat operator / (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Division(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Division(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As NFloat, right As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="left / right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat operator /(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IDivisionOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;::op_Division;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IDivisionOperators`3.op_Division(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value that <paramref name="right" /> divides.</param>
        <param name="right">The value that divides <paramref name="left" />.</param>
        <summary>Divides two values together to compute their quotient.</summary>
        <returns>The quotient of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Equality(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As NFloat, right As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IEqualityOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, bool&gt;::op_Equality;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value to compare with <paramref name="right" />.</param>
        <param name="right">The value to compare with <paramref name="left" />.</param>
        <summary>Compares two values to determine equality.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Runtime.InteropServices.NFloat (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Decimal)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Runtime::InteropServices::NFloat(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a <see cref="T:System.Decimal" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Runtime.InteropServices.NFloat (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Explicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Double)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Double) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Explicit : double -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Runtime::InteropServices::NFloat(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a <see cref="T:System.Double" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Runtime.InteropServices.NFloat (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Int128)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Runtime::InteropServices::NFloat(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a <see cref="T:System.Int128" /> to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator byte (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Byte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As Byte" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; byte" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Byte(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Byte" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.Byte" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator char (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname char op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Char" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As Char" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; char" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator char(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Char" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.Char" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As Decimal" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; decimal" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Decimal" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.Decimal" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Half (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Half op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Half" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As Half" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; Half" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Half(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Half" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.Half" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Int128 (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; Int128" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Int128(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Int128" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.Int128" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator short (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int16 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Int16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As Short" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; int16" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator short(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Int16" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.Int16" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As Integer" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; int" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Int32" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.Int32" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As Long" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; int64" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Int64" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.Int64" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator IntPtr (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname native int op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.IntPtr" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As IntPtr" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; nativeint" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator IntPtr(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.IntPtr" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.IntPtr" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator sbyte (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int8 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.SByte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As SByte" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; sbyte" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::SByte(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.SByte" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.SByte" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As Single" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; single" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Single" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.Single" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator UInt128 (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.UInt128 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.UInt128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As UInt128" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; UInt128" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator UInt128(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.UInt128" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.UInt128" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ushort (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int16 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.UInt16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As UShort" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; uint16" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt16(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.UInt16" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.UInt16" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As UInteger" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; uint32" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.UInt32" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.UInt32" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As ULong" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; uint64" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.UInt64" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.UInt64" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator UIntPtr (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname native unsigned int op_Explicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.UIntPtr" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NFloat) As UIntPtr" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Runtime.InteropServices.NFloat -&gt; unativeint" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator UIntPtr(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.UIntPtr" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.UIntPtr" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Runtime.InteropServices.NFloat (UInt128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Explicit(valuetype System.UInt128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.UInt128)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As UInt128) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Explicit : UInt128 -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Runtime::InteropServices::NFloat(UInt128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt128" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts <see cref="T:System.UInt128" /> to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_GreaterThan(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As NFloat, right As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; bool" Usage="left &gt; right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IComparisonOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, bool&gt;::op_GreaterThan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value to compare with <paramref name="right" />.</param>
        <param name="right">The value to compare with <paramref name="left" />.</param>
        <summary>Compares two values to determine which is greater.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_GreaterThanOrEqual(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As NFloat, right As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; bool" Usage="left &gt;= right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IComparisonOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, bool&gt;::op_GreaterThanOrEqual;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value to compare with <paramref name="right" />.</param>
        <param name="right">The value to compare with <paramref name="left" />.</param>
        <summary>Compares two values to determine which is greater or equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Byte)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Byte" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Char)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Char) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : char -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Char" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Half)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Half) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Half -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(Half value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Half" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Int16)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Int16" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Int32)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Int32" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Int64)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Int64" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.IntPtr)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As IntPtr) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : nativeint -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.IntPtr" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator double (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Implicit(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Runtime.InteropServices.NFloat)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As NFloat) As Double" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Runtime.InteropServices.NFloat -&gt; double" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator double(System::Runtime::InteropServices::NFloat value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Double" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable <see cref="T:System.Double" /> value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.SByte)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.SByte" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Single)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Single) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : single -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Single" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.UInt16)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.UInt16" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.UInt32)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.UInt32" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.UInt64)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.UInt64" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Runtime.InteropServices.NFloat (UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Implicit(native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.UIntPtr)~System.Runtime.InteropServices.NFloat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UIntPtr) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Implicit : unativeint -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Runtime::InteropServices::NFloat(UIntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.UIntPtr" /> value to its nearest representable native-sized floating-point value.</summary>
        <returns>
          <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat operator ++ (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Increment(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Increment(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Increment (value As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member op_Increment : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.op_Increment value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat operator ++(System::Runtime::InteropServices::NFloat value) = System::Numerics::IIncrementOperators&lt;System::Runtime::InteropServices::NFloat&gt;::op_Increment;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IIncrementOperators`1.op_Increment(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to increment.</param>
        <summary>Increments a value.</summary>
        <returns>The result of incrementing <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Inequality(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As NFloat, right As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IEqualityOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, bool&gt;::op_Inequality;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value to compare with <paramref name="right" />.</param>
        <param name="right">The value to compare with <paramref name="left" />.</param>
        <summary>Compares two values to determine inequality.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_LessThan(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As NFloat, right As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; bool" Usage="left &lt; right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IComparisonOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, bool&gt;::op_LessThan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value to compare with <paramref name="right" />.</param>
        <param name="right">The value to compare with <paramref name="left" />.</param>
        <summary>Compares two values to determine which is less.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_LessThanOrEqual(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As NFloat, right As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; bool" Usage="left &lt;= right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IComparisonOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, bool&gt;::op_LessThanOrEqual;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value to compare with <paramref name="right" />.</param>
        <param name="right">The value to compare with <paramref name="left" />.</param>
        <summary>Compares two values to determine which is less or equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat operator % (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Modulus(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Modulus(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Mod (left As NFloat, right As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member ( % ) : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="left % right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat operator %(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IModulusOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;::op_Modulus;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IModulusOperators`3.op_Modulus(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value that <paramref name="right" /> divides.</param>
        <param name="right">The value that divides <paramref name="left" />.</param>
        <summary>Divides two values together to compute their remainder.</summary>
        <returns>The remainder of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat operator * (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Multiply(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Multiply(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As NFloat, right As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="left * right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat operator *(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::IMultiplyOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;::op_Multiply;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IMultiplyOperators`3.op_Multiply(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value that <paramref name="right" /> multiplies.</param>
        <param name="right">The value that multiplies <paramref name="left" />.</param>
        <summary>Multiplies two values together to compute their product.</summary>
        <returns>The product of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat operator - (System.Runtime.InteropServices.NFloat left, System.Runtime.InteropServices.NFloat right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_Subtraction(valuetype System.Runtime.InteropServices.NFloat left, valuetype System.Runtime.InteropServices.NFloat right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_Subtraction(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As NFloat, right As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="left - right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat operator -(System::Runtime::InteropServices::NFloat left, System::Runtime::InteropServices::NFloat right) = System::Numerics::ISubtractionOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;::op_Subtraction;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="right" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="left">The value from which <paramref name="right" /> is subtracted.</param>
        <param name="right">The value that's subtracted from <paramref name="left" />.</param>
        <summary>Subtracts two values to compute their difference.</summary>
        <returns>The difference of <paramref name="right" /> subtracted from <paramref name="left" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat operator - (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_UnaryNegation(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_UnaryNegation(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="- value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat operator -(System::Runtime::InteropServices::NFloat value) = System::Numerics::IUnaryNegationOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;::op_UnaryNegation;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IUnaryNegationOperators`2.op_UnaryNegation(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value for which to compute its unary negation.</param>
        <summary>Computes the unary negation of a value.</summary>
        <returns>The unary negation of <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat operator + (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Runtime.InteropServices.NFloat op_UnaryPlus(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.op_UnaryPlus(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (value As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member ( ~+ ) : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="+ value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat operator +(System::Runtime::InteropServices::NFloat value) = System::Numerics::IUnaryPlusOperators&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt;::op_UnaryPlus;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IUnaryPlusOperators`2.op_UnaryPlus(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value for which to compute its unary plus.</param>
        <summary>Computes the unary plus of a value.</summary>
        <returns>The unary plus of <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As NFloat" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Parse s" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains the number to convert.</param>
        <summary>Converts the string representation of a number to its floating-point number equivalent.</summary>
        <returns>A floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not represent a number in a valid format.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), provider As IFormatProvider) As NFloat" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Parse (s, provider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Parse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider) = ISpanParsable&lt;System::Runtime::InteropServices::NFloat&gt;::Parse;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ISpanParsable`1.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">The span of characters to parse.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <summary>Parses a span of characters into a value.</summary>
        <returns>The result of parsing <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.ISpanParsable`1.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As NFloat" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Parse (s, style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains the number to convert.</param>
        <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</param>
        <summary>Converts the string representation of a number in a specified style to its floating-point number equivalent.</summary>
        <returns>A floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

-or-

<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not represent a number in a valid format.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Parse (string s, IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As NFloat" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Parse (s, provider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Parse(System::String ^ s, IFormatProvider ^ provider) = IParsable&lt;System::Runtime::InteropServices::NFloat&gt;::Parse;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IParsable`1.Parse(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <summary>Converts the string representation of a number in a specified culture-specific format to its floating-point number equivalent.</summary>
        <returns>A floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not represent a number in a valid format.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.Float, IFormatProvider? provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.Float, Optional provider As IFormatProvider = Nothing) As NFloat" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">A character span that contains the number to convert.</param>
        <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <summary>Converts a character span that contains the string representation of a number in a specified style and culture-specific format to its floating-point number equivalent.</summary>
        <returns>A floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

-or-

<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not represent a number in a valid format.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Parse (string s, System.Globalization.NumberStyles style, IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As NFloat" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Parse (s, style, provider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::Parse;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains the number to convert.</param>
        <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <summary>Converts the string representation of a number in a specified style and culture-specific format to its floating-point number equivalent.</summary>
        <returns>A floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

-or-

<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not represent a number in a valid format.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Pi { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.InteropServices.NFloat Pi" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Pi As NFloat" />
      <MemberSignature Language="F#" Value="static member Pi : System.Runtime.InteropServices.NFloat" Usage="Pi" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::InteropServices::NFloat Pi { System::Runtime::InteropServices::NFloat get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IFloatingPointConstants`1.Pi</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mathematical constant <c>pi</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.IFloatingPointConstants`1.Pi" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat PositiveInfinity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.InteropServices.NFloat PositiveInfinity" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PositiveInfinity As NFloat" />
      <MemberSignature Language="F#" Value="static member PositiveInfinity : System.Runtime.InteropServices.NFloat" Usage="PositiveInfinity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::InteropServices::NFloat PositiveInfinity { System::Runtime::InteropServices::NFloat get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IFloatingPointIeee754`1.PositiveInfinity</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents positive infinity.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Pow (System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Pow(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.Runtime.InteropServices.NFloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Pow(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As NFloat, y As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Pow : System.Runtime.InteropServices.NFloat * System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Pow (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Pow(System::Runtime::InteropServices::NFloat x, System::Runtime::InteropServices::NFloat y) = System::Numerics::IPowerFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Pow;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IPowerFunctions`1.Pow(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="y" Type="System.Runtime.InteropServices.NFloat" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value that's raised to the power of <paramref name="x" />.</param>
        <param name="y">The power to which <paramref name="x" /> is raised.</param>
        <summary>Computes a value raised to a given power.</summary>
        <returns>
          <paramref name="x" /> raised to the power of <paramref name="y" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IPowerFunctions`1.Pow(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="ReciprocalEstimate">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat ReciprocalEstimate (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat ReciprocalEstimate(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.ReciprocalEstimate(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReciprocalEstimate (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member ReciprocalEstimate : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.ReciprocalEstimate x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat ReciprocalEstimate(System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;::ReciprocalEstimate;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPointIeee754`1.ReciprocalEstimate(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose estimate of the reciprocal is to be computed.</param>
        <summary>Computes an estimate of the reciprocal of a value.</summary>
        <returns>An estimate of the reciprocal of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.ReciprocalEstimate(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ReciprocalSqrtEstimate">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat ReciprocalSqrtEstimate (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat ReciprocalSqrtEstimate(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.ReciprocalSqrtEstimate(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReciprocalSqrtEstimate (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member ReciprocalSqrtEstimate : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.ReciprocalSqrtEstimate x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat ReciprocalSqrtEstimate(System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;::ReciprocalSqrtEstimate;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPointIeee754`1.ReciprocalSqrtEstimate(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose estimate of the reciprocal square root is to be computed.</param>
        <summary>Computes an estimate of the reciprocal square root of a value.</summary>
        <returns>An estimate of the reciprocal square root of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.ReciprocalSqrtEstimate(`0)" />
      </Docs>
    </Member>
    <Member MemberName="RootN">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat RootN (System.Runtime.InteropServices.NFloat x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat RootN(valuetype System.Runtime.InteropServices.NFloat x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.RootN(System.Runtime.InteropServices.NFloat,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RootN (x As NFloat, n As Integer) As NFloat" />
      <MemberSignature Language="F#" Value="static member RootN : System.Runtime.InteropServices.NFloat * int -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.RootN (x, n)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat RootN(System::Runtime::InteropServices::NFloat x, int n) = System::Numerics::IRootFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::RootN;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IRootFunctions`1.RootN(`0,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="n" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose <paramref name="n" />-th root is to be computed.</param>
        <param name="n">The degree of the root to be computed.</param>
        <summary>Computes the n-th root of a value.</summary>
        <returns>The <paramref name="n" />-th root of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IRootFunctions`1.RootN(`0,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Round (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Round(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Round(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Round : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Round x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Round(System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::Round;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.Round(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to round.</param>
        <summary>Rounds a value to the nearest integer using the default rounding mode (<see cref="F:System.MidpointRounding.ToEven" />).</summary>
        <returns>The result of rounding <paramref name="x" /> to the nearest integer using the default rounding mode.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Round(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Round (System.Runtime.InteropServices.NFloat x, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Round(valuetype System.Runtime.InteropServices.NFloat x, int32 digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Round(System.Runtime.InteropServices.NFloat,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As NFloat, digits As Integer) As NFloat" />
      <MemberSignature Language="F#" Value="static member Round : System.Runtime.InteropServices.NFloat * int -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Round (x, digits)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Round(System::Runtime::InteropServices::NFloat x, int digits) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::Round;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.Round(`0,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="digits" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to round.</param>
        <param name="digits">The number of fractional digits to which <paramref name="x" /> should be rounded.</param>
        <summary>Rounds a value to a specified number of fractional-digits using the default rounding mode (<see cref="F:System.MidpointRounding.ToEven" />).</summary>
        <returns>The result of rounding <paramref name="x" /> to <paramref name="digits" /> fractional-digits using the default rounding mode.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Round(`0,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Round (System.Runtime.InteropServices.NFloat x, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Round(valuetype System.Runtime.InteropServices.NFloat x, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Round(System.Runtime.InteropServices.NFloat,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As NFloat, mode As MidpointRounding) As NFloat" />
      <MemberSignature Language="F#" Value="static member Round : System.Runtime.InteropServices.NFloat * MidpointRounding -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Round (x, mode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Round(System::Runtime::InteropServices::NFloat x, MidpointRounding mode) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::Round;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.Round(`0,System.MidpointRounding)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="mode" Type="System.MidpointRounding" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to round.</param>
        <param name="mode">The mode under which <paramref name="x" /> should be rounded.</param>
        <summary>Rounds a value to the nearest integer using the specified rounding mode.</summary>
        <returns>The result of rounding <paramref name="x" /> to the nearest integer using <paramref name="mode" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Round(`0,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Round (System.Runtime.InteropServices.NFloat x, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Round(valuetype System.Runtime.InteropServices.NFloat x, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Round(System.Runtime.InteropServices.NFloat,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As NFloat, digits As Integer, mode As MidpointRounding) As NFloat" />
      <MemberSignature Language="F#" Value="static member Round : System.Runtime.InteropServices.NFloat * int * MidpointRounding -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Round (x, digits, mode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Round(System::Runtime::InteropServices::NFloat x, int digits, MidpointRounding mode) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::Round;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.Round(`0,System.Int32,System.MidpointRounding)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="digits" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="mode" Type="System.MidpointRounding" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to round.</param>
        <param name="digits">The number of fractional digits to which <paramref name="x" /> should be rounded.</param>
        <param name="mode">The mode under which <paramref name="x" /> should be rounded.</param>
        <summary>Rounds a value to a specified number of fractional-digits using the default rounding mode (<see cref="F:System.MidpointRounding.ToEven" />).</summary>
        <returns>The result of rounding <paramref name="x" /> to <paramref name="digits" /> fractional-digits using <paramref name="mode" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Round(`0,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleB">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat ScaleB (System.Runtime.InteropServices.NFloat x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat ScaleB(valuetype System.Runtime.InteropServices.NFloat x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.ScaleB(System.Runtime.InteropServices.NFloat,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ScaleB (x As NFloat, n As Integer) As NFloat" />
      <MemberSignature Language="F#" Value="static member ScaleB : System.Runtime.InteropServices.NFloat * int -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.ScaleB (x, n)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat ScaleB(System::Runtime::InteropServices::NFloat x, int n) = System::Numerics::IFloatingPointIeee754&lt;System::Runtime::InteropServices::NFloat&gt;::ScaleB;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPointIeee754`1.ScaleB(`0,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="n" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value that base-radix raised to the power of <paramref name="n" /> multiplies.</param>
        <param name="n">The value to which base-radix is raised before multipliying <paramref name="x" />.</param>
        <summary>Computes the product of a value and its base-radix raised to the specified power.</summary>
        <returns>The product of <paramref name="x" /> and base-radix raised to the power of <paramref name="n" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.ScaleB(`0,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (System.Runtime.InteropServices.NFloat value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(valuetype System.Runtime.InteropServices.NFloat value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Sign(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As NFloat) As Integer" />
      <MemberSignature Language="F#" Value="static member Sign : System.Runtime.InteropServices.NFloat -&gt; int" Usage="System.Runtime.InteropServices.NFloat.Sign value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::Runtime::InteropServices::NFloat value) = System::Numerics::INumber&lt;System::Runtime::InteropServices::NFloat&gt;::Sign;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.Sign(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value whose sign is to be computed.</param>
        <summary>Computes the sign of a value.</summary>
        <returns>A positive value if <paramref name="value" /> is positive, <see cref="P:System.Numerics.INumberBase`1.Zero" /> if <paramref name="value" /> is zero, and a negative value if <paramref name="value" /> is negative.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

It is recommended that a function return `1`, `0`, and `-1`, respectively.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.Sign(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Sin (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Sin(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Sin(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Sin : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Sin x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Sin(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Sin;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.Sin(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose sine is to be computed.</param>
        <summary>Computes the sine of a value.</summary>
        <returns>The sine of <paramref name="x" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `sin(x)`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Sin(`0)" />
      </Docs>
    </Member>
    <Member MemberName="SinCos">
      <MemberSignature Language="C#" Value="public static (System.Runtime.InteropServices.NFloat Sin, System.Runtime.InteropServices.NFloat Cos) SinCos (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt; SinCos(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.SinCos(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SinCos (x As NFloat) As ValueTuple(Of NFloat, NFloat)" />
      <MemberSignature Language="F#" Value="static member SinCos : System.Runtime.InteropServices.NFloat -&gt; ValueTuple&lt;System.Runtime.InteropServices.NFloat, System.Runtime.InteropServices.NFloat&gt;" Usage="System.Runtime.InteropServices.NFloat.SinCos x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ValueTuple&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt; SinCos(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::SinCos;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.SinCos(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Sin", "Cos" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Sin", "Cos" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose sine and cosine are to be computed.</param>
        <summary>Computes the sine and cosine of a value.</summary>
        <returns>The sine and cosine of <paramref name="x" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `(sin(x), cos(x))`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.SinCos(`0)" />
      </Docs>
    </Member>
    <Member MemberName="SinCosPi">
      <MemberSignature Language="C#" Value="public static (System.Runtime.InteropServices.NFloat SinPi, System.Runtime.InteropServices.NFloat CosPi) SinCosPi (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;valuetype System.Runtime.InteropServices.NFloat, valuetype System.Runtime.InteropServices.NFloat&gt; SinCosPi(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.SinCosPi(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SinCosPi (x As NFloat) As ValueTuple(Of NFloat, NFloat)" />
      <MemberSignature Language="F#" Value="static member SinCosPi : System.Runtime.InteropServices.NFloat -&gt; ValueTuple&lt;System.Runtime.InteropServices.NFloat, System.Runtime.InteropServices.NFloat&gt;" Usage="System.Runtime.InteropServices.NFloat.SinCosPi x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ValueTuple&lt;System::Runtime::InteropServices::NFloat, System::Runtime::InteropServices::NFloat&gt; SinCosPi(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::SinCosPi;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.SinCosPi(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "SinPi", "CosPi" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "SinPi", "CosPi" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in half-revolutions, that is multipled by <c>pi</c> before computing its sine and cosine.</param>
        <summary>Computes the sine and cosine of a value.</summary>
        <returns>The sine and cosine of <paramref name="x" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `(sin(x), cos(x))`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.SinCos(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Sinh (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Sinh(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Sinh(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Sinh : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Sinh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Sinh(System::Runtime::InteropServices::NFloat x) = System::Numerics::IHyperbolicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Sinh;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IHyperbolicFunctions`1.Sinh(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic sine is to be computed.</param>
        <summary>Computes the hyperbolic sine of a value.</summary>
        <returns>The hyperbolic sine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Sinh(`0)" />
      </Docs>
    </Member>
    <Member MemberName="SinPi">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat SinPi (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat SinPi(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.SinPi(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SinPi (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member SinPi : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.SinPi x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat SinPi(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::SinPi;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.SinPi(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in half-revolutions, that is multipled by <c>pi</c> before computing its sine.</param>
        <summary>Computes the sine of a value that has been multiplied by <c>pi</c>.</summary>
        <returns>The sine of <paramref name="x" /> multiplied-by <c>pi</c>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `sin(x * π)`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.SinPi(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public static int Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.Size" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Size As Integer" />
      <MemberSignature Language="F#" Value="static member Size : int" Usage="System.Runtime.InteropServices.NFloat.Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int Size { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the size, in bytes, of an NFloat.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Sqrt (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Sqrt(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Sqrt(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Sqrt : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Sqrt x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Sqrt(System::Runtime::InteropServices::NFloat x) = System::Numerics::IRootFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Sqrt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IRootFunctions`1.Sqrt(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value whose square-root is to be computed.</param>
        <summary>Computes the square-root of a value.</summary>
        <returns>The square-root of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IRootFunctions`1.Sqrt(`0)" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentByteCount">
      <MemberSignature Language="C#" Value="int IFloatingPoint&lt;NFloat&gt;.GetExponentByteCount ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentByteCount() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#GetExponentByteCount" />
      <MemberSignature Language="VB.NET" Value="Function GetExponentByteCount () As Integer Implements IFloatingPoint(Of NFloat).GetExponentByteCount" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentByteCount : unit -&gt; int&#xA;override this.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentByteCount : unit -&gt; int" Usage="nFloat.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentByteCount " />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentByteCount() = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::GetExponentByteCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.GetExponentByteCount</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the number of bytes that will be written as part of <see cref="M:System.Numerics.IFloatingPoint`1.TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)" />.</summary>
        <returns>The number of bytes that will be written as part of <see cref="M:System.Numerics.IFloatingPoint`1.TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetExponentByteCount" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentShortestBitLength">
      <MemberSignature Language="C#" Value="int IFloatingPoint&lt;NFloat&gt;.GetExponentShortestBitLength ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentShortestBitLength() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#GetExponentShortestBitLength" />
      <MemberSignature Language="VB.NET" Value="Function GetExponentShortestBitLength () As Integer Implements IFloatingPoint(Of NFloat).GetExponentShortestBitLength" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentShortestBitLength : unit -&gt; int&#xA;override this.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentShortestBitLength : unit -&gt; int" Usage="nFloat.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentShortestBitLength " />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetExponentShortestBitLength() = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::GetExponentShortestBitLength;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.GetExponentShortestBitLength</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the length, in bits, of the shortest two's complement representation of the current exponent.</summary>
        <returns>The length, in bits, of the shortest two's complement representation of the current exponent.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetExponentShortestBitLength" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandBitLength">
      <MemberSignature Language="C#" Value="int IFloatingPoint&lt;NFloat&gt;.GetSignificandBitLength ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandBitLength() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#GetSignificandBitLength" />
      <MemberSignature Language="VB.NET" Value="Function GetSignificandBitLength () As Integer Implements IFloatingPoint(Of NFloat).GetSignificandBitLength" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandBitLength : unit -&gt; int&#xA;override this.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandBitLength : unit -&gt; int" Usage="nFloat.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandBitLength " />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandBitLength() = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::GetSignificandBitLength;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.GetSignificandBitLength</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the length, in bits, of the current significand.</summary>
        <returns>The length, in bits, of the current significand.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetSignificandBitLength" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandByteCount">
      <MemberSignature Language="C#" Value="int IFloatingPoint&lt;NFloat&gt;.GetSignificandByteCount ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandByteCount() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#GetSignificandByteCount" />
      <MemberSignature Language="VB.NET" Value="Function GetSignificandByteCount () As Integer Implements IFloatingPoint(Of NFloat).GetSignificandByteCount" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandByteCount : unit -&gt; int&#xA;override this.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandByteCount : unit -&gt; int" Usage="nFloat.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandByteCount " />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.GetSignificandByteCount() = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::GetSignificandByteCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.GetSignificandByteCount</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the number of bytes that will be written as part of <see cref="M:System.Numerics.IFloatingPoint`1.TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)" />.</summary>
        <returns>The number of bytes that will be written as part of <see cref="M:System.Numerics.IFloatingPoint`1.TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetSignificandByteCount" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentBigEndian">
      <MemberSignature Language="C#" Value="bool IFloatingPoint&lt;NFloat&gt;.TryWriteExponentBigEndian (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentBigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Function TryWriteExponentBigEndian (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean Implements IFloatingPoint(Of NFloat).TryWriteExponentBigEndian" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentBigEndian : Span&lt;byte&gt; * int -&gt; bool&#xA;override this.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentBigEndian : Span&lt;byte&gt; * int -&gt; bool" Usage="nFloat.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentBigEndian (destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentBigEndian(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::TryWriteExponentBigEndian;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="destination">The span to which the current exponent should be written.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
        <summary>Tries to write the current exponent, in big-endian format, to a given span.</summary>
        <returns>
          <see langword="true" /> if the exponent was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentLittleEndian">
      <MemberSignature Language="C#" Value="bool IFloatingPoint&lt;NFloat&gt;.TryWriteExponentLittleEndian (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentLittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Function TryWriteExponentLittleEndian (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean Implements IFloatingPoint(Of NFloat).TryWriteExponentLittleEndian" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentLittleEndian : Span&lt;byte&gt; * int -&gt; bool&#xA;override this.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentLittleEndian : Span&lt;byte&gt; * int -&gt; bool" Usage="nFloat.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentLittleEndian (destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteExponentLittleEndian(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::TryWriteExponentLittleEndian;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="destination">The span to which the current exponent should be written.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
        <summary>Tries to write the current exponent, in little-endian format, to a given span.</summary>
        <returns>
          <see langword="true" /> if the exponent was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandBigEndian">
      <MemberSignature Language="C#" Value="bool IFloatingPoint&lt;NFloat&gt;.TryWriteSignificandBigEndian (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandBigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Function TryWriteSignificandBigEndian (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean Implements IFloatingPoint(Of NFloat).TryWriteSignificandBigEndian" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandBigEndian : Span&lt;byte&gt; * int -&gt; bool&#xA;override this.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandBigEndian : Span&lt;byte&gt; * int -&gt; bool" Usage="nFloat.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandBigEndian (destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandBigEndian(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::TryWriteSignificandBigEndian;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="destination">The span to which the current significand should be written.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
        <summary>Tries to write the current significand, in big-endian format, to a given span.</summary>
        <returns>
          <see langword="true" /> if the significand was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandLittleEndian">
      <MemberSignature Language="C#" Value="bool IFloatingPoint&lt;NFloat&gt;.TryWriteSignificandLittleEndian (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandLittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Function TryWriteSignificandLittleEndian (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean Implements IFloatingPoint(Of NFloat).TryWriteSignificandLittleEndian" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandLittleEndian : Span&lt;byte&gt; * int -&gt; bool&#xA;override this.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandLittleEndian : Span&lt;byte&gt; * int -&gt; bool" Usage="nFloat.System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandLittleEndian (destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Numerics.IFloatingPoint&lt;System.Runtime.InteropServices.NFloat&gt;.TryWriteSignificandLittleEndian(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::TryWriteSignificandLittleEndian;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="destination">The span to which the current significand should be written.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
        <summary>Tries to write the current significand, in little-endian format, to a given span.</summary>
        <returns>
          <see langword="true" /> if the significand was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Tan (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Tan(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Tan(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Tan : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Tan x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Tan(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Tan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.Tan(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose tangent is to be computed.</param>
        <summary>Computes the tangent of a value.</summary>
        <returns>The tangent of <paramref name="x" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `tan(x)`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Tan(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Tanh (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Tanh(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Tanh(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Tanh : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Tanh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Tanh(System::Runtime::InteropServices::NFloat x) = System::Numerics::IHyperbolicFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::Tanh;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IHyperbolicFunctions`1.Tanh(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic tangent is to be computed.</param>
        <summary>Computes the hyperbolic tangent of a value.</summary>
        <returns>The hyperbolic tangent of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Tanh(`0)" />
      </Docs>
    </Member>
    <Member MemberName="TanPi">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat TanPi (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat TanPi(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.TanPi(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TanPi (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member TanPi : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.TanPi x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat TanPi(System::Runtime::InteropServices::NFloat x) = System::Numerics::ITrigonometricFunctions&lt;System::Runtime::InteropServices::NFloat&gt;::TanPi;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ITrigonometricFunctions`1.TanPi(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value, in half-revolutions, that is multipled by <c>pi</c> before computing its tangent.</param>
        <summary>Computes the tangent of a value that has been multipled by <c>pi</c>.</summary>
        <returns>The tangent of <paramref name="x" /> multiplied-by <c>pi</c>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This computes `tan(x * π)`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.TanPi(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Tau">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Tau { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.InteropServices.NFloat Tau" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.Tau" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Tau As NFloat" />
      <MemberSignature Language="F#" Value="static member Tau : System.Runtime.InteropServices.NFloat" Usage="Tau" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::InteropServices::NFloat Tau { System::Runtime::InteropServices::NFloat get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IFloatingPointConstants`1.Tau</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mathematical constant <c>tau</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.IFloatingPointConstants`1.Tau" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="nFloat.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
        <returns>The string representation of the value of this instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="nFloat.ToString provider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
        <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string? format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="nFloat.ToString format" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="net-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A numeric format string.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
        <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string? format, IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="nFloat.ToString (format, provider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="net-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="format">A numeric format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.NFloat Truncate (System.Runtime.InteropServices.NFloat x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.NFloat Truncate(valuetype System.Runtime.InteropServices.NFloat x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.Truncate(System.Runtime.InteropServices.NFloat)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (x As NFloat) As NFloat" />
      <MemberSignature Language="F#" Value="static member Truncate : System.Runtime.InteropServices.NFloat -&gt; System.Runtime.InteropServices.NFloat" Usage="System.Runtime.InteropServices.NFloat.Truncate x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::NFloat Truncate(System::Runtime::InteropServices::NFloat x) = System::Numerics::IFloatingPoint&lt;System::Runtime::InteropServices::NFloat&gt;::Truncate;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IFloatingPoint`1.Truncate(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.NFloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Runtime.InteropServices.NFloat" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="x">The value to truncate.</param>
        <summary>Truncates a value.</summary>
        <returns>The truncation of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Truncate(`0)" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider? provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = Nothing, Optional provider As IFormatProvider = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool&#xA;override this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="nFloat.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ISpanFormattable.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="net-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="destination">The span in which to write this instance's value formatted as a span of characters.</param>
        <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination" />.</param>
        <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
        <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
        <summary>Tries to format the value of the current instance into the provided span of characters.</summary>
        <returns>
          <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out System.Runtime.InteropServices.NFloat result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.Runtime.InteropServices.NFloat&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.TryParse(System.ReadOnlySpan{System.Char},System.Runtime.InteropServices.NFloat@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.TryParse (s, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] System::Runtime::InteropServices::NFloat % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="result" Type="System.Runtime.InteropServices.NFloat" RefType="out" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">A read-only character span that contains the number to convert.</param>
        <param name="result">When this method returns, contains a floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" /> if the conversion succeeded or zero if the conversion failed. The conversion fails if the <paramref name="s" /> is <see cref="F:System.String.Empty" /> or is not in a valid format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
        <summary>Tries to convert a character span containing the string representation of a number to its floating-point number equivalent.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string? s, out System.Runtime.InteropServices.NFloat result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.Runtime.InteropServices.NFloat&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.TryParse(System.String,System.Runtime.InteropServices.NFloat@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : string * NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.TryParse (s, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] System::Runtime::InteropServices::NFloat % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="net-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="result" Type="System.Runtime.InteropServices.NFloat" RefType="out" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">A read-only character span that contains the number to convert.</param>
        <param name="result">When this method returns, contains a floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" /> if the conversion succeeded or zero if the conversion failed. The conversion fails if the <paramref name="s" /> is <see langword="null" />, <see cref="F:System.String.Empty" />, or is not in a valid format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
        <summary>Tries to convert the string representation of a number to its floating-point number equivalent.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider? provider, out System.Runtime.InteropServices.NFloat result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, [out] valuetype System.Runtime.InteropServices.NFloat&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Runtime.InteropServices.NFloat@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, ByRef result As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.TryParse (s, provider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Runtime::InteropServices::NFloat % result) = ISpanParsable&lt;System::Runtime::InteropServices::NFloat&gt;::TryParse;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="result" Type="System.Runtime.InteropServices.NFloat" RefType="out" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>Tries to parse a span of characters into a value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.ISpanParsable`1.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,`0@)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string? s, IFormatProvider? provider, out System.Runtime.InteropServices.NFloat result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, [out] valuetype System.Runtime.InteropServices.NFloat&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.TryParse(System.String,System.IFormatProvider,System.Runtime.InteropServices.NFloat@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, ByRef result As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.TryParse (s, provider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Runtime::InteropServices::NFloat % result) = IParsable&lt;System::Runtime::InteropServices::NFloat&gt;::TryParse;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="net-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="result" Type="System.Runtime.InteropServices.NFloat" RefType="out" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.IParsable`1.TryParse(System.String,System.IFormatProvider,`0@)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider? provider, out System.Runtime.InteropServices.NFloat result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Runtime.InteropServices.NFloat&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Runtime.InteropServices.NFloat@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider * NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.TryParse (s, style, provider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Runtime::InteropServices::NFloat % result) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::TryParse;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="net-7.0" />
        <Parameter Name="result" Type="System.Runtime.InteropServices.NFloat" RefType="out" Index="3" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">A read-only character span that contains the number to convert.</param>
        <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <param name="result">When this method returns, contains a floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" /> if the conversion succeeded or zero if the conversion failed. The conversion fails if the <paramref name="s" /> is <see cref="F:System.String.Empty" /> or is not in a format compliant with <paramref name="style" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumeration constants. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
        <summary>Tries to convert a character span containing the string representation of a number in a specified style and culture-specific format to its floating-point number equivalent.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

-or-

<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string? s, System.Globalization.NumberStyles style, IFormatProvider? provider, out System.Runtime.InteropServices.NFloat result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Runtime.InteropServices.NFloat&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NFloat.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Runtime.InteropServices.NFloat@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As NFloat) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider * NFloat -&gt; bool" Usage="System.Runtime.InteropServices.NFloat.TryParse (s, style, provider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::Runtime::InteropServices::NFloat % result) = System::Numerics::INumberBase&lt;System::Runtime::InteropServices::NFloat&gt;::TryParse;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="net-7.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="net-7.0" />
        <Parameter Name="result" Type="System.Runtime.InteropServices.NFloat" RefType="out" Index="3" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">A read-only character span that contains the number to convert.</param>
        <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <param name="result">When this method returns, contains a floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" /> if the conversion succeeded or zero if the conversion failed. The conversion fails if the <paramref name="s" /> is <see langword="null" />, <see cref="F:System.String.Empty" />, or is not in a format compliant with <paramref name="style" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumeration constants. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
        <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its floating-point number equivalent.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

-or-

<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public double Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.NFloat.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Double" />
      <MemberSignature Language="F#" Value="member this.Value : double" Usage="System.Runtime.InteropServices.NFloat.Value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Value { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The underlying floating-point value of this instance.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
