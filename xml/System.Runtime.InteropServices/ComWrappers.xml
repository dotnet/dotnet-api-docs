<Type Name="ComWrappers" FullName="System.Runtime.InteropServices.ComWrappers">
  <TypeSignature Language="C#" Value="public abstract class ComWrappers" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ComWrappers extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ComWrappers" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ComWrappers" />
  <TypeSignature Language="F#" Value="type ComWrappers = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComWrappers abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-5.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("windows")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("windows")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("android")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("android")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("browser")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("browser")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("ios")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("ios")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("tvos")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("tvos")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Class for managing wrappers of COM IUnknown types.</summary>
    <remarks>For more information about this API, see <see href="/dotnet/fundamentals/runtime-libraries/system-runtime-interopservices-comwrappers">Supplemental API remarks for ComWrappers</see>.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ComWrappers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ComWrappers();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Instance constructor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeVtables">
      <MemberSignature Language="C#" Value="protected abstract System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry* ComputeVtables (object obj, System.Runtime.InteropServices.CreateComInterfaceFlags flags, out int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Runtime.InteropServices.ComWrappers/ComInterfaceEntry* ComputeVtables(object obj, valuetype System.Runtime.InteropServices.CreateComInterfaceFlags flags, [out] int32&amp; count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)" />
      <MemberSignature Language="F#" Value="abstract member ComputeVtables : obj * System.Runtime.InteropServices.CreateComInterfaceFlags * int -&gt; nativeptr&lt;System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry&gt;" Usage="comWrappers.ComputeVtables (obj, flags, count)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Runtime::InteropServices::ComWrappers::ComInterfaceEntry* ComputeVtables(System::Object ^ obj, System::Runtime::InteropServices::CreateComInterfaceFlags flags, [Runtime::InteropServices::Out] int % count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.ComWrappers+ComInterfaceEntry*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateComInterfaceFlags" />
        <Parameter Name="count" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="obj">Target of the returned Vtables.</param>
        <param name="flags">Flags used to compute Vtables.</param>
        <param name="count">The number of elements contained in the returned memory.</param>
        <summary>Computes the desired Vtable for <paramref name="obj" />, respecting the values of <paramref name="flags" />.</summary>
        <returns>
          <see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> pointer containing memory for all COM interface entries.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

All memory returned from this function must either be unmanaged memory or pinned managed memory, or have been allocated with the <xref:System.Runtime.CompilerServices.RuntimeHelpers.AllocateTypeAssociatedMemory(System.Type,System.Int32)> API.

If the interface entries cannot be created and a negative `count` or `null` and a non-zero `count` are returned, the call to <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)> will throw a <xref:System.ArgumentException>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="protected abstract object? CreateObject (IntPtr externalComObject, System.Runtime.InteropServices.CreateObjectFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object CreateObject(native int externalComObject, valuetype System.Runtime.InteropServices.CreateObjectFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateObject (externalComObject As IntPtr, flags As CreateObjectFlags) As Object" />
      <MemberSignature Language="F#" Value="abstract member CreateObject : nativeint * System.Runtime.InteropServices.CreateObjectFlags -&gt; obj" Usage="comWrappers.CreateObject (externalComObject, flags)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Object ^ CreateObject(IntPtr externalComObject, System::Runtime::InteropServices::CreateObjectFlags flags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalComObject" Type="System.IntPtr" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateObjectFlags" />
      </Parameters>
      <Docs>
        <param name="externalComObject">Object to import for usage into the .NET runtime.</param>
        <param name="flags">Flags used to describe the external object.</param>
        <summary>Creates a managed object for the object that <paramref name="externalComObject" /> points to, respecting the values of <paramref name="flags" />.</summary>
        <returns>A managed object associated with the supplied external COM object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

If the object cannot be created and `null` is returned, the call to <xref:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)> will throw a <xref:System.ArgumentNullException>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIUnknownImpl">
      <MemberSignature Language="C#" Value="protected static void GetIUnknownImpl (out IntPtr fpQueryInterface, out IntPtr fpAddRef, out IntPtr fpRelease);" FrameworkAlternate="net-5.0;net-6.0;net-7.0" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void GetIUnknownImpl([out] native int&amp; fpQueryInterface, [out] native int&amp; fpAddRef, [out] native int&amp; fpRelease) cil managed" FrameworkAlternate="net-5.0;net-6.0;net-7.0" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(System.IntPtr@,System.IntPtr@,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub GetIUnknownImpl (ByRef fpQueryInterface As IntPtr, ByRef fpAddRef As IntPtr, ByRef fpRelease As IntPtr)" FrameworkAlternate="net-5.0;net-6.0;net-7.0" />
      <MemberSignature Language="F#" Value="static member GetIUnknownImpl : nativeint * nativeint * nativeint -&gt; unit" Usage="System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl (fpQueryInterface, fpAddRef, fpRelease)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void GetIUnknownImpl([Runtime::InteropServices::Out] IntPtr % fpQueryInterface, [Runtime::InteropServices::Out] IntPtr % fpAddRef, [Runtime::InteropServices::Out] IntPtr % fpRelease);" FrameworkAlternate="net-5.0;net-6.0;net-7.0" />
      <MemberSignature Language="C#" Value="public static void GetIUnknownImpl (out IntPtr fpQueryInterface, out IntPtr fpAddRef, out IntPtr fpRelease);" FrameworkAlternate="net-8.0;net-9.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetIUnknownImpl([out] native int&amp; fpQueryInterface, [out] native int&amp; fpAddRef, [out] native int&amp; fpRelease) cil managed" FrameworkAlternate="net-8.0;net-9.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetIUnknownImpl (ByRef fpQueryInterface As IntPtr, ByRef fpAddRef As IntPtr, ByRef fpRelease As IntPtr)" FrameworkAlternate="net-8.0;net-9.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetIUnknownImpl([Runtime::InteropServices::Out] IntPtr % fpQueryInterface, [Runtime::InteropServices::Out] IntPtr % fpAddRef, [Runtime::InteropServices::Out] IntPtr % fpRelease);" FrameworkAlternate="net-8.0;net-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fpQueryInterface" Type="System.IntPtr" RefType="out" />
        <Parameter Name="fpAddRef" Type="System.IntPtr" RefType="out" />
        <Parameter Name="fpRelease" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="fpQueryInterface">Function pointer to QueryInterface.</param>
        <param name="fpAddRef">Function pointer to AddRef.</param>
        <param name="fpRelease">Function pointer to Release.</param>
        <summary>Gets the runtime-provided IUnknown implementation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The runtime implementations of these `IUnknown` functions are all thread-safe. Each of them is optimized and strictly follows the COM rules for `IUnknown`. The `QueryInterface` implementation also respects the <xref:System.Runtime.InteropServices.ICustomQueryInterface> interface. The `ICustomQueryInterface` interface will never have an opportunity to override interfaces that the runtime provides. For example, by default the runtime provides the  `IUnknown` interface and, optionally, the Reference Tracker `IReferenceTrackerTarget` interface.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateComInterfaceForObject">
      <MemberSignature Language="C#" Value="public IntPtr GetOrCreateComInterfaceForObject (object instance, System.Runtime.InteropServices.CreateComInterfaceFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetOrCreateComInterfaceForObject(object instance, valuetype System.Runtime.InteropServices.CreateComInterfaceFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateComInterfaceForObject (instance As Object, flags As CreateComInterfaceFlags) As IntPtr" />
      <MemberSignature Language="F#" Value="member this.GetOrCreateComInterfaceForObject : obj * System.Runtime.InteropServices.CreateComInterfaceFlags -&gt; nativeint" Usage="comWrappers.GetOrCreateComInterfaceForObject (instance, flags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr GetOrCreateComInterfaceForObject(System::Object ^ instance, System::Runtime::InteropServices::CreateComInterfaceFlags flags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateComInterfaceFlags" />
      </Parameters>
      <Docs>
        <param name="instance">The managed object to expose outside the .NET runtime.</param>
        <param name="flags">Flags used to configure the generated interface.</param>
        <summary>Creates a COM representation of the supplied object that can be passed to a non-managed environment.</summary>
        <returns>The generated COM interface, as a pointer to the <code>IUnknown</code> interface implementation, that can be passed outside the .NET runtime.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

If a COM representation was previously created for the specified `instance` using this <xref:System.Runtime.InteropServices.ComWrappers> instance, the previously created COM interface will be returned. If not, a new one will be created.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateObjectForComInstance">
      <MemberSignature Language="C#" Value="public object GetOrCreateObjectForComInstance (IntPtr externalComObject, System.Runtime.InteropServices.CreateObjectFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrCreateObjectForComInstance(native int externalComObject, valuetype System.Runtime.InteropServices.CreateObjectFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateObjectForComInstance (externalComObject As IntPtr, flags As CreateObjectFlags) As Object" />
      <MemberSignature Language="F#" Value="member this.GetOrCreateObjectForComInstance : nativeint * System.Runtime.InteropServices.CreateObjectFlags -&gt; obj" Usage="comWrappers.GetOrCreateObjectForComInstance (externalComObject, flags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrCreateObjectForComInstance(IntPtr externalComObject, System::Runtime::InteropServices::CreateObjectFlags flags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalComObject" Type="System.IntPtr" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateObjectFlags" />
      </Parameters>
      <Docs>
        <param name="externalComObject">Object to import for usage into the .NET runtime.</param>
        <param name="flags">Flags used to describe the external object.</param>
        <summary>Gets the currently registered managed object or creates a new managed object and registers it.</summary>
        <returns>A managed object associated with the supplied external COM object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

If a managed object was previously created for the specified `externalComObject` using this <xref:System.Runtime.InteropServices.ComWrappers> instance, the previously created object will be returned. If not, a new one will be created.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrRegisterObjectForComInstance">
      <MemberSignature Language="C#" Value="public object GetOrRegisterObjectForComInstance (IntPtr externalComObject, System.Runtime.InteropServices.CreateObjectFlags flags, object wrapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrRegisterObjectForComInstance(native int externalComObject, valuetype System.Runtime.InteropServices.CreateObjectFlags flags, object wrapper) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrRegisterObjectForComInstance (externalComObject As IntPtr, flags As CreateObjectFlags, wrapper As Object) As Object" />
      <MemberSignature Language="F#" Value="member this.GetOrRegisterObjectForComInstance : nativeint * System.Runtime.InteropServices.CreateObjectFlags * obj -&gt; obj" Usage="comWrappers.GetOrRegisterObjectForComInstance (externalComObject, flags, wrapper)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrRegisterObjectForComInstance(IntPtr externalComObject, System::Runtime::InteropServices::CreateObjectFlags flags, System::Object ^ wrapper);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalComObject" Type="System.IntPtr" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateObjectFlags" />
        <Parameter Name="wrapper" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="externalComObject">Object to import for usage into the .NET runtime.</param>
        <param name="flags">Flags used to describe the external object.</param>
        <param name="wrapper">The object to use as the wrapper for the external object.</param>
        <summary>Gets the currently registered managed object or uses the supplied managed object and registers it.</summary>
        <returns>A managed object associated with the supplied external COM object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

If the `wrapper` instance already has an associated external object a <xref:System.NotSupportedException> will be thrown.

          ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The wrapper instance is already associated with an external object.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrRegisterObjectForComInstance">
      <MemberSignature Language="C#" Value="public object GetOrRegisterObjectForComInstance (IntPtr externalComObject, System.Runtime.InteropServices.CreateObjectFlags flags, object wrapper, IntPtr inner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetOrRegisterObjectForComInstance(native int externalComObject, valuetype System.Runtime.InteropServices.CreateObjectFlags flags, object wrapper, native int inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrRegisterObjectForComInstance (externalComObject As IntPtr, flags As CreateObjectFlags, wrapper As Object, inner As IntPtr) As Object" />
      <MemberSignature Language="F#" Value="member this.GetOrRegisterObjectForComInstance : nativeint * System.Runtime.InteropServices.CreateObjectFlags * obj * nativeint -&gt; obj" Usage="comWrappers.GetOrRegisterObjectForComInstance (externalComObject, flags, wrapper, inner)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetOrRegisterObjectForComInstance(IntPtr externalComObject, System::Runtime::InteropServices::CreateObjectFlags flags, System::Object ^ wrapper, IntPtr inner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalComObject" Type="System.IntPtr" Index="0" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
        <Parameter Name="flags" Type="System.Runtime.InteropServices.CreateObjectFlags" Index="1" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
        <Parameter Name="wrapper" Type="System.Object" Index="2" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
        <Parameter Name="inner" Type="System.IntPtr" Index="3" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
      </Parameters>
      <Docs>
        <param name="externalComObject">Object to import for usage into the .NET runtime.</param>
        <param name="flags">Flags used to describe the external object.</param>
        <param name="wrapper">The <see cref="T:System.Object" /> to be used as the wrapper for the external object</param>
        <param name="inner">Inner for COM aggregation scenarios</param>
        <summary>Get the currently registered managed object or uses the supplied managed object and registers it.</summary>
        <returns>Returns a managed object associated with the supplied external COM object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method override is for registering an aggregated COM instance with its associated inner. The inner
will be released when the associated wrapper is eventually freed. Note that it will be released on a thread
in an unknown apartment state. If the supplied inner is not known to be a free-threaded instance then
it is advised to not supply the inner.

If the `wrapper` instance already has an associated external object a <xref:System.NotSupportedException> will be thrown.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterForMarshalling">
      <MemberSignature Language="C#" Value="public static void RegisterForMarshalling (System.Runtime.InteropServices.ComWrappers instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForMarshalling(class System.Runtime.InteropServices.ComWrappers instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling(System.Runtime.InteropServices.ComWrappers)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForMarshalling (instance As ComWrappers)" />
      <MemberSignature Language="F#" Value="static member RegisterForMarshalling : System.Runtime.InteropServices.ComWrappers -&gt; unit" Usage="System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling instance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForMarshalling(System::Runtime::InteropServices::ComWrappers ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("windows")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("windows")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Runtime.InteropServices.ComWrappers" />
      </Parameters>
      <Docs>
        <param name="instance">The instance to register.</param>
        <summary>Registers a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to be used as the global instance for marshalling in the runtime.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This function can only be called a single time. Subsequent calls to this function will result in a <xref:System.InvalidOperationException> being thrown.
             Scenarios where this global instance may be used are:
              * Usage of COM-related Marshal APIs
              * P/Invokes with COM-related types
              * COM activation

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The method was called more than once.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterForTrackerSupport">
      <MemberSignature Language="C#" Value="public static void RegisterForTrackerSupport (System.Runtime.InteropServices.ComWrappers instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForTrackerSupport(class System.Runtime.InteropServices.ComWrappers instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport(System.Runtime.InteropServices.ComWrappers)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForTrackerSupport (instance As ComWrappers)" />
      <MemberSignature Language="F#" Value="static member RegisterForTrackerSupport : System.Runtime.InteropServices.ComWrappers -&gt; unit" Usage="System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport instance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForTrackerSupport(System::Runtime::InteropServices::ComWrappers ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Runtime.InteropServices.ComWrappers" />
      </Parameters>
      <Docs>
        <param name="instance">The instance to register.</param>
        <summary>Registers a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to be used as the global instance for reference tracker support.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This function can only be called a single time. Subsequent calls to this function will result in a <xref:System.InvalidOperationException> being thrown.
             Scenarios where this global instance may be used are:
              * Object tracking via the <xref:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport> and <xref:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject> flags.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The method was called more than once.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseObjects">
      <MemberSignature Language="C#" Value="protected abstract void ReleaseObjects (System.Collections.IEnumerable objects);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReleaseObjects(class System.Collections.IEnumerable objects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.ReleaseObjects(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub ReleaseObjects (objects As IEnumerable)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseObjects : System.Collections.IEnumerable -&gt; unit" Usage="comWrappers.ReleaseObjects objects" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void ReleaseObjects(System::Collections::IEnumerable ^ objects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objects" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="objects">Collection of objects to release.</param>
        <summary>Releases a collection of objects outside of the normal object or COM interface lifetime.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetComInstance">
      <MemberSignature Language="C#" Value="public static bool TryGetComInstance (object obj, out IntPtr unknown);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetComInstance(object obj, [out] native int&amp; unknown) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.TryGetComInstance(System.Object,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetComInstance (obj As Object, ByRef unknown As IntPtr) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryGetComInstance : obj * nativeint -&gt; bool" Usage="System.Runtime.InteropServices.ComWrappers.TryGetComInstance (obj, unknown)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetComInstance(System::Object ^ obj, [Runtime::InteropServices::Out] IntPtr % unknown);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="net-8.0;net-9.0" />
        <Parameter Name="unknown" Type="System.IntPtr" RefType="out" Index="1" FrameworkAlternate="net-8.0;net-9.0" />
      </Parameters>
      <Docs>
        <param name="obj">The managed wrapper.</param>
        <param name="unknown">The unmanaged COM object.</param>
        <summary>Determines if the specified managed object is a <see cref="T:System.Runtime.InteropServices.ComWrappers" />-created managed wrapper and if so, returns the wrapped unmanaged pointer.</summary>
        <returns>
          <see langword="true" /> if the wrapper was resolved to an external COM object, otherwise <see langword="false" />.</returns>
        <remarks>If a COM object is returned, the caller is expected to call Release() on the object.
            This can be done through an API like <see cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />.
            Since this API is required to interact directly with the external COM object, QueryInterface(), it's important for the caller to understand the COM object may have apartment affinity. Therefore, if the current thread is not in the correct apartment or the COM object is not a proxy, this call may fail.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetObject">
      <MemberSignature Language="C#" Value="public static bool TryGetObject (IntPtr unknown, out object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetObject(native int unknown, [out] object&amp; obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ComWrappers.TryGetObject(System.IntPtr,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetObject (unknown As IntPtr, ByRef obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryGetObject : nativeint * obj -&gt; bool" Usage="System.Runtime.InteropServices.ComWrappers.TryGetObject (unknown, obj)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetObject(IntPtr unknown, [Runtime::InteropServices::Out] System::Object ^ % obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unknown" Type="System.IntPtr" Index="0" FrameworkAlternate="net-8.0;net-9.0" />
        <Parameter Name="obj" Type="System.Object" RefType="out" Index="1" FrameworkAlternate="net-8.0;net-9.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="unknown">The unmanaged wrapper.</param>
        <param name="obj">The managed object.</param>
        <summary>Determines if the specified COM object is a <see cref="T:System.Runtime.InteropServices.ComWrappers" />-created unmanaged wrapper and if so, returns the wrapped managed object.</summary>
        <returns>
          <see langword="true" /> if the wrapper was resolved to a managed object, otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
