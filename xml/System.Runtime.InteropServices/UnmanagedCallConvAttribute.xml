<Type Name="UnmanagedCallConvAttribute" FullName="System.Runtime.InteropServices.UnmanagedCallConvAttribute">
  <TypeSignature Language="C#" Value="public sealed class UnmanagedCallConvAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit UnmanagedCallConvAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.UnmanagedCallConvAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UnmanagedCallConvAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type UnmanagedCallConvAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnmanagedCallConvAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides an equivalent to <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> for native functions declared in .NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

When this attribute is applied to a method with <xref:System.Runtime.InteropServices.DllImportAttribute>
where <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> is either not set or set
to <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, the .NET runtime will use
<xref:System.Runtime.InteropServices.UnmanagedCallConvAttribute.CallConvs> to determine the calling convention
of the p/invoke.

This attribute is ignored if applied to a method without <xref:System.Runtime.InteropServices.DllImportAttribute>
or with <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> set to something other than
<xref:System.Runtime.InteropServices.CallingConvention.Winapi>.

## Examples

The following examples declare p/invokes using the <xref:System.Runtime.InteropServices.UnmanagedCallConvAttribute>
to specify the calling convention.

Using the `cdecl` calling convention:

:::code language="csharp" source="~/snippets/csharp/System.Runtime.InteropServices/Attributes/UnmanagedCallConv.cs" id="SnippetCdecl":::

Using the `stdcall` calling convention:

:::code language="csharp" source="~/snippets/csharp/System.Runtime.InteropServices/Attributes/UnmanagedCallConv.cs" id="SnippetStdcall":::

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnmanagedCallConvAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UnmanagedCallConvAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnmanagedCallConvAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new <see cref="T:System.Runtime.InteropServices.UnmanagedCallConvAttribute" /> instance.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallConvs">
      <MemberSignature Language="C#" Value="public Type[]? CallConvs;" />
      <MemberSignature Language="ILAsm" Value=".field public class System.Type[] CallConvs" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.UnmanagedCallConvAttribute.CallConvs" />
      <MemberSignature Language="VB.NET" Value="Public CallConvs As Type() " />
      <MemberSignature Language="F#" Value="val mutable CallConvs : Type[]" Usage="System.Runtime.InteropServices.UnmanagedCallConvAttribute.CallConvs" />
      <MemberSignature Language="C++ CLI" Value="public: cli::array &lt;Type ^&gt; ^ CallConvs;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Optional. Types indicating calling conventions for the unmanaged target.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

If `null`, the runtime will use the default platform calling convention&mdash;identical to <xref:System.Runtime.InteropServices.CallingConvention.Winapi>
for <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>.

          ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.CompilerServices.CallConvCdecl" />
        <altmember cref="T:System.Runtime.CompilerServices.CallConvStdcall" />
        <altmember cref="T:System.Runtime.CompilerServices.CallConvSuppressGCTransition" />
      </Docs>
    </Member>
  </Members>
</Type>
