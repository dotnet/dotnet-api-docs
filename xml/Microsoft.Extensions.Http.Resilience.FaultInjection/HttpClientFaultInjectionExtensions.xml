<Type Name="HttpClientFaultInjectionExtensions" FullName="Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions">
  <TypeSignature Language="C#" Value="public static class HttpClientFaultInjectionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit HttpClientFaultInjectionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module HttpClientFaultInjectionExtensions" />
  <TypeSignature Language="F#" Value="type HttpClientFaultInjectionExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClientFaultInjectionExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides extension methods for Fault-Injection library specifically for HttpClient usages.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddFaultInjectionPolicyHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddFaultInjectionPolicyHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder, string chaosPolicyOptionsGroupName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddFaultInjectionPolicyHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder, string chaosPolicyOptionsGroupName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddFaultInjectionPolicyHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFaultInjectionPolicyHandler (httpClientBuilder As IHttpClientBuilder, chaosPolicyOptionsGroupName As String) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddFaultInjectionPolicyHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * string -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddFaultInjectionPolicyHandler (httpClientBuilder, chaosPolicyOptionsGroupName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddFaultInjectionPolicyHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ httpClientBuilder, System::String ^ chaosPolicyOptionsGroupName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpClientBuilder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="chaosPolicyOptionsGroupName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="httpClientBuilder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="chaosPolicyOptionsGroupName">The chaos policy options group name.</param>
        <summary>
            Adds a chaos policy handler identified by the chaos policy options group name to the given <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> so that additional calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHttpClientFaultInjection">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpClientFaultInjection (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpClientFaultInjection(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddHttpClientFaultInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHttpClientFaultInjection (services As IServiceCollection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddHttpClientFaultInjection : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddHttpClientFaultInjection services" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddHttpClientFaultInjection(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
      </Parameters>
      <Docs>
        <param name="services">The services collection.</param>
        <summary>
            Registers default implementations for <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IFaultInjectionOptionsProvider" />, <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IChaosPolicyFactory" /> and <see cref="T:Microsoft.Extensions.Http.Resilience.FaultInjection.IHttpClientChaosPolicyFactory" />;
            adds fault-injection policies to all <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            All parameters cannot be null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AddHttpClientFaultInjection">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpClientFaultInjection (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration section);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpClientFaultInjection(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Extensions.Configuration.IConfiguration section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddHttpClientFaultInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHttpClientFaultInjection (services As IServiceCollection, section As IConfiguration) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddHttpClientFaultInjection : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.Configuration.IConfiguration -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddHttpClientFaultInjection (services, section)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddHttpClientFaultInjection(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Microsoft::Extensions::Configuration::IConfiguration ^ section);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfiguration" />
      </Parameters>
      <Docs>
        <param name="services">The services collection.</param>
        <param name="section">The configuration section to bind to <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions" />.</param>
        <summary>
            Configures <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions" /> and registers default implementations for <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IFaultInjectionOptionsProvider" />,
            <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IChaosPolicyFactory" /> and <see cref="T:Microsoft.Extensions.Http.Resilience.FaultInjection.IHttpClientChaosPolicyFactory" />;
            adds fault-injection policies to all <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            All parameters cannot be null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AddHttpClientFaultInjection">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpClientFaultInjection (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpClientFaultInjection(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddHttpClientFaultInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHttpClientFaultInjection (services As IServiceCollection, configure As Action(Of HttpFaultInjectionOptionsBuilder)) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddHttpClientFaultInjection : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddHttpClientFaultInjection (services, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddHttpClientFaultInjection(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Action&lt;Microsoft::Extensions::Http::Resilience::FaultInjection::HttpFaultInjectionOptionsBuilder ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="services">The services collection.</param>
        <param name="configure">Action to configure options with <see cref="T:Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder" />.</param>
        <summary>
            Calls the given action to configure options with <see cref="T:Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder" /> and registers default implementations for
            <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IFaultInjectionOptionsProvider" />, <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IChaosPolicyFactory" /> and <see cref="T:Microsoft.Extensions.Http.Resilience.FaultInjection.IHttpClientChaosPolicyFactory" />;
            adds fault-injection policies to all <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.
            </returns>
        <remarks>
            If the default instance of <see cref="T:System.Net.Http.IHttpClientFactory" /> is used, this method also adds a
            chaos policy handler to all registered <see cref="T:System.Net.Http.HttpClient" /> with its name as the identifier.
            Additional chaos policy handlers with different identifier names can be added using <see cref="M:Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddFaultInjectionPolicyHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.String)" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            All parameters cannot be null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AddWeightedFaultInjectionPolicyHandlers">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddWeightedFaultInjectionPolicyHandlers (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder, Microsoft.Extensions.Configuration.IConfigurationSection weightAssignmentsConfigSection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddWeightedFaultInjectionPolicyHandlers(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder, class Microsoft.Extensions.Configuration.IConfigurationSection weightAssignmentsConfigSection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddWeightedFaultInjectionPolicyHandlers(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddWeightedFaultInjectionPolicyHandlers (httpClientBuilder As IHttpClientBuilder, weightAssignmentsConfigSection As IConfigurationSection) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddWeightedFaultInjectionPolicyHandlers : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Microsoft.Extensions.Configuration.IConfigurationSection -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddWeightedFaultInjectionPolicyHandlers (httpClientBuilder, weightAssignmentsConfigSection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddWeightedFaultInjectionPolicyHandlers(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ httpClientBuilder, Microsoft::Extensions::Configuration::IConfigurationSection ^ weightAssignmentsConfigSection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed by [DynamicDependency]")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed by [DynamicDependency]")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpClientBuilder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="weightAssignmentsConfigSection" Type="Microsoft.Extensions.Configuration.IConfigurationSection" />
      </Parameters>
      <Docs>
        <param name="httpClientBuilder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="weightAssignmentsConfigSection">The configuration section to bind to <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions" />.</param>
        <summary>
            Adds a chaos policy handler to the given <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />
            using weight assignments denoted in <paramref name="weightAssignmentsConfigSection" /> to determine which chaos policy options group to
            use at each run of fault-injection.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> so that additional calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddWeightedFaultInjectionPolicyHandlers">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddWeightedFaultInjectionPolicyHandlers (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder, Action&lt;Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions&gt; weightAssignmentsConfig);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddWeightedFaultInjectionPolicyHandlers(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder httpClientBuilder, class System.Action`1&lt;class Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions&gt; weightAssignmentsConfig) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddWeightedFaultInjectionPolicyHandlers(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddWeightedFaultInjectionPolicyHandlers (httpClientBuilder As IHttpClientBuilder, weightAssignmentsConfig As Action(Of FaultPolicyWeightAssignmentsOptions)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddWeightedFaultInjectionPolicyHandlers : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Action&lt;Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddWeightedFaultInjectionPolicyHandlers (httpClientBuilder, weightAssignmentsConfig)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddWeightedFaultInjectionPolicyHandlers(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ httpClientBuilder, Action&lt;Microsoft::Extensions::Resilience::FaultInjection::FaultPolicyWeightAssignmentsOptions ^&gt; ^ weightAssignmentsConfig);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpClientBuilder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="weightAssignmentsConfig" Type="System.Action&lt;Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="httpClientBuilder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="weightAssignmentsConfig">Function to configure <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions" />.</param>
        <summary>
            Adds a chaos policy handler to the given <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />
            using weight assignments denoted in <paramref name="weightAssignmentsConfig" /> to determine which chaos policy options group to
            use at each run of fault-injection.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> so that additional calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
