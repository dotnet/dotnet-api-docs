<Type Name="EventHandler&lt;TSender,TEventArgs&gt;" FullName="System.EventHandler&lt;TSender,TEventArgs&gt;">
  <TypeSignature Language="C#" Value="public delegate void EventHandler&lt;in TSender,in TEventArgs&gt;(TSender sender, TEventArgs e) where TSender : allows ref struct where TEventArgs : allows ref struct;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventHandler`2&lt;- TSender, - TEventArgs&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.EventHandler`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub EventHandler(Of In TSender, In TEventArgs)(sender As TSender, e As TEventArgs)" />
  <TypeSignature Language="F#" Value="type EventHandler&lt;'Sender, 'EventArgs&gt; = delegate of 'Sender * 'EventArgs -&gt; unit" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSender, typename TEventArgs&gt;&#xA;public delegate void EventHandler(TSender sender, TEventArgs e);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSender">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
        <ParameterAttribute>AllowByRefLike</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TEventArgs">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
        <ParameterAttribute>AllowByRefLike</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="TSender" />
    <Parameter Name="e" Type="TEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TSender">To be added.</typeparam>
    <typeparam name="TEventArgs">To be added.</typeparam>
    <param name="sender">To be added.</param>
    <param name="e">To be added.</param>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
