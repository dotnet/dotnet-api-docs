<Type Name="TimeSpan" FullName="System.TimeSpan">
  <TypeSignature Language="C#" Value="public struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.TimeSpan&gt;, class System.IEquatable`1&lt;valuetype System.TimeSpan&gt;, class System.IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.TimeSpan" />
  <TypeSignature Language="VB.NET" Value="Public Structure TimeSpan&#xA;Implements IComparable, IComparable(Of TimeSpan), IEquatable(Of TimeSpan), IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type TimeSpan = struct&#xA;    interface IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public value class TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public readonly struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public readonly struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, ISpanFormattable" FrameworkAlternate="net-6.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.TimeSpan&gt;, class System.IEquatable`1&lt;valuetype System.TimeSpan&gt;, class System.IFormattable, class System.ISpanFormattable" FrameworkAlternate="net-6.0" />
  <TypeSignature Language="VB.NET" Value="Public Structure TimeSpan&#xA;Implements IComparable, IComparable(Of TimeSpan), IEquatable(Of TimeSpan), ISpanFormattable" FrameworkAlternate="net-6.0" />
  <TypeSignature Language="F#" Value="type TimeSpan = struct&#xA;    interface ISpanFormattable&#xA;    interface IFormattable" FrameworkAlternate="net-6.0" />
  <TypeSignature Language="C++ CLI" Value="public value class TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, ISpanFormattable" FrameworkAlternate="net-6.0" />
  <TypeSignature Language="C#" Value="public readonly struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IParsable&lt;TimeSpan&gt;, ISpanFormattable, ISpanParsable&lt;TimeSpan&gt;" FrameworkAlternate="net-7.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.TimeSpan&gt;, class System.IEquatable`1&lt;valuetype System.TimeSpan&gt;, class System.IFormattable, class System.IParsable`1&lt;valuetype System.TimeSpan&gt;, class System.ISpanFormattable, class System.ISpanParsable`1&lt;valuetype System.TimeSpan&gt;" FrameworkAlternate="net-7.0" />
  <TypeSignature Language="VB.NET" Value="Public Structure TimeSpan&#xA;Implements IComparable, IComparable(Of TimeSpan), IEquatable(Of TimeSpan), IParsable(Of TimeSpan), ISpanFormattable, ISpanParsable(Of TimeSpan)" FrameworkAlternate="net-7.0" />
  <TypeSignature Language="F#" Value="type TimeSpan = struct&#xA;    interface IFormattable&#xA;    interface IParsable&lt;TimeSpan&gt;&#xA;    interface ISpanFormattable&#xA;    interface ISpanParsable&lt;TimeSpan&gt;" FrameworkAlternate="net-7.0" />
  <TypeSignature Language="C++ CLI" Value="public value class TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IParsable&lt;TimeSpan&gt;, ISpanFormattable, ISpanParsable&lt;TimeSpan&gt;" FrameworkAlternate="net-7.0" />
  <TypeSignature Language="C#" Value="public struct TimeSpan : IComparable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure TimeSpan&#xA;Implements IComparable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type TimeSpan = struct" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public value class TimeSpan : IComparable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C#" Value="public struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.TimeSpan&gt;, class System.IEquatable`1&lt;valuetype System.TimeSpan&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Structure TimeSpan&#xA;Implements IComparable, IComparable(Of TimeSpan), IEquatable(Of TimeSpan)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public value class TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.TimeSpan&gt;, class System.IEquatable`1&lt;valuetype System.TimeSpan&gt;, class System.IFormattable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="6.0.0.0" FrameworkAlternate="net-6.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="7.0.0.0" FrameworkAlternate="net-7.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IComparable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IEquatable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-6.0;net-7.0">
      <InterfaceName>System.ISpanFormattable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.IParsable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.IParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-7.0">
      <InterfaceName>System.ISpanParsable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1;netstandard-2.1">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a time interval.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> object represents a time interval (duration of time or elapsed time) that is measured as a positive or negative number of days, hours, minutes, seconds, and fractions of a second. The <xref:System.TimeSpan> structure can also be used to represent the time of day, but only if the time is unrelated to a particular date. Otherwise, the <xref:System.DateTime> or <xref:System.DateTimeOffset> structure should be used instead. (For more information about using the <xref:System.TimeSpan> structure to reflect the time of day, see [Choosing Between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo](/dotnet/standard/datetime/choosing-between-datetime).)  
  
> [!NOTE]
>  A <xref:System.TimeSpan> value represents a time interval and can be expressed as a particular number of days, hours, minutes, seconds, and milliseconds. Because it represents a general interval without reference to a particular start or end point, it cannot be expressed in terms of years and months, both of which have a variable number of days. It differs from a <xref:System.DateTime> value, which represents a date and time without reference to a particular time zone, or a <xref:System.DateTimeOffset> value, which represents a specific moment of time.  
  
 The largest unit of time that the <xref:System.TimeSpan> structure uses to measure duration is a day. Time intervals are measured in days for consistency, because the number of days in larger units of time, such as months and years, varies.  
  
 The value of a <xref:System.TimeSpan> object is the number of ticks that equal the represented time interval. A tick is equal to 100 nanoseconds, or one ten-millionth of a second. The value of a <xref:System.TimeSpan> object can range from <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> to <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
## Instantiating a TimeSpan Value  
 You can instantiate a <xref:System.TimeSpan> value in a number of ways:  
  
-   By calling its implicit parameterless constructor. This creates an object whose value is <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, as the following example shows.  
  
     :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Overview/instantiate1.cs" interactive="try-dotnet-method" id="Snippet2":::
     :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Overview/instantiate1.fs" id="Snippet2":::
     :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb" id="Snippet2":::  
  
-   By calling one of its explicit constructors. The following example initializes a <xref:System.TimeSpan> value to a specified number of hours, minutes, and seconds.  
  
     :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Overview/instantiate1.cs" interactive="try-dotnet-method" id="Snippet3":::
     :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Overview/instantiate1.fs" id="Snippet3":::
     :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb" id="Snippet3":::  
  
-   By calling a method or performing an operation that returns a <xref:System.TimeSpan> value. For example, you can instantiate a <xref:System.TimeSpan> value that represents the interval between two date and time values, as the following example shows.  
  
     :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Overview/instantiate1.cs" interactive="try-dotnet-method" id="Snippet4":::
     :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Overview/instantiate1.fs" id="Snippet4":::
     :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb" id="Snippet4":::  
  
     You can also initialize a <xref:System.TimeSpan> object to a zero time value in this way, as the following example shows.  
  
     :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Overview/zero1.cs" interactive="try-dotnet-method" id="Snippet6":::
     :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Overview/zero1.fs" id="Snippet6":::
     :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/zero1.vb" id="Snippet6":::  
  
     <xref:System.TimeSpan> values are returned by arithmetic operators and methods of the <xref:System.DateTime>, <xref:System.DateTimeOffset>, and <xref:System.TimeSpan> structures.  
  
-   By parsing the string representation of a <xref:System.TimeSpan> value. You can use the <xref:System.TimeSpan.Parse%2A> and <xref:System.TimeSpan.TryParse%2A> methods to convert strings that contain time intervals to <xref:System.TimeSpan> values. The following example uses the <xref:System.TimeSpan.Parse%2A> method to convert an array of strings to <xref:System.TimeSpan> values.  
  
     :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Overview/instantiate1.cs" interactive="try-dotnet-method" id="Snippet5":::
     :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Overview/instantiate1.fs" id="Snippet5":::
     :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb" id="Snippet5":::  
  
     In addition, you can define the precise format of the input string to be parsed and converted to a <xref:System.TimeSpan> value by calling the <xref:System.TimeSpan.ParseExact%2A> or <xref:System.TimeSpan.TryParseExact%2A> method.  
  
## Performing Operations on TimeSpan Values  
 You can add and subtract time durations either by using the <xref:System.TimeSpan.op_Addition%2A> and <xref:System.TimeSpan.op_Subtraction%2A> operators, or by calling the <xref:System.TimeSpan.Add%2A> and <xref:System.TimeSpan.Subtract%2A> methods. You can also compare two time durations by calling the <xref:System.TimeSpan.Compare%2A>, <xref:System.TimeSpan.CompareTo%2A>, and <xref:System.TimeSpan.Equals%2A> methods. The <xref:System.TimeSpan> structure also includes the <xref:System.TimeSpan.Duration%2A> and <xref:System.TimeSpan.Negate%2A> methods, which convert time intervals to positive and negative values,  
  
 The range of <xref:System.TimeSpan> values is <xref:System.TimeSpan.MinValue> to <xref:System.TimeSpan.MaxValue>.  
  
## Formatting a TimeSpan Value  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. That is, a time interval consists of a positive or negative number of days without a time of day, or a number of days with a time of day, or only a time of day.  
  
 Beginning with the .NET Framework 4, the <xref:System.TimeSpan> structure supports culture-sensitive formatting through the overloads of its <xref:System.TimeSpan.ToString%2A> method, which converts a <xref:System.TimeSpan> value to its string representation. The default <xref:System.TimeSpan.ToString?displayProperty=nameWithType> method returns a time interval by using an invariant format that is identical to its return value in previous versions of the .NET Framework. The <xref:System.TimeSpan.ToString%28System.String%29?displayProperty=nameWithType> overload lets you specify a format string that defines the string representation of the time interval. The <xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> overload lets you specify a format string and the culture whose formatting conventions are used to create the string representation of the time interval. <xref:System.TimeSpan> supports both standard and custom format strings. (For more information, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings).) However, only standard format strings are culture-sensitive.  
  
## Restoring Legacy TimeSpan Formatting  
 In some cases, code that successfully formats <xref:System.TimeSpan> values in .NET Framework 3.5 and earlier versions fails in .NET Framework 4. This is most common in code that calls a [<TimeSpan_LegacyFormatMode> element](/dotnet/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element) method to format a <xref:System.TimeSpan> value with a format string. The following example successfully formats a <xref:System.TimeSpan> value in .NET Framework 3.5 and earlier versions, but throws an exception in .NET Framework 4 and later versions. Note that it attempts to format a <xref:System.TimeSpan> value by using an unsupported format specifier, which is ignored in .NET Framework 3.5 and earlier versions.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Overview/legacycode1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Overview/legacycode1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.legacy/vb/legacycode1.vb" id="Snippet1":::  
  
 If you cannot modify the code, you can restore the legacy formatting of <xref:System.TimeSpan> values in one of the following ways:  
  
-   By creating a configuration file that contains the [<TimeSpan_LegacyFormatMode> element](/dotnet/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element). Setting this element's `enabled` attribute to `true` restores legacy <xref:System.TimeSpan> formatting on a per-application basis.  
  
-   By setting the "NetFx40_TimeSpanLegacyFormatMode" compatibility switch when you create an application domain. This enables legacy <xref:System.TimeSpan> formatting on a per-application-domain basis. The following example creates an application domain that uses legacy <xref:System.TimeSpan> formatting.  
  
     :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Overview/perappdomain1.cs" id="Snippet1":::
     :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Overview/perappdomain1.fs" id="Snippet1":::
     :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.appdomain/vb/perappdomain1.vb" id="Snippet1":::  
  
     When the following code executes in the new application domain, it reverts to legacy <xref:System.TimeSpan> formatting behavior.  
  
     :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Overview/showtimespan.cs" id="Snippet2":::
     :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Overview/showtimespan.fs" id="Snippet2":::
     :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.appdomain/vb/showtimespan.vb" id="Snippet2":::  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object that represents the difference between two dates. It then displays the <xref:System.TimeSpan> object's properties.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Overview/structure1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Overview/structure1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/structure1.vb" id="Snippet1":::  
 :::code language="powershell" source="~/snippets/powershell/VS_Snippets_CLR_System/system.timespan.class/ps/structure1.ps1":::  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.Globalization.Calendar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="F#" Value="new TimeSpan : int64 -&gt; TimeSpan" Usage="new System.TimeSpan ticks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(long ticks);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">A time period expressed in 100-nanosecond units.</param>
        <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to the specified number of ticks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A single tick represents one hundred nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the constructor overload that initializes a <xref:System.TimeSpan> to a specified number of ticks.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctorl.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/.ctor/ctorl.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/.ctor/ctorl.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctorl.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Ticks" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hours As Integer, minutes As Integer, seconds As Integer)" />
      <MemberSignature Language="F#" Value="new TimeSpan : int * int * int -&gt; TimeSpan" Usage="new System.TimeSpan (hours, minutes, seconds)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(int hours, int minutes, int seconds);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hours">Number of hours.</param>
        <param name="minutes">Number of minutes.</param>
        <param name="seconds">Number of seconds.</param>
        <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of hours, minutes, and seconds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified `hours`, `minutes`, and `seconds` are converted to ticks, and that value initializes this instance.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the constructor overload that initializes a <xref:System.TimeSpan> to a specified number of hours, minutes, and seconds.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriii.cpp" id="Snippet2":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/.ctor/ctoriii.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/.ctor/ctoriii.fs" id="Snippet2":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriii.vb" id="Snippet2":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (days As Integer, hours As Integer, minutes As Integer, seconds As Integer)" />
      <MemberSignature Language="F#" Value="new TimeSpan : int * int * int * int -&gt; TimeSpan" Usage="new System.TimeSpan (days, hours, minutes, seconds)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(int days, int hours, int minutes, int seconds);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">Number of days.</param>
        <param name="hours">Number of hours.</param>
        <param name="minutes">Number of minutes.</param>
        <param name="seconds">Number of seconds.</param>
        <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of days, hours, minutes, and seconds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified `days`, `hours`, `minutes`, and `seconds` are converted to ticks, and that value initializes this instance.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the constructor overload that initializes a <xref:System.TimeSpan> to a specified number of days, hours, minutes, and seconds.  
 
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriiii.cpp" id="Snippet3":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/.ctor/ctoriiii.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/.ctor/ctoriiii.fs" id="Snippet3":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriiii.vb" id="Snippet3"::: 

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds, int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds, int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (days As Integer, hours As Integer, minutes As Integer, seconds As Integer, milliseconds As Integer)" />
      <MemberSignature Language="F#" Value="new TimeSpan : int * int * int * int * int -&gt; TimeSpan" Usage="new System.TimeSpan (days, hours, minutes, seconds, milliseconds)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">Number of days.</param>
        <param name="hours">Number of hours.</param>
        <param name="minutes">Number of minutes.</param>
        <param name="seconds">Number of seconds.</param>
        <param name="milliseconds">Number of milliseconds.</param>
        <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified `days`, `hours`, `minutes`, `seconds`, and `milliseconds` are converted to ticks, and that value initializes this instance.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the constructor overload that initializes a <xref:System.TimeSpan> to a specified number of days, hours, minutes, seconds, and milliseconds.  
 
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriiiii.cpp" id="Snippet4":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/.ctor/ctoriiiii.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/.ctor/ctoriiiii.fs" id="Snippet4":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriiiii.vb" id="Snippet4"::: 

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds, int milliseconds, int microseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds, int32 milliseconds, int32 microseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (days As Integer, hours As Integer, minutes As Integer, seconds As Integer, milliseconds As Integer, microseconds As Integer)" />
      <MemberSignature Language="F#" Value="new TimeSpan : int * int * int * int * int * int -&gt; TimeSpan" Usage="new System.TimeSpan (days, hours, minutes, seconds, milliseconds, microseconds)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds, int microseconds);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="hours" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="minutes" Type="System.Int32" Index="2" FrameworkAlternate="net-7.0" />
        <Parameter Name="seconds" Type="System.Int32" Index="3" FrameworkAlternate="net-7.0" />
        <Parameter Name="milliseconds" Type="System.Int32" Index="4" FrameworkAlternate="net-7.0" />
        <Parameter Name="microseconds" Type="System.Int32" Index="5" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="days">Number of days.</param>
        <param name="hours">Number of hours.</param>
        <param name="minutes">Number of minutes.</param>
        <param name="seconds">Number of seconds.</param>
        <param name="milliseconds">Number of milliseconds.</param>
        <param name="microseconds">Number of microseconds.</param>
        <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The specified `days`, `hours`, `minutes`, `seconds``milliseconds` and `microseconds` are converted to ticks, and that value initializes this instance.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public TimeSpan Add (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Add(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (ts As TimeSpan) As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; TimeSpan" Usage="timeSpan.Add ts" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Add(TimeSpan ts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">The time interval to add.</param>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the sum of the specified <see cref="T:System.TimeSpan" /> object and this instance.</summary>
        <returns>A new object that represents the value of this instance plus the value of <paramref name="ts" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value must be between <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> and <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>; otherwise, an exception is thrown.  
  
 The return value is a new <xref:System.TimeSpan>; the original <xref:System.TimeSpan> is not modified.  
  
   
  
## Examples  
 The following example calls the <xref:System.TimeSpan.Add%2A> method to add each element in an array of time intervals to a base <xref:System.TimeSpan> value.  

 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Add/add1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Add/add1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.add/vb/add1.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As TimeSpan, t2 As TimeSpan) As Integer" />
      <MemberSignature Language="F#" Value="static member Compare : TimeSpan * TimeSpan -&gt; int" Usage="System.TimeSpan.Compare (t1, t2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Compares two <see cref="T:System.TimeSpan" /> values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.</summary>
        <returns>One of the following values.  
  
 <list type="table"><listheader><term> Value  
  
 </term><description> Description  
  
 </description></listheader><item><term> -1  
  
 </term><description><paramref name="t1" /> is shorter than <paramref name="t2" />.  
  
 </description></item><item><term> 0  
  
 </term><description><paramref name="t1" /> is equal to <paramref name="t2" />.  
  
 </description></item><item><term> 1  
  
 </term><description><paramref name="t1" /> is longer than <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the <xref:System.TimeSpan.Compare%2A> method to compare several <xref:System.TimeSpan> objects with a <xref:System.TimeSpan> object whose value is a 2-hour time interval.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Compare/compare1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Compare/compare1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.compare/vb/compare1.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compares this instance to a specified object or <see cref="T:System.TimeSpan" /> object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object or <see cref="T:System.TimeSpan" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The two overloads of the <xref:System.TimeSpan.CompareTo%2A> method return a signed number that indicates the relative value of this instance and the `value` argument, as shown in the following table.  
  
|Value|Description|  
|-----------|-----------------|  
|Less than zero|This instance is shorter than `value`.|  
|Zero|This instance is the same as `value`.|  
|Greater than zero|This instance is longer than `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object? value);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="timeSpan.CompareTo value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">An object to compare, or <see langword="null" />.</param>
        <summary>Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object.</summary>
        <returns>One of the following values.  
  
 <list type="table"><listheader><term> Value  
  
 </term><description> Description  
  
 </description></listheader><item><term> -1  
  
 </term><description> This instance is shorter than <paramref name="value" />.  
  
 </description></item><item><term> 0  
  
 </term><description> This instance is equal to <paramref name="value" />.  
  
 </description></item><item><term> 1  
  
 </term><description> This instance is longer than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Any instance of <xref:System.TimeSpan>, regardless of its value, is considered greater than `null`.  
  
 The `value` parameter must be an instance of <xref:System.TimeSpan> or `null`; otherwise, an exception is thrown.  
  
   
  
## Examples  
 The following example compares several <xref:System.TimeSpan> structures and other objects to a reference <xref:System.TimeSpan> structure using the <xref:System.TimeSpan.CompareTo%2A> method.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/cto_eq_obj.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/CompareTo/cto_eq_obj.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/CompareTo/cto_eq_obj.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/cto_eq_obj.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.TimeSpan" />.</exception>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.CompareTo(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As TimeSpan) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : TimeSpan -&gt; int&#xA;override this.CompareTo : TimeSpan -&gt; int" Usage="timeSpan.CompareTo value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(TimeSpan value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">An object to compare to this instance.</param>
        <summary>Compares this instance to a specified <see cref="T:System.TimeSpan" /> object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the <see cref="T:System.TimeSpan" /> object.</summary>
        <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Value  
  
 </term><description> Description  
  
 </description></listheader><item><term> A negative integer  
  
 </term><description> This instance is shorter than <paramref name="value" />.  
  
 </description></item><item><term> Zero  
  
 </term><description> This instance is equal to <paramref name="value" />.  
  
 </description></item><item><term> A positive integer  
  
 </term><description> This instance is longer than <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.TimeSpan.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.  
  
   
  
## Examples  
 The following example demonstrates generic and nongeneric versions of the <xref:System.TimeSpan.CompareTo%2A> method for several value and reference types.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/Boolean/CompareTo/cat.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/Boolean/CompareTo/cat.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public int Days { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Days" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Days" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Days As Integer" />
      <MemberSignature Language="F#" Value="member this.Days : int" Usage="System.TimeSpan.Days" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Days { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the days component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The day component of this instance. The return value can be positive or negative.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. The value of the <xref:System.TimeSpan.Days%2A> property is the day component, *d*.  
  
 The <xref:System.TimeSpan.Days%2A> property represents whole days, whereas the <xref:System.TimeSpan.TotalDays%2A> property represents whole and fractional days.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the <xref:System.TimeSpan.Days%2A> property of each.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Days/properties.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Days/properties.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalDays" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public TimeSpan Divide (double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Divide(float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Divide(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Divide (divisor As Double) As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.Divide : double -&gt; TimeSpan" Usage="timeSpan.Divide divisor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Divide(double divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="divisor" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="divisor">The value to be divided by.</param>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object which value is the result of division of this instance and the specified <paramref name="divisor" />.</summary>
        <returns>A new object that represents the value of this instance divided by the value of <paramref name="divisor" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public double Divide (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Divide(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Divide(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Divide (ts As TimeSpan) As Double" />
      <MemberSignature Language="F#" Value="member this.Divide : TimeSpan -&gt; double" Usage="timeSpan.Divide ts" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Divide(TimeSpan ts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="ts">The value to be divided by.</param>
        <summary>Returns a new <see cref="T:System.Double" /> value which is the result of division of this instance and the specified <paramref name="ts" />.</summary>
        <returns>A new value that represents result of division of this instance by the value of the <paramref name="ts" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Duration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Duration" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration () As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.Duration : unit -&gt; TimeSpan" Usage="timeSpan.Duration " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Duration();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</summary>
        <returns>A new object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example applies the <xref:System.TimeSpan.Duration%2A> method to several <xref:System.TimeSpan> objects.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Duration/dura_nega_una.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Duration/dura_nega_una.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see>.</exception>
        <altmember cref="P:System.TimeSpan.Ticks" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a value indicating whether two instances of <see cref="T:System.TimeSpan" /> are equal.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeSpan.Equals value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? value);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object">
          <Attributes>
            <Attribute FrameworkAlternate="net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value">An object to compare with this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.TimeSpan" /> object that represents the same time interval as the current <see cref="T:System.TimeSpan" /> structure; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> and other objects to a reference <xref:System.TimeSpan> using the <xref:System.TimeSpan.Equals%2A> method.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/cto_eq_obj.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/CompareTo/cto_eq_obj.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/CompareTo/cto_eq_obj.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/cto_eq_obj.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeSpan obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.TimeSpan obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeSpan -&gt; bool" Usage="timeSpan.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeSpan obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare with this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> represents the same time interval as this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.TimeSpan.Equals%2A> because it does not have to convert the `obj` parameter to an object.  
  
   
  
## Examples  
 The following example demonstrates generic and nongeneric versions of the <xref:System.TimeSpan.CompareTo%2A> method for several value and reference types.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/Boolean/CompareTo/cat.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/Boolean/CompareTo/cat.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
        <altmember cref="Overload:System.TimeSpan.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member Equals : TimeSpan * TimeSpan -&gt; bool" Usage="System.TimeSpan.Equals (t1, t2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Returns a value that indicates whether two specified instances of <see cref="T:System.TimeSpan" /> are equal.</summary>
        <returns>
          <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> object using the static <xref:System.TimeSpan.Equals%2A> method.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/comp_equal.cpp" id="Snippet2":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/CompareTo/comp_equal.cs" id="Snippet2":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/CompareTo/comp_equal.fs" id="Snippet2":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/comp_equal.vb" id="Snippet2":::  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromDays">
      <MemberSignature Language="C#" Value="public static TimeSpan FromDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromDays (value As Double) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member FromDays : double -&gt; TimeSpan" Usage="System.TimeSpan.FromDays value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromDays(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of days, accurate to the nearest millisecond.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to initialize the new <xref:System.TimeSpan>. Therefore, `value` will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <xref:System.Double> data type, this conversion can cause an <xref:System.OverflowException> for values that are near to but still in the range of either <xref:System.TimeSpan.MinValue> or <xref:System.TimeSpan.MaxValue>. For example, this causes an <xref:System.OverflowException> in the following attempt to instantiate a <xref:System.TimeSpan> object.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/System.TimeSpan.FromMinutes.cs" id="Snippet2":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/System.TimeSpan.FromMinutes.fs" id="Snippet2":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb" id="Snippet2":::  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the <xref:System.TimeSpan.FromDays%2A> method.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromdays.cpp" id="Snippet6":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/fromdays.cs"  interactive="try-dotnet" id="Snippet6":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/fromdays.fs"  id="Snippet6":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromdays.vb" id="Snippet6":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromHours">
      <MemberSignature Language="C#" Value="public static TimeSpan FromHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHours (value As Double) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member FromHours : double -&gt; TimeSpan" Usage="System.TimeSpan.FromHours value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromHours(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of hours accurate to the nearest millisecond.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to initialize the new <xref:System.TimeSpan>. Therefore, `value` will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <xref:System.Double> data type, this conversion can generate an <xref:System.OverflowException> for values that are near to but still in the range of either <xref:System.TimeSpan.MinValue> or <xref:System.TimeSpan.MaxValue>. For example, this causes an <xref:System.OverflowException> in the following attempt to instantiate a <xref:System.TimeSpan> object.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/System.TimeSpan.FromMinutes.cs" id="Snippet3":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/System.TimeSpan.FromMinutes.fs" id="Snippet3":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb" id="Snippet3":::  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the <xref:System.TimeSpan.FromHours%2A> method.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromhours.cpp" id="Snippet5":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/fromhours.cs" interactive="try-dotnet" id="Snippet5":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/fromhours.fs" id="Snippet5":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromhours.vb" id="Snippet5":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromMicroseconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMicroseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMicroseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMicroseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMicroseconds (value As Double) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member FromMicroseconds : double -&gt; TimeSpan" Usage="System.TimeSpan.FromMicroseconds value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromMicroseconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">A number of microseconds.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of microseconds.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.

-or-

<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />

-or-

<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromMilliseconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMilliseconds (value As Double) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member FromMilliseconds : double -&gt; TimeSpan" Usage="System.TimeSpan.FromMilliseconds value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromMilliseconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of milliseconds.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter is converted to ticks, and that number of ticks is used to initialize the new <xref:System.TimeSpan>. Therefore, `value` will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <xref:System.Double> data type, this conversion can generate an <xref:System.OverflowException> for values that are near to but still in the range of either <xref:System.TimeSpan.MinValue> or <xref:System.TimeSpan.MaxValue>. For example, this causes an <xref:System.OverflowException> in the following attempt to instantiate a <xref:System.TimeSpan> object.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/System.TimeSpan.FromMinutes.cs" id="Snippet4":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/System.TimeSpan.FromMinutes.fs" id="Snippet4":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb" id="Snippet4":::  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects by using the <xref:System.TimeSpan.FromMilliseconds%2A> method.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/frommillisec.cpp" id="Snippet2":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/frommillisec.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/frommillisec.fs" id="Snippet2":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/frommillisec.vb" id="Snippet2":::

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromMinutes">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMinutes (value As Double) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member FromMinutes : double -&gt; TimeSpan" Usage="System.TimeSpan.FromMinutes value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromMinutes(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of minutes, accurate to the nearest millisecond.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to initialize the new <xref:System.TimeSpan>. Therefore, `value` will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <xref:System.Double> data type, this conversion can generate an <xref:System.OverflowException> for values that are near to but still in the range of either <xref:System.TimeSpan.MinValue> or <xref:System.TimeSpan.MaxValue>. For example, this causes an <xref:System.OverflowException> in the following attempt to instantiate a <xref:System.TimeSpan> object.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/System.TimeSpan.FromMinutes.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/System.TimeSpan.FromMinutes.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb" id="Snippet1":::  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the <xref:System.TimeSpan.FromMinutes%2A> method.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromminutes.cpp" id="Snippet4":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/fromminutes.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/fromminutes.fs" id="Snippet4":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromminutes.vb" id="Snippet4":::

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromSeconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSeconds (value As Double) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member FromSeconds : double -&gt; TimeSpan" Usage="System.TimeSpan.FromSeconds value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromSeconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of seconds, accurate to the nearest millisecond.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to initialize the new <xref:System.TimeSpan>. Therefore, `value` will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <xref:System.Double> data type, this can generate an <xref:System.OverflowException> for values that are near but still in the range of either  <xref:System.TimeSpan.MinValue> or <xref:System.TimeSpan.MaxValue>, This is the cause of an <xref:System.OverflowException>, for example, in the following attempt to instantiate a <xref:System.TimeSpan> object.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/System.TimeSpan.FromMinutes.cs" id="Snippet5":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/System.TimeSpan.FromMinutes.fs" id="Snippet5":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb" id="Snippet5":::  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the <xref:System.TimeSpan.FromSeconds%2A> method.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromseconds.cpp" id="Snippet3":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/fromseconds.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/fromseconds.fs" id="Snippet3":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromseconds.vb" id="Snippet3":::

 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromTicks">
      <MemberSignature Language="C#" Value="public static TimeSpan FromTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromTicks (value As Long) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member FromTicks : int64 -&gt; TimeSpan" Usage="System.TimeSpan.FromTicks value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromTicks(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">A number of ticks that represent a time.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where the specification is in units of ticks.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is a convenience method with the same behavior as the <xref:System.TimeSpan.%23ctor%28System.Int64%29?displayProperty=nameWithType> constructor. A single tick represents one hundred nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the <xref:System.TimeSpan.FromTicks%2A> method.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromticks.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/FromDays/fromticks.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/FromDays/fromticks.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromticks.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeSpan.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Two <xref:System.TimeSpan> objects might have the same hash code even though they represent different time values.  
  
   
  
## Examples  
 The following example generates the hash codes of several <xref:System.TimeSpan> objects using the <xref:System.TimeSpan.GetHashCode%2A> method.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/CPP/hashcode.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/GetHashCode/hashcode.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/GetHashCode/hashcode.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/VB/hashcode.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hours">
      <MemberSignature Language="C#" Value="public int Hours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hours" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Hours" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hours As Integer" />
      <MemberSignature Language="F#" Value="member this.Hours : int" Usage="System.TimeSpan.Hours" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hours { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the hours component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The hour component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -23 through 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. The value of the <xref:System.TimeSpan.Hours%2A> property is the hours component, *hh*.  
  
 The <xref:System.TimeSpan.Hours%2A> property represents whole hours, whereas the <xref:System.TimeSpan.TotalHours%2A> property represents whole and fractional hours.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the <xref:System.TimeSpan.Hours%2A> property of each.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Days/properties.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Days/properties.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : TimeSpan" Usage="System.TimeSpan.MaxValue" />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan MaxValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the maximum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this field is equivalent to <xref:System.Int64.MaxValue?displayProperty=nameWithType> ticks. The string representation of this value is positive 10675199.02:48:05.4775807, or slightly more than 10,675,199 days.  
  
   
  
## Examples  
 The following example references and displays the value of the <xref:System.TimeSpan.MaxValue> field.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/MaxValue/fields.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/MaxValue/fields.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Microseconds">
      <MemberSignature Language="C#" Value="public int Microseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Microseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Microseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Microseconds As Integer" />
      <MemberSignature Language="F#" Value="member this.Microseconds : int" Usage="System.TimeSpan.Microseconds" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Microseconds { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the microseconds component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The <xref:System.TimeSpan.Microseconds> property represents whole microseconds, whereas the
            <xref:System.TimeSpan.TotalMicroseconds> property represents whole and fractional microseconds.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Milliseconds">
      <MemberSignature Language="C#" Value="public int Milliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Milliseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Milliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Milliseconds As Integer" />
      <MemberSignature Language="F#" Value="member this.Milliseconds : int" Usage="System.TimeSpan.Milliseconds" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Milliseconds { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the milliseconds component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The millisecond component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -999 through 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. The value of the <xref:System.TimeSpan.Milliseconds%2A> property is the fractional second component, *ff*.  
  
 The <xref:System.TimeSpan.Milliseconds%2A> property represents whole milliseconds, whereas the <xref:System.TimeSpan.TotalMilliseconds%2A> property represents whole and fractional milliseconds.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the <xref:System.TimeSpan.Milliseconds%2A> property of each.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Days/properties.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Days/properties.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="Minutes">
      <MemberSignature Language="C#" Value="public int Minutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minutes" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Minutes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minutes As Integer" />
      <MemberSignature Language="F#" Value="member this.Minutes : int" Usage="System.TimeSpan.Minutes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minutes { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minutes component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The minute component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. The value of the <xref:System.TimeSpan.Minutes%2A> property is the minute component, *mm*.  
  
 The <xref:System.TimeSpan.Minutes%2A> property represents whole minutes, whereas the <xref:System.TimeSpan.TotalMinutes%2A> property represents whole and fractional minutes.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the <xref:System.TimeSpan.Minutes%2A> property of each.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Days/properties.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Days/properties.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MinValue" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : TimeSpan" Usage="System.TimeSpan.MinValue" />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan MinValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the minimum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this field is equivalent to <xref:System.Int64.MinValue?displayProperty=nameWithType> ticks. The string representation of this value is negative 10675199.02:48:05.4775808, or slightly more than negative 10,675,199 days.  
  
   
  
## Examples  
 The following example references and displays the value of the <xref:System.TimeSpan.MinValue> field.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/MaxValue/fields.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/MaxValue/fields.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public TimeSpan Multiply (double factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Multiply(float64 factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Multiply(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Multiply (factor As Double) As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.Multiply : double -&gt; TimeSpan" Usage="timeSpan.Multiply factor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Multiply(double factor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="factor">The value to be multiplied by.</param>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object which value is the result of multiplication of this instance and the specified <paramref name="factor" />.</summary>
        <returns>A new object that represents the value of this instance multiplied by the value of <paramref name="factor" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Nanoseconds">
      <MemberSignature Language="C#" Value="public int Nanoseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Nanoseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Nanoseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Nanoseconds As Integer" />
      <MemberSignature Language="F#" Value="member this.Nanoseconds : int" Usage="System.TimeSpan.Nanoseconds" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Nanoseconds { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the nanoseconds component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The <xref:System.TimeSpan.Nanoseconds> property represents whole nanoseconds, whereas the
            <xref:System.TimeSpan.TotalNanoseconds> property represents whole and fractional nanoseconds.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NanosecondsPerTick">
      <MemberSignature Language="C#" Value="public const long NanosecondsPerTick = 100;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 NanosecondsPerTick = (100)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.NanosecondsPerTick" />
      <MemberSignature Language="VB.NET" Value="Public Const NanosecondsPerTick As Long  = 100" />
      <MemberSignature Language="F#" Value="val mutable NanosecondsPerTick : int64" Usage="System.TimeSpan.NanosecondsPerTick" />
      <MemberSignature Language="C++ CLI" Value="public: long NanosecondsPerTick = 100;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>100</MemberValue>
      <Docs>
        <summary>Represents the number of nanoseconds per tick. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The value of this constant is 100.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public TimeSpan Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Function Negate () As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.Negate : unit -&gt; TimeSpan" Usage="timeSpan.Negate " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Negate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the negated value of this instance.</summary>
        <returns>A new object with the same numeric value as this instance, but with the opposite sign.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example applies the <xref:System.TimeSpan.Negate%2A> method to several <xref:System.TimeSpan> objects.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Duration/dura_nega_una.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Duration/dura_nega_una.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see>.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static TimeSpan operator + (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Addition(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (t1 As TimeSpan, t2 As TimeSpan) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ( + ) : TimeSpan * TimeSpan -&gt; TimeSpan" Usage="t1 + t2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator +(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to add.</param>
        <param name="t2">The second time interval to add.</param>
        <summary>Adds two specified <see cref="T:System.TimeSpan" /> instances.</summary>
        <returns>An object whose value is the sum of the values of <paramref name="t1" /> and <paramref name="t2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.op_Addition%2A> method defines the addition operator for <xref:System.TimeSpan> values. It enables code such as the following:  

 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/op_Addition/operators1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/op_Addition/operators1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.operators/vb/operators1.vb" id="Snippet1":::  
  
 Languages that do not support custom operators can call the <xref:System.TimeSpan.Add%2A> method instead.  
  
 The equivalent method for this operator is <xref:System.TimeSpan.Add%28System.TimeSpan%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.</exception>
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static TimeSpan operator / (TimeSpan timeSpan, double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Division(valuetype System.TimeSpan timeSpan, float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Division(System.TimeSpan,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (timeSpan As TimeSpan, divisor As Double) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ( / ) : TimeSpan * double -&gt; TimeSpan" Usage="timeSpan / divisor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator /(TimeSpan timeSpan, double divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="divisor" Type="System.Double" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="timeSpan">Dividend or the value to be divided.</param>
        <param name="divisor">The value to be divided by.</param>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object which value is the result of division of <paramref name="timeSpan" /> instance and the specified <paramref name="divisor" />.</summary>
        <returns>A new object that represents the value of <paramref name="timeSpan" /> instance divided by the value of <paramref name="divisor" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IDivisionOperators`3.op_Division(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static double operator / (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Division(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Division(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (t1 As TimeSpan, t2 As TimeSpan) As Double" />
      <MemberSignature Language="F#" Value="static member ( / ) : TimeSpan * TimeSpan -&gt; double" Usage="t1 / t2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator /(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="t2" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="t1">Divident or the value to be divided.</param>
        <param name="t2">The value to be divided by.</param>
        <summary>Returns a new <see cref="T:System.Double" /> value which is the result of division of <paramref name="t1" /> instance and the specified <paramref name="t2" />.</summary>
        <returns>A new value that represents result of division of <paramref name="t1" /> instance by the value of the <paramref name="t2" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IDivisionOperators`3.op_Division(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : TimeSpan * TimeSpan -&gt; bool" Usage="t1 = t2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are equal.</summary>
        <returns>
          <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the <xref:System.TimeSpan.op_Equality%2A> operator.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/op_Equality/relationalops.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/op_Equality/relationalops.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
        <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : TimeSpan * TimeSpan -&gt; bool" Usage="t1 &gt; t2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than another specified <see cref="T:System.TimeSpan" />.</summary>
        <returns>
          <see langword="true" /> if the value of <paramref name="t1" /> is greater than the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the <xref:System.TimeSpan.op_GreaterThan%2A> operator.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/op_Equality/relationalops.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/op_Equality/relationalops.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
        <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : TimeSpan * TimeSpan -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
        <returns>
          <see langword="true" /> if the value of <paramref name="t1" /> is greater than or equal to the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the <xref:System.TimeSpan.op_GreaterThanOrEqual%2A> operator.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/op_Equality/relationalops.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/op_Equality/relationalops.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
        <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : TimeSpan * TimeSpan -&gt; bool" Usage="System.TimeSpan.op_Inequality (t1, t2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are not equal.</summary>
        <returns>
          <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are not equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the <xref:System.TimeSpan.op_Inequality%2A> operator.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/op_Equality/relationalops.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/op_Equality/relationalops.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
        <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : TimeSpan * TimeSpan -&gt; bool" Usage="t1 &lt; t2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than another specified <see cref="T:System.TimeSpan" />.</summary>
        <returns>
          <see langword="true" /> if the value of <paramref name="t1" /> is less than the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the <xref:System.TimeSpan.op_LessThan%2A> operator.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/op_Equality/relationalops.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/op_Equality/relationalops.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
        <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : TimeSpan * TimeSpan -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
        <returns>
          <see langword="true" /> if the value of <paramref name="t1" /> is less than or equal to the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the <xref:System.TimeSpan.op_LessThanOrEqual%2A> operator.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/op_Equality/relationalops.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/op_Equality/relationalops.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
        <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static TimeSpan operator * (double factor, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Multiply(float64 factor, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Multiply(System.Double,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (factor As Double, timeSpan As TimeSpan) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ( * ) : double * TimeSpan -&gt; TimeSpan" Usage="factor * timeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator *(double factor, TimeSpan timeSpan);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="factor">The value to be multiplied by.</param>
        <param name="timeSpan">The value to be multiplied.</param>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the result of multiplying the specified <paramref name="factor" /> and the specified <paramref name="timeSpan" /> instance.</summary>
        <returns>A new object that represents the value of the specified <paramref name="factor" /> multiplied by the value of the specified <paramref name="timeSpan" /> instance.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IMultiplyOperators`3.op_Multiply(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static TimeSpan operator * (TimeSpan timeSpan, double factor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Multiply(valuetype System.TimeSpan timeSpan, float64 factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Multiply(System.TimeSpan,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (timeSpan As TimeSpan, factor As Double) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ( * ) : TimeSpan * double -&gt; TimeSpan" Usage="timeSpan * factor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator *(TimeSpan timeSpan, double factor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="factor" Type="System.Double" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="timeSpan">The value to be multiplied.</param>
        <param name="factor">The value to be multiplied by.</param>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the result of multiplying the specified <paramref name="timeSpan" /> instance and the specified <paramref name="factor" />.</summary>
        <returns>A new object that represents the value of the specified <paramref name="timeSpan" /> instance multiplied by the value of the specified <paramref name="factor" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IMultiplyOperators`3.op_Multiply(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (t1 As TimeSpan, t2 As TimeSpan) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ( - ) : TimeSpan * TimeSpan -&gt; TimeSpan" Usage="t1 - t2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(TimeSpan t1, TimeSpan t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The minuend.</param>
        <param name="t2">The subtrahend.</param>
        <summary>Subtracts a specified <see cref="T:System.TimeSpan" /> from another specified <see cref="T:System.TimeSpan" />.</summary>
        <returns>An object whose value is the result of the value of <paramref name="t1" /> minus the value of <paramref name="t2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 The following example uses the <xref:System.TimeSpan> subtraction operator to calculate the total length of the weekly work day. It also uses the <xref:System.TimeSpan> addition operator to compute the total time of the daily breaks before using it in a subtraction operation to compute the total actual daily working time.  

 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/op_Addition/Subtraction1.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/op_Addition/Subtraction1.fs" id="Snippet2":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.operators/vb/Subtraction1.vb" id="Snippet2":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryNegation(valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (t As TimeSpan) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : TimeSpan -&gt; TimeSpan" Usage="- t" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">The time interval to be negated.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of the specified instance.</summary>
        <returns>An object that has the same numeric value as this instance, but the opposite sign.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.TimeSpan.Negate?displayProperty=nameWithType>  
  
## Examples  
 The following example applies the <xref:System.TimeSpan.op_UnaryNegation%2A> operator to several <xref:System.TimeSpan> objects.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Duration/dura_nega_una.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Duration/dura_nega_una.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see>.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static TimeSpan operator + (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryPlus(valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (t As TimeSpan) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ( ~+ ) : TimeSpan -&gt; TimeSpan" Usage="+ t" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator +(TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">The time interval to return.</param>
        <summary>Returns the specified instance of <see cref="T:System.TimeSpan" />.</summary>
        <returns>The time interval specified by <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example applies the <xref:System.TimeSpan.op_UnaryPlus%2A> operator to several <xref:System.TimeSpan> objects.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Duration/dura_nega_una.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Duration/dura_nega_una.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.TimeSpan.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; TimeSpan" Usage="System.TimeSpan.Parse s" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string that specifies the time interval to convert.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent.</summary>
        <returns>A time interval that corresponds to <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `s` parameter contains a time interval specification in the form:  
  
 [*ws*][-]{ *d* &#124; [*d*.]*hh*:*mm*[:*ss*[.*ff*]] }[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|-|An optional minus sign, which indicates a negative <xref:System.TimeSpan>.|  
|*d*|Days, ranging from 0 to 10675199.|  
|.|A culture-sensitive symbol that separates days from hours. The invariant format uses a period (".") character.|  
|*hh*|Hours, ranging from 0 to 23.|  
|:|The culture-sensitive time separator symbol. The invariant format uses a colon (":") character.|  
|*mm*|Minutes, ranging from 0 to 59.|  
|*ss*|Optional seconds, ranging from 0 to 59.|  
|*.*|A culture-sensitive symbol that separates seconds from fractions of a second. The invariant format uses a period (".") character.|  
|*ff*|Optional fractional seconds, consisting of one to seven decimal digits.|  

If the `s` argument is not a day value only, it must include an hours and a minutes component; other components are optional. If they are present, the values of each time component must fall within a specified range. For example, the value of *hh*, the hours component, must be between 0 and 23. Because of this, passing "23:00:00" to the <xref:System.TimeSpan.Parse%2A> method returns a time interval of 23 hours. On the other hand, passing "24:00:00" returns a time interval of 24 days. Because "24" is outside the range of the hours component, it is interpreted as the days component.

 The components of `s` must collectively specify a time interval that is greater than or equal to <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> and less than or equal to <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 The <xref:System.TimeSpan.Parse%28System.String%29> method tries to parse `s` by using each of the culture-specific formats for the current culture.  

## Notes to callers  
   
When a time interval component in the string to be parsed contains more than seven digits, parsing operations in the .NET Framework 3.5 and earlier versions may behave differently from parsing operations in the .NET Framework 4 and later versions. In some cases, parsing operations that succeed in the .NET Framework 3.5 and earlier versions may fail and throw an <xref:System.OverflowException> in the .NET Framework 4 and later. In other cases, parsing operations that throw a <xref:System.FormatException> in the .NET Framework 3.5 and earlier versions may fail and throw an <xref:System.OverflowException> in the .NET Framework 4 and later. The following example illustrates both scenarios.  
  
:::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Parse/parsefailure1.cs" interactive="try-dotnet-method" id="Snippet3":::
:::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Parse/parsefailure1.fs" id="Snippet3":::
:::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parsefailure1.vb" id="Snippet3":::
 
## Examples  
 The following example uses the <xref:System.TimeSpan.Parse%2A> method to convert each element in a string array to a <xref:System.TimeSpan> value. It changes the current system culture to Croatian - Croatia ("hr-HR") and English - United States ("en-US") to illustrate how the current system culture affects the parsing operation.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Parse/parse1.cs" interactive="try-dotnet" id="Snippet1"::: 
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Parse/parse1.fs" id="Snippet1"::: 
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parse1.vb" id="Snippet1"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components is outside its valid range.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider? formatProvider = default);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = Nothing) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; TimeSpan" Usage="System.TimeSpan.Parse (input, formatProvider)" />
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = default);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-7.0">M:System.ISpanParsable`1.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="input">A span containing the characters that represent the time interval to convert.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific format information.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string input, IFormatProvider formatProvider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; TimeSpan" Usage="System.TimeSpan.Parse (input, formatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan Parse(System::String ^ input, IFormatProvider ^ formatProvider);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string input, IFormatProvider? formatProvider);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan Parse(System::String ^ input, IFormatProvider ^ formatProvider) = IParsable&lt;TimeSpan&gt;::Parse;" FrameworkAlternate="net-7.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-7.0">M:System.IParsable`1.Parse(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific format information.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `input` parameter contains a time interval specification in the form:  
  
 [*ws*][-]{ *d* &#124; [*d*.]*hh*:*mm*[:*ss*[.*ff*]] }[*ws*]  
  
 Elements in square brackets ([ and ]) are optional; one selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|-|An optional minus sign, which indicates a negative <xref:System.TimeSpan>.|  
|*d*|Days, ranging from 0 to 10675199.|  
|.|A culture-sensitive symbol that separates days from hours. The default value is a period (".") character.|  
|*hh*|Hours, ranging from 0 to 23.|  
|:|The culture-sensitive time separator symbol.|  
|*mm*|Minutes, ranging from 0 to 59.|  
|*ss*|Optional seconds, ranging from 0 to 59.|  
|.|A culture-sensitive symbol that separates seconds from fractions of a second. The default value is a period (".") character.|  
|*ff*|Optional fractional seconds, consisting of one to seven decimal digits.|  

If the `input` argument is not a day value only, it must include an hours and a minutes component; other components are optional. If they are present, the values of each time component must fall within a specified range. For example, the value of *hh*, the hours component, must be between 0 and 23. Because of this, passing "23:00:00" to the <xref:System.TimeSpan.Parse%2A> method returns a time interval of 23 hours. On the other hand, passing "24:00:00" returns a time interval of 24 days. Because "24" is outside the range of the hours component, it is interpreted as the days component.

 The components of `input` must collectively specify a time interval that is greater than or equal to <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> and less than or equal to <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 The <xref:System.TimeSpan.Parse%28System.String%29> method tries to parse `input` by using each of the culture-specific formats for the culture specified by `formatProvider`.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
## Notes to callers  
   
When a time interval component in the string to be parsed contains more than seven digits, parsing operations in the .NET Framework 3.5 and earlier versions may behave differently from parsing operations in the .NET Framework 4 and later versions. In some cases, parsing operations that succeed in the .NET Framework 3.5 and earlier versions may fail and throw an <xref:System.OverflowException> in the .NET Framework 4 and later. In other cases, parsing operations that throw a <xref:System.FormatException> in the .NET Framework 3.5 and earlier versions may fail and throw an <xref:System.OverflowException> in the .NET Framework 4 and later. The following example illustrates both scenarios.  
   
:::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Parse/parsefailure1.cs" interactive="try-dotnet-method" id="Snippet3":::
:::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Parse/parsefailure1.fs" id="Snippet3":::
:::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parsefailure1.vb" id="Snippet3":::

## Examples  
 The following example defines an array of <xref:System.Globalization.CultureInfo> objects, and uses each object in calls to the <xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29> method to parse the elements in a string array. The example illustrates how the conventions of a specific culture influence the formatting operation.  
 
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Parse/parse2.cs" interactive="try-dotnet" id="Snippet2"::: 
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Parse/parse2.fs" id="Snippet2"::: 
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parse2.vb" id="Snippet2"::: 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent. The format of the string representation must match a specified format exactly.</summary>
        <altmember cref="Overload:System.TimeSpan.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, format, formatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider? formatProvider);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> method parses the string representation of a time interval, which must be in the format defined by the `format` parameter, except that leading and trailing white-space characters are ignored. Because `input` must conform to the format of `format` exactly, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> method instead.  
  
 The `format` parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings).  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.ParseExact%2A> method uses the conventions of the culture specified by the `formatProvider` parameter only if `format` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if `format` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
   
  
## Examples  
 The following example uses the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> method to parse several string representations of time intervals using various format strings and cultures.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/ParseExact/parseexactexample1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/ParseExact/parseexactexample1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings">Standard TimeSpan Format Strings</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings">Custom TimeSpan Format Strings</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, formats, formatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider? formatProvider);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formats">An array of standard or custom format strings that defines the required format of <paramref name="input" />.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified array of format strings and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" /> and <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> method parses the string representation of a time interval, which must be in one of the formats defined by the `formats` parameter, except that leading and trailing white-space characters are ignored. Because `input` must exactly conform to one of the formats specified in `formats`, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> method instead.  
  
 The `formats` parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings). `input` must correspond exactly to a member of `formats` for the parse operation to succeed. The parse operation attempts to match `input` to each element in `formats` starting with the first element in the array.  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.ParseExact%2A> method uses the conventions of the culture specified by the `formatProvider` parameter only if the format string used to parse `input` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if the format string used to parse `input` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
   
  
## Examples  
 The following example calls the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29> method to convert each element of a string array to a <xref:System.TimeSpan> value. The example interprets the strings using the formatting conventions of the French - France ("fr-FR") culture. The strings can represent a time interval in either the general short format or the general long format.  
  
 In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the `%h` custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the `%h` custom format string must precede the other format strings in the `formats` array.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/ParseExact/parseexactexample3.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/ParseExact/parseexactexample3.fs" id="Snippet3":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample3.vb" id="Snippet3":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
        <altmember cref="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)" />
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings">Standard TimeSpan Format Strings</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings">Custom TimeSpan Format Strings</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles = System.Globalization.TimeSpanStyles.None);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As TimeSpanStyles = System.Globalization.TimeSpanStyles.None) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.TimeSpanStyles -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, format, formatProvider, styles)" />
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles = System.Globalization.TimeSpanStyles.None);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="input">A span that specifies the time interval to convert.</param>
        <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in <paramref name="input" />.</param>
        <summary>Converts the char span of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles = System.Globalization.TimeSpanStyles.None);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As TimeSpanStyles = System.Globalization.TimeSpanStyles.None) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.TimeSpanStyles -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, formats, formatProvider, styles)" />
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles = System.Globalization.TimeSpanStyles.None);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="input">A span that specifies the time interval to convert.</param>
        <param name="formats">An array of standard or custom format strings that define the required format of <paramref name="input" />.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in input.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As TimeSpanStyles) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.TimeSpanStyles -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, format, formatProvider, styles)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles);" />
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in <paramref name="input" />.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles. The format of the string representation must match the specified format exactly.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.ParseExact%2A> method parses the string representation of a time interval, which must be in the format defined by the `format` parameter, except that leading and trailing white-space characters are ignored. Because `input` must conform to the format of `format` exactly, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> method instead.  
  
 The `format` parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings).  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.ParseExact%2A> method uses the conventions of the culture specified by the `formatProvider` parameter only if `format` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if `format` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
 The `styles` parameter affects the interpretation of strings that are parsed using custom format strings. It determines whether `input` is interpreted as a negative time interval only if a negative sign is present (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), or whether it is always interpreted as a negative time interval (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). If <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> is not used, `format` must include a literal negative sign symbol (such as "\\-") to successfully parse a negative time interval.  
  
   
  
## Examples  
 The following example uses the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> method to parse several string representations of time intervals using various format strings and cultures. It also uses the <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> value to interpret each string as a negative time interval. The output from the example illustrates that the <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> style affects the return value only when it is used with custom format strings.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/ParseExact/parseexactexample2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/ParseExact/parseexactexample2.fs" id="Snippet2":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample2.vb" id="Snippet2":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings">Standard TimeSpan Format Strings</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings">Custom TimeSpan Format Strings</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As TimeSpanStyles) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.TimeSpanStyles -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, formats, formatProvider, styles)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles);" />
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formats">An array of standard or custom format strings that define the required format of <paramref name="input" />.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in input.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> method parses the string representation of a time interval, which must be in one of the formats defined by the `formats` parameter, except that leading and trailing white-space characters are ignored. Because `input` must exactly conform to one of the formats specified in `formats`, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> method instead.  
  
 The `formats` parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings). `input` must correspond exactly to a member of `formats` for the parse operation to succeed. The parse operation attempts to match `input` to each element in `formats` starting with the first element in the array.  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.ParseExact%2A> method uses the conventions of the culture specified by the `formatProvider` parameter only if the format string used to parse `input` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if the format string used to parse `input` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
 The `styles` parameter affects the interpretation of strings that are parsed using custom format strings. It determines whether `input` is interpreted as a negative time interval only if a negative sign is present (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), or whether it is always interpreted as a negative time interval (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). If <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> is not used, `format` must include a literal negative sign symbol (such as "\\-") to successfully parse a negative time interval.  
  
   
  
## Examples  
 The following example calls the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> method to convert each element of a string array to a <xref:System.TimeSpan> value. The strings can represent a time interval in either the general short format or the general long format.  
  
 In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the `%h` custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the `%h` custom format string must precede the other format strings in the `formats` array. Also note from the output that the <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> flag specified in the method call is used only when parsing a string with this format specifier.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/ParseExact/parseexactexample4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/ParseExact/parseexactexample4.fs" id="Snippet4":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample4.vb" id="Snippet4":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings">Standard TimeSpan Format Strings</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings">Custom TimeSpan Format Strings</related>
      </Docs>
    </Member>
    <Member MemberName="Seconds">
      <MemberSignature Language="C#" Value="public int Seconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Seconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Seconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Seconds As Integer" />
      <MemberSignature Language="F#" Value="member this.Seconds : int" Usage="System.TimeSpan.Seconds" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Seconds { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the seconds component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The second component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. The value of the <xref:System.TimeSpan.Seconds%2A> property is the seconds component, *ss*.  
  
 The <xref:System.TimeSpan.Seconds%2A> property represents whole seconds, whereas the <xref:System.TimeSpan.TotalSeconds%2A> property represents whole and fractional seconds.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the <xref:System.TimeSpan.Seconds%2A> property of each.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Days/properties.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Days/properties.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (ts As TimeSpan) As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; TimeSpan" Usage="timeSpan.Subtract ts" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(TimeSpan ts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">The time interval to be subtracted.</param>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the difference between the specified <see cref="T:System.TimeSpan" /> object and this instance.</summary>
        <returns>A new time interval whose value is the result of the value of this instance minus the value of <paramref name="ts" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value must be between <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> and <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>; otherwise, an exception is thrown.  
  
 The return value is a new <xref:System.TimeSpan>; the original <xref:System.TimeSpan> is not modified.  
  
   
  
## Examples  
 The following example uses the <xref:System.TimeSpan.Subtract%2A> method to calculate the difference between a single <xref:System.TimeSpan> value and each of the time intervals in an array. Note that, because <xref:System.TimeSpan> format strings do not include negative signs in the result string, the example uses conditional logic to include a negative sign with negative time intervals.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Subtract/subtract1.cs" interactive="try-dotnet-method" id="Snippet1":::  
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Subtract/subtract1.fs" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="timeSpan.System.IComparable.CompareTo value" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">An object to compare, or <see langword="null" />.</param>
        <summary>Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object.</summary>
        <returns>
          One of the following values:
          <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>-1</term><description>This instance is shorter than <paramref name="value" />.</description></item><item><term>0</term><description>This instance is equal to <paramref name="value" />.</description></item><item><term>1</term><description>This instance is longer than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.</description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This member is an explicit interface member implementation. It can be used only when the <xref:System.TimeSpan> instance is cast to an <xref:System.IComparable> interface.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.TimeSpan.Ticks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represent the value of the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The number of ticks contained in this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The smallest unit of time is the tick, which is equal to 100 nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond. The value of the <xref:System.TimeSpan.Ticks%2A> property can be negative or positive to represent a negative or positive time interval.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the <xref:System.TimeSpan.Ticks%2A> property of each.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/Days/properties.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/Days/properties.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerDay">
      <MemberSignature Language="C#" Value="public const long TicksPerDay = 864000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerDay = (864000000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerDay" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerDay As Long  = 864000000000" />
      <MemberSignature Language="F#" Value="val mutable TicksPerDay : int64" Usage="System.TimeSpan.TicksPerDay" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerDay = 864000000000;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>864000000000</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 day. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 864 billion; that is, 864,000,000,000.  
  
   
  
## Examples  
 The following example references and displays the value of the <xref:System.TimeSpan.TicksPerDay> field.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/MaxValue/fields.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/MaxValue/fields.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerHour">
      <MemberSignature Language="C#" Value="public const long TicksPerHour = 36000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerHour = (36000000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerHour" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerHour As Long  = 36000000000" />
      <MemberSignature Language="F#" Value="val mutable TicksPerHour : int64" Usage="System.TimeSpan.TicksPerHour" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerHour = 36000000000;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>36000000000</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 hour. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 36 billion; that is, 36,000,000,000.  
  
   
  
## Examples  
 The following example references and displays the value of the <xref:System.TimeSpan.TicksPerHour> field.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/MaxValue/fields.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/MaxValue/fields.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerMicrosecond">
      <MemberSignature Language="C#" Value="public const long TicksPerMicrosecond = 10;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMicrosecond = (10)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMicrosecond" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerMicrosecond As Long  = 10" />
      <MemberSignature Language="F#" Value="val mutable TicksPerMicrosecond : int64" Usage="System.TimeSpan.TicksPerMicrosecond" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerMicrosecond = 10;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 microsecond. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The value of this constant is 10.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TicksPerMillisecond">
      <MemberSignature Language="C#" Value="public const long TicksPerMillisecond = 10000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMillisecond = (10000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMillisecond" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerMillisecond As Long  = 10000" />
      <MemberSignature Language="F#" Value="val mutable TicksPerMillisecond : int64" Usage="System.TimeSpan.TicksPerMillisecond" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerMillisecond = 10000;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 millisecond. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 10 thousand; that is, 10,000.  
  
   
  
## Examples  
 The following example references and displays the value of the <xref:System.TimeSpan.TicksPerMillisecond> field.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/MaxValue/fields.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/MaxValue/fields.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerMinute">
      <MemberSignature Language="C#" Value="public const long TicksPerMinute = 600000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMinute = (600000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMinute" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerMinute As Long  = 600000000" />
      <MemberSignature Language="F#" Value="val mutable TicksPerMinute : int64" Usage="System.TimeSpan.TicksPerMinute" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerMinute = 600000000;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>600000000</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 minute. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 600 million; that is, 600,000,000.  
  
   
  
## Examples  
 The following example references and displays the value of the <xref:System.TimeSpan.TicksPerMinute> field.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/MaxValue/fields.cs" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/MaxValue/fields.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerSecond">
      <MemberSignature Language="C#" Value="public const long TicksPerSecond = 10000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerSecond = (10000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerSecond" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerSecond As Long  = 10000000" />
      <MemberSignature Language="F#" Value="val mutable TicksPerSecond : int64" Usage="System.TimeSpan.TicksPerSecond" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerSecond = 10000000;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000000</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 second.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 10 million; that is, 10,000,000.  
  
   
  
## Examples  
 The following example references and displays the value of the <xref:System.TimeSpan.TicksPerSecond> field.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/MaxValue/fields.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/MaxValue/fields.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb" id="Snippet1"::: 
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeSpan.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation.</summary>
        <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The returned string is formatted with the "c" format specifier and has the following format:  
  
 [-][*d*.]*hh*:*mm*:*ss*[.*fffffff*]  
  
 Elements in square brackets ([ and ]) may not be included in the returned string. Colons and periods (: and.) are literal characters. The non-literal elements are listed in the following table. Note that the string returned by the <xref:System.TimeSpan.ToString> method is not culture-sensitive.  
  
|Item|Description|  
|----------|-----------------|  
|"-"|A minus sign, which indicates a negative time interval. No sign is included for a positive time span.|  
|"*d*"|The number of days in the time interval. This element is omitted if the time interval is less than one day.|  
|"*hh*"|The number of hours in the time interval, ranging from 0 to 23.|  
|"*mm*"|The number of minutes in the time interval, ranging from 0 to 59.|  
|"*ss*"|The number of seconds in the time interval, ranging from 0 to 59.|  
|"*fffffff*"|Fractional seconds in the time interval. This element is omitted if the time interval does not include fractional seconds. If present, fractional seconds are always expressed using seven decimal digits.|
  
## Examples  
 The following example displays the strings returned by calling the <xref:System.TimeSpan.ToString%2A> method with a number of <xref:System.TimeSpan> values. Note that although the example does not call the <xref:System.TimeSpan.ToString%2A> method directly, it is called by the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method when it attempts to convert a <xref:System.TimeSpan> value to its string representation.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/ToString/ToString1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/ToString/ToString1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/ToString1.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Support for formatting <see cref="T:System.TimeSpan" /> values was added in the .NET Framework 4. However, the <see cref="M:System.TimeSpan.ToString" /> method overload remains culture-insensitive. Its behavior remains unchanged from previous versions of the .NET Framework. To control the formatting of a <see cref="T:System.TimeSpan" /> value, call the <see cref="M:System.TimeSpan.ToString(System.String)" /> or <see cref="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" /> overload.</para>
        </block>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.TimeSpan.Parse(System.String)" />
        <altmember cref="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="timeSpan.ToString format" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="C#" Value="public string ToString (string? format);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A standard or custom <see cref="T:System.TimeSpan" /> format string.</param>
        <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation by using the specified format.</summary>
        <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value in the format specified by the <paramref name="format" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `format` parameter can be any valid standard or custom format specifier for <xref:System.TimeSpan> values. If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.TimeSpan> object is formatted with the common format specifier ("c"). If `format` is any other value, the method throws a <xref:System.FormatException>.  
  
 If `format` is a standard format string, the format of the returned string is defined by the formatting conventions of the current culture.  
  
> [!IMPORTANT]
>  The custom format strings for <xref:System.TimeSpan> values do not include a date or time separator. If you want to include these elements in your format string, you must treat them as character literals. See the example for an illustration, and see the [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings) topic for more information.  
  
.NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  
  
-   For more information about format strings for <xref:System.TimeSpan> values, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings).  
  
-   For more information about support for formatting in .NET, see [Formatting Types](/dotnet/standard/base-types/formatting-types).  
  
   
  
## Examples  
 The following example uses standard and custom <xref:System.TimeSpan> format strings to display the string representation of each element in an array of <xref:System.TimeSpan> values  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/ToString/tostring3.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/ToString/tostring3.fs" id="Snippet3":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/tostring3.vb" id="Snippet3":::  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings">Standard TimeSpan Format Strings</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings">Custom TimeSpan Format Strings</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="timeSpan.ToString (format, formatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="C#" Value="public string ToString (string? format, IFormatProvider? formatProvider);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom <see cref="T:System.TimeSpan" /> format string.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation by using the specified format and culture-specific formatting information.</summary>
        <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `format` parameter can be any valid standard or custom format specifier for <xref:System.TimeSpan> values. If `format` is equal to <xref:System.String.Empty?displayProperty=nameWithType> or is `null`, the return value of the current <xref:System.TimeSpan> object is formatted with the common format specifier ("c"). If format is any other value, the method throws a <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  The custom format strings for <xref:System.TimeSpan> values do not include a date or time separator. If you want to include these elements in your format string, you must treat them as character literals. See the example for an illustration, and see the [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings) topic for more information.  
  
.NET provides extensive formatting support, which is described in greater detail in the following formatting topics:  
  
-   For more information about format strings for <xref:System.TimeSpan> values, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings).  
  
-   For more information about support for formatting in .NET, see [Formatting Types](/dotnet/standard/base-types/formatting-types).  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used. If `format` is a custom format string, the `formatProvider` parameter is ignored.  
  
   
  
## Examples  
 The following example calls the <xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29> method to format two time intervals. The example calls the method twice for each format string, first to display it using the conventions of the en-US culture and then to display it using the conventions of the fr-FR culture.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/ToString/tostring4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/ToString/tostring4.fs" id="Snippet4":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/tostring4.vb" id="Snippet4":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings">Standard TimeSpan Format Strings</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings">Custom TimeSpan Format Strings</related>
      </Docs>
    </Member>
    <Member MemberName="TotalDays">
      <MemberSignature Language="C#" Value="public double TotalDays { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalDays" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalDays" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalDays As Double" />
      <MemberSignature Language="F#" Value="member this.TotalDays : double" Usage="System.TimeSpan.TotalDays" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalDays { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional days.</summary>
        <value>The total number of days represented by this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property converts the value of this instance from ticks to days. This number might include whole and fractional days.  
  
 The <xref:System.TimeSpan.TotalDays%2A> property represents whole and fractional days, whereas the <xref:System.TimeSpan.Days%2A> property represents whole days.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object and displays the value of its <xref:System.TimeSpan.TotalDays%2A> property. It also displays the value of each component (hours, minutes, seconds, milliseconds) that forms the fractional part of the value of its <xref:System.TimeSpan.TotalDays%2A> property.  
 
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TotalDays/totaldays.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TotalDays/totaldays.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totaldays/vb/totaldays.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Days" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
      </Docs>
    </Member>
    <Member MemberName="TotalHours">
      <MemberSignature Language="C#" Value="public double TotalHours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalHours" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalHours" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalHours As Double" />
      <MemberSignature Language="F#" Value="member this.TotalHours : double" Usage="System.TimeSpan.TotalHours" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalHours { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional hours.</summary>
        <value>The total number of hours represented by this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property converts the value of this instance from ticks to hours. This number might include whole and fractional hours.  
  
 The <xref:System.TimeSpan.TotalHours%2A> property represents whole and fractional hours, whereas the <xref:System.TimeSpan.Hours%2A> property represents whole hours.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object and displays the value its <xref:System.TimeSpan.TotalHours%2A> property. It also displays the value of each component (hours, minutes, seconds, and milliseconds) that forms the fractional part of the value of its <xref:System.TimeSpan.TotalHours%2A> property.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TotalHours/totalhours.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TotalHours/totalhours.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalhours/vb/totalhours.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalMicroseconds">
      <MemberSignature Language="C#" Value="public double TotalMicroseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMicroseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMicroseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalMicroseconds As Double" />
      <MemberSignature Language="F#" Value="member this.TotalMicroseconds : double" Usage="System.TimeSpan.TotalMicroseconds" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalMicroseconds { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional microseconds.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This property converts the value of this instance from ticks to microseconds.
             This number might include whole and fractional microseconds.
            
             The <xref:System.TimeSpan.TotalMicroseconds> property represents whole and fractional microseconds,
             whereas the <xref:System.TimeSpan.Microseconds> property represents whole microseconds.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalMilliseconds">
      <MemberSignature Language="C#" Value="public double TotalMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalMilliseconds As Double" />
      <MemberSignature Language="F#" Value="member this.TotalMilliseconds : double" Usage="System.TimeSpan.TotalMilliseconds" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalMilliseconds { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional milliseconds.</summary>
        <value>The total number of milliseconds represented by this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property converts the value of this instance from ticks to milliseconds. This number might include whole and fractional milliseconds.  
  
 The <xref:System.TimeSpan.TotalMilliseconds%2A> property represents whole and fractional milliseconds, whereas the <xref:System.TimeSpan.Milliseconds%2A> property represents whole milliseconds.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object and displays the value of its <xref:System.TimeSpan.TotalMilliseconds%2A> property.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TotalMilliseconds/totalmilliseconds.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TotalMilliseconds/totalmilliseconds.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalmilliseconds/vb/totalmilliseconds.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalMinutes">
      <MemberSignature Language="C#" Value="public double TotalMinutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMinutes" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMinutes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalMinutes As Double" />
      <MemberSignature Language="F#" Value="member this.TotalMinutes : double" Usage="System.TimeSpan.TotalMinutes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalMinutes { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional minutes.</summary>
        <value>The total number of minutes represented by this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property converts the value of this instance from ticks to minutes. This number might include whole and fractional minutes.  
  
 The <xref:System.TimeSpan.TotalMinutes%2A> property represents whole and fractional minutes, whereas the <xref:System.TimeSpan.Minutes%2A> property represents whole minutes.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object and displays the value of its <xref:System.TimeSpan.TotalMinutes%2A> property. It also displays the value of each component (seconds, milliseconds) that forms the fractional part of the value of its <xref:System.TimeSpan.TotalMinutes%2A> property.  
 
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TotalMinutes/totalminutes.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TotalMinutes/totalminutes.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalminutes/vb/totalminutes.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalNanoseconds">
      <MemberSignature Language="C#" Value="public double TotalNanoseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalNanoseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalNanoseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalNanoseconds As Double" />
      <MemberSignature Language="F#" Value="member this.TotalNanoseconds : double" Usage="System.TimeSpan.TotalNanoseconds" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalNanoseconds { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional nanoseconds.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This property converts the value of this instance from ticks to nanoseconds.
             This number might include whole and fractional nanoseconds.
            
             The <xref:System.TimeSpan.TotalNanoseconds> property represents whole and fractional nanoseconds,
             whereas the <xref:System.TimeSpan.Nanoseconds> property represents whole nanoseconds.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalSeconds">
      <MemberSignature Language="C#" Value="public double TotalSeconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalSeconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalSeconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalSeconds As Double" />
      <MemberSignature Language="F#" Value="member this.TotalSeconds : double" Usage="System.TimeSpan.TotalSeconds" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalSeconds { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional seconds.</summary>
        <value>The total number of seconds represented by this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property converts the value of this instance from ticks to seconds. This number might include whole and fractional seconds.  
  
 The <xref:System.TimeSpan.TotalSeconds%2A> property represents whole and fractional seconds, whereas the <xref:System.TimeSpan.Seconds%2A> property represents whole seconds.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object and displays the value of its <xref:System.TimeSpan.TotalSeconds%2A> property. It also displays the value of its milliseconds component, which forms the fractional part of the value of its <xref:System.TimeSpan.TotalSeconds%2A> property.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TotalSeconds/totalseconds.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TotalSeconds/totalseconds.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalseconds/vb/totalseconds.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider? formatProvider = default);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = Nothing, Optional formatProvider As IFormatProvider = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="timeSpan.TryFormat (destination, charsWritten, format, formatProvider)" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" FrameworkAlternate="net-6.0;net-7.0" />
      <MemberSignature Language="F#" Value="abstract member TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool&#xA;override this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="timeSpan.TryFormat (destination, charsWritten, format, formatProvider)" FrameworkAlternate="net-6.0;net-7.0" />
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider formatProvider = default);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-6.0;net-7.0">M:System.ISpanFormattable.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="destination">The span in which to write this instance's value formatted as a span of characters.</param>
        <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination" />.</param>
        <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
        <param name="formatProvider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
        <summary>Tries to format the value of the current timespan number instance into the provided span of characters.</summary>
        <returns>
          <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.TimeSpan.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParse (s, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="s">A span containing the characters representing the time interval to convert.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="s" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out TimeSpan result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : string * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParse (s, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParse (string? s, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">A string that specifies the time interval to convert.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="s" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.TryParse%2A> method is like the <xref:System.TimeSpan.Parse%28System.String%29?displayProperty=nameWithType> method, except that it does not throw an exception if the conversion fails.  
  
 The `s` parameter contains a time interval specification in the form:  
  
 [*ws*][-]{ *d* &#124; *d*.*hh*:*mm*[:*ss*[.*ff*]] &#124; *hh*:*mm*[:*ss*[.*ff*]] }[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|-|An optional minus sign, which indicates a negative <xref:System.TimeSpan>.|  
|*d*|Days, ranging from 0 to 10675199.|  
|.|A culture-sensitive symbol that separates days from hours. The invariant format uses a period (".") character.|  
|*hh*|Hours, ranging from 0 to 23.|  
|:|The culture-sensitive time separator symbol. The invariant format uses a colon (":") character.|  
|*mm*|Minutes, ranging from 0 to 59.|  
|*ss*|Optional seconds, ranging from 0 to 59.|  
|.|A culture-sensitive symbol that separates seconds from fractions of a second. The invariant format uses a period (".") character.|  
|*ff*|Optional fractional seconds, consisting of one to seven decimal digits.|  
  
 The components of `s` must collectively specify a time interval that is greater than or equal to <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> and less than or equal to <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 The <xref:System.TimeSpan.Parse%28System.String%29> method tries to parse `s` by using each of the culture-specific formats for the current culture.  

## Notes to callers

In some cases, when a time interval component in the string to be parsed contains more than seven digits, parsing operations that succeed in the .NET Framework 3.5 and earlier versions may fail and throw an <xref:System.OverflowException> in the .NET Framework 4 and later versions. The following example illustrates this scenario.  
:::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TryParse/tryparsefailure1.cs" id="Snippet3":::
:::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TryParse/tryparsefailure1.fs" id="Snippet3":::
:::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparsefailure1.vb" id="Snippet3":::

## Examples  
 The following example uses the <xref:System.TimeSpan.TryParse%2A> method to create <xref:System.TimeSpan> objects from valid <xref:System.TimeSpan> strings and to indicate when the parse operation has failed because the time span string is invalid.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TryParse/TryParse1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TryParse/TryParse1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/TryParse1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider? formatProvider, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParse (input, formatProvider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" FrameworkAlternate="net-5.0;net-6.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result) = ISpanParsable&lt;TimeSpan&gt;::TryParse;" FrameworkAlternate="net-7.0" />
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, out TimeSpan result);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="input">A span containing the characters representing the time interval to convert.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="input" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, out TimeSpan result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParse (input, formatProvider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static bool TryParse (string? input, IFormatProvider? formatProvider, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result) = IParsable&lt;TimeSpan&gt;::TryParse;" FrameworkAlternate="net-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="input" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue">TimeSpan.MinValue</see> or greater than <see cref="F:System.TimeSpan.MaxValue">TimeSpan.MaxValue</see>, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> method is like the <xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.  
  
 The `input` parameter contains a time interval specification in the form:  
  
 [*ws*][-]{ *d* &#124; *d*.*hh*:*mm*[:*ss*[.*ff*]] &#124; *hh*:*mm*[:*ss*[.*ff*]] }[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|-|An optional minus sign, which indicates a negative <xref:System.TimeSpan>.|  
|*d*|Days, ranging from 0 to 10675199.|  
|.|A culture-sensitive symbol that separates days from hours. The invariant format uses a period (".") character.|  
|*hh*|Hours, ranging from 0 to 23.|  
|:|The culture-sensitive time separator symbol. The invariant format uses a colon (":") character.|  
|*mm*|Minutes, ranging from 0 to 59.|  
|*ss*|Optional seconds, ranging from 0 to 59.|  
|.|A culture-sensitive symbol that separates seconds from fractions of a second. The invariant format uses a period (".") character.|  
|*ff*|Optional fractional seconds, consisting of one to seven decimal digits.|  
  
 The components of `input` must collectively specify a time interval that is greater than or equal to <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> and less than or equal to <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 The <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> method tries to parse `input` by using each of the culture-specific formats for the culture specified by `formatProvider`.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
## Notes to callers
 
In some cases, when a time interval component in the string to be parsed contains more than seven digits, parsing operations that succeed and return `true` in the .NET Framework 3.5 and earlier versions may fail and return `false` in the.NET Framework 4 and later versions. The following example illustrates this scenario:
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TryParse/tryparsefailure1.cs" id="Snippet3":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TryParse/tryparsefailure1.fs" id="Snippet3":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparsefailure1.vb" id="Snippet3":::

## Examples  
 The following example defines an array of <xref:System.Globalization.CultureInfo> objects, and uses each object in calls to the <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> method to parse the elements in a string array. The example illustrates how the conventions of a specific culture influence the formatting operation.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TryParse/tryparse2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TryParse/tryparse2.fs" id="Snippet2":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparse2.vb" id="Snippet2":::

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match a specified format exactly.</summary>
        <altmember cref="Overload:System.TimeSpan.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider? formatProvider, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, format, formatProvider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, out TimeSpan result);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="input">A span containing the characters that represent a time interval to convert.</param>
        <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format of <paramref name="input" />.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the specified span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string?[]? formats, IFormatProvider? formatProvider, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, formats, formatProvider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, out TimeSpan result);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider? formatProvider, out TimeSpan result);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="input">A span containing the characters that represent a time interval to convert.</param>
        <param name="formats">An array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the specified span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, out TimeSpan result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, format, formatProvider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string? input, string? format, IFormatProvider? formatProvider, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string? input, string format, IFormatProvider? formatProvider, out TimeSpan result);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> method parses the string representation of a time interval, which must be in the format defined by the `format` parameter, except that leading and trailing white-space characters are ignored. This method is similar to the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.  
  
 The `format` parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings).  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> method uses the conventions of the culture specified by the `formatProvider` parameter only if `format` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if `format` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
   
  
## Examples  
 The following example uses the <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> method to parse several string representations of time intervals using various format strings and cultures.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TryParseExact/tryparseexactexample1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TryParseExact/tryparseexactexample1.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample1.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings">Standard TimeSpan Format Strings</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings">Custom TimeSpan Format Strings</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, out TimeSpan result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, formats, formatProvider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string? input, string?[]? formats, IFormatProvider? formatProvider, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string? input, string[] formats, IFormatProvider? formatProvider, out TimeSpan result);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formats">An array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> method parses the string representation of a time interval, which must be in the format defined by one of the format strings specified by the `formats` parameter, except that leading and trailing white-space characters are ignored. This method is similar to the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.  
  
 The `formats` parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings). `input` must correspond exactly to a member of `formats` for the parse operation to succeed. The parse operation attempts to match `input` to each element in `formats` starting with the first element in the array.  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.TryParseExact%2A> method uses the conventions of the culture specified by the `formatProvider` parameter only if the format string used to parse `input` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if the format string used to parse `input` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
   
  
## Examples  
 The following example calls the <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> method to convert each element of a string array to a <xref:System.TimeSpan> value. The example interprets the strings by using the formatting conventions of the French - France ("fr-FR") culture. The strings can represent a time interval in either the general short format or the general long format.  
  
 In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the `%h` custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the `%h` custom format string must precede the other format strings in the `formats` array.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TryParseExact/tryparseexactexample3.cs"  interactive="try-dotnet" id="Snippet3":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TryParseExact/tryparseexactexample3.fs"  id="Snippet3":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample3.vb" id="Snippet3":::  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings">Standard TimeSpan Format Strings</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings">Custom TimeSpan Format Strings</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.TimeSpanStyles * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="input">A span containing the characters that represent a time interval to convert.</param>
        <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format of <paramref name="input" />.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the specified span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string?[]? formats, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.TimeSpanStyles * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0;net-6.0;net-7.0" />
      </Parameters>
      <Docs>
        <param name="input">A span containing the characters that represent a time interval to convert.</param>
        <param name="formats">An array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the specified span representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information and styles. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.TimeSpanStyles * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string? input, string? format, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string? input, string format, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="format">A standard or custom format string that defines the required format of <paramref name="input" />.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information and styles. The format of the string representation must match the specified format exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> method parses the string representation of a time interval, which must be in the format defined by the `format` parameter, except that leading and trailing white-space characters are ignored. This method is similar to the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> method, except that it does not throw an exception if the conversion fails.  
  
 The `format` parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings).  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if `format` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
 The `styles` parameter affects the interpretation of strings parsed using custom format strings. It determines whether `input` is interpreted as a negative time interval only if a negative sign is present (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), or whether it is always interpreted as a negative time interval (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). If <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> is not used, `format` must include a literal negative sign symbol (such as "\\-") to successfully parse a negative time interval.  
  
   
  
## Examples  
 The following example uses the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> method to parse several string representations of time intervals using various format strings and cultures. It also uses the <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> value to interpret each string as a negative time interval. The output from the example illustrates that the <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> style affects the return value only when it is used with custom format strings.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TryParseExact/tryparseexactexample2.cs"  interactive="try-dotnet" id="Snippet2":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TryParseExact/tryparseexactexample2.fs"  id="Snippet2":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample2.vb" id="Snippet2":::  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings">Standard TimeSpan Format Strings</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings">Custom TimeSpan Format Strings</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.TimeSpanStyles * TimeSpan -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string? input, string?[]? formats, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="net-5.0;net-6.0;net-7.0" />
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string? input, string[] formats, IFormatProvider? formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0;net-6.0;net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-7.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("TimeSpanFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;net-6.0;net-7.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formats">An array of standard or custom format strings that define the acceptable formats of <paramref name="input" />.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="styles">One or more enumeration values that indicate the style of <paramref name="input" />.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information and styles. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> method parses the string representation of a time interval, which must be in the format defined by one of the format strings specified by the `formats` parameter, except that leading and trailing white-space characters are ignored. This method is similar to the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> method, except that it does not throw an exception if the conversion fails.  
  
 The `formats` parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](/dotnet/standard/base-types/custom-timespan-format-strings). `input` must correspond exactly to a member of `formats` for the parse operation to succeed. The parse operation attempts to match `input` to each element in `formats` starting with the first element in the array.  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.ParseExact%2A> method uses the conventions of the culture specified by the `formatProvider` parameter only if the format string used to parse `input` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if the format string used to parse `input` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
 The `styles` parameter affects the interpretation of strings that are parsed using custom format strings. It determines whether `input` is interpreted as a negative time interval only if a negative sign is present (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), or whether it is always interpreted as a negative time interval (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). If <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> is not used, `format` must include a literal negative sign symbol (such as "\\-") to successfully parse a negative time interval.  
  
   
  
## Examples  
 The following example calls the <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> method to convert each element of a string array to a <xref:System.TimeSpan> value. The strings can represent a time interval in either the general short format or the general long format.  
  
 In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the `%h` custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the `%h` custom format string must precede the other format strings in the `formats` array. Also note from the output that the <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> flag specified in the method call is used only when parsing a string with this format specifier.  
  
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/TryParseExact/tryparseexactexample4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/TryParseExact/tryparseexactexample4.fs" id="Snippet4":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample4.vb" id="Snippet4":::  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/standard-timespan-format-strings">Standard TimeSpan Format Strings</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-timespan-format-strings">Custom TimeSpan Format Strings</related>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan Zero" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Zero As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable Zero : TimeSpan" Usage="System.TimeSpan.Zero" />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan Zero;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the zero <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the value of the <xref:System.TimeSpan.Zero> field is a <xref:System.TimeSpan> object that represents a zero time value, you can compare it with other <xref:System.TimeSpan> objects to determine whether the latter represent positive, non-zero, or negative time intervals. You can also use this field to initialize a <xref:System.TimeSpan> object to a zero time value.  
  
   
  
## Examples  
 The following example references and displays the value of the <xref:System.TimeSpan.Zero> field.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System/TimeSpan/MaxValue/fields.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="fsharp" source="~/snippets/fsharp/System/TimeSpan/MaxValue/fields.fs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb" id="Snippet1":::

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
