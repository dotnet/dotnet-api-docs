<Type Name="Int128" FullName="System.Int128">
  <TypeSignature Language="C#" Value="public readonly struct Int128 : IComparable&lt;Int128&gt;, IEquatable&lt;Int128&gt;, IParsable&lt;Int128&gt;, ISpanParsable&lt;Int128&gt;, System.Numerics.IAdditionOperators&lt;Int128,Int128,Int128&gt;, System.Numerics.IAdditiveIdentity&lt;Int128,Int128&gt;, System.Numerics.IBinaryInteger&lt;Int128&gt;, System.Numerics.IBinaryNumber&lt;Int128&gt;, System.Numerics.IBitwiseOperators&lt;Int128,Int128,Int128&gt;, System.Numerics.IComparisonOperators&lt;Int128,Int128,bool&gt;, System.Numerics.IDecrementOperators&lt;Int128&gt;, System.Numerics.IDivisionOperators&lt;Int128,Int128,Int128&gt;, System.Numerics.IEqualityOperators&lt;Int128,Int128,bool&gt;, System.Numerics.IIncrementOperators&lt;Int128&gt;, System.Numerics.IMinMaxValue&lt;Int128&gt;, System.Numerics.IModulusOperators&lt;Int128,Int128,Int128&gt;, System.Numerics.IMultiplicativeIdentity&lt;Int128,Int128&gt;, System.Numerics.IMultiplyOperators&lt;Int128,Int128,Int128&gt;, System.Numerics.INumber&lt;Int128&gt;, System.Numerics.INumberBase&lt;Int128&gt;, System.Numerics.IShiftOperators&lt;Int128,int,Int128&gt;, System.Numerics.ISignedNumber&lt;Int128&gt;, System.Numerics.ISubtractionOperators&lt;Int128,Int128,Int128&gt;, System.Numerics.IUnaryNegationOperators&lt;Int128,Int128&gt;, System.Numerics.IUnaryPlusOperators&lt;Int128,Int128&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Int128 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Int128&gt;, class System.IEquatable`1&lt;valuetype System.Int128&gt;, class System.IFormattable, class System.IParsable`1&lt;valuetype System.Int128&gt;, class System.ISpanFormattable, class System.ISpanParsable`1&lt;valuetype System.Int128&gt;, class System.Numerics.IAdditionOperators`3&lt;valuetype System.Int128, valuetype System.Int128, valuetype System.Int128&gt;, class System.Numerics.IAdditiveIdentity`2&lt;valuetype System.Int128, valuetype System.Int128&gt;, class System.Numerics.IBinaryInteger`1&lt;valuetype System.Int128&gt;, class System.Numerics.IBinaryNumber`1&lt;valuetype System.Int128&gt;, class System.Numerics.IBitwiseOperators`3&lt;valuetype System.Int128, valuetype System.Int128, valuetype System.Int128&gt;, class System.Numerics.IComparisonOperators`3&lt;valuetype System.Int128, valuetype System.Int128, bool&gt;, class System.Numerics.IDecrementOperators`1&lt;valuetype System.Int128&gt;, class System.Numerics.IDivisionOperators`3&lt;valuetype System.Int128, valuetype System.Int128, valuetype System.Int128&gt;, class System.Numerics.IEqualityOperators`3&lt;valuetype System.Int128, valuetype System.Int128, bool&gt;, class System.Numerics.IIncrementOperators`1&lt;valuetype System.Int128&gt;, class System.Numerics.IMinMaxValue`1&lt;valuetype System.Int128&gt;, class System.Numerics.IModulusOperators`3&lt;valuetype System.Int128, valuetype System.Int128, valuetype System.Int128&gt;, class System.Numerics.IMultiplicativeIdentity`2&lt;valuetype System.Int128, valuetype System.Int128&gt;, class System.Numerics.IMultiplyOperators`3&lt;valuetype System.Int128, valuetype System.Int128, valuetype System.Int128&gt;, class System.Numerics.INumber`1&lt;valuetype System.Int128&gt;, class System.Numerics.INumberBase`1&lt;valuetype System.Int128&gt;, class System.Numerics.IShiftOperators`3&lt;valuetype System.Int128, int32, valuetype System.Int128&gt;, class System.Numerics.ISignedNumber`1&lt;valuetype System.Int128&gt;, class System.Numerics.ISubtractionOperators`3&lt;valuetype System.Int128, valuetype System.Int128, valuetype System.Int128&gt;, class System.Numerics.IUnaryNegationOperators`2&lt;valuetype System.Int128, valuetype System.Int128&gt;, class System.Numerics.IUnaryPlusOperators`2&lt;valuetype System.Int128, valuetype System.Int128&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Int128" />
  <TypeSignature Language="VB.NET" Value="Public Structure Int128&#xA;Implements IAdditionOperators(Of Int128, Int128, Int128), IAdditiveIdentity(Of Int128, Int128), IBinaryInteger(Of Int128), IBinaryNumber(Of Int128), IBitwiseOperators(Of Int128, Int128, Int128), IComparable(Of Int128), IComparisonOperators(Of Int128, Int128, Boolean), IDecrementOperators(Of Int128), IDivisionOperators(Of Int128, Int128, Int128), IEqualityOperators(Of Int128, Int128, Boolean), IEquatable(Of Int128), IIncrementOperators(Of Int128), IMinMaxValue(Of Int128), IModulusOperators(Of Int128, Int128, Int128), IMultiplicativeIdentity(Of Int128, Int128), IMultiplyOperators(Of Int128, Int128, Int128), INumber(Of Int128), INumberBase(Of Int128), IParsable(Of Int128), IShiftOperators(Of Int128, Integer, Int128), ISignedNumber(Of Int128), ISpanParsable(Of Int128), ISubtractionOperators(Of Int128, Int128, Int128), IUnaryNegationOperators(Of Int128, Int128), IUnaryPlusOperators(Of Int128, Int128)" />
  <TypeSignature Language="F#" Value="type Int128 = struct&#xA;    interface IFormattable&#xA;    interface IParsable&lt;Int128&gt;&#xA;    interface ISpanFormattable&#xA;    interface ISpanParsable&lt;Int128&gt;&#xA;    interface IAdditionOperators&lt;Int128, Int128, Int128&gt;&#xA;    interface IAdditiveIdentity&lt;Int128, Int128&gt;&#xA;    interface IBinaryInteger&lt;Int128&gt;&#xA;    interface IBinaryNumber&lt;Int128&gt;&#xA;    interface IBitwiseOperators&lt;Int128, Int128, Int128&gt;&#xA;    interface IComparisonOperators&lt;Int128, Int128, bool&gt;&#xA;    interface IEqualityOperators&lt;Int128, Int128, bool&gt;&#xA;    interface IDecrementOperators&lt;Int128&gt;&#xA;    interface IDivisionOperators&lt;Int128, Int128, Int128&gt;&#xA;    interface IIncrementOperators&lt;Int128&gt;&#xA;    interface IModulusOperators&lt;Int128, Int128, Int128&gt;&#xA;    interface IMultiplicativeIdentity&lt;Int128, Int128&gt;&#xA;    interface IMultiplyOperators&lt;Int128, Int128, Int128&gt;&#xA;    interface INumber&lt;Int128&gt;&#xA;    interface INumberBase&lt;Int128&gt;&#xA;    interface ISubtractionOperators&lt;Int128, Int128, Int128&gt;&#xA;    interface IUnaryNegationOperators&lt;Int128, Int128&gt;&#xA;    interface IUnaryPlusOperators&lt;Int128, Int128&gt;&#xA;    interface IShiftOperators&lt;Int128, int, Int128&gt;&#xA;    interface IMinMaxValue&lt;Int128&gt;&#xA;    interface ISignedNumber&lt;Int128&gt;" />
  <TypeSignature Language="C++ CLI" Value="public value class Int128 : IComparable&lt;Int128&gt;, IEquatable&lt;Int128&gt;, IParsable&lt;Int128&gt;, ISpanParsable&lt;Int128&gt;, System::Numerics::IAdditionOperators&lt;Int128, Int128, Int128&gt;, System::Numerics::IAdditiveIdentity&lt;Int128, Int128&gt;, System::Numerics::IBinaryInteger&lt;Int128&gt;, System::Numerics::IBinaryNumber&lt;Int128&gt;, System::Numerics::IBitwiseOperators&lt;Int128, Int128, Int128&gt;, System::Numerics::IComparisonOperators&lt;Int128, Int128, bool&gt;, System::Numerics::IDecrementOperators&lt;Int128&gt;, System::Numerics::IDivisionOperators&lt;Int128, Int128, Int128&gt;, System::Numerics::IEqualityOperators&lt;Int128, Int128, bool&gt;, System::Numerics::IIncrementOperators&lt;Int128&gt;, System::Numerics::IMinMaxValue&lt;Int128&gt;, System::Numerics::IModulusOperators&lt;Int128, Int128, Int128&gt;, System::Numerics::IMultiplicativeIdentity&lt;Int128, Int128&gt;, System::Numerics::IMultiplyOperators&lt;Int128, Int128, Int128&gt;, System::Numerics::INumber&lt;Int128&gt;, System::Numerics::INumberBase&lt;Int128&gt;, System::Numerics::IShiftOperators&lt;Int128, int, Int128&gt;, System::Numerics::ISignedNumber&lt;Int128&gt;, System::Numerics::ISubtractionOperators&lt;Int128, Int128, Int128&gt;, System::Numerics::IUnaryNegationOperators&lt;Int128, Int128&gt;, System::Numerics::IUnaryPlusOperators&lt;Int128, Int128&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IParsable&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanParsable&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IAdditionOperators&lt;System.Int128,System.Int128,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IAdditiveIdentity&lt;System.Int128,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IAdditiveIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IBinaryInteger&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IBinaryNumber&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IBinaryNumber&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IBitwiseOperators&lt;System.Int128,System.Int128,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IBitwiseOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IComparisonOperators&lt;System.Int128,System.Int128,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IComparisonOperators&lt;TSelf,TSelf,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IDecrementOperators&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IDecrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IDivisionOperators&lt;System.Int128,System.Int128,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IEqualityOperators&lt;System.Int128,System.Int128,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IEqualityOperators&lt;TSelf,TOther,TResult&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IEqualityOperators&lt;TSelf,TSelf,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IIncrementOperators&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IIncrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMinMaxValue&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IModulusOperators&lt;System.Int128,System.Int128,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IModulusOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMultiplicativeIdentity&lt;System.Int128,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMultiplicativeIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMultiplyOperators&lt;System.Int128,System.Int128,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.INumber&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.INumber&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.INumberBase&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.INumberBase&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IShiftOperators&lt;System.Int128,System.Int32,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IShiftOperators&lt;TSelf,System.Int32,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.ISignedNumber&lt;System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.ISubtractionOperators&lt;System.Int128,System.Int128,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IUnaryNegationOperators&lt;System.Int128,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IUnaryNegationOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IUnaryPlusOperators&lt;System.Int128,System.Int128&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IUnaryPlusOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a 128-bit signed integer.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Int128 (ulong upper, ulong lower);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int64 upper, unsigned int64 lower) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.#ctor(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (upper As ULong, lower As ULong)" />
      <MemberSignature Language="F#" Value="new Int128 : uint64 * uint64 -&gt; Int128" Usage="new System.Int128 (upper, lower)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Int128(System::UInt64 upper, System::UInt64 lower);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="upper" Type="System.UInt64" />
        <Parameter Name="lower" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="upper">The upper 64-bits of the 128-bit value.</param>
        <param name="lower">The lower 64-bits of the 128-bit value.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Int128" /> struct.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static Int128 Abs (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Abs(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Abs(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member Abs : Int128 -&gt; Int128" Usage="System.Int128.Abs value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 Abs(Int128 value) = System::Numerics::INumberBase&lt;Int128&gt;::Abs;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.Abs(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Computes the absolute of a value.</summary>
        <returns>The absolute of <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.Abs(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static Int128 Clamp (Int128 value, Int128 min, Int128 max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Clamp(valuetype System.Int128 value, valuetype System.Int128 min, valuetype System.Int128 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Clamp(System.Int128,System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Int128, min As Int128, max As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member Clamp : Int128 * Int128 * Int128 -&gt; Int128" Usage="System.Int128.Clamp (value, min, max)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 Clamp(Int128 value, Int128 min, Int128 max) = System::Numerics::INumber&lt;Int128&gt;::Clamp;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.Clamp(`0,`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
        <Parameter Name="min" Type="System.Int128" />
        <Parameter Name="max" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>Clamps a value to an inclusive minimum and maximum value.</summary>
        <returns>The result of clamping <paramref name="value" /> to the inclusive range of <paramref name="min" /> and <paramref name="max" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.Clamp(`0,`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.CompareTo(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Int128) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : Int128 -&gt; int&#xA;override this.CompareTo : Int128 -&gt; int" Usage="int128.CompareTo value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(Int128 value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">An object to compare with this instance.</param>
        <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
        <returns>
          <para>A value that indicates the relative order of the objects being compared. The return value has these meanings:</para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>Less than zero</term>
              <description>This instance precedes <paramref name="value" /> in the sort order.</description>
            </item>
            <item>
              <term>Zero</term>
              <description>This instance occurs in the same position in the sort order as <paramref name="value" />.</description>
            </item>
            <item>
              <term>Greater than zero</term>
              <description>This instance follows <paramref name="value" /> in the sort order.</description>
            </item>
          </list>
        </returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.IComparable`1.CompareTo(`0)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="int128.CompareTo value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object to compare with this instance.</param>
        <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
        <returns>
          <para>A value that indicates the relative order of the objects being compared. The return value has these meanings:</para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>Less than zero</term>
              <description>This instance precedes <paramref name="value" /> in the sort order.</description>
            </item>
            <item>
              <term>Zero</term>
              <description>This instance occurs in the same position in the sort order as <paramref name="value" />.</description>
            </item>
            <item>
              <term>Greater than zero</term>
              <description>This instance follows <paramref name="value" /> in the sort order.</description>
            </item>
          </list>
        </returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.IComparable.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CopySign">
      <MemberSignature Language="C#" Value="public static Int128 CopySign (Int128 value, Int128 sign);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 CopySign(valuetype System.Int128 value, valuetype System.Int128 sign) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.CopySign(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CopySign (value As Int128, sign As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member CopySign : Int128 * Int128 -&gt; Int128" Usage="System.Int128.CopySign (value, sign)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 CopySign(Int128 value, Int128 sign) = System::Numerics::INumber&lt;Int128&gt;::CopySign;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.CopySign(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
        <Parameter Name="sign" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="sign">To be added.</param>
        <summary>Copies the sign of a value to the sign of another value.</summary>
        <returns>A value with the magnitude of <paramref name="value" /> and the sign of <paramref name="sign" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.CopySign(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="CreateChecked&lt;TOther&gt;">
      <MemberSignature Language="C#" Value="public static Int128 CreateChecked&lt;TOther&gt; (TOther value) where TOther : System.Numerics.INumberBase&lt;TOther&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 CreateChecked&lt;(class System.Numerics.INumberBase`1&lt;!!TOther&gt;) TOther&gt;(!!TOther value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.CreateChecked``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateChecked(Of TOther As INumberBase(Of TOther)) (value As TOther) As Int128" />
      <MemberSignature Language="F#" Value="static member CreateChecked : 'Other -&gt; Int128 (requires 'Other :&gt; System.Numerics.INumberBase&lt;'Other&gt;)" Usage="System.Int128.CreateChecked value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOther&gt;&#xA; where TOther : System::Numerics::INumberBase&lt;TOther&gt; static Int128 CreateChecked(TOther value) = System::Numerics::INumberBase&lt;Int128&gt;::CreateChecked;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.CreateChecked``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOther">
          <Constraints>
            <InterfaceName>System.Numerics.INumberBase&lt;TOther&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TOther" />
      </Parameters>
      <Docs>
        <typeparam name="TOther">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>Creates an instance of the current type from a value, throwing an overflow exception for any values that fall outside the representable range of the current type.</summary>
        <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateChecked``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="CreateSaturating&lt;TOther&gt;">
      <MemberSignature Language="C#" Value="public static Int128 CreateSaturating&lt;TOther&gt; (TOther value) where TOther : System.Numerics.INumberBase&lt;TOther&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 CreateSaturating&lt;(class System.Numerics.INumberBase`1&lt;!!TOther&gt;) TOther&gt;(!!TOther value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.CreateSaturating``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSaturating(Of TOther As INumberBase(Of TOther)) (value As TOther) As Int128" />
      <MemberSignature Language="F#" Value="static member CreateSaturating : 'Other -&gt; Int128 (requires 'Other :&gt; System.Numerics.INumberBase&lt;'Other&gt;)" Usage="System.Int128.CreateSaturating value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOther&gt;&#xA; where TOther : System::Numerics::INumberBase&lt;TOther&gt; static Int128 CreateSaturating(TOther value) = System::Numerics::INumberBase&lt;Int128&gt;::CreateSaturating;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.CreateSaturating``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOther">
          <Constraints>
            <InterfaceName>System.Numerics.INumberBase&lt;TOther&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TOther" />
      </Parameters>
      <Docs>
        <typeparam name="TOther">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>Creates an instance of the current type from a value, saturating any values that fall outside the representable range of the current type.</summary>
        <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />, saturating if <paramref name="value" /> falls outside the representable range of <typeparamref name="TSelf" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateSaturating``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="CreateTruncating&lt;TOther&gt;">
      <MemberSignature Language="C#" Value="public static Int128 CreateTruncating&lt;TOther&gt; (TOther value) where TOther : System.Numerics.INumberBase&lt;TOther&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 CreateTruncating&lt;(class System.Numerics.INumberBase`1&lt;!!TOther&gt;) TOther&gt;(!!TOther value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.CreateTruncating``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateTruncating(Of TOther As INumberBase(Of TOther)) (value As TOther) As Int128" />
      <MemberSignature Language="F#" Value="static member CreateTruncating : 'Other -&gt; Int128 (requires 'Other :&gt; System.Numerics.INumberBase&lt;'Other&gt;)" Usage="System.Int128.CreateTruncating value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOther&gt;&#xA; where TOther : System::Numerics::INumberBase&lt;TOther&gt; static Int128 CreateTruncating(TOther value) = System::Numerics::INumberBase&lt;Int128&gt;::CreateTruncating;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.CreateTruncating``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOther">
          <Constraints>
            <InterfaceName>System.Numerics.INumberBase&lt;TOther&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TOther" />
      </Parameters>
      <Docs>
        <typeparam name="TOther">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>Creates an instance of the current type from a value, truncating any values that fall outside the representable range of the current type.</summary>
        <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />, truncating if <paramref name="value" /> falls outside the representable range of <typeparamref name="TSelf" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateTruncating``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static (Int128 Quotient, Int128 Remainder) DivRem (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;valuetype System.Int128, valuetype System.Int128&gt; DivRem(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.DivRem(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (left As Int128, right As Int128) As ValueTuple(Of Int128, Int128)" />
      <MemberSignature Language="F#" Value="static member DivRem : Int128 * Int128 -&gt; ValueTuple&lt;Int128, Int128&gt;" Usage="System.Int128.DivRem (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ValueTuple&lt;Int128, Int128&gt; DivRem(Int128 left, Int128 right) = System::Numerics::IBinaryInteger&lt;Int128&gt;::DivRem;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryInteger`1.DivRem(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Int128,System.Int128&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Quotient", "Remainder" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Quotient", "Remainder" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Computes the quotient and remainder of two values.</summary>
        <returns>The quotient and remainder of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryInteger`1.DivRem(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Int128 other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Int128 other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Equals(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Int128 -&gt; bool" Usage="int128.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Int128 other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>Indicates whether the current object is equal to another object of the same type.</summary>
        <returns>
          <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.IEquatable`1.Equals(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="int128.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>Determines whether the specified object is equal to the current object.</summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="int128.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as the default hash function.</summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="IsEvenInteger">
      <MemberSignature Language="C#" Value="public static bool IsEvenInteger (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEvenInteger(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.IsEvenInteger(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEvenInteger (value As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsEvenInteger : Int128 -&gt; bool" Usage="System.Int128.IsEvenInteger value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEvenInteger(Int128 value) = System::Numerics::INumberBase&lt;Int128&gt;::IsEvenInteger;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsEvenInteger(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Determines if a value represents an even integral number.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an even integer; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method correctly handles floating-point values and so `2.0` will return `true` while `2.2` will return `false`.

A return value of `false` does not imply that <xref:System.Numerics.INumberBase%601.IsOddInteger(%600)> will return `true`. A number with a fractional portion, for example, `3.3`, is not even or odd.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.IsEvenInteger(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.IsNegative(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (value As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNegative : Int128 -&gt; bool" Usage="System.Int128.IsNegative value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(Int128 value) = System::Numerics::INumberBase&lt;Int128&gt;::IsNegative;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsNegative(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Determines if a value is negative.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is negative; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

A return value of `false` does not imply that <xref:System.Numerics.INumberBase%601.IsPositive(%600)> will return `true`. A complex number, `a + bi` for non-zero `b`, is not positive or negative

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.IsNegative(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsOddInteger">
      <MemberSignature Language="C#" Value="public static bool IsOddInteger (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsOddInteger(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.IsOddInteger(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsOddInteger (value As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsOddInteger : Int128 -&gt; bool" Usage="System.Int128.IsOddInteger value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsOddInteger(Int128 value) = System::Numerics::INumberBase&lt;Int128&gt;::IsOddInteger;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsOddInteger(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Determines if a value represents an odd integral number.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an odd integer; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method correctly handles floating-point values and so `3.0` will return `true` while `3.3` will return `false`.

A return value of `false` does not imply that <xref:System.Numerics.INumberBase%601.IsEvenInteger(%600)> will return `true`. A number with a fractional portion, for example, `3.3`, is not even or odd.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.IsOddInteger(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsPositive">
      <MemberSignature Language="C#" Value="public static bool IsPositive (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositive(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.IsPositive(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositive (value As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPositive : Int128 -&gt; bool" Usage="System.Int128.IsPositive value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositive(Int128 value) = System::Numerics::INumberBase&lt;Int128&gt;::IsPositive;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.IsPositive(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Determines if a value is positive.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is positive; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

A return value of `false` does not imply that <xref:System.Numerics.INumberBase%601.IsNegative(%600)> will return `true`. A complex number, `a + bi` for non-zero `b`, is not positive or negative

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.IsPositive(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IsPow2">
      <MemberSignature Language="C#" Value="public static bool IsPow2 (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPow2(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.IsPow2(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPow2 (value As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPow2 : Int128 -&gt; bool" Usage="System.Int128.IsPow2 value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPow2(Int128 value) = System::Numerics::IBinaryNumber&lt;Int128&gt;::IsPow2;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryNumber`1.IsPow2(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Determines if a value is a power of two.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is a power of two; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryNumber`1.IsPow2(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LeadingZeroCount">
      <MemberSignature Language="C#" Value="public static Int128 LeadingZeroCount (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 LeadingZeroCount(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.LeadingZeroCount(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeadingZeroCount (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member LeadingZeroCount : Int128 -&gt; Int128" Usage="System.Int128.LeadingZeroCount value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 LeadingZeroCount(Int128 value) = System::Numerics::IBinaryInteger&lt;Int128&gt;::LeadingZeroCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryInteger`1.LeadingZeroCount(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Computes the number of leading zeros in a value.</summary>
        <returns>The number of leading zeros in <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryInteger`1.LeadingZeroCount(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public static Int128 Log2 (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Log2(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Log2(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log2 (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member Log2 : Int128 -&gt; Int128" Usage="System.Int128.Log2 value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 Log2(Int128 value) = System::Numerics::IBinaryNumber&lt;Int128&gt;::Log2;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryNumber`1.Log2(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Computes the log2 of a value.</summary>
        <returns>The log2 of <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryNumber`1.Log2(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Int128 Max (Int128 x, Int128 y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Max(valuetype System.Int128 x, valuetype System.Int128 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Max(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (x As Int128, y As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member Max : Int128 * Int128 -&gt; Int128" Usage="System.Int128.Max (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 Max(Int128 x, Int128 y) = System::Numerics::INumber&lt;Int128&gt;::Max;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.Max(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int128" />
        <Parameter Name="y" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>Compares two values to compute which is greater.</summary>
        <returns>
          <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPoint%601> this method matches the IEEE 754:2019 `maximum` function. This requires NaN inputs to be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.Max(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MaxMagnitude">
      <MemberSignature Language="C#" Value="public static Int128 MaxMagnitude (Int128 x, Int128 y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 MaxMagnitude(valuetype System.Int128 x, valuetype System.Int128 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.MaxMagnitude(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaxMagnitude (x As Int128, y As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member MaxMagnitude : Int128 * Int128 -&gt; Int128" Usage="System.Int128.MaxMagnitude (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 MaxMagnitude(Int128 x, Int128 y) = System::Numerics::INumberBase&lt;Int128&gt;::MaxMagnitude;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.MaxMagnitude(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int128" />
        <Parameter Name="y" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>Compares two values to compute which is greater.</summary>
        <returns>
          <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPointIeee754%601> this method matches the IEEE 754:2019 `maximumMagnitude` function. This requires NaN inputs to be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.MaxMagnitude(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static Int128 MaxValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Int128 MaxValue" />
      <MemberSignature Language="DocId" Value="P:System.Int128.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxValue As Int128" />
      <MemberSignature Language="F#" Value="static member MaxValue : Int128" Usage="MaxValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Int128 MaxValue { Int128 get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IMinMaxValue`1.MaxValue</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the maximum value of the current type.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.IMinMaxValue`1.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Int128 Min (Int128 x, Int128 y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Min(valuetype System.Int128 x, valuetype System.Int128 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Min(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (x As Int128, y As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member Min : Int128 * Int128 -&gt; Int128" Usage="System.Int128.Min (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 Min(Int128 x, Int128 y) = System::Numerics::INumber&lt;Int128&gt;::Min;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.Min(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int128" />
        <Parameter Name="y" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>Compares two values to compute which is lesser.</summary>
        <returns>
          <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPoint%601> this method matches the IEEE 754:2019 `minimum` function. This requires NaN inputs to be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.Min(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MinMagnitude">
      <MemberSignature Language="C#" Value="public static Int128 MinMagnitude (Int128 x, Int128 y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 MinMagnitude(valuetype System.Int128 x, valuetype System.Int128 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.MinMagnitude(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MinMagnitude (x As Int128, y As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member MinMagnitude : Int128 * Int128 -&gt; Int128" Usage="System.Int128.MinMagnitude (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 MinMagnitude(Int128 x, Int128 y) = System::Numerics::INumberBase&lt;Int128&gt;::MinMagnitude;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.MinMagnitude(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int128" />
        <Parameter Name="y" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>Compares two values to compute which is lesser.</summary>
        <returns>
          <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.Numerics.IFloatingPointIeee754%601> this method matches the IEEE 754:2019 `minimumMagnitude` function. This requires NaN inputs to be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumberBase`1.MinMagnitude(`0,`0)" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static Int128 MinValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Int128 MinValue" />
      <MemberSignature Language="DocId" Value="P:System.Int128.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinValue As Int128" />
      <MemberSignature Language="F#" Value="static member MinValue : Int128" Usage="MinValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Int128 MinValue { Int128 get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.IMinMaxValue`1.MinValue</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minimum value of the current type.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.IMinMaxValue`1.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="NegativeOne">
      <MemberSignature Language="C#" Value="public static Int128 NegativeOne { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Int128 NegativeOne" />
      <MemberSignature Language="DocId" Value="P:System.Int128.NegativeOne" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NegativeOne As Int128" />
      <MemberSignature Language="F#" Value="static member NegativeOne : Int128" Usage="NegativeOne" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Int128 NegativeOne { Int128 get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.ISignedNumber`1.NegativeOne</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value <c>-1</c> for the type.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.ISignedNumber`1.NegativeOne" />
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static Int128 One { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Int128 One" />
      <MemberSignature Language="DocId" Value="P:System.Int128.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property One As Int128" />
      <MemberSignature Language="F#" Value="static member One : Int128" Usage="One" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Int128 One { Int128 get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.INumberBase`1.One</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value <c>1</c> for the type.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.INumberBase`1.One" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static Int128 operator + (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Addition(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Addition(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member ( + ) : Int128 * Int128 -&gt; Int128" Usage="left + right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator +(Int128 left, Int128 right) = System::Numerics::IAdditionOperators&lt;Int128, Int128, Int128&gt;::op_Addition;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Adds two values together to compute their sum.</summary>
        <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseAnd">
      <MemberSignature Language="C#" Value="public static Int128 operator &amp; (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_BitwiseAnd(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_BitwiseAnd(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator And (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member ( &amp;&amp;&amp; ) : Int128 * Int128 -&gt; Int128" Usage="left &amp;&amp;&amp; right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator &amp;(Int128 left, Int128 right) = System::Numerics::IBitwiseOperators&lt;Int128, Int128, Int128&gt;::op_BitwiseAnd;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBitwiseOperators`3.op_BitwiseAnd(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Computes the bitwise-and of two values.</summary>
        <returns>The bitwise-and of <paramref name="left" /> and <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBitwiseOperators`3.op_BitwiseAnd(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseOr">
      <MemberSignature Language="C#" Value="public static Int128 operator | (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_BitwiseOr(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_BitwiseOr(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Or (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member ( ||| ) : Int128 * Int128 -&gt; Int128" Usage="left ||| right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator |(Int128 left, Int128 right) = System::Numerics::IBitwiseOperators&lt;Int128, Int128, Int128&gt;::op_BitwiseOr;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBitwiseOperators`3.op_BitwiseOr(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Computes the bitwise-or of two values.</summary>
        <returns>The bitwise-or of <paramref name="left" /> and <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBitwiseOperators`3.op_BitwiseOr(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_CheckedAddition">
      <MemberSignature Language="C#" Value="public static Int128 op_CheckedAddition (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_CheckedAddition(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_CheckedAddition(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedAddition (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member op_CheckedAddition : Int128 * Int128 -&gt; Int128" Usage="System.Int128.op_CheckedAddition (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 op_CheckedAddition(Int128 left, Int128 right) = System::Numerics::IAdditionOperators&lt;Int128, Int128, Int128&gt;::op_CheckedAddition;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IAdditionOperators`3.op_CheckedAddition(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Adds two values together to compute their sum.</summary>
        <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_CheckedDecrement">
      <MemberSignature Language="C#" Value="public static Int128 op_CheckedDecrement (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_CheckedDecrement(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_CheckedDecrement(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedDecrement (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member op_CheckedDecrement : Int128 -&gt; Int128" Usage="System.Int128.op_CheckedDecrement value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 op_CheckedDecrement(Int128 value) = System::Numerics::IDecrementOperators&lt;Int128&gt;::op_CheckedDecrement;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IDecrementOperators`1.op_CheckedDecrement(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Decrements a value.</summary>
        <returns>The result of decrementing <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IDecrementOperators`1.op_Decrement(`0)" />
      </Docs>
    </Member>
    <Member MemberName="op_CheckedDivision">
      <MemberSignature Language="C#" Value="public static Int128 op_CheckedDivision (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_CheckedDivision(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_CheckedDivision(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedDivision (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member op_CheckedDivision : Int128 * Int128 -&gt; Int128" Usage="System.Int128.op_CheckedDivision (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 op_CheckedDivision(Int128 left, Int128 right) = System::Numerics::IDivisionOperators&lt;Int128, Int128, Int128&gt;::op_CheckedDivision;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IDivisionOperators`3.op_CheckedDivision(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Divides two values together to compute their quotient.</summary>
        <returns>The quotient of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IDivisionOperators`3.op_CheckedDivision(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_CheckedExplicit">
      <MemberSignature Language="C#" Value="public static Int128 op_CheckedExplicit (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_CheckedExplicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_CheckedExplicit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedExplicit (value As Double) As Int128" />
      <MemberSignature Language="F#" Value="static member op_CheckedExplicit : double -&gt; Int128" Usage="System.Int128.op_CheckedExplicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 op_CheckedExplicit(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_CheckedExplicit">
      <MemberSignature Language="C#" Value="public static byte op_CheckedExplicit (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_CheckedExplicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_CheckedExplicit(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedExplicit (value As Int128) As Byte" />
      <MemberSignature Language="F#" Value="static member op_CheckedExplicit : Int128 -&gt; byte" Usage="System.Int128.op_CheckedExplicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte op_CheckedExplicit(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_CheckedExplicit">
      <MemberSignature Language="C#" Value="public static Int128 op_CheckedExplicit (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_CheckedExplicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_CheckedExplicit(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedExplicit (value As Single) As Int128" />
      <MemberSignature Language="F#" Value="static member op_CheckedExplicit : single -&gt; Int128" Usage="System.Int128.op_CheckedExplicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 op_CheckedExplicit(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_CheckedIncrement">
      <MemberSignature Language="C#" Value="public static Int128 op_CheckedIncrement (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_CheckedIncrement(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_CheckedIncrement(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedIncrement (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member op_CheckedIncrement : Int128 -&gt; Int128" Usage="System.Int128.op_CheckedIncrement value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 op_CheckedIncrement(Int128 value) = System::Numerics::IIncrementOperators&lt;Int128&gt;::op_CheckedIncrement;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IIncrementOperators`1.op_CheckedIncrement(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Increments a value.</summary>
        <returns>The result of incrementing <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IIncrementOperators`1.op_CheckedIncrement(`0)" />
      </Docs>
    </Member>
    <Member MemberName="op_CheckedMultiply">
      <MemberSignature Language="C#" Value="public static Int128 op_CheckedMultiply (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_CheckedMultiply(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_CheckedMultiply(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedMultiply (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member op_CheckedMultiply : Int128 * Int128 -&gt; Int128" Usage="System.Int128.op_CheckedMultiply (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 op_CheckedMultiply(Int128 left, Int128 right) = System::Numerics::IMultiplyOperators&lt;Int128, Int128, Int128&gt;::op_CheckedMultiply;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IMultiplyOperators`3.op_CheckedMultiply(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Multiplies two values together to compute their product.</summary>
        <returns>The product of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IMultiplyOperators`3.op_CheckedMultiply(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_CheckedSubtraction">
      <MemberSignature Language="C#" Value="public static Int128 op_CheckedSubtraction (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_CheckedSubtraction(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_CheckedSubtraction(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedSubtraction (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member op_CheckedSubtraction : Int128 * Int128 -&gt; Int128" Usage="System.Int128.op_CheckedSubtraction (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 op_CheckedSubtraction(Int128 left, Int128 right) = System::Numerics::ISubtractionOperators&lt;Int128, Int128, Int128&gt;::op_CheckedSubtraction;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ISubtractionOperators`3.op_CheckedSubtraction(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Subtracts two values to compute their difference.</summary>
        <returns>The difference of <paramref name="right" /> subtracted from <paramref name="left" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.ISubtractionOperators`3.op_CheckedSubtraction(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_CheckedUnaryNegation">
      <MemberSignature Language="C#" Value="public static Int128 op_CheckedUnaryNegation (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_CheckedUnaryNegation(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_CheckedUnaryNegation(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedUnaryNegation (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member op_CheckedUnaryNegation : Int128 -&gt; Int128" Usage="System.Int128.op_CheckedUnaryNegation value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 op_CheckedUnaryNegation(Int128 value) = System::Numerics::IUnaryNegationOperators&lt;Int128, Int128&gt;::op_CheckedUnaryNegation;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IUnaryNegationOperators`2.op_CheckedUnaryNegation(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Computes the unary negation of a value.</summary>
        <returns>The unary negation of <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IUnaryNegationOperators`2.op_CheckedUnaryNegation(`0)" />
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public static Int128 operator -- (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Decrement(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Decrement(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Decrement (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Decrement : Int128 -&gt; Int128" Usage="System.Int128.op_Decrement value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator --(Int128 value) = System::Numerics::IDecrementOperators&lt;Int128&gt;::op_Decrement;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IDecrementOperators`1.op_Decrement(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Decrements a value.</summary>
        <returns>The result of decrementing <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IDecrementOperators`1.op_Decrement(`0)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static Int128 operator / (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Division(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Division(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member ( / ) : Int128 * Int128 -&gt; Int128" Usage="left / right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator /(Int128 left, Int128 right) = System::Numerics::IDivisionOperators&lt;Int128, Int128, Int128&gt;::op_Division;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IDivisionOperators`3.op_Division(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Divides two values together to compute their quotient.</summary>
        <returns>The quotient of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IDivisionOperators`3.op_Division(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Equality(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Int128, right As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : Int128 * Int128 -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Int128 left, Int128 right) = System::Numerics::IEqualityOperators&lt;Int128, Int128, bool&gt;::op_Equality;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Compares two values to determine equality.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static Int128 operator ^ (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_ExclusiveOr(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_ExclusiveOr(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Xor (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member ( ^^^ ) : Int128 * Int128 -&gt; Int128" Usage="left ^^^ right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator ^(Int128 left, Int128 right) = System::Numerics::IBitwiseOperators&lt;Int128, Int128, Int128&gt;::op_ExclusiveOr;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBitwiseOperators`3.op_ExclusiveOr(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Computes the exclusive-or of two values.</summary>
        <returns>The exclusive-or of <paramref name="left" /> and <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBitwiseOperators`3.op_ExclusiveOr(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Int128 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Explicit(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Decimal)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Decimal) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Explicit : decimal -&gt; Int128" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Int128(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a <see cref="T:System.Decimal" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Int128 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Explicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Double)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Double) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Explicit : double -&gt; Int128" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Int128(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a <see cref="T:System.Double" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator byte (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int8 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.Byte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As Byte" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; byte" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Byte(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.Byte" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.Byte" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator char (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname char op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.Char" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As Char" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; char" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator char(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.Char" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.Char" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As Decimal" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; decimal" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.Decimal" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.Decimal" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As Double" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; double" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.Double" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.Double" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Half (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Half op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.Half" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As Half" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; Half" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Half(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.Half" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.Half" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator short (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int16 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.Int16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As Short" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; int16" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator short(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.Int16" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.Int16" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As Integer" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; int" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.Int32" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.Int32" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As Long" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; int64" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.Int64" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.Int64" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator IntPtr (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname native int op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.IntPtr" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As IntPtr" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; nativeint" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator IntPtr(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.IntPtr" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.IntPtr" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator sbyte (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int8 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.SByte" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As SByte" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; sbyte" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::SByte(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.SByte" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.SByte" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As Single" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; single" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.Single" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.Single" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator UInt128 (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.UInt128 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.UInt128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As UInt128" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; UInt128" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator UInt128(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.UInt128" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.UInt128" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ushort (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int16 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.UInt16" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As UShort" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; uint16" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt16(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.UInt16" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.UInt16" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As UInteger" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; uint32" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.UInt32" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.UInt32" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As ULong" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; uint64" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.UInt64" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.UInt64" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator UIntPtr (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname native unsigned int op_Explicit(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Int128)~System.UIntPtr" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Int128) As UIntPtr" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Int128 -&gt; unativeint" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator UIntPtr(Int128 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a 128-bit signed integer to a <see cref="T:System.UIntPtr" /> value.</summary>
        <returns>
          <paramref name="value" /> converted to a <see cref="T:System.UIntPtr" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Int128 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Explicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Explicit(System.Single)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Single) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Explicit : single -&gt; Int128" Usage="System.Int128.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Int128(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Explicitly converts a <see cref="T:System.Single" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_GreaterThan(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Int128, right As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : Int128 * Int128 -&gt; bool" Usage="left &gt; right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(Int128 left, Int128 right) = System::Numerics::IComparisonOperators&lt;Int128, Int128, bool&gt;::op_GreaterThan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Compares two values to determine which is greater.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_GreaterThanOrEqual(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Int128, right As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : Int128 * Int128 -&gt; bool" Usage="left &gt;= right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(Int128 left, Int128 right) = System::Numerics::IComparisonOperators&lt;Int128, Int128, bool&gt;::op_GreaterThanOrEqual;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Compares two values to determine which is greater or equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.Byte)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Byte) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : byte -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Byte" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.Char)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Char) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : char -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Char" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.Int16)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Short) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int16 -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Int16" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.Int32)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Integer) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Int32" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.Int64)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Long) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : int64 -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.Int64" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.IntPtr)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As IntPtr) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : nativeint -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.IntPtr" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.SByte)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As SByte) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : sbyte -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.SByte" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.UInt16)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UShort) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint16 -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.UInt16" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.UInt32)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UInteger) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint32 -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.UInt32" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.UInt64)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As ULong) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : uint64 -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.UInt64" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Int128 (UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Implicit(native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Implicit(System.UIntPtr)~System.Int128" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As UIntPtr) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Implicit : unativeint -&gt; Int128" Usage="System.Int128.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Int128(UIntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="value">The value to convert.</param>
        <summary>Implicitly converts a <see cref="T:System.UIntPtr" /> value to a 128-bit signed integer.</summary>
        <returns>
          <paramref name="value" /> converted to a 128-bit signed integer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public static Int128 operator ++ (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Increment(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Increment(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_Increment (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member op_Increment : Int128 -&gt; Int128" Usage="System.Int128.op_Increment value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator ++(Int128 value) = System::Numerics::IIncrementOperators&lt;Int128&gt;::op_Increment;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IIncrementOperators`1.op_Increment(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Increments a value.</summary>
        <returns>The result of incrementing <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IIncrementOperators`1.op_Increment(`0)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Inequality(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Int128, right As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Int128 * Int128 -&gt; bool" Usage="System.Int128.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Int128 left, Int128 right) = System::Numerics::IEqualityOperators&lt;Int128, Int128, bool&gt;::op_Inequality;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Compares two values to determine inequality.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_LeftShift">
      <MemberSignature Language="C#" Value="public static Int128 operator &lt;&lt; (Int128 value, int shiftAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_LeftShift(valuetype System.Int128 value, int32 shiftAmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_LeftShift(System.Int128,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;&lt; (value As Int128, shiftAmount As Integer) As Int128" />
      <MemberSignature Language="F#" Value="static member ( &lt;&lt;&lt; ) : Int128 * int -&gt; Int128" Usage="value &lt;&lt;&lt; shiftAmount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator &lt;&lt;(Int128 value, int shiftAmount) = System::Numerics::IShiftOperators&lt;Int128, int, Int128&gt;::op_LeftShift;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IShiftOperators`3.op_LeftShift(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
        <Parameter Name="shiftAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="shiftAmount">To be added.</param>
        <summary>Shifts a value left by a given amount.</summary>
        <returns>The result of shifting <paramref name="value" /> left by <paramref name="shiftAmount" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IShiftOperators`3.op_LeftShift(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_LessThan(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Int128, right As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : Int128 * Int128 -&gt; bool" Usage="left &lt; right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(Int128 left, Int128 right) = System::Numerics::IComparisonOperators&lt;Int128, Int128, bool&gt;::op_LessThan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Compares two values to determine which is less.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_LessThanOrEqual(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Int128, right As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : Int128 * Int128 -&gt; bool" Usage="left &lt;= right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(Int128 left, Int128 right) = System::Numerics::IComparisonOperators&lt;Int128, Int128, bool&gt;::op_LessThanOrEqual;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Compares two values to determine which is less or equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="C#" Value="public static Int128 operator % (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Modulus(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Modulus(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Mod (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member ( % ) : Int128 * Int128 -&gt; Int128" Usage="left % right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator %(Int128 left, Int128 right) = System::Numerics::IModulusOperators&lt;Int128, Int128, Int128&gt;::op_Modulus;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IModulusOperators`3.op_Modulus(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Divides two values together to compute their modulus or remainder.</summary>
        <returns>The modulus or remainder of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IModulusOperators`3.op_Modulus(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static Int128 operator * (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Multiply(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Multiply(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member ( * ) : Int128 * Int128 -&gt; Int128" Usage="left * right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator *(Int128 left, Int128 right) = System::Numerics::IMultiplyOperators&lt;Int128, Int128, Int128&gt;::op_Multiply;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IMultiplyOperators`3.op_Multiply(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Multiplies two values together to compute their product.</summary>
        <returns>The product of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IMultiplyOperators`3.op_Multiply(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_OnesComplement">
      <MemberSignature Language="C#" Value="public static Int128 operator ~ (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_OnesComplement(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_OnesComplement(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Not (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member op_OnesComplement : Int128 -&gt; Int128" Usage="System.Int128.op_OnesComplement value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator ~(Int128 value) = System::Numerics::IBitwiseOperators&lt;Int128, Int128, Int128&gt;::op_OnesComplement;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBitwiseOperators`3.op_OnesComplement(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Computes the ones-complement representation of a given value.</summary>
        <returns>The ones-complement of <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBitwiseOperators`3.op_OnesComplement(`0)" />
      </Docs>
    </Member>
    <Member MemberName="op_RightShift">
      <MemberSignature Language="C#" Value="public static Int128 operator &gt;&gt; (Int128 value, int shiftAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_RightShift(valuetype System.Int128 value, int32 shiftAmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_RightShift(System.Int128,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;&gt; (value As Int128, shiftAmount As Integer) As Int128" />
      <MemberSignature Language="F#" Value="static member ( &gt;&gt;&gt; ) : Int128 * int -&gt; Int128" Usage="value &gt;&gt;&gt; shiftAmount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator &gt;&gt;(Int128 value, int shiftAmount) = System::Numerics::IShiftOperators&lt;Int128, int, Int128&gt;::op_RightShift;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IShiftOperators`3.op_RightShift(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
        <Parameter Name="shiftAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="shiftAmount">To be added.</param>
        <summary>Shifts a value right by a given amount.</summary>
        <returns>The result of shifting <paramref name="value" /> right by <paramref name="shiftAmount" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This operation is meant to perform a signed (otherwise known as an arithmetic) right shift on signed types.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.IShiftOperators`3.op_RightShift(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static Int128 operator - (Int128 left, Int128 right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_Subtraction(valuetype System.Int128 left, valuetype System.Int128 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_Subtraction(System.Int128,System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As Int128, right As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member ( - ) : Int128 * Int128 -&gt; Int128" Usage="left - right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator -(Int128 left, Int128 right) = System::Numerics::ISubtractionOperators&lt;Int128, Int128, Int128&gt;::op_Subtraction;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int128" />
        <Parameter Name="right" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Subtracts two values to compute their difference.</summary>
        <returns>The difference of <paramref name="right" /> subtracted from <paramref name="left" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static Int128 operator - (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_UnaryNegation(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_UnaryNegation(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : Int128 -&gt; Int128" Usage="- value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator -(Int128 value) = System::Numerics::IUnaryNegationOperators&lt;Int128, Int128&gt;::op_UnaryNegation;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IUnaryNegationOperators`2.op_UnaryNegation(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Computes the unary negation of a value.</summary>
        <returns>The unary negation of <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IUnaryNegationOperators`2.op_UnaryNegation(`0)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static Int128 operator + (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_UnaryPlus(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_UnaryPlus(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member ( ~+ ) : Int128 -&gt; Int128" Usage="+ value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 operator +(Int128 value) = System::Numerics::IUnaryPlusOperators&lt;Int128, Int128&gt;::op_UnaryPlus;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IUnaryPlusOperators`2.op_UnaryPlus(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Computes the unary plus of a value.</summary>
        <returns>The unary plus of <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IUnaryPlusOperators`2.op_UnaryPlus(`0)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnsignedRightShift">
      <MemberSignature Language="C#" Value="public static Int128 op_UnsignedRightShift (Int128 value, int shiftAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Int128 op_UnsignedRightShift(valuetype System.Int128 value, int32 shiftAmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.op_UnsignedRightShift(System.Int128,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_UnsignedRightShift (value As Int128, shiftAmount As Integer) As Int128" />
      <MemberSignature Language="F#" Value="static member op_UnsignedRightShift : Int128 * int -&gt; Int128" Usage="System.Int128.op_UnsignedRightShift (value, shiftAmount)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 op_UnsignedRightShift(Int128 value, int shiftAmount) = System::Numerics::IShiftOperators&lt;Int128, int, Int128&gt;::op_UnsignedRightShift;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IShiftOperators`3.op_UnsignedRightShift(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
        <Parameter Name="shiftAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="shiftAmount">To be added.</param>
        <summary>Shifts a value right by a given amount.</summary>
        <returns>The result of shifting <paramref name="value" /> right by <paramref name="shiftAmount" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This operation is meant to perform n unsigned (otherwise known as a logical) right shift on all types.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.IShiftOperators`3.op_UnsignedRightShift(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Int128 Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Int128" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; Int128" Usage="System.Int128.Parse s" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a number to parse.</param>
        <summary>Parses a string into a value.</summary>
        <returns>The result of parsing <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Int128 Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), provider As IFormatProvider) As Int128" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; Int128" Usage="System.Int128.Parse (s, provider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 Parse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider) = ISpanParsable&lt;Int128&gt;::Parse;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ISpanParsable`1.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">The span of characters to parse.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <summary>Parses a span of characters into a value.</summary>
        <returns>The result of parsing <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.ISpanParsable`1.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Int128 Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Int128" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; Int128" Usage="System.Int128.Parse (s, style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a number to parse.</param>
        <param name="style">A bitwise combination of number styles that can be present in <paramref name="s" />.</param>
        <summary>Parses a string into a value.</summary>
        <returns>The result of parsing <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Int128 Parse (string s, IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Int128" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; Int128" Usage="System.Int128.Parse (s, provider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 Parse(System::String ^ s, IFormatProvider ^ provider) = IParsable&lt;Int128&gt;::Parse;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IParsable`1.Parse(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">The string to parse.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <summary>Parses a string into a value.</summary>
        <returns>The result of parsing <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Int128 Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider? provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = Nothing) As Int128" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; Int128" Usage="System.Int128.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">The span of characters to parse.</param>
        <param name="style">A bitwise combination of number styles that can be present in <paramref name="s" />.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <summary>Parses a span of characters into a value.</summary>
        <returns>The result of parsing <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Int128 Parse (string s, System.Globalization.NumberStyles style, IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As Int128" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; Int128" Usage="System.Int128.Parse (s, style, provider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider) = System::Numerics::INumberBase&lt;Int128&gt;::Parse;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumberBase`1.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">The string to parse.</param>
        <param name="style">A bitwise combination of number styles that can be present in <paramref name="s" />.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <summary>Parses a string into a value.</summary>
        <returns>The result of parsing <paramref name="s" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopCount">
      <MemberSignature Language="C#" Value="public static Int128 PopCount (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 PopCount(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.PopCount(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PopCount (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member PopCount : Int128 -&gt; Int128" Usage="System.Int128.PopCount value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 PopCount(Int128 value) = System::Numerics::IBinaryInteger&lt;Int128&gt;::PopCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryInteger`1.PopCount(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Computes the number of bits that are set in a value.</summary>
        <returns>The number of set bits in <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryInteger`1.PopCount(`0)" />
      </Docs>
    </Member>
    <Member MemberName="RotateLeft">
      <MemberSignature Language="C#" Value="public static Int128 RotateLeft (Int128 value, int rotateAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 RotateLeft(valuetype System.Int128 value, int32 rotateAmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.RotateLeft(System.Int128,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RotateLeft (value As Int128, rotateAmount As Integer) As Int128" />
      <MemberSignature Language="F#" Value="static member RotateLeft : Int128 * int -&gt; Int128" Usage="System.Int128.RotateLeft (value, rotateAmount)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 RotateLeft(Int128 value, int rotateAmount) = System::Numerics::IBinaryInteger&lt;Int128&gt;::RotateLeft;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryInteger`1.RotateLeft(`0,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
        <Parameter Name="rotateAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="rotateAmount">To be added.</param>
        <summary>Rotates a value left by a given amount.</summary>
        <returns>The result of rotating <paramref name="value" /> left by <paramref name="rotateAmount" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryInteger`1.RotateLeft(`0,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RotateRight">
      <MemberSignature Language="C#" Value="public static Int128 RotateRight (Int128 value, int rotateAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 RotateRight(valuetype System.Int128 value, int32 rotateAmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.RotateRight(System.Int128,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RotateRight (value As Int128, rotateAmount As Integer) As Int128" />
      <MemberSignature Language="F#" Value="static member RotateRight : Int128 * int -&gt; Int128" Usage="System.Int128.RotateRight (value, rotateAmount)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 RotateRight(Int128 value, int rotateAmount) = System::Numerics::IBinaryInteger&lt;Int128&gt;::RotateRight;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryInteger`1.RotateRight(`0,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
        <Parameter Name="rotateAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="rotateAmount">To be added.</param>
        <summary>Rotates a value right by a given amount.</summary>
        <returns>The result of rotating <paramref name="value" /> right by <paramref name="rotateAmount" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryInteger`1.RotateRight(`0,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.Sign(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Int128) As Integer" />
      <MemberSignature Language="F#" Value="static member Sign : Int128 -&gt; int" Usage="System.Int128.Sign value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(Int128 value) = System::Numerics::INumber&lt;Int128&gt;::Sign;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.INumber`1.Sign(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Computes the sign of a value.</summary>
        <returns>A positive value if <paramref name="value" /> is positive, <see cref="P:System.Numerics.INumberBase`1.Zero" /> if <paramref name="value" /> is zero, and a negative value if <paramref name="value" /> is negative.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

It is recommended that a function return `1`, `0`, and `-1`, respectively.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.Numerics.INumber`1.Sign(`0)" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetByteCount">
      <MemberSignature Language="C#" Value="int IBinaryInteger&lt;Int128&gt;.GetByteCount ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetByteCount() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.System#Numerics#IBinaryInteger&lt;System#Int128&gt;#GetByteCount" />
      <MemberSignature Language="VB.NET" Value="Function GetByteCount () As Integer Implements IBinaryInteger(Of Int128).GetByteCount" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetByteCount : unit -&gt; int&#xA;override this.System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetByteCount : unit -&gt; int" Usage="int128.System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetByteCount " />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetByteCount() = System::Numerics::IBinaryInteger&lt;Int128&gt;::GetByteCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryInteger`1.GetByteCount</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the number of bytes that will be written as part of <see cref="M:System.Numerics.IBinaryInteger`1.TryWriteLittleEndian(System.Span{System.Byte},System.Int32@)" />.</summary>
        <returns>The number of bytes that will be written as part of <see cref="M:System.Numerics.IBinaryInteger`1.TryWriteLittleEndian(System.Span{System.Byte},System.Int32@)" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryInteger`1.GetByteCount" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetShortestBitLength">
      <MemberSignature Language="C#" Value="int IBinaryInteger&lt;Int128&gt;.GetShortestBitLength ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetShortestBitLength() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.System#Numerics#IBinaryInteger&lt;System#Int128&gt;#GetShortestBitLength" />
      <MemberSignature Language="VB.NET" Value="Function GetShortestBitLength () As Integer Implements IBinaryInteger(Of Int128).GetShortestBitLength" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetShortestBitLength : unit -&gt; int&#xA;override this.System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetShortestBitLength : unit -&gt; int" Usage="int128.System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetShortestBitLength " />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Numerics.IBinaryInteger&lt;System.Int128&gt;.GetShortestBitLength() = System::Numerics::IBinaryInteger&lt;Int128&gt;::GetShortestBitLength;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryInteger`1.GetShortestBitLength</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the length, in bits, of the shortest two's complement representation of the current value.</summary>
        <returns>The length, in bits, of the shortest two's complement representation of the current value.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryInteger`1.GetShortestBitLength" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteBigEndian">
      <MemberSignature Language="C#" Value="bool IBinaryInteger&lt;Int128&gt;.TryWriteBigEndian (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteBigEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.System#Numerics#IBinaryInteger&lt;System#Int128&gt;#TryWriteBigEndian(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Function TryWriteBigEndian (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean Implements IBinaryInteger(Of Int128).TryWriteBigEndian" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteBigEndian : Span&lt;byte&gt; * int -&gt; bool&#xA;override this.System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteBigEndian : Span&lt;byte&gt; * int -&gt; bool" Usage="int128.System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteBigEndian (destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteBigEndian(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten) = System::Numerics::IBinaryInteger&lt;Int128&gt;::TryWriteBigEndian;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryInteger`1.TryWriteBigEndian(System.Span{System.Byte},System.Int32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">The span to which the current value should be written.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
        <summary>Tries to write the current value, in big-endian format, to a given span.</summary>
        <returns>
          <see langword="true" /> if the value was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryInteger`1.TryWriteBigEndian(System.Span{System.Byte},System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteLittleEndian">
      <MemberSignature Language="C#" Value="bool IBinaryInteger&lt;Int128&gt;.TryWriteLittleEndian (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteLittleEndian(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.System#Numerics#IBinaryInteger&lt;System#Int128&gt;#TryWriteLittleEndian(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Function TryWriteLittleEndian (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean Implements IBinaryInteger(Of Int128).TryWriteLittleEndian" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteLittleEndian : Span&lt;byte&gt; * int -&gt; bool&#xA;override this.System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteLittleEndian : Span&lt;byte&gt; * int -&gt; bool" Usage="int128.System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteLittleEndian (destination, bytesWritten)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Numerics.IBinaryInteger&lt;System.Int128&gt;.TryWriteLittleEndian(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten) = System::Numerics::IBinaryInteger&lt;Int128&gt;::TryWriteLittleEndian;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryInteger`1.TryWriteLittleEndian(System.Span{System.Byte},System.Int32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">The span to which the current value should be written.</param>
        <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
        <summary>Tries to write the current value, in little-endian format, to a given span.</summary>
        <returns>
          <see langword="true" /> if the value was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryInteger`1.TryWriteLittleEndian(System.Span{System.Byte},System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="int128.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current object.</summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="int128.ToString provider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
        <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string? format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="int128.ToString format" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">The format to use, or a <see langword="null" /> reference to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
        <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string? format, IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="int128.ToString (format, provider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">The format to use, or a <see langword="null" /> reference to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Formats the value of the current instance using the specified format.</summary>
        <returns>The value of the current instance in the specified format.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrailingZeroCount">
      <MemberSignature Language="C#" Value="public static Int128 TrailingZeroCount (Int128 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Int128 TrailingZeroCount(valuetype System.Int128 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.TrailingZeroCount(System.Int128)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrailingZeroCount (value As Int128) As Int128" />
      <MemberSignature Language="F#" Value="static member TrailingZeroCount : Int128 -&gt; Int128" Usage="System.Int128.TrailingZeroCount value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Int128 TrailingZeroCount(Int128 value) = System::Numerics::IBinaryInteger&lt;Int128&gt;::TrailingZeroCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.IBinaryInteger`1.TrailingZeroCount(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int128" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Computes the number of trailing zeros in a value.</summary>
        <returns>The number of trailing zeros in <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.IBinaryInteger`1.TrailingZeroCount(`0)" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider? provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = Nothing, Optional provider As IFormatProvider = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool&#xA;override this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="int128.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ISpanFormattable.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("NumericFormat")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">The span in which to write this instance's value formatted as a span of characters.</param>
        <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination" />.</param>
        <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
        <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
        <summary>Tries to format the value of the current instance into the provided span of characters.</summary>
        <returns>
          <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out Int128 result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.Int128&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.TryParse(System.ReadOnlySpan{System.Char},System.Int128@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * Int128 -&gt; bool" Usage="System.Int128.TryParse (s, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] Int128 % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Int128" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">The span of characters to parse.</param>
        <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
        <summary>Tries to parse a span of characters into a value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string? s, out Int128 result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.Int128&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.TryParse(System.String,System.Int128@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : string * Int128 -&gt; bool" Usage="System.Int128.TryParse (s, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] Int128 % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="result" Type="System.Int128" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">The string to parse.</param>
        <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
        <summary>Tries to parse a string into a value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider? provider, out Int128 result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, [out] valuetype System.Int128&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Int128@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, ByRef result As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * Int128 -&gt; bool" Usage="System.Int128.TryParse (s, provider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, [Runtime::InteropServices::Out] Int128 % result) = ISpanParsable&lt;Int128&gt;::TryParse;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Int128" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">The string to parse.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
        <summary>Tries to parse a string into a value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.ISpanParsable`1.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,`0@)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string? s, IFormatProvider? provider, out Int128 result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, [out] valuetype System.Int128&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.TryParse(System.String,System.IFormatProvider,System.Int128@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, ByRef result As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * Int128 -&gt; bool" Usage="System.Int128.TryParse (s, provider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, [Runtime::InteropServices::Out] Int128 % result) = IParsable&lt;Int128&gt;::TryParse;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Int128" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">The string to parse.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
        <summary>Tries to parse a string into a value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.IParsable`1.TryParse(System.String,System.IFormatProvider,`0@)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider? provider, out Int128 result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Int128&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int128@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider * Int128 -&gt; bool" Usage="System.Int128.TryParse (s, style, provider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] Int128 % result) = System::Numerics::INumberBase&lt;Int128&gt;::TryParse;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Int128" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">The span of characters to parse.</param>
        <param name="style">A bitwise combination of number styles that can be present in <paramref name="s" />.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
        <summary>Tries to parse a span of characters into a value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string? s, System.Globalization.NumberStyles style, IFormatProvider? provider, out Int128 result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Int128&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int128.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int128@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Int128) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider * Int128 -&gt; bool" Usage="System.Int128.TryParse (s, style, provider, result)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] Int128 % result) = System::Numerics::INumberBase&lt;Int128&gt;::TryParse;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Int128" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">The string to parse.</param>
        <param name="style">A bitwise combination of number styles that can be present in <paramref name="s" />.</param>
        <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
        <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
        <summary>Tries to parse a string into a value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static Int128 Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Int128 Zero" />
      <MemberSignature Language="DocId" Value="P:System.Int128.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Zero As Int128" />
      <MemberSignature Language="F#" Value="static member Zero : Int128" Usage="Zero" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Int128 Zero { Int128 get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.INumberBase`1.Zero</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int128</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value <c>0</c> for the type.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.INumberBase`1.Zero" />
      </Docs>
    </Member>
  </Members>
</Type>
