<Type Name="IFloatingPoint&lt;TSelf&gt;" FullName="System.IFloatingPoint&lt;TSelf&gt;">
  <TypeSignature Language="C#" Value="public interface IFloatingPoint&lt;TSelf&gt; : IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;, IAdditiveIdentity&lt;TSelf,TSelf&gt;, IComparable&lt;TSelf&gt;, IComparisonOperators&lt;TSelf,TSelf&gt;, IDecrementOperators&lt;TSelf&gt;, IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;, IEqualityOperators&lt;TSelf,TSelf&gt;, IEquatable&lt;TSelf&gt;, IIncrementOperators&lt;TSelf&gt;, IModulusOperators&lt;TSelf,TSelf,TSelf&gt;, IMultiplicativeIdentity&lt;TSelf,TSelf&gt;, IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;, INumber&lt;TSelf&gt;, IParseable&lt;TSelf&gt;, ISignedNumber&lt;TSelf&gt;, ISpanParseable&lt;TSelf&gt;, ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;, IUnaryNegationOperators&lt;TSelf,TSelf&gt;, IUnaryPlusOperators&lt;TSelf,TSelf&gt; where TSelf : IFloatingPoint&lt;TSelf&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFloatingPoint`1&lt;(class System.IFloatingPoint`1&lt;!TSelf&gt;) TSelf&gt; implements class System.IAdditionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.IAdditiveIdentity`2&lt;!TSelf, !TSelf&gt;, class System.IComparable, class System.IComparable`1&lt;!TSelf&gt;, class System.IComparisonOperators`2&lt;!TSelf, !TSelf&gt;, class System.IDecrementOperators`1&lt;!TSelf&gt;, class System.IDivisionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.IEqualityOperators`2&lt;!TSelf, !TSelf&gt;, class System.IEquatable`1&lt;!TSelf&gt;, class System.IFormattable, class System.IIncrementOperators`1&lt;!TSelf&gt;, class System.IModulusOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.IMultiplicativeIdentity`2&lt;!TSelf, !TSelf&gt;, class System.IMultiplyOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.INumber`1&lt;!TSelf&gt;, class System.IParseable`1&lt;!TSelf&gt;, class System.ISignedNumber`1&lt;!TSelf&gt;, class System.ISpanFormattable, class System.ISpanParseable`1&lt;!TSelf&gt;, class System.ISubtractionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.IUnaryNegationOperators`2&lt;!TSelf, !TSelf&gt;, class System.IUnaryPlusOperators`2&lt;!TSelf, !TSelf&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IFloatingPoint`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFloatingPoint(Of TSelf)&#xA;Implements IAdditionOperators(Of TSelf, TSelf, TSelf), IAdditiveIdentity(Of TSelf, TSelf), IComparable(Of TSelf), IComparisonOperators(Of TSelf, TSelf), IDecrementOperators(Of TSelf), IDivisionOperators(Of TSelf, TSelf, TSelf), IEqualityOperators(Of TSelf, TSelf), IEquatable(Of TSelf), IIncrementOperators(Of TSelf), IModulusOperators(Of TSelf, TSelf, TSelf), IMultiplicativeIdentity(Of TSelf, TSelf), IMultiplyOperators(Of TSelf, TSelf, TSelf), INumber(Of TSelf), IParseable(Of TSelf), ISignedNumber(Of TSelf), ISpanParseable(Of TSelf), ISubtractionOperators(Of TSelf, TSelf, TSelf), IUnaryNegationOperators(Of TSelf, TSelf), IUnaryPlusOperators(Of TSelf, TSelf)" />
  <TypeSignature Language="F#" Value="type IFloatingPoint&lt;'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt; = interface&#xA;    interface ISignedNumber&lt;'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface INumber&lt;'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IAdditionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IAdditiveIdentity&lt;'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IComparable&#xA;    interface IComparable&lt;'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IComparisonOperators&lt;'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IEqualityOperators&lt;'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IEquatable&lt;'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IDecrementOperators&lt;'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IDivisionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IFormattable&#xA;    interface IIncrementOperators&lt;'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IModulusOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IMultiplicativeIdentity&lt;'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IMultiplyOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IParseable&lt;'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface ISpanFormattable&#xA;    interface ISpanParseable&lt;'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface ISubtractionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IUnaryNegationOperators&lt;'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;&#xA;    interface IUnaryPlusOperators&lt;'Self, 'Self (requires 'Self :&gt; IFloatingPoint&lt;'Self&gt; and 'Self :&gt; IFloatingPoint&lt;'Self&gt;)&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSelf&gt;&#xA; where TSelf : IFloatingPoint&lt;TSelf&gt;public interface class IFloatingPoint : IAdditionOperators&lt;TSelf, TSelf, TSelf&gt;, IAdditiveIdentity&lt;TSelf, TSelf&gt;, IComparable&lt;TSelf&gt;, IComparisonOperators&lt;TSelf, TSelf&gt;, IDecrementOperators&lt;TSelf&gt;, IDivisionOperators&lt;TSelf, TSelf, TSelf&gt;, IEqualityOperators&lt;TSelf, TSelf&gt;, IEquatable&lt;TSelf&gt;, IIncrementOperators&lt;TSelf&gt;, IModulusOperators&lt;TSelf, TSelf, TSelf&gt;, IMultiplicativeIdentity&lt;TSelf, TSelf&gt;, IMultiplyOperators&lt;TSelf, TSelf, TSelf&gt;, INumber&lt;TSelf&gt;, IParseable&lt;TSelf&gt;, ISignedNumber&lt;TSelf&gt;, ISpanParseable&lt;TSelf&gt;, ISubtractionOperators&lt;TSelf, TSelf, TSelf&gt;, IUnaryNegationOperators&lt;TSelf, TSelf&gt;, IUnaryPlusOperators&lt;TSelf, TSelf&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSelf">
      <Constraints>
        <InterfaceName>System.IFloatingPoint&lt;TSelf&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IAdditiveIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;TOther&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparisonOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDecrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEqualityOperators&lt;TSelf,TOther&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEqualityOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;TOther&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IIncrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IModulusOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IMultiplicativeIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.INumber&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IParseable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISignedNumber&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanParseable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IUnaryNegationOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IUnaryPlusOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.RequiresPreviewFeatures("Generic Math is in preview.", Url="https://aka.ms/dotnet-warnings/generic-math-preview")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.RequiresPreviewFeatures("Generic Math is in preview.", Url="https://aka.ms/dotnet-warnings/generic-math-preview")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TSelf">The type that implements the interface.</typeparam>
    <summary>Defines a floating-point type.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static TSelf Acos (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Acos(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Acos(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Acos : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Acos x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Acos(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose arc-cosine is to be computed.</param>
        <summary>Computes the arc-cosine of a value.</summary>
        <returns>The arc-cosine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public static TSelf Acosh (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Acosh(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Acosh(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acosh (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Acosh : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Acosh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Acosh(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic arc-cosine is to be computed.</param>
        <summary>Computes the hyperbolic arc-cosine of a value.</summary>
        <returns>The hyperbolic arc-cosine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static TSelf Asin (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Asin(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Asin(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Asin : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Asin x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Asin(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose arc-sine is to be computed.</param>
        <summary>Computes the arc-sine of a value.</summary>
        <returns>The arc-sine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public static TSelf Asinh (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Asinh(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Asinh(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asinh (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Asinh : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Asinh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Asinh(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic arc-sine is to be computed.</param>
        <summary>Computes the hyperbolic arc-sine of a value.</summary>
        <returns>The hyperbolic arc-sine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static TSelf Atan (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Atan(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Atan(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Atan : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Atan x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Atan(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose arc-tangent is to be computed.</param>
        <summary>Computes the arc-tangent of a value.</summary>
        <returns>The arc-tangent of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static TSelf Atan2 (TSelf y, TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Atan2(!TSelf y, !TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Atan2(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As TSelf, x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Atan2 : 'Self * 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Atan2 (y, x)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Atan2(TSelf y, TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="TSelf" />
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="y">The y-coordinate of a point.</param>
        <param name="x">The x-coordinate of a point.</param>
        <summary>Computes the arc-tangent of the quotient of two values.</summary>
        <returns>The arc-tangent of <paramref name="y" /> divided-by <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public static TSelf Atanh (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Atanh(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Atanh(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atanh (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Atanh : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Atanh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Atanh(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic arc-tangent is to be computed.</param>
        <summary>Computes the hyperbolic arc-tangent of a value.</summary>
        <returns>The hyperbolic arc-tangent of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitDecrement">
      <MemberSignature Language="C#" Value="public static TSelf BitDecrement (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf BitDecrement(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.BitDecrement(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitDecrement (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member BitDecrement : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.BitDecrement x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf BitDecrement(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value to be bitwise decremented.</param>
        <summary>Decrements a value to the smallest value that compares less than a given value.</summary>
        <returns>The smallest value that compares less than <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitIncrement">
      <MemberSignature Language="C#" Value="public static TSelf BitIncrement (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf BitIncrement(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.BitIncrement(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitIncrement (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member BitIncrement : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.BitIncrement x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf BitIncrement(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value to be bitwise incremented.</param>
        <summary>Increments a value to the smallest value that compares greater than a given value.</summary>
        <returns>The smallest value that compares greater than <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static TSelf Cbrt (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Cbrt(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Cbrt(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Cbrt : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Cbrt x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Cbrt(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose cube-root is to be computed.</param>
        <summary>Computes the cube-root of a value.</summary>
        <returns>The cube-root of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static TSelf Ceiling (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Ceiling(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Ceiling(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Ceiling : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Ceiling x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Ceiling(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose ceiling is to be computed.</param>
        <summary>Computes the ceiling of a value.</summary>
        <returns>The ceiling of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopySign">
      <MemberSignature Language="C#" Value="public static TSelf CopySign (TSelf x, TSelf y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf CopySign(!TSelf x, !TSelf y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.CopySign(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CopySign (x As TSelf, y As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member CopySign : 'Self * 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.CopySign (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf CopySign(TSelf x, TSelf y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="y" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose magnitude is used in the result.</param>
        <param name="y">The value whose sign is used in the result.</param>
        <summary>Copies the sign of a value to the sign of another value..</summary>
        <returns>A value with the magnitude of <paramref name="x" /> and the sign of <paramref name="y" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static TSelf Cos (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Cos(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Cos(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Cos : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Cos x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Cos(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose cosine is to be computed.</param>
        <summary>Computes the cosine of a value.</summary>
        <returns>The cosine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static TSelf Cosh (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Cosh(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Cosh(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Cosh : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Cosh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Cosh(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic cosine is to be computed.</param>
        <summary>Computes the hyperbolic cosine of a value.</summary>
        <returns>The hyperbolic cosine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public static TSelf E { get; }" />
      <MemberSignature Language="ILAsm" Value=".property !TSelf E" />
      <MemberSignature Language="DocId" Value="P:System.IFloatingPoint`1.E" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property E As TSelf" />
      <MemberSignature Language="F#" Value="member this.E : 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.E" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TSelf E { TSelf get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mathematical constant <c>e</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public static TSelf Epsilon { get; }" />
      <MemberSignature Language="ILAsm" Value=".property !TSelf Epsilon" />
      <MemberSignature Language="DocId" Value="P:System.IFloatingPoint`1.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Epsilon As TSelf" />
      <MemberSignature Language="F#" Value="member this.Epsilon : 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Epsilon" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TSelf Epsilon { TSelf get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the smallest value such that can be added to <c>0</c> that does not result in <c>0</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static TSelf Exp (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Exp(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Exp(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Exp : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Exp x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Exp(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <see cref="P:System.IFloatingPoint`1.E" /> is raised.</param>
        <summary>Computes <see cref="P:System.IFloatingPoint`1.E" /> raised to a given power.</summary>
        <returns>
          <see cref="P:System.IFloatingPoint`1.E" /> raised to the power of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static TSelf Floor (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Floor(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Floor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Floor : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Floor x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Floor(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose floor is to be computed.</param>
        <summary>Computes the floor of a value.</summary>
        <returns>The floor of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FusedMultiplyAdd">
      <MemberSignature Language="C#" Value="public static TSelf FusedMultiplyAdd (TSelf left, TSelf right, TSelf addend);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf FusedMultiplyAdd(!TSelf left, !TSelf right, !TSelf addend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.FusedMultiplyAdd(`0,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FusedMultiplyAdd (left As TSelf, right As TSelf, addend As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member FusedMultiplyAdd : 'Self * 'Self * 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.FusedMultiplyAdd (left, right, addend)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf FusedMultiplyAdd(TSelf left, TSelf right, TSelf addend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="TSelf" />
        <Parameter Name="right" Type="TSelf" />
        <Parameter Name="addend" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="left">The value which <paramref name="right" /> multiplies.</param>
        <param name="right">The value which multiplies <paramref name="left" />.</param>
        <param name="addend">The value that is added to the product of <paramref name="left" /> and <paramref name="right" />.</param>
        <summary>Computes the fused multiply-add of three values.</summary>
        <returns>The result of <paramref name="left" /> times <paramref name="right" /> plus <paramref name="addend" /> computed as one ternary operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="C#" Value="public static TSelf IEEERemainder (TSelf left, TSelf right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf IEEERemainder(!TSelf left, !TSelf right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.IEEERemainder(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEERemainder (left As TSelf, right As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member IEEERemainder : 'Self * 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.IEEERemainder (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf IEEERemainder(TSelf left, TSelf right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="TSelf" />
        <Parameter Name="right" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="left">The value which <paramref name="right" /> divides.</param>
        <param name="right">The value which divides <paramref name="left" />.</param>
        <summary>Computes the remainder of two values as specified by IEEE 754.</summary>
        <returns>The remainder of <paramref name="left" /> divided-by <paramref name="right" /> as specified by IEEE 754.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ILogB&lt;TInteger&gt;">
      <MemberSignature Language="C#" Value="public static TInteger ILogB&lt;TInteger&gt; (TSelf x) where TInteger : IBinaryInteger&lt;TInteger&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !!TInteger ILogB&lt;(class System.IBinaryInteger`1&lt;!!TInteger&gt;) TInteger&gt;(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.ILogB``1(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ILogB(Of TInteger As IBinaryInteger(Of TInteger)) (x As TSelf) As TInteger" />
      <MemberSignature Language="F#" Value="static member ILogB : 'Self -&gt; 'Integer (requires 'Integer :&gt; IBinaryInteger&lt;'Integer&gt;)" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.ILogB x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInteger&gt;&#xA; where TInteger : IBinaryInteger&lt;TInteger&gt; static TInteger ILogB(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TInteger</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInteger">
          <Constraints>
            <InterfaceName>System.IBinaryInteger&lt;TInteger&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <typeparam name="TInteger">To be added.</typeparam>
        <param name="x">The value whose integer logarithm is to be computed.</param>
        <summary>Computes the integer logarithm of a value.</summary>
        <returns>The integer logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual bool IsFinite(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.IsFinite(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (value As TSelf) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsFinite : 'Self -&gt; bool" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.IsFinite value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value is finite.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is finite; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual bool IsInfinity(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.IsInfinity(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (value As TSelf) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsInfinity : 'Self -&gt; bool" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.IsInfinity value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value is infinite.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is infinite; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual bool IsNaN(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.IsNaN(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (value As TSelf) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNaN : 'Self -&gt; bool" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.IsNaN value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value is NaN.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is NaN; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual bool IsNegative(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.IsNegative(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (value As TSelf) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNegative : 'Self -&gt; bool" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.IsNegative value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value is negative.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is negative; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual bool IsNegativeInfinity(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.IsNegativeInfinity(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (value As TSelf) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNegativeInfinity : 'Self -&gt; bool" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.IsNegativeInfinity value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value is negative infinity.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is negative infinity; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual bool IsNormal(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.IsNormal(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (value As TSelf) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNormal : 'Self -&gt; bool" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.IsNormal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value is normal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is normal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual bool IsPositiveInfinity(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.IsPositiveInfinity(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (value As TSelf) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPositiveInfinity : 'Self -&gt; bool" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.IsPositiveInfinity value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value is positive infinity.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is positive infinity; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual bool IsSubnormal(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.IsSubnormal(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (value As TSelf) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSubnormal : 'Self -&gt; bool" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.IsSubnormal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">The value to be checked.</param>
        <summary>Determines if a value is subnormal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is subnormal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static TSelf Log (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Log(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Log(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Log : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Log x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Log(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose natural logarithm is to be computed.</param>
        <summary>Computes the natural (<c>base-<see cref="P:System.IFloatingPoint`1.E" /></c> logarithm of a value.</summary>
        <returns>The natural logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static TSelf Log (TSelf x, TSelf newBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Log(!TSelf x, !TSelf newBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Log(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As TSelf, newBase As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Log : 'Self * 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Log (x, newBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Log(TSelf x, TSelf newBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="newBase" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose logarithm is to be computed.</param>
        <param name="newBase">The base in which the logarithm is to be computed.</param>
        <summary>Computes the logarithm of a value in the specified base.</summary>
        <returns>The base-<paramref name="newBase" /> logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static TSelf Log10 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Log10(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Log10(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Log10 : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Log10 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Log10(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose base-10 logarithm is to be computed.</param>
        <summary>Computes the base-10 logarithm of a value.</summary>
        <returns>The base-10 logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public static TSelf Log2 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Log2(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Log2(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log2 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Log2 : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Log2 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Log2(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose base-2 logarithm is to be computed.</param>
        <summary>Computes the base-2 logarithm of a value.</summary>
        <returns>The base-2 logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxMagnitude">
      <MemberSignature Language="C#" Value="public static TSelf MaxMagnitude (TSelf x, TSelf y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf MaxMagnitude(!TSelf x, !TSelf y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.MaxMagnitude(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaxMagnitude (x As TSelf, y As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member MaxMagnitude : 'Self * 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.MaxMagnitude (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf MaxMagnitude(TSelf x, TSelf y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="y" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value to compare with <paramref name="y" />.</param>
        <param name="y">The value to compare with <paramref name="x" />.</param>
        <summary>Compares two values to compute which is greater.</summary>
        <returns>
          <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.IFloatingPoint`1> this method matches the IEEE 754:2019 `maximumMagnitude` function. This requires NaN inputs to not be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinMagnitude">
      <MemberSignature Language="C#" Value="public static TSelf MinMagnitude (TSelf x, TSelf y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf MinMagnitude(!TSelf x, !TSelf y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.MinMagnitude(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MinMagnitude (x As TSelf, y As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member MinMagnitude : 'Self * 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.MinMagnitude (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf MinMagnitude(TSelf x, TSelf y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="y" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value to compare with <paramref name="y" />.</param>
        <param name="y">The value to compare with <paramref name="x" />.</param>
        <summary>Compares two values to compute which is lesser.</summary>
        <returns>
          <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

For <xref:System.IFloatingPoint`1> this method matches the IEEE 754:2019 `minimumMagnitude` function. This requires NaN inputs to not be propagated back to the caller and for `-0.0` to be treated as less than `+0.0`.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public static TSelf NaN { get; }" />
      <MemberSignature Language="ILAsm" Value=".property !TSelf NaN" />
      <MemberSignature Language="DocId" Value="P:System.IFloatingPoint`1.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NaN As TSelf" />
      <MemberSignature Language="F#" Value="member this.NaN : 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.NaN" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TSelf NaN { TSelf get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that represents <c>NaN</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public static TSelf NegativeInfinity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property !TSelf NegativeInfinity" />
      <MemberSignature Language="DocId" Value="P:System.IFloatingPoint`1.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NegativeInfinity As TSelf" />
      <MemberSignature Language="F#" Value="member this.NegativeInfinity : 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.NegativeInfinity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TSelf NegativeInfinity { TSelf get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that represents negative <c>infinity</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegativeZero">
      <MemberSignature Language="C#" Value="public static TSelf NegativeZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property !TSelf NegativeZero" />
      <MemberSignature Language="DocId" Value="P:System.IFloatingPoint`1.NegativeZero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NegativeZero As TSelf" />
      <MemberSignature Language="F#" Value="member this.NegativeZero : 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.NegativeZero" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TSelf NegativeZero { TSelf get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that represents negative <c>zero</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public static TSelf Pi { get; }" />
      <MemberSignature Language="ILAsm" Value=".property !TSelf Pi" />
      <MemberSignature Language="DocId" Value="P:System.IFloatingPoint`1.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Pi As TSelf" />
      <MemberSignature Language="F#" Value="member this.Pi : 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Pi" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TSelf Pi { TSelf get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mathematical constant <c>pi</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public static TSelf PositiveInfinity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property !TSelf PositiveInfinity" />
      <MemberSignature Language="DocId" Value="P:System.IFloatingPoint`1.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PositiveInfinity As TSelf" />
      <MemberSignature Language="F#" Value="member this.PositiveInfinity : 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.PositiveInfinity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TSelf PositiveInfinity { TSelf get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that represents positive <c>infinity</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static TSelf Pow (TSelf x, TSelf y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Pow(!TSelf x, !TSelf y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Pow(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As TSelf, y As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Pow : 'Self * 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Pow (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Pow(TSelf x, TSelf y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="y" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value which is raised to the power of <paramref name="x" />.</param>
        <param name="y">The power to which <paramref name="x" /> is raised.</param>
        <summary>Computes a value raised to a given power.</summary>
        <returns>
          <see cref="P:System.IFloatingPoint`1.E" /> raised to the power of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static TSelf Round (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Round(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Round(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Round : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Round x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Round(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value to round.</param>
        <summary>Rounds a value to the nearest integer using the default rounding mode (<see cref="F:System.MidpointRounding.ToEven" />).</summary>
        <returns>The result of rounding <paramref name="x" /> to the nearest integer using the default rounding mode.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static TSelf Round (TSelf x, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Round(!TSelf x, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Round(`0,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As TSelf, mode As MidpointRounding) As TSelf" />
      <MemberSignature Language="F#" Value="static member Round : 'Self * MidpointRounding -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Round (x, mode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Round(TSelf x, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="x">The value to round.</param>
        <param name="mode">The mode under which <paramref name="x" /> should be rounded.</param>
        <summary>Rounds a value to the nearest integer using the specified rounding mode.</summary>
        <returns>The result of rounding <paramref name="x" /> to the nearest integer using <paramref name="mode" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Round&lt;TInteger&gt;">
      <MemberSignature Language="C#" Value="public static TSelf Round&lt;TInteger&gt; (TSelf x, TInteger digits) where TInteger : IBinaryInteger&lt;TInteger&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Round&lt;(class System.IBinaryInteger`1&lt;!!TInteger&gt;) TInteger&gt;(!TSelf x, !!TInteger digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Round``1(`0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round(Of TInteger As IBinaryInteger(Of TInteger)) (x As TSelf, digits As TInteger) As TSelf" />
      <MemberSignature Language="F#" Value="static member Round : 'Self * 'Integer -&gt; 'Self (requires 'Integer :&gt; IBinaryInteger&lt;'Integer&gt;)" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Round (x, digits)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInteger&gt;&#xA; where TInteger : IBinaryInteger&lt;TInteger&gt; static TSelf Round(TSelf x, TInteger digits);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInteger">
          <Constraints>
            <InterfaceName>System.IBinaryInteger&lt;TInteger&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="digits" Type="TInteger" />
      </Parameters>
      <Docs>
        <typeparam name="TInteger">To be added.</typeparam>
        <param name="x">The value to round.</param>
        <param name="digits">The number of fractional digits to which <paramref name="x" /> should be rounded.</param>
        <summary>Rounds a value to a specified number of fractional-digits using the default rounding mode (<see cref="F:System.MidpointRounding.ToEven" />).</summary>
        <returns>The result of rounding <paramref name="x" /> to <paramref name="digits" /> fractional-digits using the default rounding mode.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Round&lt;TInteger&gt;">
      <MemberSignature Language="C#" Value="public static TSelf Round&lt;TInteger&gt; (TSelf x, TInteger digits, MidpointRounding mode) where TInteger : IBinaryInteger&lt;TInteger&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Round&lt;(class System.IBinaryInteger`1&lt;!!TInteger&gt;) TInteger&gt;(!TSelf x, !!TInteger digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Round``1(`0,``0,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round(Of TInteger As IBinaryInteger(Of TInteger)) (x As TSelf, digits As TInteger, mode As MidpointRounding) As TSelf" />
      <MemberSignature Language="F#" Value="static member Round : 'Self * 'Integer * MidpointRounding -&gt; 'Self (requires 'Integer :&gt; IBinaryInteger&lt;'Integer&gt;)" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Round (x, digits, mode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInteger&gt;&#xA; where TInteger : IBinaryInteger&lt;TInteger&gt; static TSelf Round(TSelf x, TInteger digits, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInteger">
          <Constraints>
            <InterfaceName>System.IBinaryInteger&lt;TInteger&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="digits" Type="TInteger" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <typeparam name="TInteger">To be added.</typeparam>
        <param name="x">The value to round.</param>
        <param name="digits">The number of fractional digits to which <paramref name="x" /> should be rounded.</param>
        <param name="mode">The mode under which <paramref name="x" /> should be rounded.</param>
        <summary>Rounds a value to a specified number of fractional-digits using the default rounding mode (<see cref="F:System.MidpointRounding.ToEven" />).</summary>
        <returns>The result of rounding <paramref name="x" /> to <paramref name="digits" /> fractional-digits using <paramref name="mode" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleB&lt;TInteger&gt;">
      <MemberSignature Language="C#" Value="public static TSelf ScaleB&lt;TInteger&gt; (TSelf x, TInteger n) where TInteger : IBinaryInteger&lt;TInteger&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf ScaleB&lt;(class System.IBinaryInteger`1&lt;!!TInteger&gt;) TInteger&gt;(!TSelf x, !!TInteger n) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.ScaleB``1(`0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ScaleB(Of TInteger As IBinaryInteger(Of TInteger)) (x As TSelf, n As TInteger) As TSelf" />
      <MemberSignature Language="F#" Value="static member ScaleB : 'Self * 'Integer -&gt; 'Self (requires 'Integer :&gt; IBinaryInteger&lt;'Integer&gt;)" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.ScaleB (x, n)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInteger&gt;&#xA; where TInteger : IBinaryInteger&lt;TInteger&gt; static TSelf ScaleB(TSelf x, TInteger n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInteger">
          <Constraints>
            <InterfaceName>System.IBinaryInteger&lt;TInteger&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="n" Type="TInteger" />
      </Parameters>
      <Docs>
        <typeparam name="TInteger">To be added.</typeparam>
        <param name="x">The value which base-radix raised to the power of <paramref name="n" /> multiplies.</param>
        <param name="n">The value to which base-radix is raised before multipliying <paramref name="x" />.</param>
        <summary>Computes the product of a value and its base-radix raised to the specified power.</summary>
        <returns>The product of <paramref name="x" /> and base-radix raised to the power of <paramref name="n" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static TSelf Sin (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Sin(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Sin(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Sin : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Sin x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Sin(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose sine is to be computed.</param>
        <summary>Computes the sine of a value.</summary>
        <returns>The sine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static TSelf Sinh (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Sinh(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Sinh(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Sinh : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Sinh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Sinh(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic sine is to be computed.</param>
        <summary>Computes the hyperbolic sine of a value.</summary>
        <returns>The hyperbolic sine of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static TSelf Sqrt (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Sqrt(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Sqrt(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Sqrt : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Sqrt x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Sqrt(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose square-root is to be computed.</param>
        <summary>Computes the square-root of a value.</summary>
        <returns>The square-root of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static TSelf Tan (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Tan(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Tan(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Tan : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Tan x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Tan(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose tangent is to be computed.</param>
        <summary>Computes the tangent of a value.</summary>
        <returns>The tangent of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static TSelf Tanh (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Tanh(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Tanh(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Tanh : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Tanh x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Tanh(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value, in radians, whose hyperbolic tangent is to be computed.</param>
        <summary>Computes the hyperbolic tangent of a value.</summary>
        <returns>The hyperbolic tangent of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tau">
      <MemberSignature Language="C#" Value="public static TSelf Tau { get; }" />
      <MemberSignature Language="ILAsm" Value=".property !TSelf Tau" />
      <MemberSignature Language="DocId" Value="P:System.IFloatingPoint`1.Tau" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Tau As TSelf" />
      <MemberSignature Language="F#" Value="member this.Tau : 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Tau" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TSelf Tau { TSelf get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mathematical constant <c>tau</c>.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static TSelf Truncate (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Truncate(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFloatingPoint`1.Truncate(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Truncate : 'Self -&gt; 'Self" Usage="System.IFloatingPoint&lt;'Self (requires 'Self :&gt; System.IFloatingPoint&lt;'Self&gt;)&gt;.Truncate x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Truncate(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value to truncate.</param>
        <summary>Truncates a value.</summary>
        <returns>The truncation of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
