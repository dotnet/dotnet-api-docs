<Type Name="MemoryExtensions+SpanSplitEnumerator&lt;T&gt;" FullName="System.MemoryExtensions+SpanSplitEnumerator&lt;T&gt;">
  <TypeSignature Language="C#" Value="public ref struct MemoryExtensions.SpanSplitEnumerator&lt;T&gt; : System.Collections.Generic.IEnumerator&lt;Range&gt; where T : IEquatable&lt;T&gt;" FrameworkAlternate="net-10.0" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit MemoryExtensions/SpanSplitEnumerator`1&lt;(class System.IEquatable`1&lt;!T&gt;) T&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Range&gt;, class System.Collections.IEnumerator, class System.IDisposable" FrameworkAlternate="net-10.0" />
  <TypeSignature Language="DocId" Value="T:System.MemoryExtensions.SpanSplitEnumerator`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure MemoryExtensions.SpanSplitEnumerator(Of T)&#xA;Implements IEnumerator(Of Range)" FrameworkAlternate="net-10.0" />
  <TypeSignature Language="F#" Value="type MemoryExtensions.SpanSplitEnumerator&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; = struct&#xA;    interface IEnumerator&lt;Range&gt;&#xA;    interface IEnumerator&#xA;    interface IDisposable" FrameworkAlternate="net-10.0" />
  <TypeSignature Language="C++ CLI" Value="public: generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;value class MemoryExtensions::SpanSplitEnumerator : System::Collections::Generic::IEnumerator&lt;Range&gt;" FrameworkAlternate="net-10.0" />
  <TypeSignature Language="C#" Value="public ref struct MemoryExtensions.SpanSplitEnumerator&lt;T&gt; where T : IEquatable&lt;T&gt;" FrameworkAlternate="net-9.0" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit MemoryExtensions/SpanSplitEnumerator`1&lt;(class System.IEquatable`1&lt;!T&gt;) T&gt; extends System.ValueType" FrameworkAlternate="net-9.0" />
  <TypeSignature Language="VB.NET" Value="Public Structure MemoryExtensions.SpanSplitEnumerator(Of T)" FrameworkAlternate="net-9.0" />
  <TypeSignature Language="F#" Value="type MemoryExtensions.SpanSplitEnumerator&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt; = struct" FrameworkAlternate="net-9.0" />
  <TypeSignature Language="C++ CLI" Value="public: generic &lt;typename T&gt;&#xA; where T : IEquatable&lt;T&gt;value class MemoryExtensions::SpanSplitEnumerator" FrameworkAlternate="net-9.0" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Memory" ToVersion="10.0.0.0" FrameworkAlternate="net-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Memory" ToVersion="9.0.0.0" FrameworkAlternate="net-9.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" Index="0" FrameworkAlternate="net-9.0">
      <Constraints>
        <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="net-10.0">
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Range&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-10.0">
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-10.0">
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsByRefLike]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsByRefLike&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">The type of items in the <see cref="T:System.MemoryExtensions.SpanSplitEnumerator`1" />.</typeparam>
    <summary>Enables enumerating each split within a <see cref="T:System.ReadOnlySpan`1" /> that has been divided using one or more separators.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public Range Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Range Current" />
      <MemberSignature Language="DocId" Value="P:System.MemoryExtensions.SpanSplitEnumerator`1.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Range" />
      <MemberSignature Language="F#" Value="member this.Current : Range" Usage="System.MemoryExtensions.SpanSplitEnumerator&lt;'T (requires 'T :&gt; System.IEquatable&lt;'T&gt;)&gt;.Current" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Range Current { Range get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0">P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current element of the enumeration.</summary>
        <value>A <see cref="T:System.Range" /> instance that indicates the bounds of the current element withing the source span.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public MemoryExtensions.SpanSplitEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.MemoryExtensions/SpanSplitEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SpanSplitEnumerator`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As MemoryExtensions.SpanSplitEnumerator(Of T)" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; MemoryExtensions.SpanSplitEnumerator&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt;" Usage="spanSplitEnumerator.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryExtensions::SpanSplitEnumerator&lt;T&gt; GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MemoryExtensions+SpanSplitEnumerator&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an enumerator that allows for iteration over the split span.</summary>
        <returns>A <see cref="T:System.MemoryExtensions.SpanSplitEnumerator`1" /> that can be used to iterate over the split span.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" FrameworkAlternate="net-10.0" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SpanSplitEnumerator`1.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="spanSplitEnumerator.MoveNext " FrameworkAlternate="net-10.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" FrameworkAlternate="net-10.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" FrameworkAlternate="net-9.0" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="spanSplitEnumerator.MoveNext " FrameworkAlternate="net-9.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" FrameworkAlternate="net-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0">M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Advances the enumerator to the next element of the enumeration.</summary>
        <returns>
          <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the enumeration.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Source { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Source" />
      <MemberSignature Language="DocId" Value="P:System.MemoryExtensions.SpanSplitEnumerator`1.Source" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Source As ReadOnlySpan(Of T)" />
      <MemberSignature Language="F#" Value="member this.Source : ReadOnlySpan&lt;'T (requires 'T :&gt; IEquatable&lt;'T&gt;)&gt;" Usage="System.MemoryExtensions.SpanSplitEnumerator&lt;'T (requires 'T :&gt; System.IEquatable&lt;'T&gt;)&gt;.Source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;T&gt; Source { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-10.0">
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.MemoryExtensions.SpanSplitEnumerator`1.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IEnumerator.Current : obj" Usage="System.Collections.IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Reset">
      <MemberSignature Language="C#" Value="void IEnumerator.Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IEnumerator.Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SpanSplitEnumerator`1.System#Collections#IEnumerator#Reset" />
      <MemberSignature Language="VB.NET" Value="Sub Reset () Implements IEnumerator.Reset" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerator.Reset : unit -&gt; unit&#xA;override this.System.Collections.IEnumerator.Reset : unit -&gt; unit" Usage="spanSplitEnumerator.System.Collections.IEnumerator.Reset " />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IEnumerator.Reset() = System::Collections::IEnumerator::Reset;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MemoryExtensions.SpanSplitEnumerator`1.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="spanSplitEnumerator.System.IDisposable.Dispose " />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
