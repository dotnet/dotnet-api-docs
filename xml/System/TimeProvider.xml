<Type Name="TimeProvider" FullName="System.TimeProvider">
  <TypeSignature Language="C#" Value="public abstract class TimeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TimeProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.TimeProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TimeProvider" />
  <TypeSignature Language="F#" Value="type TimeProvider = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeProvider abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="Microsoft.Bcl.TimeProvider" FromVersion="9.0.0.0" To="System.Runtime" ToVersion="8.0.0.0" FrameworkAlternate="net-8.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides an abstraction for time.</summary>
    <remarks>To make it easier to test time-dependent code, you can use <see cref="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider" /> from the Microsoft.Extensions.Time.Testing package.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TimeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TimeProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes the <see cref="T:System.TimeProvider" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public virtual System.Threading.ITimer CreateTimer (System.Threading.TimerCallback callback, object? state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.ITimer CreateTimer(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeProvider.CreateTimer(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTimer (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan) As ITimer" />
      <MemberSignature Language="F#" Value="abstract member CreateTimer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.ITimer&#xA;override this.CreateTimer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.ITimer" Usage="timeProvider.CreateTimer (callback, state, dueTime, period)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::ITimer ^ CreateTimer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ITimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">
            A delegate representing a method to be executed when the timer fires. The method specified for callback should be reentrant,
            as it may be invoked simultaneously on two threads if the timer fires again before or while a previous callback is still being handled.
            </param>
        <param name="state">An object to be passed to the <paramref name="callback" />. This may be null.</param>
        <param name="dueTime">The amount of time to delay before <paramref name="callback" /> is invoked. Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> to prevent the timer from starting. Specify <see cref="F:System.TimeSpan.Zero" /> to start the timer immediately.</param>
        <param name="period">The time interval between invocations of <paramref name="callback" />. Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> to disable periodic signaling.</param>
        <summary>Creates a new <see cref="T:System.Threading.ITimer" /> instance, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</summary>
        <returns>
            The newly created <see cref="T:System.Threading.ITimer" /> instance.
            </returns>
        <remarks>
          <para>
            The delegate specified by the callback parameter is invoked once after <paramref name="dueTime" /> elapses, and thereafter each time the <paramref name="period" /> time interval elapses.
            </para>
          <para>
            If <paramref name="dueTime" /> is zero, the callback is invoked immediately. If <paramref name="dueTime" /> is -1 milliseconds, <paramref name="callback" /> is not invoked; the timer is disabled,
            but can be re-enabled by calling the <see cref="M:System.Threading.ITimer.Change(System.TimeSpan,System.TimeSpan)" /> method.
            </para>
          <para>
            If <paramref name="period" /> is 0 or -1 milliseconds and <paramref name="dueTime" /> is positive, <paramref name="callback" /> is invoked once; the periodic behavior of the timer is disabled,
            but can be re-enabled using the <see cref="M:System.Threading.ITimer.Change(System.TimeSpan,System.TimeSpan)" /> method.
            </para>
          <para>
            The return <see cref="T:System.Threading.ITimer" /> instance will be implicitly rooted while the timer is still scheduled.
            </para>
          <para>
            <see cref="M:System.TimeProvider.CreateTimer(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" /> captures the <see cref="T:System.Threading.ExecutionContext" /> and stores that with the <see cref="T:System.Threading.ITimer" /> for use in invoking <paramref name="callback" />
            each time it's called. That capture can be suppressed with <see cref="M:System.Threading.ExecutionContext.SuppressFlow" />.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The number of milliseconds in the value of <paramref name="dueTime" /> or <paramref name="period" /> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite" />, or is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetElapsedTime">
      <MemberSignature Language="C#" Value="public TimeSpan GetElapsedTime (long startingTimestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetElapsedTime(int64 startingTimestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeProvider.GetElapsedTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElapsedTime (startingTimestamp As Long) As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.GetElapsedTime : int64 -&gt; TimeSpan" Usage="timeProvider.GetElapsedTime startingTimestamp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetElapsedTime(long startingTimestamp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startingTimestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="startingTimestamp">The timestamp marking the beginning of the time period.</param>
        <summary>
            Gets the elapsed time since the <paramref name="startingTimestamp" /> value retrieved using <see cref="M:System.TimeProvider.GetTimestamp" />.
            </summary>
        <returns>A <see cref="T:System.TimeSpan" /> for the elapsed time between the starting timestamp and the time of this call.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElapsedTime">
      <MemberSignature Language="C#" Value="public TimeSpan GetElapsedTime (long startingTimestamp, long endingTimestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetElapsedTime(int64 startingTimestamp, int64 endingTimestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeProvider.GetElapsedTime(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElapsedTime (startingTimestamp As Long, endingTimestamp As Long) As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.GetElapsedTime : int64 * int64 -&gt; TimeSpan" Usage="timeProvider.GetElapsedTime (startingTimestamp, endingTimestamp)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetElapsedTime(long startingTimestamp, long endingTimestamp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startingTimestamp" Type="System.Int64" />
        <Parameter Name="endingTimestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="startingTimestamp">The timestamp marking the beginning of the time period.</param>
        <param name="endingTimestamp">The timestamp marking the end of the time period.</param>
        <summary>
            Gets the elapsed time between two timestamps retrieved using <see cref="M:System.TimeProvider.GetTimestamp" />.
            </summary>
        <returns>A <see cref="T:System.TimeSpan" /> for the elapsed time between the starting and ending timestamps.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocalNow">
      <MemberSignature Language="C#" Value="public DateTimeOffset GetLocalNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset GetLocalNow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeProvider.GetLocalNow" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalNow () As DateTimeOffset" />
      <MemberSignature Language="F#" Value="member this.GetLocalNow : unit -&gt; DateTimeOffset" Usage="timeProvider.GetLocalNow " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset GetLocalNow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> value that is set to the current date and time according to this <see cref="T:System.TimeProvider" />'s
            notion of time based on <see cref="M:System.TimeProvider.GetUtcNow" />, with the offset set to the <see cref="P:System.TimeProvider.LocalTimeZone" />'s offset from Coordinated Universal Time (UTC).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public virtual long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeProvider.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTimestamp () As Long" />
      <MemberSignature Language="F#" Value="abstract member GetTimestamp : unit -&gt; int64&#xA;override this.GetTimestamp : unit -&gt; int64" Usage="timeProvider.GetTimestamp " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long GetTimestamp();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the current high-frequency value designed to measure small time intervals with high accuracy in the timer mechanism.
            </summary>
        <returns>A long integer representing the high-frequency counter value of the underlying timer mechanism. </returns>
        <remarks>
            The default implementation returns <see cref="M:System.Diagnostics.Stopwatch.GetTimestamp" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUtcNow">
      <MemberSignature Language="C#" Value="public virtual DateTimeOffset GetUtcNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTimeOffset GetUtcNow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeProvider.GetUtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUtcNow () As DateTimeOffset" />
      <MemberSignature Language="F#" Value="abstract member GetUtcNow : unit -&gt; DateTimeOffset&#xA;override this.GetUtcNow : unit -&gt; DateTimeOffset" Usage="timeProvider.GetUtcNow " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTimeOffset GetUtcNow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> value whose date and time are set to the current
            Coordinated Universal Time (UTC) date and time and whose offset is Zero,
            all according to this <see cref="T:System.TimeProvider" />'s notion of time.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The default implementation returns <see cref="P:System.DateTimeOffset.UtcNow" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalTimeZone">
      <MemberSignature Language="C#" Value="public virtual TimeZoneInfo LocalTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.TimeZoneInfo LocalTimeZone" />
      <MemberSignature Language="DocId" Value="P:System.TimeProvider.LocalTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalTimeZone As TimeZoneInfo" />
      <MemberSignature Language="F#" Value="member this.LocalTimeZone : TimeZoneInfo" Usage="System.TimeProvider.LocalTimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property TimeZoneInfo ^ LocalTimeZone { TimeZoneInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone according to this <see cref="T:System.TimeProvider" />'s notion of time.
            </summary>
        <value>To be added.</value>
        <remarks>
            The default implementation returns <see cref="P:System.TimeZoneInfo.Local" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="System">
      <MemberSignature Language="C#" Value="public static TimeProvider System { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeProvider System" />
      <MemberSignature Language="DocId" Value="P:System.TimeProvider.System" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property System As TimeProvider" />
      <MemberSignature Language="F#" Value="static member System : TimeProvider" Usage="System.TimeProvider.System" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeProvider ^ System { TimeProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a <see cref="T:System.TimeProvider" /> that provides a clock based on <see cref="P:System.DateTimeOffset.UtcNow" />,
            a time zone based on <see cref="P:System.TimeZoneInfo.Local" />, a high-performance time stamp based on <see cref="T:System.Diagnostics.Stopwatch" />,
            and a timer based on <see cref="T:System.Threading.Timer" />.
            </summary>
        <value>To be added.</value>
        <remarks>
            If the <see cref="P:System.TimeZoneInfo.Local" /> changes after the object is returned, the change will be reflected in any subsequent operations that retrieve <see cref="M:System.TimeProvider.GetLocalNow" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimestampFrequency">
      <MemberSignature Language="C#" Value="public virtual long TimestampFrequency { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TimestampFrequency" />
      <MemberSignature Language="DocId" Value="P:System.TimeProvider.TimestampFrequency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TimestampFrequency As Long" />
      <MemberSignature Language="F#" Value="member this.TimestampFrequency : int64" Usage="System.TimeProvider.TimestampFrequency" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long TimestampFrequency { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the frequency of <see cref="M:System.TimeProvider.GetTimestamp" /> of high-frequency value per second.
            </summary>
        <value>To be added.</value>
        <remarks>
            The default implementation returns <see cref="F:System.Diagnostics.Stopwatch.Frequency" />. For a given TimeProvider instance, the value must be idempotent and remain unchanged.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
