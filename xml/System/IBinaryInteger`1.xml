<Type Name="IBinaryInteger&lt;TSelf&gt;" FullName="System.IBinaryInteger&lt;TSelf&gt;">
  <TypeSignature Language="C#" Value="public interface IBinaryInteger&lt;TSelf&gt; : IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;, IAdditiveIdentity&lt;TSelf,TSelf&gt;, IBinaryNumber&lt;TSelf&gt;, IBitwiseOperators&lt;TSelf,TSelf,TSelf&gt;, IComparable&lt;TSelf&gt;, IComparisonOperators&lt;TSelf,TSelf&gt;, IDecrementOperators&lt;TSelf&gt;, IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;, IEqualityOperators&lt;TSelf,TSelf&gt;, IEquatable&lt;TSelf&gt;, IIncrementOperators&lt;TSelf&gt;, IModulusOperators&lt;TSelf,TSelf,TSelf&gt;, IMultiplicativeIdentity&lt;TSelf,TSelf&gt;, IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;, INumber&lt;TSelf&gt;, IParseable&lt;TSelf&gt;, IShiftOperators&lt;TSelf,TSelf&gt;, ISpanParseable&lt;TSelf&gt;, ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;, IUnaryNegationOperators&lt;TSelf,TSelf&gt;, IUnaryPlusOperators&lt;TSelf,TSelf&gt; where TSelf : IBinaryInteger&lt;TSelf&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinaryInteger`1&lt;(class System.IBinaryInteger`1&lt;!TSelf&gt;) TSelf&gt; implements class System.IAdditionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.IAdditiveIdentity`2&lt;!TSelf, !TSelf&gt;, class System.IBinaryNumber`1&lt;!TSelf&gt;, class System.IBitwiseOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.IComparable, class System.IComparable`1&lt;!TSelf&gt;, class System.IComparisonOperators`2&lt;!TSelf, !TSelf&gt;, class System.IDecrementOperators`1&lt;!TSelf&gt;, class System.IDivisionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.IEqualityOperators`2&lt;!TSelf, !TSelf&gt;, class System.IEquatable`1&lt;!TSelf&gt;, class System.IFormattable, class System.IIncrementOperators`1&lt;!TSelf&gt;, class System.IModulusOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.IMultiplicativeIdentity`2&lt;!TSelf, !TSelf&gt;, class System.IMultiplyOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.INumber`1&lt;!TSelf&gt;, class System.IParseable`1&lt;!TSelf&gt;, class System.IShiftOperators`2&lt;!TSelf, !TSelf&gt;, class System.ISpanFormattable, class System.ISpanParseable`1&lt;!TSelf&gt;, class System.ISubtractionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.IUnaryNegationOperators`2&lt;!TSelf, !TSelf&gt;, class System.IUnaryPlusOperators`2&lt;!TSelf, !TSelf&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IBinaryInteger`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinaryInteger(Of TSelf)&#xA;Implements IAdditionOperators(Of TSelf, TSelf, TSelf), IAdditiveIdentity(Of TSelf, TSelf), IBinaryNumber(Of TSelf), IBitwiseOperators(Of TSelf, TSelf, TSelf), IComparable(Of TSelf), IComparisonOperators(Of TSelf, TSelf), IDecrementOperators(Of TSelf), IDivisionOperators(Of TSelf, TSelf, TSelf), IEqualityOperators(Of TSelf, TSelf), IEquatable(Of TSelf), IIncrementOperators(Of TSelf), IModulusOperators(Of TSelf, TSelf, TSelf), IMultiplicativeIdentity(Of TSelf, TSelf), IMultiplyOperators(Of TSelf, TSelf, TSelf), INumber(Of TSelf), IParseable(Of TSelf), IShiftOperators(Of TSelf, TSelf), ISpanParseable(Of TSelf), ISubtractionOperators(Of TSelf, TSelf, TSelf), IUnaryNegationOperators(Of TSelf, TSelf), IUnaryPlusOperators(Of TSelf, TSelf)" />
  <TypeSignature Language="F#" Value="type IBinaryInteger&lt;'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt; = interface&#xA;    interface IBinaryNumber&lt;'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IBitwiseOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface INumber&lt;'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IAdditionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IAdditiveIdentity&lt;'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IComparable&#xA;    interface IComparable&lt;'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IComparisonOperators&lt;'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IEqualityOperators&lt;'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IEquatable&lt;'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IDecrementOperators&lt;'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IDivisionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IFormattable&#xA;    interface IIncrementOperators&lt;'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IModulusOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IMultiplicativeIdentity&lt;'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IMultiplyOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IParseable&lt;'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface ISpanFormattable&#xA;    interface ISpanParseable&lt;'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface ISubtractionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IUnaryNegationOperators&lt;'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IUnaryPlusOperators&lt;'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;&#xA;    interface IShiftOperators&lt;'Self, 'Self (requires 'Self :&gt; IBinaryInteger&lt;'Self&gt; and 'Self :&gt; IBinaryInteger&lt;'Self&gt;)&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSelf&gt;&#xA; where TSelf : IBinaryInteger&lt;TSelf&gt;public interface class IBinaryInteger : IAdditionOperators&lt;TSelf, TSelf, TSelf&gt;, IAdditiveIdentity&lt;TSelf, TSelf&gt;, IBinaryNumber&lt;TSelf&gt;, IBitwiseOperators&lt;TSelf, TSelf, TSelf&gt;, IComparable&lt;TSelf&gt;, IComparisonOperators&lt;TSelf, TSelf&gt;, IDecrementOperators&lt;TSelf&gt;, IDivisionOperators&lt;TSelf, TSelf, TSelf&gt;, IEqualityOperators&lt;TSelf, TSelf&gt;, IEquatable&lt;TSelf&gt;, IIncrementOperators&lt;TSelf&gt;, IModulusOperators&lt;TSelf, TSelf, TSelf&gt;, IMultiplicativeIdentity&lt;TSelf, TSelf&gt;, IMultiplyOperators&lt;TSelf, TSelf, TSelf&gt;, INumber&lt;TSelf&gt;, IParseable&lt;TSelf&gt;, IShiftOperators&lt;TSelf, TSelf&gt;, ISpanParseable&lt;TSelf&gt;, ISubtractionOperators&lt;TSelf, TSelf, TSelf&gt;, IUnaryNegationOperators&lt;TSelf, TSelf&gt;, IUnaryPlusOperators&lt;TSelf, TSelf&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSelf">
      <Constraints>
        <InterfaceName>System.IBinaryInteger&lt;TSelf&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IAdditiveIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IBinaryNumber&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IBitwiseOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;TOther&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparisonOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDecrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEqualityOperators&lt;TSelf,TOther&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEqualityOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;TOther&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IIncrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IModulusOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IMultiplicativeIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.INumber&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IParseable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IShiftOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanParseable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IUnaryNegationOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IUnaryPlusOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.RequiresPreviewFeatures("Generic Math is in preview.", Url="https://aka.ms/dotnet-warnings/generic-math-preview")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.RequiresPreviewFeatures("Generic Math is in preview.", Url="https://aka.ms/dotnet-warnings/generic-math-preview")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TSelf">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="LeadingZeroCount">
      <MemberSignature Language="C#" Value="public static TSelf LeadingZeroCount (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf LeadingZeroCount(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IBinaryInteger`1.LeadingZeroCount(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeadingZeroCount (value As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member LeadingZeroCount : 'Self -&gt; 'Self" Usage="System.IBinaryInteger&lt;'Self (requires 'Self :&gt; System.IBinaryInteger&lt;'Self&gt;)&gt;.LeadingZeroCount value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf LeadingZeroCount(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopCount">
      <MemberSignature Language="C#" Value="public static TSelf PopCount (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf PopCount(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IBinaryInteger`1.PopCount(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PopCount (value As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member PopCount : 'Self -&gt; 'Self" Usage="System.IBinaryInteger&lt;'Self (requires 'Self :&gt; System.IBinaryInteger&lt;'Self&gt;)&gt;.PopCount value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf PopCount(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateLeft">
      <MemberSignature Language="C#" Value="public static TSelf RotateLeft (TSelf value, int rotateAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf RotateLeft(!TSelf value, int32 rotateAmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IBinaryInteger`1.RotateLeft(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RotateLeft (value As TSelf, rotateAmount As Integer) As TSelf" />
      <MemberSignature Language="F#" Value="static member RotateLeft : 'Self * int -&gt; 'Self" Usage="System.IBinaryInteger&lt;'Self (requires 'Self :&gt; System.IBinaryInteger&lt;'Self&gt;)&gt;.RotateLeft (value, rotateAmount)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf RotateLeft(TSelf value, int rotateAmount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
        <Parameter Name="rotateAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="rotateAmount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateRight">
      <MemberSignature Language="C#" Value="public static TSelf RotateRight (TSelf value, int rotateAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf RotateRight(!TSelf value, int32 rotateAmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IBinaryInteger`1.RotateRight(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RotateRight (value As TSelf, rotateAmount As Integer) As TSelf" />
      <MemberSignature Language="F#" Value="static member RotateRight : 'Self * int -&gt; 'Self" Usage="System.IBinaryInteger&lt;'Self (requires 'Self :&gt; System.IBinaryInteger&lt;'Self&gt;)&gt;.RotateRight (value, rotateAmount)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf RotateRight(TSelf value, int rotateAmount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
        <Parameter Name="rotateAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="rotateAmount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrailingZeroCount">
      <MemberSignature Language="C#" Value="public static TSelf TrailingZeroCount (TSelf value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf TrailingZeroCount(!TSelf value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IBinaryInteger`1.TrailingZeroCount(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrailingZeroCount (value As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member TrailingZeroCount : 'Self -&gt; 'Self" Usage="System.IBinaryInteger&lt;'Self (requires 'Self :&gt; System.IBinaryInteger&lt;'Self&gt;)&gt;.TrailingZeroCount value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf TrailingZeroCount(TSelf value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
