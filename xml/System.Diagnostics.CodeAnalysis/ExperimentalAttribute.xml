<Type Name="ExperimentalAttribute" FullName="System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
  <TypeSignature Language="C#" Value="public sealed class ExperimentalAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExperimentalAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExperimentalAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type ExperimentalAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExperimentalAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Constructor | System.AttributeTargets.Delegate | System.AttributeTargets.Enum | System.AttributeTargets.Event | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Method | System.AttributeTargets.Module | System.AttributeTargets.Property | System.AttributeTargets.Struct, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Constructor | System.AttributeTargets.Delegate | System.AttributeTargets.Enum | System.AttributeTargets.Event | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Method | System.AttributeTargets.Module | System.AttributeTargets.Property | System.AttributeTargets.Struct, Inherited=false)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indicates that an API is experimental and it may change in the future.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
<xref:System.Diagnostics.CodeAnalysis.ExperimentalAttribute> allows call sites to be flagged with a diagnostic that indicates that an experimental feature is used. You can use this attribute to ship preview features in otherwise stable libraries.

For more information about marking APIs as preview, see [Preview APIs](/dotnet/fundamentals/apicompat/preview-apis).
      ]]></format>
    </remarks>
    <seealso cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExperimentalAttribute (string diagnosticId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string diagnosticId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (diagnosticId As String)" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.ExperimentalAttribute : string -&gt; System.Diagnostics.CodeAnalysis.ExperimentalAttribute" Usage="new System.Diagnostics.CodeAnalysis.ExperimentalAttribute diagnosticId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExperimentalAttribute(System::String ^ diagnosticId);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="diagnosticId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute" /> class, specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiagnosticId">
      <MemberSignature Language="C#" Value="public string DiagnosticId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DiagnosticId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DiagnosticId As String" />
      <MemberSignature Language="F#" Value="member this.DiagnosticId : string" Usage="System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DiagnosticId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.</summary>
        <value>The unique diagnostic ID.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

The diagnostic ID is shown in build output for warnings and errors.

This property represents the unique ID that can be used to suppress
the warnings or errors, if needed.

[Choose an appropriate diagnostic ID](/dotnet/csharp/roslyn-sdk/choosing-diagnostic-ids) such that it is unique.
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlFormat">
      <MemberSignature Language="C#" Value="public string? UrlFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UrlFormat" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property UrlFormat As String" />
      <MemberSignature Language="F#" Value="member this.UrlFormat : string with get, set" Usage="System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UrlFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.</summary>
        <value>The format string that represents a URL to corresponding documentation.</value>
        <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
