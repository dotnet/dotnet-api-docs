<Type Name="DependencyInjectionSpecificationTests" FullName="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests">
  <TypeSignature Language="C#" Value="public abstract class DependencyInjectionSpecificationTests" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DependencyInjectionSpecificationTests extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DependencyInjectionSpecificationTests" />
  <TypeSignature Language="F#" Value="type DependencyInjectionSpecificationTests = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyInjectionSpecificationTests abstract" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DependencyInjectionSpecificationTests ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DependencyInjectionSpecificationTests();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AbstractClassConstrainedOpenGenericServicesCanBeResolved">
      <MemberSignature Language="C#" Value="public void AbstractClassConstrainedOpenGenericServicesCanBeResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AbstractClassConstrainedOpenGenericServicesCanBeResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AbstractClassConstrainedOpenGenericServicesCanBeResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub AbstractClassConstrainedOpenGenericServicesCanBeResolved ()" />
      <MemberSignature Language="F#" Value="member this.AbstractClassConstrainedOpenGenericServicesCanBeResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.AbstractClassConstrainedOpenGenericServicesCanBeResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AbstractClassConstrainedOpenGenericServicesCanBeResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttemptingToResolveNonexistentServiceReturnsNull">
      <MemberSignature Language="C#" Value="public void AttemptingToResolveNonexistentServiceReturnsNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttemptingToResolveNonexistentServiceReturnsNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttemptingToResolveNonexistentServiceReturnsNull ()" />
      <MemberSignature Language="F#" Value="member this.AttemptingToResolveNonexistentServiceReturnsNull : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.AttemptingToResolveNonexistentServiceReturnsNull " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttemptingToResolveNonexistentServiceReturnsNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuiltInServicesWithIsServiceReturnsTrue">
      <MemberSignature Language="C#" Value="public void BuiltInServicesWithIsServiceReturnsTrue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BuiltInServicesWithIsServiceReturnsTrue() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.BuiltInServicesWithIsServiceReturnsTrue" />
      <MemberSignature Language="VB.NET" Value="Public Sub BuiltInServicesWithIsServiceReturnsTrue ()" />
      <MemberSignature Language="F#" Value="member this.BuiltInServicesWithIsServiceReturnsTrue : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.BuiltInServicesWithIsServiceReturnsTrue " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BuiltInServicesWithIsServiceReturnsTrue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClosedGenericsWithIsService">
      <MemberSignature Language="C#" Value="public void ClosedGenericsWithIsService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClosedGenericsWithIsService() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedGenericsWithIsService" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClosedGenericsWithIsService ()" />
      <MemberSignature Language="F#" Value="member this.ClosedGenericsWithIsService : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ClosedGenericsWithIsService " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClosedGenericsWithIsService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClosedServicesPreferredOverOpenGenericServices">
      <MemberSignature Language="C#" Value="public void ClosedServicesPreferredOverOpenGenericServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClosedServicesPreferredOverOpenGenericServices() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClosedServicesPreferredOverOpenGenericServices ()" />
      <MemberSignature Language="F#" Value="member this.ClosedServicesPreferredOverOpenGenericServices : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ClosedServicesPreferredOverOpenGenericServices " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClosedServicesPreferredOverOpenGenericServices();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstrainedOpenGenericServicesCanBeResolved">
      <MemberSignature Language="C#" Value="public void ConstrainedOpenGenericServicesCanBeResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ConstrainedOpenGenericServicesCanBeResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ConstrainedOpenGenericServicesCanBeResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConstrainedOpenGenericServicesCanBeResolved ()" />
      <MemberSignature Language="F#" Value="member this.ConstrainedOpenGenericServicesCanBeResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ConstrainedOpenGenericServicesCanBeResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ConstrainedOpenGenericServicesCanBeResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstrainedOpenGenericServicesReturnsEmptyWithNoMatches">
      <MemberSignature Language="C#" Value="public void ConstrainedOpenGenericServicesReturnsEmptyWithNoMatches ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ConstrainedOpenGenericServicesReturnsEmptyWithNoMatches() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ConstrainedOpenGenericServicesReturnsEmptyWithNoMatches" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConstrainedOpenGenericServicesReturnsEmptyWithNoMatches ()" />
      <MemberSignature Language="F#" Value="member this.ConstrainedOpenGenericServicesReturnsEmptyWithNoMatches : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ConstrainedOpenGenericServicesReturnsEmptyWithNoMatches " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ConstrainedOpenGenericServicesReturnsEmptyWithNoMatches();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance_CapturesInnerException_OfTargetInvocationException">
      <MemberSignature Language="C#" Value="public void CreateInstance_CapturesInnerException_OfTargetInvocationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateInstance_CapturesInnerException_OfTargetInvocationException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstance_CapturesInnerException_OfTargetInvocationException" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateInstance_CapturesInnerException_OfTargetInvocationException ()" />
      <MemberSignature Language="F#" Value="member this.CreateInstance_CapturesInnerException_OfTargetInvocationException : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.CreateInstance_CapturesInnerException_OfTargetInvocationException " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateInstance_CapturesInnerException_OfTargetInvocationException();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance_WithAbstractTypeAndPublicConstructor_ThrowsCorrectException">
      <MemberSignature Language="C#" Value="public void CreateInstance_WithAbstractTypeAndPublicConstructor_ThrowsCorrectException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateInstance_WithAbstractTypeAndPublicConstructor_ThrowsCorrectException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstance_WithAbstractTypeAndPublicConstructor_ThrowsCorrectException" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateInstance_WithAbstractTypeAndPublicConstructor_ThrowsCorrectException ()" />
      <MemberSignature Language="F#" Value="member this.CreateInstance_WithAbstractTypeAndPublicConstructor_ThrowsCorrectException : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.CreateInstance_WithAbstractTypeAndPublicConstructor_ThrowsCorrectException " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateInstance_WithAbstractTypeAndPublicConstructor_ThrowsCorrectException();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFuncs">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;object[]&gt; CreateInstanceFuncs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEnumerable`1&lt;object[]&gt; CreateInstanceFuncs" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CreateInstanceFuncs As IEnumerable(Of Object())" />
      <MemberSignature Language="F#" Value="static member CreateInstanceFuncs : seq&lt;obj[]&gt;" Usage="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFuncs" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEnumerable&lt;cli::array &lt;System::Object ^&gt; ^&gt; ^ CreateInstanceFuncs { System::Collections::Generic::IEnumerable&lt;cli::array &lt;System::Object ^&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+&lt;get_CreateInstanceFuncs&gt;d__7))]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+&lt;get_CreateInstanceFuncs&gt;d__7))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object[]&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateServiceProvider">
      <MemberSignature Language="C#" Value="protected abstract IServiceProvider CreateServiceProvider (Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IServiceProvider CreateServiceProvider(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateServiceProvider (serviceCollection As IServiceCollection) As IServiceProvider" />
      <MemberSignature Language="F#" Value="abstract member CreateServiceProvider : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; IServiceProvider" Usage="dependencyInjectionSpecificationTests.CreateServiceProvider serviceCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract IServiceProvider ^ CreateServiceProvider(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ serviceCollection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Parameters>
      <Docs>
        <param name="serviceCollection">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposesInReverseOrderOfCreation">
      <MemberSignature Language="C#" Value="public void DisposesInReverseOrderOfCreation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisposesInReverseOrderOfCreation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposesInReverseOrderOfCreation" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisposesInReverseOrderOfCreation ()" />
      <MemberSignature Language="F#" Value="member this.DisposesInReverseOrderOfCreation : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.DisposesInReverseOrderOfCreation " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisposesInReverseOrderOfCreation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposingScopeDisposesService">
      <MemberSignature Language="C#" Value="public void DisposingScopeDisposesService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisposingScopeDisposesService() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.DisposingScopeDisposesService" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisposingScopeDisposesService ()" />
      <MemberSignature Language="F#" Value="member this.DisposingScopeDisposesService : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.DisposingScopeDisposesService " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisposingScopeDisposesService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpectStructWithPublicDefaultConstructorInvoked">
      <MemberSignature Language="C#" Value="public virtual bool ExpectStructWithPublicDefaultConstructorInvoked { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExpectStructWithPublicDefaultConstructorInvoked" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ExpectStructWithPublicDefaultConstructorInvoked" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExpectStructWithPublicDefaultConstructorInvoked As Boolean" />
      <MemberSignature Language="F#" Value="member this.ExpectStructWithPublicDefaultConstructorInvoked : bool" Usage="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ExpectStructWithPublicDefaultConstructorInvoked" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ExpectStructWithPublicDefaultConstructorInvoked { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExplicitServiceRegisterationWithIsService">
      <MemberSignature Language="C#" Value="public void ExplicitServiceRegisterationWithIsService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExplicitServiceRegisterationWithIsService() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ExplicitServiceRegisterationWithIsService" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExplicitServiceRegisterationWithIsService ()" />
      <MemberSignature Language="F#" Value="member this.ExplicitServiceRegisterationWithIsService : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ExplicitServiceRegisterationWithIsService " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExplicitServiceRegisterationWithIsService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactoryServicesAreCreatedAsPartOfCreatingObjectGraph">
      <MemberSignature Language="C#" Value="public void FactoryServicesAreCreatedAsPartOfCreatingObjectGraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FactoryServicesAreCreatedAsPartOfCreatingObjectGraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub FactoryServicesAreCreatedAsPartOfCreatingObjectGraph ()" />
      <MemberSignature Language="F#" Value="member this.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.FactoryServicesAreCreatedAsPartOfCreatingObjectGraph " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FactoryServicesAreCreatedAsPartOfCreatingObjectGraph();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactoryServicesCanBeCreatedByGetService">
      <MemberSignature Language="C#" Value="public void FactoryServicesCanBeCreatedByGetService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FactoryServicesCanBeCreatedByGetService() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService" />
      <MemberSignature Language="VB.NET" Value="Public Sub FactoryServicesCanBeCreatedByGetService ()" />
      <MemberSignature Language="F#" Value="member this.FactoryServicesCanBeCreatedByGetService : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.FactoryServicesCanBeCreatedByGetService " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FactoryServicesCanBeCreatedByGetService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceOrCreateInstanceRegisteredServiceSingleton">
      <MemberSignature Language="C#" Value="public void GetServiceOrCreateInstanceRegisteredServiceSingleton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetServiceOrCreateInstanceRegisteredServiceSingleton() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetServiceOrCreateInstanceRegisteredServiceSingleton ()" />
      <MemberSignature Language="F#" Value="member this.GetServiceOrCreateInstanceRegisteredServiceSingleton : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceSingleton " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetServiceOrCreateInstanceRegisteredServiceSingleton();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceOrCreateInstanceRegisteredServiceTransient">
      <MemberSignature Language="C#" Value="public void GetServiceOrCreateInstanceRegisteredServiceTransient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetServiceOrCreateInstanceRegisteredServiceTransient() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetServiceOrCreateInstanceRegisteredServiceTransient ()" />
      <MemberSignature Language="F#" Value="member this.GetServiceOrCreateInstanceRegisteredServiceTransient : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.GetServiceOrCreateInstanceRegisteredServiceTransient " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetServiceOrCreateInstanceRegisteredServiceTransient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceOrCreateInstanceUnregisteredService">
      <MemberSignature Language="C#" Value="public void GetServiceOrCreateInstanceUnregisteredService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetServiceOrCreateInstanceUnregisteredService() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetServiceOrCreateInstanceUnregisteredService ()" />
      <MemberSignature Language="F#" Value="member this.GetServiceOrCreateInstanceUnregisteredService : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.GetServiceOrCreateInstanceUnregisteredService " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetServiceOrCreateInstanceUnregisteredService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IEnumerableWithIsServiceAlwaysReturnsTrue">
      <MemberSignature Language="C#" Value="public void IEnumerableWithIsServiceAlwaysReturnsTrue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IEnumerableWithIsServiceAlwaysReturnsTrue() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.IEnumerableWithIsServiceAlwaysReturnsTrue" />
      <MemberSignature Language="VB.NET" Value="Public Sub IEnumerableWithIsServiceAlwaysReturnsTrue ()" />
      <MemberSignature Language="F#" Value="member this.IEnumerableWithIsServiceAlwaysReturnsTrue : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.IEnumerableWithIsServiceAlwaysReturnsTrue " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IEnumerableWithIsServiceAlwaysReturnsTrue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceConstrainedOpenGenericServicesCanBeResolved">
      <MemberSignature Language="C#" Value="public void InterfaceConstrainedOpenGenericServicesCanBeResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InterfaceConstrainedOpenGenericServicesCanBeResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.InterfaceConstrainedOpenGenericServicesCanBeResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub InterfaceConstrainedOpenGenericServicesCanBeResolved ()" />
      <MemberSignature Language="F#" Value="member this.InterfaceConstrainedOpenGenericServicesCanBeResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.InterfaceConstrainedOpenGenericServicesCanBeResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InterfaceConstrainedOpenGenericServicesCanBeResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastServiceReplacesPreviousServices">
      <MemberSignature Language="C#" Value="public void LastServiceReplacesPreviousServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LastServiceReplacesPreviousServices() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices" />
      <MemberSignature Language="VB.NET" Value="Public Sub LastServiceReplacesPreviousServices ()" />
      <MemberSignature Language="F#" Value="member this.LastServiceReplacesPreviousServices : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.LastServiceReplacesPreviousServices " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LastServiceReplacesPreviousServices();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultipleServiceCanBeIEnumerableResolved">
      <MemberSignature Language="C#" Value="public void MultipleServiceCanBeIEnumerableResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultipleServiceCanBeIEnumerableResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub MultipleServiceCanBeIEnumerableResolved ()" />
      <MemberSignature Language="F#" Value="member this.MultipleServiceCanBeIEnumerableResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.MultipleServiceCanBeIEnumerableResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultipleServiceCanBeIEnumerableResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NestedScopedServiceCanBeResolved">
      <MemberSignature Language="C#" Value="public void NestedScopedServiceCanBeResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NestedScopedServiceCanBeResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub NestedScopedServiceCanBeResolved ()" />
      <MemberSignature Language="F#" Value="member this.NestedScopedServiceCanBeResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NestedScopedServiceCanBeResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NestedScopedServiceCanBeResolvedWithNoFallbackProvider">
      <MemberSignature Language="C#" Value="public void NestedScopedServiceCanBeResolvedWithNoFallbackProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NestedScopedServiceCanBeResolvedWithNoFallbackProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider" />
      <MemberSignature Language="VB.NET" Value="Public Sub NestedScopedServiceCanBeResolvedWithNoFallbackProvider ()" />
      <MemberSignature Language="F#" Value="member this.NestedScopedServiceCanBeResolvedWithNoFallbackProvider : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.NestedScopedServiceCanBeResolvedWithNoFallbackProvider " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NestedScopedServiceCanBeResolvedWithNoFallbackProvider();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonexistentServiceCanBeIEnumerableResolved">
      <MemberSignature Language="C#" Value="public void NonexistentServiceCanBeIEnumerableResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NonexistentServiceCanBeIEnumerableResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub NonexistentServiceCanBeIEnumerableResolved ()" />
      <MemberSignature Language="F#" Value="member this.NonexistentServiceCanBeIEnumerableResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.NonexistentServiceCanBeIEnumerableResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NonexistentServiceCanBeIEnumerableResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonSingletonService_WithInjectedProvider_ResolvesScopeProvider">
      <MemberSignature Language="C#" Value="public void NonSingletonService_WithInjectedProvider_ResolvesScopeProvider (Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NonSingletonService_WithInjectedProvider_ResolvesScopeProvider(valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.NonSingletonService_WithInjectedProvider_ResolvesScopeProvider(Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub NonSingletonService_WithInjectedProvider_ResolvesScopeProvider (lifetime As ServiceLifetime)" />
      <MemberSignature Language="F#" Value="member this.NonSingletonService_WithInjectedProvider_ResolvesScopeProvider : Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; unit" Usage="dependencyInjectionSpecificationTests.NonSingletonService_WithInjectedProvider_ResolvesScopeProvider lifetime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NonSingletonService_WithInjectedProvider_ResolvesScopeProvider(Microsoft::Extensions::DependencyInjection::ServiceLifetime lifetime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[Xunit.InlineData(new System.Object[] { Mono.Cecil.CustomAttributeArgument })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.InlineData(new System.Object[] { Mono.Cecil.CustomAttributeArgument })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <param name="lifetime">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenGenericServicesCanBeResolved">
      <MemberSignature Language="C#" Value="public void OpenGenericServicesCanBeResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenGenericServicesCanBeResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenGenericServicesCanBeResolved ()" />
      <MemberSignature Language="F#" Value="member this.OpenGenericServicesCanBeResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.OpenGenericServicesCanBeResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenGenericServicesCanBeResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenGenericsWithIsService">
      <MemberSignature Language="C#" Value="public void OpenGenericsWithIsService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenGenericsWithIsService() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OpenGenericsWithIsService" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenGenericsWithIsService ()" />
      <MemberSignature Language="F#" Value="member this.OpenGenericsWithIsService : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.OpenGenericsWithIsService " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenGenericsWithIsService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OuterServiceCanHaveOtherServicesInjected">
      <MemberSignature Language="C#" Value="public void OuterServiceCanHaveOtherServicesInjected ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OuterServiceCanHaveOtherServicesInjected() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected" />
      <MemberSignature Language="VB.NET" Value="Public Sub OuterServiceCanHaveOtherServicesInjected ()" />
      <MemberSignature Language="F#" Value="member this.OuterServiceCanHaveOtherServicesInjected : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.OuterServiceCanHaveOtherServicesInjected " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OuterServiceCanHaveOtherServicesInjected();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved">
      <MemberSignature Language="C#" Value="public void RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved ()" />
      <MemberSignature Language="F#" Value="member this.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegistrationOrderIsPreservedWhenServicesAreIEnumerableResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolvesDifferentInstancesForServiceWhenResolvingEnumerable">
      <MemberSignature Language="C#" Value="public void ResolvesDifferentInstancesForServiceWhenResolvingEnumerable (Type serviceType, Type implementation, Type resolve, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResolvesDifferentInstancesForServiceWhenResolvingEnumerable(class System.Type serviceType, class System.Type implementation, class System.Type resolve, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ResolvesDifferentInstancesForServiceWhenResolvingEnumerable(System.Type,System.Type,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResolvesDifferentInstancesForServiceWhenResolvingEnumerable (serviceType As Type, implementation As Type, resolve As Type, lifetime As ServiceLifetime)" />
      <MemberSignature Language="F#" Value="member this.ResolvesDifferentInstancesForServiceWhenResolvingEnumerable : Type * Type * Type * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; unit" Usage="dependencyInjectionSpecificationTests.ResolvesDifferentInstancesForServiceWhenResolvingEnumerable (serviceType, implementation, resolve, lifetime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResolvesDifferentInstancesForServiceWhenResolvingEnumerable(Type ^ serviceType, Type ^ implementation, Type ^ resolve, Microsoft::Extensions::DependencyInjection::ServiceLifetime lifetime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[Xunit.InlineData(new System.Object[] { Mono.Cecil.CustomAttributeArgument, Mono.Cecil.CustomAttributeArgument, Mono.Cecil.CustomAttributeArgument, Mono.Cecil.CustomAttributeArgument })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.InlineData(new System.Object[] { Mono.Cecil.CustomAttributeArgument, Mono.Cecil.CustomAttributeArgument, Mono.Cecil.CustomAttributeArgument, Mono.Cecil.CustomAttributeArgument })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="implementation" Type="System.Type" />
        <Parameter Name="resolve" Type="System.Type" />
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <param name="serviceType">To be added.</param>
        <param name="implementation">To be added.</param>
        <param name="resolve">To be added.</param>
        <param name="lifetime">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolvesMixedOpenClosedGenericsAsEnumerable">
      <MemberSignature Language="C#" Value="public void ResolvesMixedOpenClosedGenericsAsEnumerable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResolvesMixedOpenClosedGenericsAsEnumerable() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ResolvesMixedOpenClosedGenericsAsEnumerable" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResolvesMixedOpenClosedGenericsAsEnumerable ()" />
      <MemberSignature Language="F#" Value="member this.ResolvesMixedOpenClosedGenericsAsEnumerable : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ResolvesMixedOpenClosedGenericsAsEnumerable " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResolvesMixedOpenClosedGenericsAsEnumerable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolvingEnumerableContainingOpenGenericServiceUsesCorrectSlot">
      <MemberSignature Language="C#" Value="public void ResolvingEnumerableContainingOpenGenericServiceUsesCorrectSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResolvingEnumerableContainingOpenGenericServiceUsesCorrectSlot() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ResolvingEnumerableContainingOpenGenericServiceUsesCorrectSlot" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResolvingEnumerableContainingOpenGenericServiceUsesCorrectSlot ()" />
      <MemberSignature Language="F#" Value="member this.ResolvingEnumerableContainingOpenGenericServiceUsesCorrectSlot : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ResolvingEnumerableContainingOpenGenericServiceUsesCorrectSlot " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResolvingEnumerableContainingOpenGenericServiceUsesCorrectSlot();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SafelyDisposeNestedProviderReferences">
      <MemberSignature Language="C#" Value="public void SafelyDisposeNestedProviderReferences ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SafelyDisposeNestedProviderReferences() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences" />
      <MemberSignature Language="VB.NET" Value="Public Sub SafelyDisposeNestedProviderReferences ()" />
      <MemberSignature Language="F#" Value="member this.SafelyDisposeNestedProviderReferences : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.SafelyDisposeNestedProviderReferences " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SafelyDisposeNestedProviderReferences();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScopedServiceCanBeResolved">
      <MemberSignature Language="C#" Value="public void ScopedServiceCanBeResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScopedServiceCanBeResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServiceCanBeResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScopedServiceCanBeResolved ()" />
      <MemberSignature Language="F#" Value="member this.ScopedServiceCanBeResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ScopedServiceCanBeResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScopedServiceCanBeResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed">
      <MemberSignature Language="C#" Value="public void ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed ()" />
      <MemberSignature Language="F#" Value="member this.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScopedServices_FromCachedScopeFactory_CanBeResolvedAndDisposed();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScopesAreFlatNotHierarchical">
      <MemberSignature Language="C#" Value="public void ScopesAreFlatNotHierarchical ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScopesAreFlatNotHierarchical() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ScopesAreFlatNotHierarchical" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScopesAreFlatNotHierarchical ()" />
      <MemberSignature Language="F#" Value="member this.ScopesAreFlatNotHierarchical : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ScopesAreFlatNotHierarchical " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScopesAreFlatNotHierarchical();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelfResolveThenDispose">
      <MemberSignature Language="C#" Value="public void SelfResolveThenDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelfResolveThenDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SelfResolveThenDispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelfResolveThenDispose ()" />
      <MemberSignature Language="F#" Value="member this.SelfResolveThenDispose : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.SelfResolveThenDispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelfResolveThenDispose();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceContainerPicksConstructorWithLongestMatches">
      <MemberSignature Language="C#" Value="public void ServiceContainerPicksConstructorWithLongestMatches (Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceContainerPicksConstructorWithLongestMatches(class Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, class Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceContainerPicksConstructorWithLongestMatches (serviceCollection As IServiceCollection, expected As TypeWithSupersetConstructors)" />
      <MemberSignature Language="F#" Value="member this.ServiceContainerPicksConstructorWithLongestMatches : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors -&gt; unit" Usage="dependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatches (serviceCollection, expected)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceContainerPicksConstructorWithLongestMatches(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ serviceCollection, Microsoft::Extensions::DependencyInjection::Specification::Fakes::TypeWithSupersetConstructors ^ expected);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("ServiceContainerPicksConstructorWithLongestMatchesData", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("ServiceContainerPicksConstructorWithLongestMatchesData", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceCollection" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" />
        <Parameter Name="expected" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors" />
      </Parameters>
      <Docs>
        <param name="serviceCollection">To be added.</param>
        <param name="expected">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceContainerPicksConstructorWithLongestMatchesData">
      <MemberSignature Language="C#" Value="public static Xunit.TheoryData ServiceContainerPicksConstructorWithLongestMatchesData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Xunit.TheoryData ServiceContainerPicksConstructorWithLongestMatchesData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ServiceContainerPicksConstructorWithLongestMatchesData As TheoryData" />
      <MemberSignature Language="F#" Value="static member ServiceContainerPicksConstructorWithLongestMatchesData : Xunit.TheoryData" Usage="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceContainerPicksConstructorWithLongestMatchesData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Xunit::TheoryData ^ ServiceContainerPicksConstructorWithLongestMatchesData { Xunit::TheoryData ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xunit.TheoryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceInstanceCanBeResolved">
      <MemberSignature Language="C#" Value="public void ServiceInstanceCanBeResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceInstanceCanBeResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceInstanceCanBeResolved ()" />
      <MemberSignature Language="F#" Value="member this.ServiceInstanceCanBeResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ServiceInstanceCanBeResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceInstanceCanBeResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceProviderIsDisposable">
      <MemberSignature Language="C#" Value="public void ServiceProviderIsDisposable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceProviderIsDisposable() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderIsDisposable" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceProviderIsDisposable ()" />
      <MemberSignature Language="F#" Value="member this.ServiceProviderIsDisposable : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ServiceProviderIsDisposable " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceProviderIsDisposable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceProviderRegistersServiceScopeFactory">
      <MemberSignature Language="C#" Value="public void ServiceProviderRegistersServiceScopeFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceProviderRegistersServiceScopeFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceProviderRegistersServiceScopeFactory ()" />
      <MemberSignature Language="F#" Value="member this.ServiceProviderRegistersServiceScopeFactory : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ServiceProviderRegistersServiceScopeFactory " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceProviderRegistersServiceScopeFactory();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceScopeFactoryIsSingleton">
      <MemberSignature Language="C#" Value="public void ServiceScopeFactoryIsSingleton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceScopeFactoryIsSingleton() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServiceScopeFactoryIsSingleton" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceScopeFactoryIsSingleton ()" />
      <MemberSignature Language="F#" Value="member this.ServiceScopeFactoryIsSingleton : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ServiceScopeFactoryIsSingleton " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceScopeFactoryIsSingleton();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices">
      <MemberSignature Language="C#" Value="public void ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices ()" />
      <MemberSignature Language="F#" Value="member this.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServicesRegisteredWithImplementationType_ReturnDifferentInstancesPerResolution_ForTransientServices();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons">
      <MemberSignature Language="C#" Value="public void ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons ()" />
      <MemberSignature Language="F#" Value="member this.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServicesRegisteredWithImplementationType_ReturnSameInstancesPerResolution_ForSingletons();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicesRegisteredWithImplementationTypeCanBeResolved">
      <MemberSignature Language="C#" Value="public void ServicesRegisteredWithImplementationTypeCanBeResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServicesRegisteredWithImplementationTypeCanBeResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServicesRegisteredWithImplementationTypeCanBeResolved ()" />
      <MemberSignature Language="F#" Value="member this.ServicesRegisteredWithImplementationTypeCanBeResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.ServicesRegisteredWithImplementationTypeCanBeResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServicesRegisteredWithImplementationTypeCanBeResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleServiceCanBeIEnumerableResolved">
      <MemberSignature Language="C#" Value="public void SingleServiceCanBeIEnumerableResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SingleServiceCanBeIEnumerableResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub SingleServiceCanBeIEnumerableResolved ()" />
      <MemberSignature Language="F#" Value="member this.SingleServiceCanBeIEnumerableResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.SingleServiceCanBeIEnumerableResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SingleServiceCanBeIEnumerableResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingletonServiceCanBeResolved">
      <MemberSignature Language="C#" Value="public void SingletonServiceCanBeResolved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SingletonServiceCanBeResolved() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolved" />
      <MemberSignature Language="VB.NET" Value="Public Sub SingletonServiceCanBeResolved ()" />
      <MemberSignature Language="F#" Value="member this.SingletonServiceCanBeResolved : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.SingletonServiceCanBeResolved " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SingletonServiceCanBeResolved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingletonServiceCanBeResolvedFromScope">
      <MemberSignature Language="C#" Value="public void SingletonServiceCanBeResolvedFromScope ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SingletonServiceCanBeResolvedFromScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServiceCanBeResolvedFromScope" />
      <MemberSignature Language="VB.NET" Value="Public Sub SingletonServiceCanBeResolvedFromScope ()" />
      <MemberSignature Language="F#" Value="member this.SingletonServiceCanBeResolvedFromScope : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.SingletonServiceCanBeResolvedFromScope " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SingletonServiceCanBeResolvedFromScope();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingletonServicesComeFromRootProvider">
      <MemberSignature Language="C#" Value="public void SingletonServicesComeFromRootProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SingletonServicesComeFromRootProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider" />
      <MemberSignature Language="VB.NET" Value="Public Sub SingletonServicesComeFromRootProvider ()" />
      <MemberSignature Language="F#" Value="member this.SingletonServicesComeFromRootProvider : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.SingletonServicesComeFromRootProvider " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SingletonServicesComeFromRootProvider();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsIServiceProviderIsService">
      <MemberSignature Language="C#" Value="public virtual bool SupportsIServiceProviderIsService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsIServiceProviderIsService" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SupportsIServiceProviderIsService" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsIServiceProviderIsService As Boolean" />
      <MemberSignature Language="F#" Value="member this.SupportsIServiceProviderIsService : bool" Usage="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.SupportsIServiceProviderIsService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsIServiceProviderIsService { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransientServiceCanBeResolvedFromProvider">
      <MemberSignature Language="C#" Value="public void TransientServiceCanBeResolvedFromProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransientServiceCanBeResolvedFromProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransientServiceCanBeResolvedFromProvider ()" />
      <MemberSignature Language="F#" Value="member this.TransientServiceCanBeResolvedFromProvider : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromProvider " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransientServiceCanBeResolvedFromProvider();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransientServiceCanBeResolvedFromScope">
      <MemberSignature Language="C#" Value="public void TransientServiceCanBeResolvedFromScope ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransientServiceCanBeResolvedFromScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransientServiceCanBeResolvedFromScope ()" />
      <MemberSignature Language="F#" Value="member this.TransientServiceCanBeResolvedFromScope : unit -&gt; unit" Usage="dependencyInjectionSpecificationTests.TransientServiceCanBeResolvedFromScope " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransientServiceCanBeResolvedFromScope();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Fact]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Fact&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide">
      <MemberSignature Language="C#" Value="public void TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorAcceptsAnyNumberOfAdditionalConstructorParametersToProvide(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorCanDisambiguateConstructorsWithUniqueArguments">
      <MemberSignature Language="C#" Value="public void TypeActivatorCanDisambiguateConstructorsWithUniqueArguments (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorCanDisambiguateConstructorsWithUniqueArguments (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorCanDisambiguateConstructorsWithUniqueArguments createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorCanDisambiguateConstructorsWithUniqueArguments(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches">
      <MemberSignature Language="C#" Value="public void TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches (Type paramType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(class System.Type paramType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches (paramType As Type)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches : Type -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches paramType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorCreateFactoryDoesNotAllowForAmbiguousConstructorMatches(Type ^ paramType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[Xunit.InlineData(new System.Object[] { Mono.Cecil.CustomAttributeArgument })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.InlineData(new System.Object[] { Mono.Cecil.CustomAttributeArgument })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paramType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="paramType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorCreateInstanceUsesLongestAvailableConstructor">
      <MemberSignature Language="C#" Value="public void TypeActivatorCreateInstanceUsesLongestAvailableConstructor (object value, string ctor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorCreateInstanceUsesLongestAvailableConstructor(object value, string ctor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorCreateInstanceUsesLongestAvailableConstructor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorCreateInstanceUsesLongestAvailableConstructor (value As Object, ctor As String)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorCreateInstanceUsesLongestAvailableConstructor : obj * string -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorCreateInstanceUsesLongestAvailableConstructor (value, ctor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorCreateInstanceUsesLongestAvailableConstructor(System::Object ^ value, System::String ^ ctor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[Xunit.InlineData(new System.Object[] { Mono.Cecil.CustomAttributeArgument, Mono.Cecil.CustomAttributeArgument })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.InlineData(new System.Object[] { Mono.Cecil.CustomAttributeArgument, Mono.Cecil.CustomAttributeArgument })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="ctor" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="ctor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer">
      <MemberSignature Language="C#" Value="public void TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorEnablesYouToCreateAnyTypeWithServicesEvenWhenNotInIocContainer(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorRequiresAllArgumentsCanBeAccepted">
      <MemberSignature Language="C#" Value="public void TypeActivatorRequiresAllArgumentsCanBeAccepted (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorRequiresAllArgumentsCanBeAccepted(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorRequiresAllArgumentsCanBeAccepted (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorRequiresAllArgumentsCanBeAccepted : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorRequiresAllArgumentsCanBeAccepted createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorRequiresAllArgumentsCanBeAccepted(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorRequiresPublicConstructor">
      <MemberSignature Language="C#" Value="public void TypeActivatorRequiresPublicConstructor (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorRequiresPublicConstructor(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorRequiresPublicConstructor (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc, type As Type)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorRequiresPublicConstructor : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc * Type -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorRequiresPublicConstructor (createFunc, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorRequiresPublicConstructor(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("TypesWithNonPublicConstructorData", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("TypesWithNonPublicConstructorData", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorRethrowsOriginalExceptionFromConstructor">
      <MemberSignature Language="C#" Value="public void TypeActivatorRethrowsOriginalExceptionFromConstructor (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorRethrowsOriginalExceptionFromConstructor(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorRethrowsOriginalExceptionFromConstructor (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorRethrowsOriginalExceptionFromConstructor : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorRethrowsOriginalExceptionFromConstructor createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorRethrowsOriginalExceptionFromConstructor(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorThrowsOnMultipleMarkedCtors">
      <MemberSignature Language="C#" Value="public void TypeActivatorThrowsOnMultipleMarkedCtors (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorThrowsOnMultipleMarkedCtors(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorThrowsOnMultipleMarkedCtors(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorThrowsOnMultipleMarkedCtors (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorThrowsOnMultipleMarkedCtors : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorThrowsOnMultipleMarkedCtors createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorThrowsOnMultipleMarkedCtors(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorThrowsWhenMarkedCtorDoesntAcceptArguments">
      <MemberSignature Language="C#" Value="public void TypeActivatorThrowsWhenMarkedCtorDoesntAcceptArguments (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorThrowsWhenMarkedCtorDoesntAcceptArguments(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorThrowsWhenMarkedCtorDoesntAcceptArguments(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorThrowsWhenMarkedCtorDoesntAcceptArguments (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorThrowsWhenMarkedCtorDoesntAcceptArguments : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorThrowsWhenMarkedCtorDoesntAcceptArguments createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorThrowsWhenMarkedCtorDoesntAcceptArguments(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorUsesMarkedConstructor">
      <MemberSignature Language="C#" Value="public void TypeActivatorUsesMarkedConstructor (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorUsesMarkedConstructor(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorUsesMarkedConstructor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorUsesMarkedConstructor (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorUsesMarkedConstructor : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorUsesMarkedConstructor createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorUsesMarkedConstructor(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorWorksWithCtorWithOptionalArgs">
      <MemberSignature Language="C#" Value="public void TypeActivatorWorksWithCtorWithOptionalArgs (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorWorksWithCtorWithOptionalArgs(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorWorksWithCtorWithOptionalArgs (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorWorksWithCtorWithOptionalArgs : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorWorksWithCtorWithOptionalArgs(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorWorksWithCtorWithOptionalArgs_WithStructDefaults">
      <MemberSignature Language="C#" Value="public void TypeActivatorWorksWithCtorWithOptionalArgs_WithStructDefaults (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorWorksWithCtorWithOptionalArgs_WithStructDefaults(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs_WithStructDefaults(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorWorksWithCtorWithOptionalArgs_WithStructDefaults (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorWorksWithCtorWithOptionalArgs_WithStructDefaults : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorWorksWithCtorWithOptionalArgs_WithStructDefaults createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorWorksWithCtorWithOptionalArgs_WithStructDefaults(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeActivatorWorksWithStaticCtor">
      <MemberSignature Language="C#" Value="public void TypeActivatorWorksWithStaticCtor (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TypeActivatorWorksWithStaticCtor(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TypeActivatorWorksWithStaticCtor (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.TypeActivatorWorksWithStaticCtor : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.TypeActivatorWorksWithStaticCtor createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TypeActivatorWorksWithStaticCtor(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypesWithNonPublicConstructorData">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;object[]&gt; TypesWithNonPublicConstructorData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEnumerable`1&lt;object[]&gt; TypesWithNonPublicConstructorData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TypesWithNonPublicConstructorData As IEnumerable(Of Object())" />
      <MemberSignature Language="F#" Value="static member TypesWithNonPublicConstructorData : seq&lt;obj[]&gt;" Usage="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.TypesWithNonPublicConstructorData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEnumerable&lt;cli::array &lt;System::Object ^&gt; ^&gt; ^ TypesWithNonPublicConstructorData { System::Collections::Generic::IEnumerable&lt;cli::array &lt;System::Object ^&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object[]&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnRegisteredServiceAsConstructorParameterThrowsException">
      <MemberSignature Language="C#" Value="public void UnRegisteredServiceAsConstructorParameterThrowsException (Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc createFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnRegisteredServiceAsConstructorParameterThrowsException(class Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests/CreateInstanceFunc createFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnRegisteredServiceAsConstructorParameterThrowsException (createFunc As DependencyInjectionSpecificationTests.CreateInstanceFunc)" />
      <MemberSignature Language="F#" Value="member this.UnRegisteredServiceAsConstructorParameterThrowsException : Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests.CreateInstanceFunc -&gt; unit" Usage="dependencyInjectionSpecificationTests.UnRegisteredServiceAsConstructorParameterThrowsException createFunc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnRegisteredServiceAsConstructorParameterThrowsException(Microsoft::Extensions::DependencyInjection::Specification::DependencyInjectionSpecificationTests::CreateInstanceFunc ^ createFunc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.MemberData("CreateInstanceFuncs", new System.Object[] {  })&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[Xunit.Theory]</AttributeName>
          <AttributeName Language="F#">[&lt;Xunit.Theory&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createFunc" Type="Microsoft.Extensions.DependencyInjection.Specification.DependencyInjectionSpecificationTests+CreateInstanceFunc" />
      </Parameters>
      <Docs>
        <param name="createFunc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
