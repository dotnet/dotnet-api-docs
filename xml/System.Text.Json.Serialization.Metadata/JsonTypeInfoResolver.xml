<Type Name="JsonTypeInfoResolver" FullName="System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver">
  <TypeSignature Language="C#" Value="public static class JsonTypeInfoResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonTypeInfoResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonTypeInfoResolver" />
  <TypeSignature Language="F#" Value="type JsonTypeInfoResolver = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonTypeInfoResolver abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contains utilities and combinators acting on <see cref="T:System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver Combine (params System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver[] resolvers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver Combine(class System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver[] resolvers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver.Combine(System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray resolvers As IJsonTypeInfoResolver()) As IJsonTypeInfoResolver" />
      <MemberSignature Language="F#" Value="static member Combine : System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver[] -&gt; System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver" Usage="System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver.Combine resolvers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Json::Serialization::Metadata::IJsonTypeInfoResolver ^ Combine(... cli::array &lt;System::Text::Json::Serialization::Metadata::IJsonTypeInfoResolver ^&gt; ^ resolvers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolvers" Type="System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="resolvers">Sequence of contract resolvers to be queried for metadata.</param>
        <summary>Combines multiple <see cref="T:System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver" /> sources into one.</summary>
        <returns>A <see cref="T:System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver" /> combining results from <paramref name="resolvers" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The combined resolver will query each of `resolvers` in the specified order,
             returning the first result that is non-null. If all `resolvers` return `null`,
             then the combined resolver will also return `null`.
            
Can be used to combine multiple <xref:System.Text.Json.Serialization.JsonSerializerContext> sources,
             which typically define contract metadata for small subsets of types.
             It can also be used to fall back to <xref:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver> wherever necessary.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resolvers" /> or any of its elements is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
