<Type Name="InvocationMiddleware" FullName="System.CommandLine.Invocation.InvocationMiddleware">
  <TypeSignature Language="C#" Value="public delegate System.Threading.Tasks.Task InvocationMiddleware(InvocationContext context, Func&lt;InvocationContext,Task&gt; next);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed InvocationMiddleware extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.Invocation.InvocationMiddleware" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function InvocationMiddleware(context As InvocationContext, next As Func(Of InvocationContext, Task)) As Task " />
  <TypeSignature Language="F#" Value="type InvocationMiddleware = delegate of InvocationContext * Func&lt;InvocationContext, Task&gt; -&gt; Task" />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Threading::Tasks::Task ^ InvocationMiddleware(InvocationContext ^ context, Func&lt;InvocationContext ^, Task ^&gt; ^ next);" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="context" Type="System.CommandLine.Invocation.InvocationContext" />
    <Parameter Name="next" Type="System.Func&lt;System.CommandLine.Invocation.InvocationContext,System.Threading.Tasks.Task&gt;" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Threading.Tasks.Task</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="context">The context for the current invocation, which will be passed to each middleware and then to the command handler, unless a middleware short circuits it.</param>
    <param name="next">A continuation. Passing the incoming <see cref="T:System.CommandLine.Invocation.InvocationContext" /> to it will execute the next middleware in the pipeline and, at the end of the pipeline, the command handler. Middleware can short circuit the invocation by not calling this continuation.</param>
    <summary>
            A delegate used for adding command handler invocation middleware.
            </summary>
    <returns>To be added.</returns>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
