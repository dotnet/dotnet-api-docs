<Type Name="IModulusOperators&lt;TSelf,TOther,TResult&gt;" FullName="System.Numerics.IModulusOperators&lt;TSelf,TOther,TResult&gt;">
  <TypeSignature Language="C#" Value="public interface IModulusOperators&lt;TSelf,TOther,TResult&gt; where TSelf : IModulusOperators&lt;TSelf,TOther,TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IModulusOperators`3&lt;(class System.Numerics.IModulusOperators`3&lt;!TSelf, !TOther, !TResult&gt;) TSelf, TOther, TResult&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.IModulusOperators`3" />
  <TypeSignature Language="VB.NET" Value="Public Interface IModulusOperators(Of TSelf, TOther, TResult)" />
  <TypeSignature Language="F#" Value="type IModulusOperators&lt;'Self, 'Other, 'Result (requires 'Self :&gt; IModulusOperators&lt;'Self, 'Other, 'Result&gt;)&gt; = interface" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSelf, typename TOther, typename TResult&gt;&#xA; where TSelf : IModulusOperators&lt;TSelf, TOther, TResult&gt;public interface class IModulusOperators" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSelf">
      <Constraints>
        <InterfaceName>System.Numerics.IModulusOperators&lt;TSelf,TOther,TResult&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TOther" />
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TSelf">The type that implements this interface.</typeparam>
    <typeparam name="TOther">The type that will divide <typeparamref name="TSelf" />.</typeparam>
    <typeparam name="TResult">The type that contains the modulus or remainder of <typeparamref name="TSelf" /> and <typeparamref name="TOther" />.</typeparam>
    <summary>Defines a mechanism for computing the modulus or remainder of two values.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

This type represents the `%` operator in C#, which is often used to compute the remainder. It may differ from an actual modulo operation depending on the type that implements the interface.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="op_Modulus">
      <MemberSignature Language="C#" Value="public static TResult operator % (TSelf left, TOther right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname virtual !TResult op_Modulus(!TSelf left, !TOther right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IModulusOperators`3.op_Modulus(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Mod (left As TSelf, right As TOther) As TResult" />
      <MemberSignature Language="F#" Value="static member ( % ) : 'Self * 'Other -&gt; 'Result" Usage="left % right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TResult operator %(TSelf left, TOther right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="TSelf" />
        <Parameter Name="right" Type="TOther" />
      </Parameters>
      <Docs>
        <param name="left">The value which <paramref name="right" /> divides.</param>
        <param name="right">The value which divides <paramref name="left" />.</param>
        <summary>Divides two values together to compute their modulus or remainder.</summary>
        <returns>The modulus or remainder of <paramref name="left" /> divided by <paramref name="right" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
