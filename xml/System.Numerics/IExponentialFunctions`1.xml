<Type Name="IExponentialFunctions&lt;TSelf&gt;" FullName="System.Numerics.IExponentialFunctions&lt;TSelf&gt;">
  <TypeSignature Language="C#" Value="public interface IExponentialFunctions&lt;TSelf&gt; : IEquatable&lt;TSelf&gt;, IParsable&lt;TSelf&gt;, ISpanParsable&lt;TSelf&gt;, System.Numerics.IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.IAdditiveIdentity&lt;TSelf,TSelf&gt;, System.Numerics.IDecrementOperators&lt;TSelf&gt;, System.Numerics.IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.IEqualityOperators&lt;TSelf,TSelf,bool&gt;, System.Numerics.IFloatingPointConstants&lt;TSelf&gt;, System.Numerics.IIncrementOperators&lt;TSelf&gt;, System.Numerics.IMultiplicativeIdentity&lt;TSelf,TSelf&gt;, System.Numerics.IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.INumberBase&lt;TSelf&gt;, System.Numerics.ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.IUnaryNegationOperators&lt;TSelf,TSelf&gt;, System.Numerics.IUnaryPlusOperators&lt;TSelf,TSelf&gt; where TSelf : IExponentialFunctions&lt;TSelf&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExponentialFunctions`1&lt;(class System.Numerics.IExponentialFunctions`1&lt;!TSelf&gt;) TSelf&gt; implements class System.IEquatable`1&lt;!TSelf&gt;, class System.IFormattable, class System.IParsable`1&lt;!TSelf&gt;, class System.ISpanFormattable, class System.ISpanParsable`1&lt;!TSelf&gt;, class System.Numerics.IAdditionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.IAdditiveIdentity`2&lt;!TSelf, !TSelf&gt;, class System.Numerics.IDecrementOperators`1&lt;!TSelf&gt;, class System.Numerics.IDivisionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.IEqualityOperators`3&lt;!TSelf, !TSelf, bool&gt;, class System.Numerics.IFloatingPointConstants`1&lt;!TSelf&gt;, class System.Numerics.IIncrementOperators`1&lt;!TSelf&gt;, class System.Numerics.IMultiplicativeIdentity`2&lt;!TSelf, !TSelf&gt;, class System.Numerics.IMultiplyOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.INumberBase`1&lt;!TSelf&gt;, class System.Numerics.ISubtractionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.IUnaryNegationOperators`2&lt;!TSelf, !TSelf&gt;, class System.Numerics.IUnaryPlusOperators`2&lt;!TSelf, !TSelf&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.IExponentialFunctions`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IExponentialFunctions(Of TSelf)&#xA;Implements IAdditionOperators(Of TSelf, TSelf, TSelf), IAdditiveIdentity(Of TSelf, TSelf), IDecrementOperators(Of TSelf), IDivisionOperators(Of TSelf, TSelf, TSelf), IEqualityOperators(Of TSelf, TSelf, Boolean), IEquatable(Of TSelf), IFloatingPointConstants(Of TSelf), IIncrementOperators(Of TSelf), IMultiplicativeIdentity(Of TSelf, TSelf), IMultiplyOperators(Of TSelf, TSelf, TSelf), INumberBase(Of TSelf), IParsable(Of TSelf), ISpanParsable(Of TSelf), ISubtractionOperators(Of TSelf, TSelf, TSelf), IUnaryNegationOperators(Of TSelf, TSelf), IUnaryPlusOperators(Of TSelf, TSelf)" />
  <TypeSignature Language="F#" Value="type IExponentialFunctions&lt;'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt; = interface&#xA;    interface IFloatingPointConstants&lt;'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface INumberBase&lt;'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IEquatable&lt;'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IFormattable&#xA;    interface IParsable&lt;'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface ISpanFormattable&#xA;    interface ISpanParsable&lt;'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IAdditionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IAdditiveIdentity&lt;'Self, 'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IDecrementOperators&lt;'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IDivisionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IEqualityOperators&lt;'Self, 'Self, bool (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IIncrementOperators&lt;'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IMultiplicativeIdentity&lt;'Self, 'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IMultiplyOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface ISubtractionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IUnaryNegationOperators&lt;'Self, 'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;&#xA;    interface IUnaryPlusOperators&lt;'Self, 'Self (requires 'Self :&gt; IExponentialFunctions&lt;'Self&gt; and 'Self :&gt; IExponentialFunctions&lt;'Self&gt;)&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSelf&gt;&#xA; where TSelf : IExponentialFunctions&lt;TSelf&gt;public interface class IExponentialFunctions : IEquatable&lt;TSelf&gt;, IParsable&lt;TSelf&gt;, ISpanParsable&lt;TSelf&gt;, System::Numerics::IAdditionOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::IAdditiveIdentity&lt;TSelf, TSelf&gt;, System::Numerics::IDecrementOperators&lt;TSelf&gt;, System::Numerics::IDivisionOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::IEqualityOperators&lt;TSelf, TSelf, bool&gt;, System::Numerics::IFloatingPointConstants&lt;TSelf&gt;, System::Numerics::IIncrementOperators&lt;TSelf&gt;, System::Numerics::IMultiplicativeIdentity&lt;TSelf, TSelf&gt;, System::Numerics::IMultiplyOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::INumberBase&lt;TSelf&gt;, System::Numerics::ISubtractionOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::IUnaryNegationOperators&lt;TSelf, TSelf&gt;, System::Numerics::IUnaryPlusOperators&lt;TSelf, TSelf&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSelf">
      <Constraints>
        <InterfaceName>System.Numerics.IExponentialFunctions&lt;TSelf&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IAdditiveIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IDecrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IEqualityOperators&lt;TSelf,TSelf,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IFloatingPointConstants&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IIncrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMultiplicativeIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.INumberBase&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IUnaryNegationOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IUnaryPlusOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TSelf">The type that implements this interface.</typeparam>
    <summary>Defines support for exponential functions.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static TSelf Exp (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Exp(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IExponentialFunctions`1.Exp(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Exp : 'Self -&gt; 'Self" Usage="System.Numerics.IExponentialFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.IExponentialFunctions&lt;'Self&gt;)&gt;.Exp x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Exp(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>E</c> is raised.</param>
        <summary>Computes <c>E</c> raised to a given power.</summary>
        <returns>
          <c>E</c> raised to the power of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp10">
      <MemberSignature Language="C#" Value="public static TSelf Exp10 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Exp10(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IExponentialFunctions`1.Exp10(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp10 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Exp10 : 'Self -&gt; 'Self" Usage="System.Numerics.IExponentialFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.IExponentialFunctions&lt;'Self&gt;)&gt;.Exp10 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Exp10(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>10</c> is raised.</param>
        <summary>Computes <c>10</c> raised to a given power.</summary>
        <returns>
          <c>10<sup><paramref name="x" /></sup></c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp10M1">
      <MemberSignature Language="C#" Value="public static override TSelf Exp10M1 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Exp10M1(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IExponentialFunctions`1.Exp10M1(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Overrides Function Exp10M1 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Exp10M1 : 'Self -&gt; 'Self" Usage="System.Numerics.IExponentialFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.IExponentialFunctions&lt;'Self&gt;)&gt;.Exp10M1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static override TSelf Exp10M1(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>10</c> is raised.</param>
        <summary>Computes <c>10</c> raised to a given power and subtracts one.</summary>
        <returns>
          <c>10<sup><paramref name="x" /></sup> - 1</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp2">
      <MemberSignature Language="C#" Value="public static TSelf Exp2 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Exp2(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IExponentialFunctions`1.Exp2(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp2 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Exp2 : 'Self -&gt; 'Self" Usage="System.Numerics.IExponentialFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.IExponentialFunctions&lt;'Self&gt;)&gt;.Exp2 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Exp2(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>2</c> is raised.</param>
        <summary>Computes <c>2</c> raised to a given power.</summary>
        <returns>
          <c>2<sup><paramref name="x" /></sup></c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp2M1">
      <MemberSignature Language="C#" Value="public static override TSelf Exp2M1 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Exp2M1(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IExponentialFunctions`1.Exp2M1(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Overrides Function Exp2M1 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Exp2M1 : 'Self -&gt; 'Self" Usage="System.Numerics.IExponentialFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.IExponentialFunctions&lt;'Self&gt;)&gt;.Exp2M1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static override TSelf Exp2M1(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>2</c> is raised.</param>
        <summary>Computes <c>2</c> raised to a given power and subtracts one.</summary>
        <returns>
          <c>2<sup><paramref name="x" /></sup> - 1</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpM1">
      <MemberSignature Language="C#" Value="public static override TSelf ExpM1 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf ExpM1(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IExponentialFunctions`1.ExpM1(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Overrides Function ExpM1 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member ExpM1 : 'Self -&gt; 'Self" Usage="System.Numerics.IExponentialFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.IExponentialFunctions&lt;'Self&gt;)&gt;.ExpM1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static override TSelf ExpM1(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The power to which <c>E</c> is raised.</param>
        <summary>Computes <c>E</c> raised to a given power and subtracts one.</summary>
        <returns>
          <c>E<sup><paramref name="x" /></sup> - 1</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
