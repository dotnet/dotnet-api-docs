<Type Name="ILogarithmicFunctions&lt;TSelf&gt;" FullName="System.Numerics.ILogarithmicFunctions&lt;TSelf&gt;">
  <TypeSignature Language="C#" Value="public interface ILogarithmicFunctions&lt;TSelf&gt; : IEquatable&lt;TSelf&gt;, IParsable&lt;TSelf&gt;, ISpanParsable&lt;TSelf&gt;, System.Numerics.IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.IAdditiveIdentity&lt;TSelf,TSelf&gt;, System.Numerics.IDecrementOperators&lt;TSelf&gt;, System.Numerics.IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.IEqualityOperators&lt;TSelf,TSelf,bool&gt;, System.Numerics.IFloatingPointConstants&lt;TSelf&gt;, System.Numerics.IIncrementOperators&lt;TSelf&gt;, System.Numerics.IMultiplicativeIdentity&lt;TSelf,TSelf&gt;, System.Numerics.IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.INumberBase&lt;TSelf&gt;, System.Numerics.ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.IUnaryNegationOperators&lt;TSelf,TSelf&gt;, System.Numerics.IUnaryPlusOperators&lt;TSelf,TSelf&gt; where TSelf : ILogarithmicFunctions&lt;TSelf&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILogarithmicFunctions`1&lt;(class System.Numerics.ILogarithmicFunctions`1&lt;!TSelf&gt;) TSelf&gt; implements class System.IEquatable`1&lt;!TSelf&gt;, class System.IFormattable, class System.IParsable`1&lt;!TSelf&gt;, class System.ISpanFormattable, class System.ISpanParsable`1&lt;!TSelf&gt;, class System.Numerics.IAdditionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.IAdditiveIdentity`2&lt;!TSelf, !TSelf&gt;, class System.Numerics.IDecrementOperators`1&lt;!TSelf&gt;, class System.Numerics.IDivisionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.IEqualityOperators`3&lt;!TSelf, !TSelf, bool&gt;, class System.Numerics.IFloatingPointConstants`1&lt;!TSelf&gt;, class System.Numerics.IIncrementOperators`1&lt;!TSelf&gt;, class System.Numerics.IMultiplicativeIdentity`2&lt;!TSelf, !TSelf&gt;, class System.Numerics.IMultiplyOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.INumberBase`1&lt;!TSelf&gt;, class System.Numerics.ISubtractionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.IUnaryNegationOperators`2&lt;!TSelf, !TSelf&gt;, class System.Numerics.IUnaryPlusOperators`2&lt;!TSelf, !TSelf&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.ILogarithmicFunctions`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILogarithmicFunctions(Of TSelf)&#xA;Implements IAdditionOperators(Of TSelf, TSelf, TSelf), IAdditiveIdentity(Of TSelf, TSelf), IDecrementOperators(Of TSelf), IDivisionOperators(Of TSelf, TSelf, TSelf), IEqualityOperators(Of TSelf, TSelf, Boolean), IEquatable(Of TSelf), IFloatingPointConstants(Of TSelf), IIncrementOperators(Of TSelf), IMultiplicativeIdentity(Of TSelf, TSelf), IMultiplyOperators(Of TSelf, TSelf, TSelf), INumberBase(Of TSelf), IParsable(Of TSelf), ISpanParsable(Of TSelf), ISubtractionOperators(Of TSelf, TSelf, TSelf), IUnaryNegationOperators(Of TSelf, TSelf), IUnaryPlusOperators(Of TSelf, TSelf)" />
  <TypeSignature Language="F#" Value="type ILogarithmicFunctions&lt;'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt; = interface&#xA;    interface IFloatingPointConstants&lt;'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface INumberBase&lt;'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IEquatable&lt;'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IFormattable&#xA;    interface IParsable&lt;'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface ISpanFormattable&#xA;    interface ISpanParsable&lt;'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IAdditionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IAdditiveIdentity&lt;'Self, 'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IDecrementOperators&lt;'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IDivisionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IEqualityOperators&lt;'Self, 'Self, bool (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IIncrementOperators&lt;'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IMultiplicativeIdentity&lt;'Self, 'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IMultiplyOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface ISubtractionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IUnaryNegationOperators&lt;'Self, 'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;&#xA;    interface IUnaryPlusOperators&lt;'Self, 'Self (requires 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt; and 'Self :&gt; ILogarithmicFunctions&lt;'Self&gt;)&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSelf&gt;&#xA; where TSelf : ILogarithmicFunctions&lt;TSelf&gt;public interface class ILogarithmicFunctions : IEquatable&lt;TSelf&gt;, IParsable&lt;TSelf&gt;, ISpanParsable&lt;TSelf&gt;, System::Numerics::IAdditionOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::IAdditiveIdentity&lt;TSelf, TSelf&gt;, System::Numerics::IDecrementOperators&lt;TSelf&gt;, System::Numerics::IDivisionOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::IEqualityOperators&lt;TSelf, TSelf, bool&gt;, System::Numerics::IFloatingPointConstants&lt;TSelf&gt;, System::Numerics::IIncrementOperators&lt;TSelf&gt;, System::Numerics::IMultiplicativeIdentity&lt;TSelf, TSelf&gt;, System::Numerics::IMultiplyOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::INumberBase&lt;TSelf&gt;, System::Numerics::ISubtractionOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::IUnaryNegationOperators&lt;TSelf, TSelf&gt;, System::Numerics::IUnaryPlusOperators&lt;TSelf, TSelf&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSelf">
      <Constraints>
        <InterfaceName>System.Numerics.ILogarithmicFunctions&lt;TSelf&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IAdditiveIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IDecrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IEqualityOperators&lt;TSelf,TSelf,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IFloatingPointConstants&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IIncrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMultiplicativeIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.INumberBase&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IUnaryNegationOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IUnaryPlusOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TSelf">The type that implements this interface.</typeparam>
    <summary>Defines support for logarithmic functions.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static TSelf Log (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Log(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.ILogarithmicFunctions`1.Log(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Log : 'Self -&gt; 'Self" Usage="System.Numerics.ILogarithmicFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.ILogarithmicFunctions&lt;'Self&gt;)&gt;.Log x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Log(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose natural logarithm is to be computed.</param>
        <summary>Computes the natural (<c>base-E</c> logarithm of a value.</summary>
        <returns>The natural logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static TSelf Log (TSelf x, TSelf newBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Log(!TSelf x, !TSelf newBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.ILogarithmicFunctions`1.Log(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As TSelf, newBase As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Log : 'Self * 'Self -&gt; 'Self" Usage="System.Numerics.ILogarithmicFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.ILogarithmicFunctions&lt;'Self&gt;)&gt;.Log (x, newBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Log(TSelf x, TSelf newBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="newBase" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose logarithm is to be computed.</param>
        <param name="newBase">The base in which the logarithm is to be computed.</param>
        <summary>Computes the logarithm of a value in the specified base.</summary>
        <returns>The base-<paramref name="newBase" /> logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static TSelf Log10 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Log10(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.ILogarithmicFunctions`1.Log10(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Log10 : 'Self -&gt; 'Self" Usage="System.Numerics.ILogarithmicFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.ILogarithmicFunctions&lt;'Self&gt;)&gt;.Log10 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Log10(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose base-10 logarithm is to be computed.</param>
        <summary>Computes the base-10 logarithm of a value.</summary>
        <returns>The base-10 logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10P1">
      <MemberSignature Language="C#" Value="public static override TSelf Log10P1 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Log10P1(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.ILogarithmicFunctions`1.Log10P1(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Overrides Function Log10P1 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Log10P1 : 'Self -&gt; 'Self" Usage="System.Numerics.ILogarithmicFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.ILogarithmicFunctions&lt;'Self&gt;)&gt;.Log10P1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static override TSelf Log10P1(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value to which one is added before computing the base-10 logarithm.</param>
        <summary>Computes the base-10 logarithm of a value plus one.</summary>
        <returns>
          <c>log<sub>10</sub>(<paramref name="x" /> + 1)</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public static TSelf Log2 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Log2(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.ILogarithmicFunctions`1.Log2(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log2 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Log2 : 'Self -&gt; 'Self" Usage="System.Numerics.ILogarithmicFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.ILogarithmicFunctions&lt;'Self&gt;)&gt;.Log2 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Log2(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose base-2 logarithm is to be computed.</param>
        <summary>Computes the base-2 logarithm of a value.</summary>
        <returns>The base-2 logarithm of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log2P1">
      <MemberSignature Language="C#" Value="public static override TSelf Log2P1 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Log2P1(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.ILogarithmicFunctions`1.Log2P1(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Overrides Function Log2P1 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Log2P1 : 'Self -&gt; 'Self" Usage="System.Numerics.ILogarithmicFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.ILogarithmicFunctions&lt;'Self&gt;)&gt;.Log2P1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static override TSelf Log2P1(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value to which one is added before computing the base-2 logarithm.</param>
        <summary>Computes the base-2 logarithm of a value plus one.</summary>
        <returns>
          <c>log<sub>2</sub>(<paramref name="x" /> + 1)</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogP1">
      <MemberSignature Language="C#" Value="public static override TSelf LogP1 (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf LogP1(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.ILogarithmicFunctions`1.LogP1(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Overrides Function LogP1 (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member LogP1 : 'Self -&gt; 'Self" Usage="System.Numerics.ILogarithmicFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.ILogarithmicFunctions&lt;'Self&gt;)&gt;.LogP1 x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static override TSelf LogP1(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value to which one is added before computing the natural logarithm.</param>
        <summary>Computes the natural (<c>base-E</c>) logarithm of a value plus one.</summary>
        <returns>
          <c>log<sub>e</sub>(<paramref name="x" /> + 1)</c>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
