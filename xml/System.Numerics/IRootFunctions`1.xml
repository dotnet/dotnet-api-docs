<Type Name="IRootFunctions&lt;TSelf&gt;" FullName="System.Numerics.IRootFunctions&lt;TSelf&gt;">
  <TypeSignature Language="C#" Value="public interface IRootFunctions&lt;TSelf&gt; : IEquatable&lt;TSelf&gt;, IParsable&lt;TSelf&gt;, ISpanParsable&lt;TSelf&gt;, System.Numerics.IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.IAdditiveIdentity&lt;TSelf,TSelf&gt;, System.Numerics.IDecrementOperators&lt;TSelf&gt;, System.Numerics.IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.IEqualityOperators&lt;TSelf,TSelf,bool&gt;, System.Numerics.IFloatingPointConstants&lt;TSelf&gt;, System.Numerics.IIncrementOperators&lt;TSelf&gt;, System.Numerics.IMultiplicativeIdentity&lt;TSelf,TSelf&gt;, System.Numerics.IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.INumberBase&lt;TSelf&gt;, System.Numerics.ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;, System.Numerics.IUnaryNegationOperators&lt;TSelf,TSelf&gt;, System.Numerics.IUnaryPlusOperators&lt;TSelf,TSelf&gt; where TSelf : IRootFunctions&lt;TSelf&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRootFunctions`1&lt;(class System.Numerics.IRootFunctions`1&lt;!TSelf&gt;) TSelf&gt; implements class System.IEquatable`1&lt;!TSelf&gt;, class System.IFormattable, class System.IParsable`1&lt;!TSelf&gt;, class System.ISpanFormattable, class System.ISpanParsable`1&lt;!TSelf&gt;, class System.Numerics.IAdditionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.IAdditiveIdentity`2&lt;!TSelf, !TSelf&gt;, class System.Numerics.IDecrementOperators`1&lt;!TSelf&gt;, class System.Numerics.IDivisionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.IEqualityOperators`3&lt;!TSelf, !TSelf, bool&gt;, class System.Numerics.IFloatingPointConstants`1&lt;!TSelf&gt;, class System.Numerics.IIncrementOperators`1&lt;!TSelf&gt;, class System.Numerics.IMultiplicativeIdentity`2&lt;!TSelf, !TSelf&gt;, class System.Numerics.IMultiplyOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.INumberBase`1&lt;!TSelf&gt;, class System.Numerics.ISubtractionOperators`3&lt;!TSelf, !TSelf, !TSelf&gt;, class System.Numerics.IUnaryNegationOperators`2&lt;!TSelf, !TSelf&gt;, class System.Numerics.IUnaryPlusOperators`2&lt;!TSelf, !TSelf&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.IRootFunctions`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRootFunctions(Of TSelf)&#xA;Implements IAdditionOperators(Of TSelf, TSelf, TSelf), IAdditiveIdentity(Of TSelf, TSelf), IDecrementOperators(Of TSelf), IDivisionOperators(Of TSelf, TSelf, TSelf), IEqualityOperators(Of TSelf, TSelf, Boolean), IEquatable(Of TSelf), IFloatingPointConstants(Of TSelf), IIncrementOperators(Of TSelf), IMultiplicativeIdentity(Of TSelf, TSelf), IMultiplyOperators(Of TSelf, TSelf, TSelf), INumberBase(Of TSelf), IParsable(Of TSelf), ISpanParsable(Of TSelf), ISubtractionOperators(Of TSelf, TSelf, TSelf), IUnaryNegationOperators(Of TSelf, TSelf), IUnaryPlusOperators(Of TSelf, TSelf)" />
  <TypeSignature Language="F#" Value="type IRootFunctions&lt;'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt; = interface&#xA;    interface IFloatingPointConstants&lt;'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface INumberBase&lt;'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IEquatable&lt;'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IFormattable&#xA;    interface IParsable&lt;'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface ISpanFormattable&#xA;    interface ISpanParsable&lt;'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IAdditionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IAdditiveIdentity&lt;'Self, 'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IDecrementOperators&lt;'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IDivisionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IEqualityOperators&lt;'Self, 'Self, bool (requires 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IIncrementOperators&lt;'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IMultiplicativeIdentity&lt;'Self, 'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IMultiplyOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface ISubtractionOperators&lt;'Self, 'Self, 'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IUnaryNegationOperators&lt;'Self, 'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;&#xA;    interface IUnaryPlusOperators&lt;'Self, 'Self (requires 'Self :&gt; IRootFunctions&lt;'Self&gt; and 'Self :&gt; IRootFunctions&lt;'Self&gt;)&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSelf&gt;&#xA; where TSelf : IRootFunctions&lt;TSelf&gt;public interface class IRootFunctions : IEquatable&lt;TSelf&gt;, IParsable&lt;TSelf&gt;, ISpanParsable&lt;TSelf&gt;, System::Numerics::IAdditionOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::IAdditiveIdentity&lt;TSelf, TSelf&gt;, System::Numerics::IDecrementOperators&lt;TSelf&gt;, System::Numerics::IDivisionOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::IEqualityOperators&lt;TSelf, TSelf, bool&gt;, System::Numerics::IFloatingPointConstants&lt;TSelf&gt;, System::Numerics::IIncrementOperators&lt;TSelf&gt;, System::Numerics::IMultiplicativeIdentity&lt;TSelf, TSelf&gt;, System::Numerics::IMultiplyOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::INumberBase&lt;TSelf&gt;, System::Numerics::ISubtractionOperators&lt;TSelf, TSelf, TSelf&gt;, System::Numerics::IUnaryNegationOperators&lt;TSelf, TSelf&gt;, System::Numerics::IUnaryPlusOperators&lt;TSelf, TSelf&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSelf">
      <Constraints>
        <InterfaceName>System.Numerics.IRootFunctions&lt;TSelf&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ISpanParsable&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IAdditionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IAdditiveIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IDecrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IDivisionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IEqualityOperators&lt;TSelf,TSelf,System.Boolean&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IFloatingPointConstants&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IIncrementOperators&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMultiplicativeIdentity&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IMultiplyOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.INumberBase&lt;TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.ISubtractionOperators&lt;TSelf,TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IUnaryNegationOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.IUnaryPlusOperators&lt;TSelf,TSelf&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TSelf">The type that implements this interface.</typeparam>
    <summary>Defines support for root functions.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static TSelf Cbrt (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Cbrt(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IRootFunctions`1.Cbrt(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Cbrt : 'Self -&gt; 'Self" Usage="System.Numerics.IRootFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.IRootFunctions&lt;'Self&gt;)&gt;.Cbrt x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Cbrt(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose cube-root is to be computed.</param>
        <summary>Computes the cube-root of a value.</summary>
        <returns>The cube-root of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hypot">
      <MemberSignature Language="C#" Value="public static TSelf Hypot (TSelf x, TSelf y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Hypot(!TSelf x, !TSelf y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IRootFunctions`1.Hypot(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Hypot (x As TSelf, y As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Hypot : 'Self * 'Self -&gt; 'Self" Usage="System.Numerics.IRootFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.IRootFunctions&lt;'Self&gt;)&gt;.Hypot (x, y)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Hypot(TSelf x, TSelf y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="y" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value to square and add to <paramref name="y" />.</param>
        <param name="y">The value to square and add to <paramref name="x" />.</param>
        <summary>Computes the hypotenuse given two values representing the lengths of the shorter sides in a right-angled triangle.</summary>
        <returns>The square root of <paramref name="x" />-squared plus <paramref name="y" />-squared.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootN">
      <MemberSignature Language="C#" Value="public static TSelf RootN (TSelf x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf RootN(!TSelf x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IRootFunctions`1.RootN(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RootN (x As TSelf, n As Integer) As TSelf" />
      <MemberSignature Language="F#" Value="static member RootN : 'Self * int -&gt; 'Self" Usage="System.Numerics.IRootFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.IRootFunctions&lt;'Self&gt;)&gt;.RootN (x, n)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf RootN(TSelf x, int n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The value whose <paramref name="n" />-th root is to be computed.</param>
        <param name="n">The degree of the root to be computed.</param>
        <summary>Computes the n-th root of a value.</summary>
        <returns>The <paramref name="n" />-th root of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static TSelf Sqrt (TSelf x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf Sqrt(!TSelf x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.IRootFunctions`1.Sqrt(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (x As TSelf) As TSelf" />
      <MemberSignature Language="F#" Value="static member Sqrt : 'Self -&gt; 'Self" Usage="System.Numerics.IRootFunctions&lt;'Self (requires 'Self :&gt; System.Numerics.IRootFunctions&lt;'Self&gt;)&gt;.Sqrt x" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TSelf Sqrt(TSelf x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="TSelf" />
      </Parameters>
      <Docs>
        <param name="x">The value whose square-root is to be computed.</param>
        <summary>Computes the square-root of a value.</summary>
        <returns>The square-root of <paramref name="x" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
