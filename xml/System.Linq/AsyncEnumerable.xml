<Type Name="AsyncEnumerable" FullName="System.Linq.AsyncEnumerable">
  <TypeSignature Language="C#" Value="public static class AsyncEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncEnumerable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.AsyncEnumerable" />
  <TypeSignature Language="VB.NET" Value="Public Module AsyncEnumerable" />
  <TypeSignature Language="F#" Value="type AsyncEnumerable = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncEnumerable abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Provides a set of static methods for querying objects that implement <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AggregateAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; AggregateAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TSource&gt;&gt; func, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; AggregateAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`4&lt;!!TSource, !!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt;&gt; func, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AggregateAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), func As Func(Of TSource, TSource, CancellationToken, ValueTask(Of TSource)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member AggregateAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Source&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.AggregateAsync (source, func, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Func&lt;TSource,TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TSource&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to aggregate over.</param>
        <param name="func">An accumulator function to be invoked on each element.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Applies an accumulator function over a sequence.</summary>
        <returns>The final accumulator value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="func" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements.</exception>
      </Docs>
    </Member>
    <Member MemberName="AggregateAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; AggregateAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; AggregateAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt; func, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AggregateAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``0,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member AggregateAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Source, 'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.AggregateAsync (source, func, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to aggregate over.</param>
        <param name="func">An accumulator function to be invoked on each element.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Applies an accumulator function over a sequence.</summary>
        <returns>The final accumulator value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="func" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements.</exception>
      </Docs>
    </Member>
    <Member MemberName="AggregateAsync&lt;TSource,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TAccumulate&gt; AggregateAsync&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;&gt; func, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TAccumulate&gt; AggregateAsync&lt;TSource, TAccumulate&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`4&lt;!!TAccumulate, !!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TAccumulate&gt;&gt; func, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AggregateAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateAsync(Of TSource, TAccumulate) (source As IAsyncEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, CancellationToken, ValueTask(Of TAccumulate)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TAccumulate)" />
      <MemberSignature Language="F#" Value="static member AggregateAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Accumulate&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Accumulate&gt;" Usage="System.Linq.AsyncEnumerable.AggregateAsync (source, seed, func, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TAccumulate">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to aggregate over.</param>
        <param name="seed">The initial accumulator value.</param>
        <param name="func">An accumulator function to be invoked on each element.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
        <returns>The final accumulator value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="func" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AggregateAsync&lt;TSource,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TAccumulate&gt; AggregateAsync&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TAccumulate&gt; AggregateAsync&lt;TSource, TAccumulate&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AggregateAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateAsync(Of TSource, TAccumulate) (source As IAsyncEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TAccumulate)" />
      <MemberSignature Language="F#" Value="static member AggregateAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Accumulate&gt;" Usage="System.Linq.AsyncEnumerable.AggregateAsync (source, seed, func, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TAccumulate">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to aggregate over.</param>
        <param name="seed">The initial accumulator value.</param>
        <param name="func">An accumulator function to be invoked on each element.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
        <returns>The final accumulator value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="func" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AggregateAsync&lt;TSource,TAccumulate,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TResult&gt; AggregateAsync&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;&gt; func, Func&lt;TAccumulate,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt; AggregateAsync&lt;TSource, TAccumulate, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`4&lt;!!TAccumulate, !!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TAccumulate&gt;&gt; func, class System.Func`3&lt;!!TAccumulate, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AggregateAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateAsync(Of TSource, TAccumulate, TResult) (source As IAsyncEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, CancellationToken, ValueTask(Of TAccumulate)), resultSelector As Func(Of TAccumulate, CancellationToken, ValueTask(Of TResult)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TResult)" />
      <MemberSignature Language="F#" Value="static member AggregateAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Accumulate&gt;&gt; * Func&lt;'Accumulate, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.AggregateAsync (source, seed, func, resultSelector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="seed" Type="TAccumulate">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
        <typeparam name="TResult">The type of the resulting value.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to aggregate over.</param>
        <param name="seed">The initial accumulator value.</param>
        <param name="func">An accumulator function to be invoked on each element.</param>
        <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Applies an accumulator function over a sequence. The specified seed value is
            used as the initial accumulator value, and the specified function is used to
            select the result value.
            </summary>
        <returns>The transformed final accumulator value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AggregateAsync&lt;TSource,TAccumulate,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TResult&gt; AggregateAsync&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt; AggregateAsync&lt;TSource, TAccumulate, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AggregateAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateAsync(Of TSource, TAccumulate, TResult) (source As IAsyncEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TResult)" />
      <MemberSignature Language="F#" Value="static member AggregateAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * Func&lt;'Accumulate, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.AggregateAsync (source, seed, func, resultSelector, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TAccumulate">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
        <typeparam name="TResult">The type of the resulting value.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to aggregate over.</param>
        <param name="seed">The initial accumulator value.</param>
        <param name="func">An accumulator function to be invoked on each element.</param>
        <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Applies an accumulator function over a sequence. The specified seed value is
            used as the initial accumulator value, and the specified function is used to
            select the result value.
            </summary>
        <returns>The transformed final accumulator value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AggregateBy&lt;TSource,TKey,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TAccumulate&gt;&gt; AggregateBy&lt;TSource,TKey,TAccumulate&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, Func&lt;TKey,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;&gt; seedSelector, Func&lt;TAccumulate,TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;&gt; func, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? keyComparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!!TKey, !!TAccumulate&gt;&gt; AggregateBy&lt;TSource, TKey, TAccumulate&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Func`3&lt;!!TKey, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TAccumulate&gt;&gt; seedSelector, class System.Func`4&lt;!!TAccumulate, !!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TAccumulate&gt;&gt; func, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; keyComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AggregateBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Func{``2,``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateBy(Of TSource, TKey, TAccumulate) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), seedSelector As Func(Of TKey, CancellationToken, ValueTask(Of TAccumulate)), func As Func(Of TAccumulate, TSource, CancellationToken, ValueTask(Of TAccumulate)), Optional keyComparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of KeyValuePair(Of TKey, TAccumulate))" />
      <MemberSignature Language="F#" Value="static member AggregateBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Key, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Accumulate&gt;&gt; * Func&lt;'Accumulate, 'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Accumulate&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Accumulate&gt;&gt;" Usage="System.Linq.AsyncEnumerable.AggregateBy (source, keySelector, seedSelector, func, keyComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TAccumulate&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TAccumulate">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="seedSelector" Type="System.Func&lt;TKey,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keyComparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to aggregate over.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="seedSelector">A factory for the initial accumulator value.</param>
        <param name="func">An accumulator function to be invoked on each element.</param>
        <param name="keyComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
        <summary>Applies an accumulator function over a sequence, grouping results by key.</summary>
        <returns>An enumerable containing the aggregates corresponding to each key deriving from <paramref name="source" />.</returns>
        <remarks>
            This method is comparable to the GroupBy methods where each grouping is being aggregated into a single value
            as opposed to allocating a collection for each group.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="func" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AggregateBy&lt;TSource,TKey,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TAccumulate&gt;&gt; AggregateBy&lt;TSource,TKey,TAccumulate&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, TAccumulate seed, Func&lt;TAccumulate,TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;&gt; func, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? keyComparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!!TKey, !!TAccumulate&gt;&gt; AggregateBy&lt;TSource, TKey, TAccumulate&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, !!TAccumulate seed, class System.Func`4&lt;!!TAccumulate, !!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TAccumulate&gt;&gt; func, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; keyComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AggregateBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},``2,System.Func{``2,``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateBy(Of TSource, TKey, TAccumulate) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), seed As TAccumulate, func As Func(Of TAccumulate, TSource, CancellationToken, ValueTask(Of TAccumulate)), Optional keyComparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of KeyValuePair(Of TKey, TAccumulate))" />
      <MemberSignature Language="F#" Value="static member AggregateBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Accumulate&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Accumulate&gt;&gt;" Usage="System.Linq.AsyncEnumerable.AggregateBy (source, keySelector, seed, func, keyComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TAccumulate&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TAccumulate">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TAccumulate&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keyComparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to aggregate over.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="seed">The initial accumulator value.</param>
        <param name="func">An accumulator function to be invoked on each element.</param>
        <param name="keyComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
        <summary>Applies an accumulator function over a sequence, grouping results by key.</summary>
        <returns>An enumerable containing the aggregates corresponding to each key deriving from <paramref name="source" />.</returns>
        <remarks>
            This method is comparable to the GroupBy methods where each grouping is being aggregated into a single value
            as opposed to allocating a collection for each group.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="func" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AggregateBy&lt;TSource,TKey,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TAccumulate&gt;&gt; AggregateBy&lt;TSource,TKey,TAccumulate&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,TAccumulate&gt; seedSelector, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? keyComparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!!TKey, !!TAccumulate&gt;&gt; AggregateBy&lt;TSource, TKey, TAccumulate&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TKey, !!TAccumulate&gt; seedSelector, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; keyComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AggregateBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateBy(Of TSource, TKey, TAccumulate) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), seedSelector As Func(Of TKey, TAccumulate), func As Func(Of TAccumulate, TSource, TAccumulate), Optional keyComparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of KeyValuePair(Of TKey, TAccumulate))" />
      <MemberSignature Language="F#" Value="static member AggregateBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, 'Accumulate&gt; * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Accumulate&gt;&gt;" Usage="System.Linq.AsyncEnumerable.AggregateBy (source, keySelector, seedSelector, func, keyComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TAccumulate&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TAccumulate">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="seedSelector" Type="System.Func&lt;TKey,TAccumulate&gt;" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="keyComparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to aggregate over.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="seedSelector">A factory for the initial accumulator value.</param>
        <param name="func">An accumulator function to be invoked on each element.</param>
        <param name="keyComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
        <summary>Applies an accumulator function over a sequence, grouping results by key.</summary>
        <returns>An enumerable containing the aggregates corresponding to each key deriving from <paramref name="source" />.</returns>
        <remarks>
            This method is comparable to the GroupBy methods where each grouping is being aggregated into a single value
            as opposed to allocating a collection for each group.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="func" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AggregateBy&lt;TSource,TKey,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TAccumulate&gt;&gt; AggregateBy&lt;TSource,TKey,TAccumulate&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? keyComparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!!TKey, !!TAccumulate&gt;&gt; AggregateBy&lt;TSource, TKey, TAccumulate&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; keyComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AggregateBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},``2,System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AggregateBy(Of TSource, TKey, TAccumulate) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), Optional keyComparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of KeyValuePair(Of TKey, TAccumulate))" />
      <MemberSignature Language="F#" Value="static member AggregateBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Accumulate&gt;&gt;" Usage="System.Linq.AsyncEnumerable.AggregateBy (source, keySelector, seed, func, keyComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TAccumulate&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TAccumulate">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="keyComparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to aggregate over.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="seed">The initial accumulator value.</param>
        <param name="func">An accumulator function to be invoked on each element.</param>
        <param name="keyComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
        <summary>Applies an accumulator function over a sequence, grouping results by key.</summary>
        <returns>An enumerable containing the aggregates corresponding to each key deriving from <paramref name="source" />.</returns>
        <remarks>
            This method is comparable to the GroupBy methods where each grouping is being aggregated into a single value
            as opposed to allocating a collection for each group.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="func" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AllAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;bool&gt; AllAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; AllAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AllAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AllAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member AllAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="System.Linq.AsyncEnumerable.AllAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements to apply the predicate to.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Determines whether all elements of a sequence satisfy a condition.</summary>
        <returns>
            true if every element of the source sequence passes the test in the specified predicate,
            or if the sequence is empty; otherwise, false.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AllAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;bool&gt; AllAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; AllAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AllAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AllAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member AllAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="System.Linq.AsyncEnumerable.AllAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements to apply the predicate to.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Determines whether all elements of a sequence satisfy a condition.</summary>
        <returns>
            true if every element of the source sequence passes the test in the specified predicate,
            or if the sequence is empty; otherwise, false.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AnyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AnyAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member AnyAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="System.Linq.AsyncEnumerable.AnyAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to check for emptiness.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Determines whether a sequence contains any elements.</summary>
        <returns>true if the source sequence contains any elements; otherwise, false.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AnyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AnyAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member AnyAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="System.Linq.AsyncEnumerable.AnyAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource" />
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements to apply the predicate to.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Determines whether any element of a sequence satisfies a condition.</summary>
        <returns>
            true if the source sequence is not empty and at least one of its elements passes
            the test in the specified predicate; otherwise, false.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AnyAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;bool&gt; AnyAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; AnyAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AnyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AnyAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member AnyAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="System.Linq.AsyncEnumerable.AnyAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource" />
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements to apply the predicate to.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Determines whether any element of a sequence satisfies a condition.</summary>
        <returns>
            true if the source sequence is not empty and at least one of its elements passes
            the test in the specified predicate; otherwise, false.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Append&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Append&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Append``1(System.Collections.Generic.IAsyncEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource) (source As IAsyncEnumerable(Of TSource), element As TSource) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Append : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Source -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Append (source, element)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Append(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence of values.</param>
        <param name="element">The value to append to source.</param>
        <summary>Appends a value to the end of the sequence.</summary>
        <returns>A new sequence that ends with element.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;decimal&gt; AverageAsync (this System.Collections.Generic.IAsyncEnumerable&lt;decimal&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Decimal&gt; AverageAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Decimal&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Decimal},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IAsyncEnumerable(Of Decimal), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Decimal)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Collections.Generic.IAsyncEnumerable&lt;decimal&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;decimal&gt;" Usage="System.Linq.AsyncEnumerable.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Decimal&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of values to calculate the average of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the average of a sequence of values.</summary>
        <returns>The average of the sequence of values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;double&gt; AverageAsync (this System.Collections.Generic.IAsyncEnumerable&lt;double&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;float64&gt; AverageAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;float64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Double},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IAsyncEnumerable(Of Double), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Double)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Collections.Generic.IAsyncEnumerable&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;double&gt;" Usage="System.Linq.AsyncEnumerable.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Double&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of values to calculate the average of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the average of a sequence of values.</summary>
        <returns>The average of the sequence of values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;double&gt; AverageAsync (this System.Collections.Generic.IAsyncEnumerable&lt;int&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;float64&gt; AverageAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;int32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IAsyncEnumerable(Of Integer), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Double)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Collections.Generic.IAsyncEnumerable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;double&gt;" Usage="System.Linq.AsyncEnumerable.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Int32&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of values to calculate the average of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the average of a sequence of values.</summary>
        <returns>The average of the sequence of values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" /> (via the returned task).</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;double&gt; AverageAsync (this System.Collections.Generic.IAsyncEnumerable&lt;long&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;float64&gt; AverageAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;int64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Int64},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IAsyncEnumerable(Of Long), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Double)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Collections.Generic.IAsyncEnumerable&lt;int64&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;double&gt;" Usage="System.Linq.AsyncEnumerable.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Int64&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of values to calculate the average of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the average of a sequence of values.</summary>
        <returns>The average of the sequence of values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" /> (via the returned task).</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;decimal?&gt; AverageAsync (this System.Collections.Generic.IAsyncEnumerable&lt;decimal?&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; AverageAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IAsyncEnumerable(Of Nullable(Of Decimal)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Nullable(Of Decimal))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Collections.Generic.IAsyncEnumerable&lt;Nullable&lt;decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Linq.AsyncEnumerable.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of nullable values to calculate the average of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the average of a sequence of nullable values.</summary>
        <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;double?&gt; AverageAsync (this System.Collections.Generic.IAsyncEnumerable&lt;double?&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IAsyncEnumerable(Of Nullable(Of Double)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Collections.Generic.IAsyncEnumerable&lt;Nullable&lt;double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Nullable&lt;double&gt;&gt;" Usage="System.Linq.AsyncEnumerable.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of nullable values to calculate the average of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the average of a sequence of nullable values.</summary>
        <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;double?&gt; AverageAsync (this System.Collections.Generic.IAsyncEnumerable&lt;int?&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IAsyncEnumerable(Of Nullable(Of Integer)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Collections.Generic.IAsyncEnumerable&lt;Nullable&lt;int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Nullable&lt;double&gt;&gt;" Usage="System.Linq.AsyncEnumerable.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of nullable values to calculate the average of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the average of a sequence of nullable values.</summary>
        <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" /> (via the returned task).</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;double?&gt; AverageAsync (this System.Collections.Generic.IAsyncEnumerable&lt;long?&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; AverageAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IAsyncEnumerable(Of Nullable(Of Long)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Collections.Generic.IAsyncEnumerable&lt;Nullable&lt;int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Nullable&lt;double&gt;&gt;" Usage="System.Linq.AsyncEnumerable.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of nullable values to calculate the average of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the average of a sequence of nullable values.</summary>
        <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" /> (via the returned task).</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;float?&gt; AverageAsync (this System.Collections.Generic.IAsyncEnumerable&lt;float?&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; AverageAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IAsyncEnumerable(Of Nullable(Of Single)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Nullable(Of Single))" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Collections.Generic.IAsyncEnumerable&lt;Nullable&lt;single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Nullable&lt;single&gt;&gt;" Usage="System.Linq.AsyncEnumerable.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of nullable values to calculate the average of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the average of a sequence of nullable values.</summary>
        <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="AverageAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;float&gt; AverageAsync (this System.Collections.Generic.IAsyncEnumerable&lt;float&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;float32&gt; AverageAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;float32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Single},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AverageAsync (source As IAsyncEnumerable(Of Single), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Single)" />
      <MemberSignature Language="F#" Value="static member AverageAsync : System.Collections.Generic.IAsyncEnumerable&lt;single&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;single&gt;" Usage="System.Linq.AsyncEnumerable.AverageAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Single&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of values to calculate the average of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the average of a sequence of values.</summary>
        <returns>The average of the sequence of values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> contains no elements (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;object?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;object&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Cast``1(System.Collections.Generic.IAsyncEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TResult) (source As IAsyncEnumerable(Of Object)) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Cast : System.Collections.Generic.IAsyncEnumerable&lt;obj&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Cast source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ Cast(System::Collections::Generic::IAsyncEnumerable&lt;System::Object ^&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Object&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type to cast the elements of source to.</typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements to be cast to type <typeparamref name="TResult" />.</param>
        <summary>
            Casts the elements of an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to the specified type.
            </summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains each element of the source sequence cast to the <typeparamref name="TResult" /> type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Chunk&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource[]&gt; Chunk&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource[]&gt; Chunk&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Chunk``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Chunk(Of TSource) (source As IAsyncEnumerable(Of TSource), size As Integer) As IAsyncEnumerable(Of TSource())" />
      <MemberSignature Language="F#" Value="static member Chunk : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * int -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source[]&gt;" Usage="System.Linq.AsyncEnumerable.Chunk (source, size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;cli::array &lt;TSource&gt; ^&gt; ^ Chunk(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, int size);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements to chunk.</param>
        <param name="size">Maximum size of each chunk.</param>
        <summary>Split the elements of a sequence into chunks of size at most <paramref name="size" />.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements of the input sequence split into chunks of size <paramref name="size" />.
            </returns>
        <remarks>
            Every chunk except the last will be of size <paramref name="size" />.
            The last chunk will contain the remaining elements and may be of a smaller size.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="size" /> is less than 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Concat``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Concat(Of TSource) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TSource)) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Concat : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Concat (first, second)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Concat(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ second);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
        <param name="first">The first sequence to concatenate.</param>
        <param name="second">The sequence to concatenate to the first sequence.</param>
        <summary>Concatenates two sequences.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the concatenated elements of the two input sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="second" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ContainsAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;bool&gt; ContainsAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; ContainsAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ContainsAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ContainsAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), value As TSource, Optional comparer As IEqualityComparer(Of TSource) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member ContainsAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Source * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="System.Linq.AsyncEnumerable.ContainsAsync (source, value, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence in which to locate a value.</param>
        <param name="value">The value to locate in the sequence.</param>
        <param name="comparer">An equality comparer to compare values.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Determines whether a sequence contains a specified element.</summary>
        <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.CountAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CountAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Integer)" />
      <MemberSignature Language="F#" Value="static member CountAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="System.Linq.AsyncEnumerable.CountAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence that contains elements to be counted.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the number of elements in a sequence.</summary>
        <returns>The number of elements in the input sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The number of elements in source is larger than <see cref="F:System.Int32.MaxValue" /> (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="CountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.CountAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CountAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Integer)" />
      <MemberSignature Language="F#" Value="static member CountAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="System.Linq.AsyncEnumerable.CountAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence that contains elements to be tested and counted.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the number of elements in a sequence satisfy a condition.</summary>
        <returns>The number of elements in the input sequence that satisfy the condition in the predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The number of elements that satisfy the condition is larger than <see cref="F:System.Int32.MaxValue" /> (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="CountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;int&gt; CountAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; CountAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.CountAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CountAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Integer)" />
      <MemberSignature Language="F#" Value="static member CountAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="System.Linq.AsyncEnumerable.CountAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence that contains elements to be tested and counted.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the number of elements in a sequence satisfy a condition.</summary>
        <returns>The number of elements in the input sequence that satisfy the condition in the predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The number of elements that satisfy the condition is larger than <see cref="F:System.Int32.MaxValue" /> (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="CountBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,int&gt;&gt; CountBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? keyComparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!!TKey, int32&gt;&gt; CountBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; keyComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.CountBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CountBy(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional keyComparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of KeyValuePair(Of TKey, Integer))" />
      <MemberSignature Language="F#" Value="static member CountBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;'Key, int&gt;&gt;" Usage="System.Linq.AsyncEnumerable.CountBy (source, keySelector, keyComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,System.Int32&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keyComparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">A sequence that contains elements to be counted.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="keyComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
        <summary>Returns the count of elements in the source sequence grouped by key.</summary>
        <returns>An enumerable containing the frequencies of each key occurrence in <paramref name="source" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CountBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,int&gt;&gt; CountBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? keyComparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!!TKey, int32&gt;&gt; CountBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; keyComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.CountBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CountBy(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional keyComparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of KeyValuePair(Of TKey, Integer))" />
      <MemberSignature Language="F#" Value="static member CountBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;'Key, int&gt;&gt;" Usage="System.Linq.AsyncEnumerable.CountBy (source, keySelector, keyComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,System.Int32&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="keyComparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">A sequence that contains elements to be counted.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="keyComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
        <summary>Returns the count of elements in the source sequence grouped by key.</summary>
        <returns>An enumerable containing the frequencies of each key occurrence in <paramref name="source" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource?&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.DefaultIfEmpty``1(System.Collections.Generic.IAsyncEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IAsyncEnumerable(Of TSource)) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.DefaultIfEmpty source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">The sequence to return a default value for if it is empty.</param>
        <summary>Returns the elements of the specified sequence or the type parameter's default if the sequence is empty.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> object that contains the default value for
            the TSource type if source is empty; otherwise, source.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TSource defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.DefaultIfEmpty``1(System.Collections.Generic.IAsyncEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IAsyncEnumerable(Of TSource), defaultValue As TSource) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Source -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.DefaultIfEmpty (source, defaultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, TSource defaultValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">The sequence to return a default value for if it is empty.</param>
        <param name="defaultValue">The value to return if the sequence is empty.</param>
        <summary>Returns the elements of the specified sequence or the specified value if the sequence is empty.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> object that contains the default value for
            the TSource type if source is empty; otherwise, source.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Distinct``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional comparer As IEqualityComparer(Of TSource) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Distinct : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Distinct (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource" />
        <param name="source">The sequence to remove duplicate elements from.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
        <summary>Returns distinct elements from a sequence.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DistinctBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; DistinctBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; DistinctBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.DistinctBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DistinctBy(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member DistinctBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.DistinctBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of key to distinguish elements by.</typeparam>
        <param name="source">The sequence to remove duplicate elements from.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>Returns distinct elements from a sequence according to a specified key selector function.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
        <remarks>
          <para>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</para>
          <para>The <see cref="M:System.Linq.AsyncEnumerable.DistinctBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})" /> method returns an unordered sequence that contains no duplicate values. If <paramref name="comparer" /> is <see langword="null" />, the default equality comparer, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />, is used to compare values.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DistinctBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; DistinctBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; DistinctBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.DistinctBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DistinctBy(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member DistinctBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.DistinctBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of key to distinguish elements by.</typeparam>
        <param name="source">The sequence to remove duplicate elements from.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>Returns distinct elements from a sequence according to a specified key selector function.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
        <remarks>
          <para>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</para>
          <para>The <see cref="M:System.Linq.AsyncEnumerable.DistinctBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" /> method returns an unordered sequence that contains no duplicate values. If <paramref name="comparer" /> is <see langword="null" />, the default equality comparer, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />, is used to compare values.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; ElementAtAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Index index, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; ElementAtAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Index index, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ElementAtAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Index,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), index As Index, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ElementAtAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Index * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ElementAtAsync (source, index, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Index" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="index">The index of the element to retrieve, which is either from the start or the end.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the element at a specified index in a sequence.</summary>
        <returns>The element at the specified position in the <paramref name="source" /> sequence.</returns>
        <remarks>
          <para>If the type of <paramref name="source" /> implements <see cref="T:System.Collections.Generic.IList`1" />, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.</para>
          <para>This method throws an exception if <paramref name="index" /> is out of range. To instead return a default value when the specified index is out of range, use the ElementAtOrDefaultAsync method.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the bounds of the source sequence (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; ElementAtAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, int index, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; ElementAtAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, int32 index, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ElementAtAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), index As Integer, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ElementAtAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ElementAtAsync (source, index, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="index">The index of the element to retrieve, which is either from the beginning or the end of the sequence.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the element at a specified index in a sequence.</summary>
        <returns>The element at the specified position in the source sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the bounds of the source sequence (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; ElementAtOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Index index, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; ElementAtOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Index index, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ElementAtOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Index,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), index As Index, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Index * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ElementAtOrDefaultAsync (source, index, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Index" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="index">The index of the element to retrieve, which is either from the start or the end.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
        <returns>
          <see langword="default" /> if <paramref name="index" /> is outside the bounds of the <paramref name="source" /> sequence; otherwise, the element at the specified position in the <paramref name="source" /> sequence.</returns>
        <remarks>
          <para>If the type of <paramref name="source" /> implements <see cref="T:System.Collections.Generic.IList`1" />, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.</para>
          <para>The default value for reference and nullable types is <see langword="null" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; ElementAtOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, int index, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; ElementAtOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, int32 index, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ElementAtOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), index As Integer, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ElementAtOrDefaultAsync (source, index, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="index">The index of the element to retrieve, which is either from the beginning or the end of the sequence.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the element at a specified index in a sequence, or a default value if the index is out of range.</summary>
        <returns>
            The default value of <typeparamref name="TSource" /> if <paramref name="index" /> is outside the bounds of the source sequence; otherwise, the
            element at the specified position in the source sequence.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Empty&lt;TResult&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Empty&lt;TResult&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Empty``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Empty(Of TResult) () As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Empty " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ Empty();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResult">The type of the elements of the sequence.</typeparam>
        <summary>
            Returns an empty <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that has the specified type argument.
            </summary>
        <returns>An empty <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose type argument is <typeparamref name="TResult" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Except``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TSource), Optional comparer As IEqualityComparer(Of TSource) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Except : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Except (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
        <param name="first">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements that are not also in second will be returned.</param>
        <param name="second">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
        <summary>Produces the set difference of two sequences.</summary>
        <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="second" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExceptBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; ExceptBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TKey&gt; second, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; ExceptBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TKey&gt; second, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ExceptBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExceptBy(Of TSource, TKey) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TKey), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ExceptBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Key&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ExceptBy (first, second, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TKey&gt;" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of the input sequence.</typeparam>
        <typeparam name="TKey">The type of key to identify elements by.</typeparam>
        <param name="first">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose keys that are not also in <paramref name="second" /> will be returned.</param>
        <param name="second">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose keys that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
        <summary>
            Produces the set difference of two sequences according to a specified key selector function.
            </summary>
        <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExceptBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; ExceptBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TKey&gt; second, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; ExceptBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TKey&gt; second, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ExceptBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExceptBy(Of TSource, TKey) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TKey), keySelector As Func(Of TSource, TKey), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ExceptBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Key&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ExceptBy (first, second, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TKey&gt;" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of the input sequence.</typeparam>
        <typeparam name="TKey">The type of key to identify elements by.</typeparam>
        <param name="first">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose keys that are not also in <paramref name="second" /> will be returned.</param>
        <param name="second">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose keys that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
        <summary>
            Produces the set difference of two sequences according to a specified key selector function.
            </summary>
        <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.FirstAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.FirstAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the first element of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the first element of a sequence.</summary>
        <returns>The first element in the specified sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The source sequence is empty (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.FirstAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.FirstAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the first element in a sequence that satisfies a specified condition.</summary>
        <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            The source sequence is empty, or no element in the sequence satisfies
            the condition in predicate (via the returned task).
            </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; FirstAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; FirstAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.FirstAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.FirstAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the first element in a sequence that satisfies a specified condition.</summary>
        <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            The source sequence is empty, or no element in the sequence satisfies
            the condition in predicate (via the returned task).
            </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.FirstOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.FirstOrDefaultAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the first element of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the first element of a sequence, or the default value of <typeparamref name="TSource" /> if the sequence contains no elements.</summary>
        <returns>The default value of <typeparamref name="TSource" /> if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.FirstOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.FirstOrDefaultAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource" />
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
        <returns>
            The default value of <typeparamref name="TSource" /> if source is empty or if no element passes the test specified
            by predicate; otherwise, the first element in source that passes the test specified by predicate.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.FirstOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.FirstOrDefaultAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource" />
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
        <returns>
            The default value of <typeparamref name="TSource" /> if source is empty or if no element passes the test specified
            by predicate; otherwise, the first element in source that passes the test specified by predicate.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TSource defaultValue, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.FirstOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), defaultValue As TSource, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.FirstOrDefaultAsync (source, defaultValue, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the first element of.</param>
        <param name="defaultValue">The default value to return if the sequence is empty.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
        <returns>
          <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, TSource defaultValue, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, !!TSource defaultValue, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.FirstOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), defaultValue As TSource, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.FirstOrDefaultAsync (source, predicate, defaultValue, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="defaultValue" Type="TSource" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="defaultValue">The default value to return if the sequence is empty.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
        <returns>
          <paramref name="defaultValue" /> if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; FirstOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, TSource defaultValue, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; FirstOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, !!TSource defaultValue, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.FirstOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), defaultValue As TSource, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member FirstOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.FirstOrDefaultAsync (source, predicate, defaultValue, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="defaultValue" Type="TSource" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="defaultValue">The default value to return if the sequence is empty.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
        <returns>
          <paramref name="defaultValue" /> if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.GroupBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.AsyncEnumerable.GroupBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of elements to group.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>Groups the elements of a sequence according to a specified key selector function.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> where each <see cref="T:System.Linq.IGrouping`2" />
            contains a sequence of objects and a key.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.GroupBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.AsyncEnumerable.GroupBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of elements to group.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>Groups the elements of a sequence according to a specified key selector function.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> where each <see cref="T:System.Linq.IGrouping`2" />
            contains a sequence of objects and a key.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TElement&gt;&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TElement&gt;&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), elementSelector As Func(Of TSource, CancellationToken, ValueTask(Of TElement)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Element&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.AsyncEnumerable.GroupBy (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TElement&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of elements to group.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>
            Groups the elements of a sequence according to a key selector function. The keys
            are compared by using a comparer and each group's elements are projected by using
            a specified function.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> where each <see cref="T:System.Linq.IGrouping`2" />
            contains a sequence of objects of type <typeparamref name="TElement" /> and a key.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="elementSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.AsyncEnumerable.GroupBy (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TElement">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of elements to group.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>
            Groups the elements of a sequence according to a key selector function. The keys
            are compared by using a comparer and each group's elements are projected by using
            a specified function.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> where each <see cref="T:System.Linq.IGrouping`2" />
            contains a sequence of objects of type <typeparamref name="TElement" /> and a key.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="elementSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Func`4&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), resultSelector As Func(Of TKey, IEnumerable(Of TSource), CancellationToken, ValueTask(Of TResult)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Key, seq&lt;'Source&gt;, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.GroupBy (source, keySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TResult">The type of the result value returned by resultSelector.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of elements to group.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="resultSelector">A function to create a result value from each group.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key.
            </summary>
        <returns>
            A collection of elements of type <typeparamref name="TResult" /> where each element represents
            a projection over a group and its key.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.GroupBy (source, keySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TResult">The type of the result value returned by resultSelector.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of elements to group.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="resultSelector">A function to create a result value from each group.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key.
            </summary>
        <returns>
            A collection of elements of type <typeparamref name="TResult" /> where each element represents
            a projection over a group and its key.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TElement&gt;&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TElement&gt;&gt; elementSelector, class System.Func`4&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.GroupBy``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``2},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``3}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), elementSelector As Func(Of TSource, CancellationToken, ValueTask(Of TElement)), resultSelector As Func(Of TKey, IEnumerable(Of TElement), CancellationToken, ValueTask(Of TResult)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Element&gt;&gt; * Func&lt;'Key, seq&lt;'Element&gt;, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.GroupBy (source, keySelector, elementSelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TElement&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
        <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of elements to group.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
        <param name="resultSelector">A function to create a result value from each group.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. Key values are compared
            by using a specified comparer, and the elements of each group are projected by
            using a specified function.
            </summary>
        <returns>A collection of elements of type <typeparamref name="TResult" /> where each element represents a projection over a group and its key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.GroupBy``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member GroupBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.GroupBy (source, keySelector, elementSelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TElement">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
        <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of elements to group.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
        <param name="resultSelector">A function to create a result value from each group.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. Key values are compared
            by using a specified comparer, and the elements of each group are projected by
            using a specified function.
            </summary>
        <returns>A collection of elements of type <typeparamref name="TResult" /> where each element represents a projection over a group and its key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; outerKeySelector, Func&lt;TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TInner&gt; inner, class System.Func`3&lt;!!TOuter, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; outerKeySelector, class System.Func`3&lt;!!TInner, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; innerKeySelector, class System.Func`4&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.GroupJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Func{``0,System.Collections.Generic.IEnumerable{``1},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``3}},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IAsyncEnumerable(Of TOuter), inner As IAsyncEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, CancellationToken, ValueTask(Of TKey)), innerKeySelector As Func(Of TInner, CancellationToken, ValueTask(Of TKey)), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), CancellationToken, ValueTask(Of TResult)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member GroupJoin : System.Collections.Generic.IAsyncEnumerable&lt;'Outer&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Inner&gt; * Func&lt;'Outer, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Inner, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="inner" Type="System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOuter" />
        <typeparam name="TInner" />
        <typeparam name="TKey" />
        <typeparam name="TResult" />
        <param name="outer">The first sequence to join.</param>
        <param name="inner">The sequence to join to the first sequence.</param>
        <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
        <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
        <param name="resultSelector">
            A function to create a result element from an element from the first sequence
            and a collection of matching elements from the second sequence.
            </param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to hash and compare keys.</param>
        <summary>Correlates the elements of two sequences based on key equality and groups the results.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains elements of type <typeparamref name="TResult" />
            that are obtained by performing a grouped join on two sequences.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.GroupJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IAsyncEnumerable(Of TOuter), inner As IAsyncEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member GroupJoin : System.Collections.Generic.IAsyncEnumerable&lt;'Outer&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TInner">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOuter" />
        <typeparam name="TInner" />
        <typeparam name="TKey" />
        <typeparam name="TResult" />
        <param name="outer">The first sequence to join.</param>
        <param name="inner">The sequence to join to the first sequence.</param>
        <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
        <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
        <param name="resultSelector">
            A function to create a result element from an element from the first sequence
            and a collection of matching elements from the second sequence.
            </param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to hash and compare keys.</param>
        <summary>Correlates the elements of two sequences based on key equality and groups the results.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains elements of type <typeparamref name="TResult" />
            that are obtained by performing a grouped join on two sequences.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Index&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;(int Index, TSource Item)&gt; Index&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.ValueTuple`2&lt;int32, !!TSource&gt;&gt; Index&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Index``1(System.Collections.Generic.IAsyncEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Index(Of TSource) (source As IAsyncEnumerable(Of TSource)) As IAsyncEnumerable(Of ValueTuple(Of Integer, TSource))" />
      <MemberSignature Language="F#" Value="static member Index : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;ValueTuple&lt;int, 'Source&gt;&gt;" Usage="System.Linq.AsyncEnumerable.Index source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;ValueTuple&lt;int, TSource&gt;&gt; ^ Index(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.ValueTuple&lt;System.Int32,TSource&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1 })&gt;]</AttributeName>
          </Attribute>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Index", "Item" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Index", "Item" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">The source enumerable providing the elements.</param>
        <summary>Returns an enumerable that incorporates the element's index into a tuple.</summary>
        <returns>An enumerable that incorporates each element index into a tuple.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Intersect``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TSource), Optional comparer As IEqualityComparer(Of TSource) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Intersect : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Intersect (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
        <param name="first">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements that also appear in second will be returned.</param>
        <param name="second">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
        <summary>Produces the set intersection of two sequences.</summary>
        <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="second" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IntersectBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; IntersectBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TKey&gt; second, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; IntersectBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TKey&gt; second, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.IntersectBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IntersectBy(Of TSource, TKey) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TKey), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member IntersectBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Key&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.IntersectBy (first, second, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TKey&gt;" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
        <typeparam name="TKey">The type of key to identify elements by.</typeparam>
        <param name="first">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
        <param name="second">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>Produces the set intersection of two sequences according to a specified key selector function.</summary>
        <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
        <remarks>
          <para>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</para>
          <para>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</para>
          <para>When the object returned by this method is enumerated, `Intersect` yields distinct elements occurring in both sequences in the order in which they appear in <paramref name="first" />.</para>
          <para>If <paramref name="comparer" /> is <see langword="null" />, the default equality comparer, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />, is used to compare values.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IntersectBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; IntersectBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TKey&gt; second, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; IntersectBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TKey&gt; second, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.IntersectBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IntersectBy(Of TSource, TKey) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TKey), keySelector As Func(Of TSource, TKey), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member IntersectBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Key&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.IntersectBy (first, second, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TKey&gt;" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
        <typeparam name="TKey">The type of key to identify elements by.</typeparam>
        <param name="first">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
        <param name="second">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>Produces the set intersection of two sequences according to a specified key selector function.</summary>
        <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
        <remarks>
          <para>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</para>
          <para>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</para>
          <para>When the object returned by this method is enumerated, `Intersect` yields distinct elements occurring in both sequences in the order in which they appear in <paramref name="first" />.</para>
          <para>If <paramref name="comparer" /> is <see langword="null" />, the default equality comparer, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />, is used to compare values.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; outerKeySelector, Func&lt;TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; innerKeySelector, Func&lt;TOuter,TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TInner&gt; inner, class System.Func`3&lt;!!TOuter, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; outerKeySelector, class System.Func`3&lt;!!TInner, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; innerKeySelector, class System.Func`4&lt;!!TOuter, !!TInner, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Join``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``3}},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IAsyncEnumerable(Of TOuter), inner As IAsyncEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, CancellationToken, ValueTask(Of TKey)), innerKeySelector As Func(Of TInner, CancellationToken, ValueTask(Of TKey)), resultSelector As Func(Of TOuter, TInner, CancellationToken, ValueTask(Of TResult)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Join : System.Collections.Generic.IAsyncEnumerable&lt;'Outer&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Inner&gt; * Func&lt;'Outer, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Inner, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Outer, 'Inner, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="inner" Type="System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
        <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
        <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
        <typeparam name="TResult">The type of the result elements.</typeparam>
        <param name="outer">The first sequence to join.</param>
        <param name="inner">The sequence to join to the first sequence.</param>
        <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
        <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
        <param name="resultSelector">A function to create a result element from two matching elements.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to hash and compare keys.</param>
        <summary>Correlates the elements of two sequences based on matching keys.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that has elements of type <typeparamref name="TResult" />
            that are obtained by performing an inner join on two sequences.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Join``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IAsyncEnumerable(Of TOuter), inner As IAsyncEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Join : System.Collections.Generic.IAsyncEnumerable&lt;'Outer&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TInner">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
        <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
        <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
        <typeparam name="TResult">The type of the result elements.</typeparam>
        <param name="outer">The first sequence to join.</param>
        <param name="inner">The sequence to join to the first sequence.</param>
        <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
        <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
        <param name="resultSelector">A function to create a result element from two matching elements.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to hash and compare keys.</param>
        <summary>Correlates the elements of two sequences based on matching keys.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that has elements of type <typeparamref name="TResult" />
            that are obtained by performing an inner join on two sequences.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LastAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; LastAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; LastAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LastAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member LastAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.LastAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the last element of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the last element of a sequence.</summary>
        <returns>The value at the last position in the source sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The source sequence is empty (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="LastAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; LastAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; LastAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LastAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member LastAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.LastAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
        <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            The source sequence is empty, or no element in the sequence satisfies
            the condition in predicate (via the returned task).
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LastAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; LastAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; LastAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LastAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member LastAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.LastAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
        <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            The source sequence is empty, or no element in the sequence satisfies
            the condition in predicate (via the returned task).
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; LastOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; LastOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LastOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member LastOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.LastOrDefaultAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
        <returns>
            The default value of <typeparamref name="TSource" /> if the source sequence is empty;
            otherwise, the last element in the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; LastOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; LastOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LastOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member LastOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.LastOrDefaultAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
        <returns>The default value of <typeparamref name="TSource" /> if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; LastOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; LastOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LastOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member LastOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.LastOrDefaultAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
        <returns>The default value of <typeparamref name="TSource" /> if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; LastOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TSource defaultValue, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; LastOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LastOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), defaultValue As TSource, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member LastOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.LastOrDefaultAsync (source, defaultValue, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the last element of.</param>
        <param name="defaultValue">The default value to return if the sequence is empty.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
        <returns>
          <paramref name="defaultValue" /> if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; LastOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, TSource defaultValue, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; LastOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, !!TSource defaultValue, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LastOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), defaultValue As TSource, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member LastOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.LastOrDefaultAsync (source, predicate, defaultValue, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="defaultValue" Type="TSource" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="defaultValue">The default value to return if the sequence is empty.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
        <returns>
          <paramref name="defaultValue" /> if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; LastOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, TSource defaultValue, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; LastOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, !!TSource defaultValue, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LastOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), defaultValue As TSource, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member LastOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.LastOrDefaultAsync (source, predicate, defaultValue, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="defaultValue" Type="TSource" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return an element from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="defaultValue">The default value to return if the sequence is empty.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
        <returns>
          <paramref name="defaultValue" /> if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LeftJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; LeftJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; outerKeySelector, Func&lt;TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; innerKeySelector, Func&lt;TOuter,TInner?,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; LeftJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TInner&gt; inner, class System.Func`3&lt;!!TOuter, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; outerKeySelector, class System.Func`3&lt;!!TInner, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; innerKeySelector, class System.Func`4&lt;!!TOuter, !!TInner, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LeftJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``3}},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LeftJoin(Of TOuter, TInner, TKey, TResult) (outer As IAsyncEnumerable(Of TOuter), inner As IAsyncEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, CancellationToken, ValueTask(Of TKey)), innerKeySelector As Func(Of TInner, CancellationToken, ValueTask(Of TKey)), resultSelector As Func(Of TOuter, TInner, CancellationToken, ValueTask(Of TResult)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member LeftJoin : System.Collections.Generic.IAsyncEnumerable&lt;'Outer&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Inner&gt; * Func&lt;'Outer, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Inner, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Outer, 'Inner, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.LeftJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="inner" Type="System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 2, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 2, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
        <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
        <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
        <typeparam name="TResult">The type of the result elements.</typeparam>
        <param name="outer">The first sequence to join.</param>
        <param name="inner">The sequence to join to the first sequence.</param>
        <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
        <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
        <param name="resultSelector">A function to create a result element from two matching elements.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to hash and compare keys.</param>
        <summary>Correlates the elements of two sequences based on matching keys.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <typeparamref name="TResult" /> that are obtained by performing a left outer join on two sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LeftJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; LeftJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner?,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; LeftJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LeftJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LeftJoin(Of TOuter, TInner, TKey, TResult) (outer As IAsyncEnumerable(Of TOuter), inner As IAsyncEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member LeftJoin : System.Collections.Generic.IAsyncEnumerable&lt;'Outer&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.LeftJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TInner">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
        <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
        <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
        <typeparam name="TResult">The type of the result elements.</typeparam>
        <param name="outer">The first sequence to join.</param>
        <param name="inner">The sequence to join to the first sequence.</param>
        <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
        <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
        <param name="resultSelector">A function to create a result element from two matching elements.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to hash and compare keys.</param>
        <summary>Correlates the elements of two sequences based on matching keys.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that has elements of type <typeparamref name="TResult" /> that are obtained by performing a left outer join on two sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LongCountAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCountAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Long)" />
      <MemberSignature Language="F#" Value="static member LongCountAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int64&gt;" Usage="System.Linq.AsyncEnumerable.LongCountAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence that contains elements to be tested and counted.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the number of elements in a sequence satisfy a condition.</summary>
        <returns>The number of elements in the input sequence that satisfy the condition in the predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LongCountAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCountAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Long)" />
      <MemberSignature Language="F#" Value="static member LongCountAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int64&gt;" Usage="System.Linq.AsyncEnumerable.LongCountAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int64&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence that contains elements to be tested and counted.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the number of elements in a sequence satisfy a condition.</summary>
        <returns>The number of elements in the input sequence that satisfy the condition in the predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LongCountAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;long&gt; LongCountAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;int64&gt; LongCountAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.LongCountAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCountAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Long)" />
      <MemberSignature Language="F#" Value="static member LongCountAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int64&gt;" Usage="System.Linq.AsyncEnumerable.LongCountAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence that contains elements to be tested and counted.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the number of elements in a sequence satisfy a condition.</summary>
        <returns>The number of elements in the input sequence that satisfy the condition in the predicate function.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; MaxAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Collections.Generic.IComparer&lt;TSource&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; MaxAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IComparer`1&lt;!!TSource&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.MaxAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MaxAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional comparer As IComparer(Of TSource) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member MaxAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IComparer&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.MaxAsync (source, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TSource&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">A sequence of values to determine the maximum value of.</param>
        <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare values.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the maximum value in a generic sequence.</summary>
        <returns>The maximum value in the sequence.</returns>
        <remarks>
          <para>If type <typeparamref name="TSource" /> implements <see cref="T:System.IComparable`1" />, the <see cref="M:System.Linq.AsyncEnumerable.MaxAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0},System.Threading.CancellationToken)" /> method uses that implementation to compare values. Otherwise, if type <typeparamref name="TSource" /> implements <see cref="T:System.IComparable" />, that implementation is used to compare values.</para>
          <para>If <typeparamref name="TSource" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">No object in <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxByAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; MaxByAsync&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; MaxByAsync&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.MaxByAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MaxByAsync(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member MaxByAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.MaxByAsync (source, keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of key to compare elements by.</typeparam>
        <param name="source">A sequence of values to determine the maximum value of.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the maximum value in a generic sequence according to a specified key selector function.</summary>
        <returns>The value with the maximum key in the sequence.</returns>
        <remarks>
          <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">No key extracted from <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxByAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; MaxByAsync&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; MaxByAsync&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.MaxByAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MaxByAsync(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member MaxByAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.MaxByAsync (source, keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of key to compare elements by.</typeparam>
        <param name="source">A sequence of values to determine the maximum value of.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the maximum value in a generic sequence according to a specified key selector function.</summary>
        <returns>The value with the maximum key in the sequence.</returns>
        <remarks>
          <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">No key extracted from <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
      </Docs>
    </Member>
    <Member MemberName="MinAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; MinAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Collections.Generic.IComparer&lt;TSource&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; MinAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IComparer`1&lt;!!TSource&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.MinAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MinAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional comparer As IComparer(Of TSource) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member MinAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IComparer&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.MinAsync (source, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TSource&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">A sequence of values to determine the minimum value of.</param>
        <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare values.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the minimum value in a generic sequence.</summary>
        <returns>The minimum value in the sequence.</returns>
        <remarks>
          <para>If type <typeparamref name="TSource" /> implements <see cref="T:System.IComparable`1" />, the <see cref="M:System.Linq.AsyncEnumerable.MinAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0},System.Threading.CancellationToken)" /> method uses that implementation to compare values. Otherwise, if type <typeparamref name="TSource" /> implements <see cref="T:System.IComparable" />, that implementation is used to compare values.</para>
          <para>If <typeparamref name="TSource" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">No object in <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
      </Docs>
    </Member>
    <Member MemberName="MinByAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; MinByAsync&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; MinByAsync&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.MinByAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MinByAsync(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member MinByAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.MinByAsync (source, keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of key to compare elements by.</typeparam>
        <param name="source">A sequence of values to determine the minimum value of.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the minimum value in a generic sequence according to a specified key selector function.</summary>
        <returns>The value with the minimum key in the sequence.</returns>
        <remarks>
          <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">No key extracted from <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
      </Docs>
    </Member>
    <Member MemberName="MinByAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; MinByAsync&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; MinByAsync&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.MinByAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MinByAsync(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member MinByAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.MinByAsync (source, keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of key to compare elements by.</typeparam>
        <param name="source">A sequence of values to determine the minimum value of.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the minimum value in a generic sequence according to a specified key selector function.</summary>
        <returns>The value with the minimum key in the sequence.</returns>
        <remarks>
          <para>If <typeparamref name="TKey" /> is a reference type and the source sequence is empty or contains only values that are <see langword="null" />, this method returns <see langword="null" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">No key extracted from <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</exception>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;object?&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;object&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.OfType``1(System.Collections.Generic.IAsyncEnumerable{System.Object})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType(Of TResult) (source As IAsyncEnumerable(Of Object)) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member OfType : System.Collections.Generic.IAsyncEnumerable&lt;obj&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.OfType source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ OfType(System::Collections::Generic::IAsyncEnumerable&lt;System::Object ^&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Object&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements to filter.</param>
        <summary>
            Filters the elements of a <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> based on a specified type <typeparamref name="TResult" />.
            </summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains elements from the input sequence of type <typeparamref name="TResult" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Order&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedAsyncEnumerable&lt;T&gt; Order&lt;T&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;T&gt; source, System.Collections.Generic.IComparer&lt;T&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedAsyncEnumerable`1&lt;!!T&gt; Order&lt;T&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!T&gt; source, class System.Collections.Generic.IComparer`1&lt;!!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Order``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Order(Of T) (source As IAsyncEnumerable(Of T), Optional comparer As IComparer(Of T) = Nothing) As IOrderedAsyncEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="static member Order : System.Collections.Generic.IAsyncEnumerable&lt;'T&gt; * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Linq.IOrderedAsyncEnumerable&lt;'T&gt;" Usage="System.Linq.AsyncEnumerable.Order (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedAsyncEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">A sequence of values to order.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <summary>Sorts the elements of a sequence in ascending order.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are sorted.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.OrderBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IComparer(Of TKey) = Nothing) As IOrderedAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member OrderBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.OrderBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">A sequence of values to order.</param>
        <param name="keySelector">A function to extract a key from an element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <summary>Sorts the elements of a sequence in ascending order.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are sorted according to a key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.OrderBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IComparer(Of TKey) = Nothing) As IOrderedAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member OrderBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.OrderBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">A sequence of values to order.</param>
        <param name="keySelector">A function to extract a key from an element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <summary>Sorts the elements of a sequence in ascending order.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are sorted according to a key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.OrderByDescending``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IComparer(Of TKey) = Nothing) As IOrderedAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.OrderByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">A sequence of values to order.</param>
        <param name="keySelector">A function to extract a key from an element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <summary>Sorts the elements of a sequence in descending order.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.OrderByDescending``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IComparer(Of TKey) = Nothing) As IOrderedAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.OrderByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">A sequence of values to order.</param>
        <param name="keySelector">A function to extract a key from an element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <summary>Sorts the elements of a sequence in descending order.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OrderDescending&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedAsyncEnumerable&lt;T&gt; OrderDescending&lt;T&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;T&gt; source, System.Collections.Generic.IComparer&lt;T&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedAsyncEnumerable`1&lt;!!T&gt; OrderDescending&lt;T&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!T&gt; source, class System.Collections.Generic.IComparer`1&lt;!!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.OrderDescending``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderDescending(Of T) (source As IAsyncEnumerable(Of T), Optional comparer As IComparer(Of T) = Nothing) As IOrderedAsyncEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="static member OrderDescending : System.Collections.Generic.IAsyncEnumerable&lt;'T&gt; * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Linq.IOrderedAsyncEnumerable&lt;'T&gt;" Usage="System.Linq.AsyncEnumerable.OrderDescending (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedAsyncEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">A sequence of values to order.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <summary>Sorts the elements of a sequence in descending order.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are sorted in descending order.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Prepend&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Prepend&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Prepend&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Prepend``1(System.Collections.Generic.IAsyncEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Prepend(Of TSource) (source As IAsyncEnumerable(Of TSource), element As TSource) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Prepend : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Source -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Prepend (source, element)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Prepend(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence of values.</param>
        <param name="element">The value to prepend to source.</param>
        <summary>Adds a value to the beginning of the sequence.</summary>
        <returns>A new sequence that begins with element.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;int&gt; Range (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;int32&gt; Range(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Range(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Range (start As Integer, count As Integer) As IAsyncEnumerable(Of Integer)" />
      <MemberSignature Language="F#" Value="static member Range : int * int -&gt; System.Collections.Generic.IAsyncEnumerable&lt;int&gt;" Usage="System.Linq.AsyncEnumerable.Range (start, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;int&gt; ^ Range(int start, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">The value of the first integer in the sequence.</param>
        <param name="count">The number of sequential integers to generate.</param>
        <summary>Generates a sequence of integral numbers within a specified range.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains a range of sequential integral numbers.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Repeat&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt; (TResult element, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Repeat&lt;TResult&gt;(!!TResult element, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Repeat``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Repeat(Of TResult) (element As TResult, count As Integer) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Repeat : 'Result * int -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Repeat (element, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ Repeat(TResult element, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="element" Type="TResult" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the value to be repeated in the result sequence.</typeparam>
        <param name="element">The value to be repeated.</param>
        <param name="count">The number of times to repeat the value in the generated sequence.</param>
        <summary>Generates a sequence that contains one repeated value.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains a repeated value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> is less than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Reverse``1(System.Collections.Generic.IAsyncEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Reverse(Of TSource) (source As IAsyncEnumerable(Of TSource)) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Reverse : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Reverse source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Reverse(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence of values to reverse.</param>
        <summary>Inverts the order of the elements in a sequence.</summary>
        <returns>A sequence whose elements correspond to those of the input sequence in reverse order.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RightJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; RightJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; outerKeySelector, Func&lt;TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; innerKeySelector, Func&lt;TOuter?,TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; RightJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TInner&gt; inner, class System.Func`3&lt;!!TOuter, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; outerKeySelector, class System.Func`3&lt;!!TInner, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; innerKeySelector, class System.Func`4&lt;!!TOuter, !!TInner, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.RightJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``3}},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RightJoin(Of TOuter, TInner, TKey, TResult) (outer As IAsyncEnumerable(Of TOuter), inner As IAsyncEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, CancellationToken, ValueTask(Of TKey)), innerKeySelector As Func(Of TInner, CancellationToken, ValueTask(Of TKey)), resultSelector As Func(Of TOuter, TInner, CancellationToken, ValueTask(Of TResult)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member RightJoin : System.Collections.Generic.IAsyncEnumerable&lt;'Outer&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Inner&gt; * Func&lt;'Outer, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Inner, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Outer, 'Inner, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.RightJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="inner" Type="System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
        <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
        <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
        <typeparam name="TResult">The type of the result elements.</typeparam>
        <param name="outer">The first sequence to join.</param>
        <param name="inner">The sequence to join to the first sequence.</param>
        <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
        <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
        <param name="resultSelector">A function to create a result element from two matching elements.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to hash and compare keys.</param>
        <summary>Correlates the elements of two sequences based on matching keys.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that has elements of type <typeparamref name="TResult" /> that are obtained by performing a right outer join on two sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RightJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; RightJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter?,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; RightJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.RightJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RightJoin(Of TOuter, TInner, TKey, TResult) (outer As IAsyncEnumerable(Of TOuter), inner As IAsyncEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member RightJoin : System.Collections.Generic.IAsyncEnumerable&lt;'Outer&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.RightJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TInner">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IAsyncEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IAsyncEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
        <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
        <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
        <typeparam name="TResult">The type of the result elements.</typeparam>
        <param name="outer">The first sequence to join.</param>
        <param name="inner">The sequence to join to the first sequence.</param>
        <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
        <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
        <param name="resultSelector">A function to create a result element from two matching elements.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to hash and compare keys.</param>
        <summary>Correlates the elements of two sequences based on matching keys.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that has elements of type <typeparamref name="TResult" /> that are obtained by performing a right outer join on two sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`4&lt;!!TSource, int32, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IAsyncEnumerable(Of TSource), selector As Func(Of TSource, Integer, CancellationToken, ValueTask(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Select : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Select (source, selector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;TResult&gt;&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TResult">The type of the value returned by selector.</typeparam>
        <param name="source">A sequence of values to invoke a transform function on.</param>
        <param name="selector">
            A transform function to apply to each element; the second parameter of
            the function represents the index of the source element.
            </param>
        <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the transform function on each element of source.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IAsyncEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Select : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, 'Result&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Select (source, selector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, TResult&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TResult">The type of the value returned by selector.</typeparam>
        <param name="source">A sequence of values to invoke a transform function on.</param>
        <param name="selector">
            A transform function to apply to each element; the second parameter of
            the function represents the index of the source element.
            </param>
        <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the transform function on each element of source.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IAsyncEnumerable(Of TSource), selector As Func(Of TSource, CancellationToken, ValueTask(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Select : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Select (source, selector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;TResult&gt;&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TResult">The type of the value returned by selector.</typeparam>
        <param name="source">A sequence of values to invoke a transform function on.</param>
        <param name="selector">A transform function to apply to each element.</param>
        <summary>Projects each element of a sequence into a new form.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the transform function on each element of source.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IAsyncEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Select : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Select (source, selector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TResult">The type of the value returned by selector.</typeparam>
        <param name="source">A sequence of values to invoke a transform function on.</param>
        <param name="selector">A transform function to apply to each element.</param>
        <summary>Projects each element of a sequence into a new form.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the transform function on each element of source.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IAsyncEnumerable(Of TSource), selector As Func(Of TSource, IAsyncEnumerable(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, selector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="selector">A transform function to apply to each element.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> and
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function on each element of the input sequence.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IAsyncEnumerable(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, selector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="selector">A transform function to apply to each element.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function on each element of the input sequence.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IAsyncEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IAsyncEnumerable(Of TSource), selector As Func(Of TSource, Integer, IAsyncEnumerable(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, selector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="selector">A transform function to apply to each element.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> and
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence.
            The index of each source element is used in the projected form of that element.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function on each element of the input sequence.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IAsyncEnumerable(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, selector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="selector">A transform function to apply to each element.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence.
            The index of each source element is used in the projected form of that element.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function on each element of the input sequence.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`4&lt;!!TSource, int32, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{``1}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IAsyncEnumerable(Of TSource), selector As Func(Of TSource, Integer, CancellationToken, ValueTask(Of IEnumerable(Of TResult)))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;seq&lt;'Result&gt;&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, selector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt;&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="selector">A transform function to apply to each element.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence.
            The index of each source element is used in the projected form of that element.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function on each element of the input sequence.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{``1}}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IAsyncEnumerable(Of TSource), selector As Func(Of TSource, CancellationToken, ValueTask(Of IEnumerable(Of TResult)))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;seq&lt;'Result&gt;&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, selector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt;&gt; ^ selector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="selector">A transform function to apply to each element.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function on each element of the input sequence.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IAsyncEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`4&lt;!!TSource, !!TCollection, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IAsyncEnumerable(Of TSource), collectionSelector As Func(Of TSource, IAsyncEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, CancellationToken, ValueTask(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Collections.Generic.IAsyncEnumerable&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IAsyncEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;TResult&gt;&gt; ^ resultSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TCollection">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IAsyncEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
        <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
        <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />,
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence,
            and invokes a result selector function on each element therein. The index of each source element is used in
            the intermediate projected form of that element.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element
            of source and then mapping each of those sequence elements and their corresponding
            source element to a result element.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IAsyncEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IAsyncEnumerable(Of TSource), collectionSelector As Func(Of TSource, IAsyncEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Collections.Generic.IAsyncEnumerable&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IAsyncEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TCollection">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IAsyncEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
        <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
        <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />,
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence,
            and invokes a result selector function on each element therein. The index of each source element is used in
            the intermediate projected form of that element.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element
            of source and then mapping each of those sequence elements and their corresponding
            source element to a result element.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IAsyncEnumerable(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TCollection">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
        <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
        <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />,
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence,
            and invokes a result selector function on each element therein. The index of each source element is used in
            the intermediate projected form of that element.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element
            of source and then mapping each of those sequence elements and their corresponding
            source element to a result element.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IAsyncEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`4&lt;!!TSource, !!TCollection, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IAsyncEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IAsyncEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, CancellationToken, ValueTask(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, System.Collections.Generic.IAsyncEnumerable&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IAsyncEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;TResult&gt;&gt; ^ resultSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TCollection">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IAsyncEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
        <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
        <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />,
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence,
            and invokes a result selector function on each element therein.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element
            of source and then mapping each of those sequence elements and their corresponding
            source element to a result element.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IAsyncEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TCollection">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
        <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
        <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />,
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence,
            and invokes a result selector function on each element therein.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element
            of source and then mapping each of those sequence elements and their corresponding
            source element to a result element.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`4&lt;!!TSource, int32, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt;&gt; collectionSelector, class System.Func`4&lt;!!TSource, !!TCollection, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IAsyncEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, CancellationToken, ValueTask(Of IEnumerable(Of TCollection))), resultSelector As Func(Of TSource, TCollection, CancellationToken, ValueTask(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;seq&lt;'Collection&gt;&gt;&gt; * Func&lt;'Source, 'Collection, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt;&gt; ^ collectionSelector, Func&lt;TSource, TCollection, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;TResult&gt;&gt; ^ resultSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
        <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
        <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />,
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence,
            and invokes a result selector function on each element therein.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element
            of source and then mapping each of those sequence elements and their corresponding
            source element to a result element.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt;&gt; collectionSelector, class System.Func`4&lt;!!TSource, !!TCollection, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IAsyncEnumerable(Of TSource), collectionSelector As Func(Of TSource, CancellationToken, ValueTask(Of IEnumerable(Of TCollection))), resultSelector As Func(Of TSource, TCollection, CancellationToken, ValueTask(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;seq&lt;'Collection&gt;&gt;&gt; * Func&lt;'Source, 'Collection, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt;&gt; ^ collectionSelector, Func&lt;TSource, TCollection, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;TResult&gt;&gt; ^ resultSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
        <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
        <param name="source">A sequence of values to project.</param>
        <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
        <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
        <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />,
            flattens the resulting sequences into one <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> sequence,
            and invokes a result selector function on each element therein. The index of each source element is used in
            the intermediate projected form of that element.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are the result of
            invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element
            of source and then mapping each of those sequence elements and their corresponding
            source element to a result element.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqualAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;bool&gt; SequenceEqualAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; SequenceEqualAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SequenceEqualAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqualAsync(Of TSource) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TSource), Optional comparer As IEqualityComparer(Of TSource) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member SequenceEqualAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="System.Linq.AsyncEnumerable.SequenceEqualAsync (first, second, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource" />
        <param name="first">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to compare to <paramref name="second" />.</param>
        <param name="second">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to compare to the first sequence.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Determines whether two sequences are equal by comparing their elements.</summary>
        <returns>
            true if the two source sequences are of equal length and their corresponding
            elements compare equal according to comparer; otherwise, false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SingleAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SingleAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the single element of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Returns the only element of a sequence, and throws an exception if there is not
            exactly one element in the sequence.
            </summary>
        <returns>The single element of the input sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <paramref name="source" /> sequence contains more than one element. (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SingleAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SingleAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the single element of.</param>
        <param name="predicate">A function to test an element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
        <returns>The single element of the input sequence that satisfies a condition.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate" /> (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; SingleAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; SingleAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SingleAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SingleAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the single element of.</param>
        <param name="predicate">A function to test an element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
        <returns>The single element of the input sequence that satisfies a condition.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate" /> (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SingleOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SingleOrDefaultAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the single element of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Returns the only element of a sequence, or a default value if the sequence is
            empty; this method throws an exception if there is more than one element in the sequence.
            </summary>
        <returns>
            The single element of the input sequence, or the default value of <typeparamref name="TSource" />
            if the sequence contains no elements.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <paramref name="source" /> sequence contains more than one element. (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SingleOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SingleOrDefaultAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the single element of.</param>
        <param name="predicate">A function to test an element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Returns the only element of a sequence that satisfies a specified condition or
            a default value if no such element exists; this method throws an exception if
            more than one element satisfies the condition.
            </summary>
        <returns>
            The single element of the input sequence that satisfies the condition, or the default value of
            <typeparamref name="TSource" /> if no such element is found.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource?&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SingleOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SingleOrDefaultAsync (source, predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the single element of.</param>
        <param name="predicate">A function to test an element for a condition.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Returns the only element of a sequence that satisfies a specified condition or
            a default value if no such element exists; this method throws an exception if
            more than one element satisfies the condition.
            </summary>
        <returns>
            The single element of the input sequence that satisfies the condition, or the default value of
            <typeparamref name="TSource" /> if no such element is found.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, TSource defaultValue, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SingleOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), defaultValue As TSource, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SingleOrDefaultAsync (source, defaultValue, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return the single element of.</param>
        <param name="defaultValue">The default value to return if the sequence is empty.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
        <returns>The single element of the input sequence, or <paramref name="defaultValue" /> if the sequence contains no elements.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate, TSource defaultValue, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate, !!TSource defaultValue, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SingleOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), defaultValue As TSource, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SingleOrDefaultAsync (source, predicate, defaultValue, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        <Parameter Name="defaultValue" Type="TSource" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return a single element from.</param>
        <param name="predicate">A function to test an element for a condition.</param>
        <param name="defaultValue">The default value to return if the sequence is empty.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
        <returns>The single element of the input sequence that satisfies the condition, or <paramref name="defaultValue" /> if no such element is found.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefaultAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource&gt; SingleOrDefaultAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate, TSource defaultValue, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource&gt; SingleOrDefaultAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate, !!TSource defaultValue, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SingleOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefaultAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean)), defaultValue As TSource, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SingleOrDefaultAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; * 'Source * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SingleOrDefaultAsync (source, predicate, defaultValue, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="defaultValue" Type="TSource" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return a single element from.</param>
        <param name="predicate">A function to test an element for a condition.</param>
        <param name="defaultValue">The default value to return if the sequence is empty.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
        <returns>The single element of the input sequence that satisfies the condition, or <paramref name="defaultValue" /> if no such element is found.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Skip``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IAsyncEnumerable(Of TSource), count As Integer) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Skip : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * int -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Skip (source, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Skip(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return elements from.</param>
        <param name="count">The number of elements to skip before returning the remaining elements.</param>
        <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; SkipLast&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SkipLast``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipLast(Of TSource) (source As IAsyncEnumerable(Of TSource), count As Integer) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SkipLast : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * int -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SkipLast (source, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ SkipLast(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return elements from.</param>
        <param name="count">The number of elements to omit from the end of the sequence.</param>
        <summary>
            Returns a new sequence that contains the elements from <paramref name="source" />
            with the last <paramref name="count" /> elements of the source collection omitted.
            </summary>
        <returns>
            A new sequence that contains the elements from <paramref name="source" /> minus
            <paramref name="count" /> elements from the end of the sequence.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SkipWhile : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SkipWhile (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return elements from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <summary>
            Bypasses elements in a sequence as long as a specified condition is true and
            then returns the remaining elements.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from the
            input sequence starting at the first element in the linear series that does not
            pass the test specified by predicate.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SkipWhile : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SkipWhile (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return elements from.</param>
        <param name="predicate">
            A function to test each element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
        <summary>
            Bypasses elements in a sequence as long as a specified condition is true and
            then returns the remaining elements. The element's index is used in the logic
            of the predicate function.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from the
            input sequence starting at the first element in the linear series that does not
            pass the test specified by predicate.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`4&lt;!!TSource, int32, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Integer, CancellationToken, ValueTask(Of Boolean))) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SkipWhile : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SkipWhile (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;bool&gt;&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return elements from.</param>
        <param name="predicate">
            A function to test each element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
        <summary>
            Bypasses elements in a sequence as long as a specified condition is true and
            then returns the remaining elements. The element's index is used in the logic
            of the predicate function.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from the
            input sequence starting at the first element in the linear series that does not
            pass the test specified by predicate.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean))) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member SkipWhile : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.SkipWhile (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;bool&gt;&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to return elements from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <summary>
            Bypasses elements in a sequence as long as a specified condition is true and
            then returns the remaining elements.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from the
            input sequence starting at the first element in the linear series that does not
            pass the test specified by predicate.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;decimal&gt; SumAsync (this System.Collections.Generic.IAsyncEnumerable&lt;decimal&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Decimal&gt; SumAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Decimal&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Decimal},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IAsyncEnumerable(Of Decimal), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Decimal)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Collections.Generic.IAsyncEnumerable&lt;decimal&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;decimal&gt;" Usage="System.Linq.AsyncEnumerable.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Decimal&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of values to calculate the sum of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the sum of a sequence of values.</summary>
        <returns>The sum of the values in the sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;double&gt; SumAsync (this System.Collections.Generic.IAsyncEnumerable&lt;double&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;float64&gt; SumAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;float64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Double},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IAsyncEnumerable(Of Double), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Double)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Collections.Generic.IAsyncEnumerable&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;double&gt;" Usage="System.Linq.AsyncEnumerable.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Double&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of values to calculate the sum of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the sum of a sequence of values.</summary>
        <returns>The sum of the values in the sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;int&gt; SumAsync (this System.Collections.Generic.IAsyncEnumerable&lt;int&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; SumAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;int32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IAsyncEnumerable(Of Integer), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Integer)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Collections.Generic.IAsyncEnumerable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="System.Linq.AsyncEnumerable.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Int32&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of values to calculate the sum of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the sum of a sequence of values.</summary>
        <returns>The sum of the values in the sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;long&gt; SumAsync (this System.Collections.Generic.IAsyncEnumerable&lt;long&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;int64&gt; SumAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;int64&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Int64},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IAsyncEnumerable(Of Long), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Long)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Collections.Generic.IAsyncEnumerable&lt;int64&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int64&gt;" Usage="System.Linq.AsyncEnumerable.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Int64&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of values to calculate the sum of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the sum of a sequence of values.</summary>
        <returns>The sum of the values in the sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;decimal?&gt; SumAsync (this System.Collections.Generic.IAsyncEnumerable&lt;decimal?&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; SumAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IAsyncEnumerable(Of Nullable(Of Decimal)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Nullable(Of Decimal))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Collections.Generic.IAsyncEnumerable&lt;Nullable&lt;decimal&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Nullable&lt;decimal&gt;&gt;" Usage="System.Linq.AsyncEnumerable.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Nullable&lt;System.Decimal&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of nullable values to calculate the sum of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the sum of a sequence of nullable values.</summary>
        <returns>The sum of the values in the sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;double?&gt; SumAsync (this System.Collections.Generic.IAsyncEnumerable&lt;double?&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; SumAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Double}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IAsyncEnumerable(Of Nullable(Of Double)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Nullable(Of Double))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Collections.Generic.IAsyncEnumerable&lt;Nullable&lt;double&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Nullable&lt;double&gt;&gt;" Usage="System.Linq.AsyncEnumerable.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Nullable&lt;System.Double&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of nullable values to calculate the sum of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the sum of a sequence of nullable values.</summary>
        <returns>The sum of the values in the sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;int?&gt; SumAsync (this System.Collections.Generic.IAsyncEnumerable&lt;int?&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; SumAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int32}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IAsyncEnumerable(Of Nullable(Of Integer)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Nullable(Of Integer))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Collections.Generic.IAsyncEnumerable&lt;Nullable&lt;int&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Nullable&lt;int&gt;&gt;" Usage="System.Linq.AsyncEnumerable.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of nullable values to calculate the sum of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the sum of a sequence of nullable values.</summary>
        <returns>The sum of the values in the sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;long?&gt; SumAsync (this System.Collections.Generic.IAsyncEnumerable&lt;long?&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; SumAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int64}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IAsyncEnumerable(Of Nullable(Of Long)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Nullable(Of Long))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Collections.Generic.IAsyncEnumerable&lt;Nullable&lt;int64&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Nullable&lt;int64&gt;&gt;" Usage="System.Linq.AsyncEnumerable.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Nullable&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of nullable values to calculate the sum of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the sum of a sequence of nullable values.</summary>
        <returns>The sum of the values in the sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;float?&gt; SumAsync (this System.Collections.Generic.IAsyncEnumerable&lt;float?&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; SumAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Single}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IAsyncEnumerable(Of Nullable(Of Single)), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Nullable(Of Single))" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Collections.Generic.IAsyncEnumerable&lt;Nullable&lt;single&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Nullable&lt;single&gt;&gt;" Usage="System.Linq.AsyncEnumerable.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Nullable&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of nullable values to calculate the sum of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the sum of a sequence of nullable values.</summary>
        <returns>The sum of the values in the sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SumAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;float&gt; SumAsync (this System.Collections.Generic.IAsyncEnumerable&lt;float&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;float32&gt; SumAsync(class System.Collections.Generic.IAsyncEnumerable`1&lt;float32&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Single},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SumAsync (source As IAsyncEnumerable(Of Single), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Single)" />
      <MemberSignature Language="F#" Value="static member SumAsync : System.Collections.Generic.IAsyncEnumerable&lt;single&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;single&gt;" Usage="System.Linq.AsyncEnumerable.SumAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Single&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A sequence of values to calculate the sum of.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Computes the sum of a sequence of values.</summary>
        <returns>The sum of the values in the sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Take``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IAsyncEnumerable(Of TSource), count As Integer) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Take : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * int -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Take (source, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Take(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">The sequence to return elements from.</param>
        <param name="count">The number of elements to return.</param>
        <summary>Returns a specified number of contiguous elements from the start of a sequence.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the specified number
            of elements from the start of the input sequence.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Take``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Range)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IAsyncEnumerable(Of TSource), range As Range) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Take : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Range -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Take (source, range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Take(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Range range);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="range" Type="System.Range" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">The sequence to return elements from.</param>
        <param name="range">The range of elements to return, which has start and end indexes either from the start or the end.</param>
        <summary>Returns a specified range of contiguous elements from a sequence.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the specified <paramref name="range" /> of elements from the <paramref name="source" /> sequence.</returns>
        <remarks>
          <para>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</para>
          <para>Take enumerates <paramref name="source" /> and yields elements whose indices belong to the specified <paramref name="range" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TakeLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; TakeLast&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; TakeLast&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.TakeLast``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeLast(Of TSource) (source As IAsyncEnumerable(Of TSource), count As Integer) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member TakeLast : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * int -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.TakeLast (source, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ TakeLast(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements in <paramref name="source" />.</typeparam>
        <param name="source">A sequence to return elements from.</param>
        <param name="count">The number of elements to take from the end of the sequence.</param>
        <summary>Returns a new sequence that contains the last <paramref name="count" /> elements from <paramref name="source" />.</summary>
        <returns>A new sequence that contains the last <paramref name="count" /> elements from <paramref name="source" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member TakeWhile : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.TakeWhile (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence to return elements from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from the
            input sequence that occur before the element at which the test no longer passes.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member TakeWhile : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.TakeWhile (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence to return elements from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <summary>
            Returns elements from a sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from the
            input sequence that occur before the element at which the test no longer passes.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`4&lt;!!TSource, int32, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Integer, CancellationToken, ValueTask(Of Boolean))) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member TakeWhile : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.TakeWhile (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;bool&gt;&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence to return elements from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <summary>
            Returns elements from a sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from the
            input sequence that occur before the element at which the test no longer passes.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean))) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member TakeWhile : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.TakeWhile (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;bool&gt;&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">A sequence to return elements from.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from the
            input sequence that occur before the element at which the test no longer passes.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ThenBy``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IComparer(Of TKey) = Nothing) As IOrderedAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ThenBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">A sequence of values to order.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <summary>Performs a subsequent ordering of the elements in a sequence in ascending order.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are sorted according to a key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ThenBy``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IComparer(Of TKey) = Nothing) As IOrderedAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ThenBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">A sequence of values to order.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <summary>Performs a subsequent ordering of the elements in a sequence in ascending order.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are sorted according to a key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ThenByDescending``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IComparer(Of TKey) = Nothing) As IOrderedAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ThenByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">A sequence of values to order.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <summary>Performs a subsequent ordering of the elements in a sequence in descending order.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ThenByDescending``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IComparer(Of TKey) = Nothing) As IOrderedAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ThenByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">A sequence of values to order.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
        <summary>Performs a subsequent ordering of the elements in a sequence in descending order.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToArrayAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TSource[]&gt; ToArrayAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TSource[]&gt; ToArrayAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToArrayAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArrayAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TSource())" />
      <MemberSignature Language="F#" Value="static member ToArrayAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Source[]&gt;" Usage="System.Linq.AsyncEnumerable.ToArrayAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TSource[]&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Creates an array from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.</summary>
        <returns>An array that contains the elements from the input sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToAsyncEnumerable&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; ToAsyncEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; ToAsyncEnumerable&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAsyncEnumerable(Of TSource) (source As IEnumerable(Of TSource)) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member ToAsyncEnumerable : seq&lt;'Source&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.ToAsyncEnumerable source" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ ToAsyncEnumerable(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of the elements to enumerate.</param>
        <summary>Creates a new <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that iterates through <paramref name="source" />.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> containing the sequence of elements from <paramref name="source" />.</returns>
        <remarks>
            Each iteration through the resulting <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> will iterate through the <paramref name="source" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;&gt; ToDictionaryAsync&lt;TKey,TValue&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; source, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TValue&gt;&gt; ToDictionaryAsync&lt;TKey, TValue&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!!TKey, !!TValue&gt;&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToDictionaryAsync``2(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TKey, TValue) (source As IAsyncEnumerable(Of KeyValuePair(Of TKey, TValue)), Optional comparer As IEqualityComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Dictionary(Of TKey, TValue))" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToDictionaryAsync (source, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">The type of the keys from elements of <paramref name="source" /></typeparam>
        <typeparam name="TValue">The type of the values from elements of <paramref name="source" /></typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> according to specified key comparer.
            </summary>
        <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values from <paramref name="source" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> contains one or more duplicate keys (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;&gt; ToDictionaryAsync&lt;TKey,TValue&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;(TKey Key, TValue Value)&gt; source, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TValue&gt;&gt; ToDictionaryAsync&lt;TKey, TValue&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.ValueTuple`2&lt;!!TKey, !!TValue&gt;&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToDictionaryAsync``2(System.Collections.Generic.IAsyncEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TKey, TValue) (source As IAsyncEnumerable(Of ValueTuple(Of TKey, TValue)), Optional comparer As IEqualityComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Dictionary(Of TKey, TValue))" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Collections.Generic.IAsyncEnumerable&lt;ValueTuple&lt;'Key, 'Value&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Value&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToDictionaryAsync (source, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;System.ValueTuple&lt;TKey,TValue&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Key", "Value" })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Key", "Value" })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">The type of the keys from elements of <paramref name="source" /></typeparam>
        <typeparam name="TValue">The type of the values from elements of <paramref name="source" /></typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> according to specified key comparer.
            </summary>
        <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values from <paramref name="source" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> contains one or more duplicate keys (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToDictionaryAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IEqualityComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Dictionary(Of TKey, TSource))" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToDictionaryAsync (source, keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the keys returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            according to a specified key selector function.
            </summary>
        <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> contains one or more duplicate keys (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt; ToDictionaryAsync&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt;&gt; ToDictionaryAsync&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToDictionaryAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IEqualityComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Dictionary(Of TKey, TSource))" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToDictionaryAsync (source, keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the keys returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            according to a specified key selector function.
            </summary>
        <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> contains one or more duplicate keys (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TElement&gt;&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TElement&gt;&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToDictionaryAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey, TElement) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), elementSelector As Func(Of TSource, CancellationToken, ValueTask(Of TElement)), Optional comparer As IEqualityComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Dictionary(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Element&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToDictionaryAsync (source, keySelector, elementSelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TElement&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="elementSelector">A transform function to produce a result element value from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />"/&gt;
            according to specified key selector and element selector functions.
            </summary>
        <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <typeparamref name="TElement" /> selected from the input sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="elementSelector" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> contains one or more duplicate keys (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionaryAsync&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt; ToDictionaryAsync&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt;&gt; ToDictionaryAsync&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToDictionaryAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionaryAsync(Of TSource, TKey, TElement) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), Optional comparer As IEqualityComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Dictionary(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="static member ToDictionaryAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToDictionaryAsync (source, keySelector, elementSelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="elementSelector">A transform function to produce a result element value from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />"/&gt;
            according to specified key selector and element selector functions.
            </summary>
        <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <typeparamref name="TElement" /> selected from the input sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="elementSelector" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> contains one or more duplicate keys (via the returned task).</exception>
      </Docs>
    </Member>
    <Member MemberName="ToHashSetAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.HashSet&lt;TSource&gt;&gt; ToHashSetAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.HashSet`1&lt;!!TSource&gt;&gt; ToHashSetAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToHashSetAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSetAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional comparer As IEqualityComparer(Of TSource) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of HashSet(Of TSource))" />
      <MemberSignature Language="F#" Value="static member ToHashSetAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.HashSet&lt;'Source&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToHashSetAsync (source, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.HashSet&lt;TSource&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.</summary>
        <returns>A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <typeparamref name="TSource" /> selected from the input sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToListAsync&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.List&lt;TSource&gt;&gt; ToListAsync&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.List`1&lt;!!TSource&gt;&gt; ToListAsync&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToListAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToListAsync(Of TSource) (source As IAsyncEnumerable(Of TSource), Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of List(Of TSource))" />
      <MemberSignature Language="F#" Value="static member ToListAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.List&lt;'Source&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToListAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.List&lt;TSource&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of source.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a list from.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Creates a list from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.</summary>
        <returns>A list that contains the elements from the input sequence.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookupAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;TKey,TSource&gt;&gt; ToLookupAsync&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt;&gt; ToLookupAsync&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToLookupAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookupAsync(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IEqualityComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of ILookup(Of TKey, TSource))" />
      <MemberSignature Language="F#" Value="static member ToLookupAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToLookupAsync (source, keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;TKey,TSource&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to create a <see cref="T:System.Linq.ILookup`2" /> from.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates a <see cref="T:System.Linq.ILookup`2" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            according to a specified key selector function.
            </summary>
        <returns>A <see cref="T:System.Linq.ILookup`2" /> that contains keys and values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookupAsync&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;TKey,TSource&gt;&gt; ToLookupAsync&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt;&gt; ToLookupAsync&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToLookupAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookupAsync(Of TSource, TKey) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IEqualityComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of ILookup(Of TKey, TSource))" />
      <MemberSignature Language="F#" Value="static member ToLookupAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToLookupAsync (source, keySelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;TKey,TSource&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to create a <see cref="T:System.Linq.ILookup`2" /> from.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates a <see cref="T:System.Linq.ILookup`2" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            according to a specified key selector function.
            </summary>
        <returns>A <see cref="T:System.Linq.ILookup`2" /> that contains keys and values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookupAsync&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;TKey,TElement&gt;&gt; ToLookupAsync&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TElement&gt;&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt;&gt; ToLookupAsync&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TElement&gt;&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToLookupAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookupAsync(Of TSource, TKey, TElement) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), elementSelector As Func(Of TSource, CancellationToken, ValueTask(Of TElement)), Optional comparer As IEqualityComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of ILookup(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="static member ToLookupAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Element&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToLookupAsync (source, keySelector, elementSelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;TKey,TElement&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TElement&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to create a <see cref="T:System.Linq.ILookup`2" /> from.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="elementSelector">A transform function to produce a result element value from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates a <see cref="T:System.Linq.ILookup`2" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            according to a specified key selector function and element selector functions.
            </summary>
        <returns>A <see cref="T:System.Linq.ILookup`2" /> that contains keys and values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookupAsync&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;TKey,TElement&gt;&gt; ToLookupAsync&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt;&gt; ToLookupAsync&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.ToLookupAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookupAsync(Of TSource, TKey, TElement) (source As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), Optional comparer As IEqualityComparer(Of TKey) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of ILookup(Of TKey, TElement))" />
      <MemberSignature Language="F#" Value="static member ToLookupAsync : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.AsyncEnumerable.ToLookupAsync (source, keySelector, elementSelector, comparer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Linq.ILookup&lt;TKey,TElement&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TElement">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
        <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
        <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to create a <see cref="T:System.Linq.ILookup`2" /> from.</param>
        <param name="keySelector">A function to extract a key from each element.</param>
        <param name="elementSelector">A transform function to produce a result element value from each element.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Creates a <see cref="T:System.Linq.ILookup`2" /> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            according to a specified key selector function and element selector functions.
            </summary>
        <returns>A <see cref="T:System.Linq.ILookup`2" /> that contains keys and values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="keySelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Union``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TSource), Optional comparer As IEqualityComparer(Of TSource) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Union : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Union (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource" />
        <param name="first">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements form the first set for the union.</param>
        <param name="second">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements form the second set for the union.</param>
        <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
        <summary>Produces the set union of two sequences.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="second" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UnionBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; UnionBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; second, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; UnionBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; second, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TKey&gt;&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.UnionBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UnionBy(Of TSource, TKey) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, CancellationToken, ValueTask(Of TKey)), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member UnionBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Key&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.UnionBy (first, second, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
        <typeparam name="TKey">The type of key to identify elements by.</typeparam>
        <param name="first">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements form the first set for the union.</param>
        <param name="second">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements form the second set for the union.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
        <summary>Produces the set union of two sequences according to a specified key selector function.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="second" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UnionBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; UnionBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; second, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt;? comparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; UnionBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; second, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.UnionBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UnionBy(Of TSource, TKey) (first As IAsyncEnumerable(Of TSource), second As IAsyncEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), Optional comparer As IEqualityComparer(Of TKey) = Nothing) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member UnionBy : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.UnionBy (first, second, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TKey">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
        <typeparam name="TKey">The type of key to identify elements by.</typeparam>
        <param name="first">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements form the first set for the union.</param>
        <param name="second">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> whose distinct elements form the second set for the union.</param>
        <param name="keySelector">A function to extract the key for each element.</param>
        <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
        <summary>Produces the set union of two sequences according to a specified key selector function.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="second" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Where : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Where (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to filter.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <summary>Filters a sequence of values based on a predicate.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Where : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Where (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to filter.</param>
        <param name="predicate">
            A function to test each element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
        <summary>
            Filters a sequence of values based on a predicate.
            Each element's index is used in the logic of the predicate function.
            </summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`4&lt;!!TSource, int32, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, Integer, CancellationToken, ValueTask(Of Boolean))) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Where : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, int, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Where (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;bool&gt;&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to filter.</param>
        <param name="predicate">
            A function to test each element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
        <summary>
            Filters a sequence of values based on a predicate.
            Each element's index is used in the logic of the predicate function.
            </summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt;&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IAsyncEnumerable(Of TSource), predicate As Func(Of TSource, CancellationToken, ValueTask(Of Boolean))) As IAsyncEnumerable(Of TSource)" />
      <MemberSignature Language="F#" Value="static member Where : System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt; * Func&lt;'Source, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;bool&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Source&gt;" Usage="System.Linq.AsyncEnumerable.Where (source, predicate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IAsyncEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;bool&gt;&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
        <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to filter.</param>
        <param name="predicate">A function to test each element for a condition.</param>
        <summary>Filters a sequence of values based on a predicate.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="predicate" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;(TFirst First, TSecond Second)&gt; Zip&lt;TFirst,TSecond&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSecond&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.ValueTuple`2&lt;!!TFirst, !!TSecond&gt;&gt; Zip&lt;TFirst, TSecond&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSecond&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Zip``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond) (first As IAsyncEnumerable(Of TFirst), second As IAsyncEnumerable(Of TSecond)) As IAsyncEnumerable(Of ValueTuple(Of TFirst, TSecond))" />
      <MemberSignature Language="F#" Value="static member Zip : System.Collections.Generic.IAsyncEnumerable&lt;'First&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Second&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;ValueTuple&lt;'First, 'Second&gt;&gt;" Usage="System.Linq.AsyncEnumerable.Zip (first, second)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;ValueTuple&lt;TFirst, TSecond&gt;&gt; ^ Zip(System::Collections::Generic::IAsyncEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IAsyncEnumerable&lt;TSecond&gt; ^ second);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.ValueTuple&lt;TFirst,TSecond&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1 })&gt;]</AttributeName>
          </Attribute>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "First", "Second" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "First", "Second" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TSecond">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TFirst&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSecond&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
        <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
        <param name="first">The first sequence to merge.</param>
        <param name="second">The second sequence to merge.</param>
        <summary>Produces a sequence of tuples with elements from the two specified sequences.</summary>
        <returns>A sequence of tuples with elements taken from the first and second sequences, in that order.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="second" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSecond&gt; second, class System.Func`4&lt;!!TFirst, !!TSecond, valuetype System.Threading.CancellationToken, valuetype System.Threading.Tasks.ValueTask`1&lt;!!TResult&gt;&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Zip``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``2}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TResult) (first As IAsyncEnumerable(Of TFirst), second As IAsyncEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, CancellationToken, ValueTask(Of TResult))) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Zip : System.Collections.Generic.IAsyncEnumerable&lt;'First&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Second&gt; * Func&lt;'First, 'Second, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask&lt;'Result&gt;&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Zip (first, second, resultSelector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ Zip(System::Collections::Generic::IAsyncEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IAsyncEnumerable&lt;TSecond&gt; ^ second, Func&lt;TFirst, TSecond, System::Threading::CancellationToken, System::Threading::Tasks::ValueTask&lt;TResult&gt;&gt; ^ resultSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TSecond">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TFirst&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSecond&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask&lt;TResult&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
        <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
        <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
        <param name="first">The first sequence to merge.</param>
        <param name="second">The second sequence to merge.</param>
        <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
        <summary>
            Applies a specified function to the corresponding elements of two sequences,
            producing a sequence of the results.
            </summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains merged elements of two input sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Zip``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TResult) (first As IAsyncEnumerable(Of TFirst), second As IAsyncEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As IAsyncEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Zip : System.Collections.Generic.IAsyncEnumerable&lt;'First&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Second&gt; * Func&lt;'First, 'Second, 'Result&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="System.Linq.AsyncEnumerable.Zip (first, second, resultSelector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;TResult&gt; ^ Zip(System::Collections::Generic::IAsyncEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IAsyncEnumerable&lt;TSecond&gt; ^ second, Func&lt;TFirst, TSecond, TResult&gt; ^ resultSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TSecond">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TFirst&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSecond&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
        <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
        <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
        <param name="first">The first sequence to merge.</param>
        <param name="second">The second sequence to merge.</param>
        <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
        <summary>
            Applies a specified function to the corresponding elements of two sequences,
            producing a sequence of the results.
            </summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that contains merged elements of two input sequences.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resultSelector" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TThird&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IAsyncEnumerable&lt;(TFirst First, TSecond Second, TThird Third)&gt; Zip&lt;TFirst,TSecond,TThird&gt; (this System.Collections.Generic.IAsyncEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IAsyncEnumerable&lt;TSecond&gt; second, System.Collections.Generic.IAsyncEnumerable&lt;TThird&gt; third);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype System.ValueTuple`3&lt;!!TFirst, !!TSecond, !!TThird&gt;&gt; Zip&lt;TFirst, TSecond, TThird&gt;(class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TSecond&gt; second, class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TThird&gt; third) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.AsyncEnumerable.Zip``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Collections.Generic.IAsyncEnumerable{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TThird) (first As IAsyncEnumerable(Of TFirst), second As IAsyncEnumerable(Of TSecond), third As IAsyncEnumerable(Of TThird)) As IAsyncEnumerable(Of ValueTuple(Of TFirst, TSecond, TThird))" />
      <MemberSignature Language="F#" Value="static member Zip : System.Collections.Generic.IAsyncEnumerable&lt;'First&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'Second&gt; * System.Collections.Generic.IAsyncEnumerable&lt;'hird&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;ValueTuple&lt;'First, 'Second, 'hird&gt;&gt;" Usage="System.Linq.AsyncEnumerable.Zip (first, second, third)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TThird&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IAsyncEnumerable&lt;ValueTuple&lt;TFirst, TSecond, TThird&gt;&gt; ^ Zip(System::Collections::Generic::IAsyncEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IAsyncEnumerable&lt;TSecond&gt; ^ second, System::Collections::Generic::IAsyncEnumerable&lt;TThird&gt; ^ third);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.AsyncEnumerable</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.ValueTuple&lt;TFirst,TSecond,TThird&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 1, 1 })&gt;]</AttributeName>
          </Attribute>
          <Attribute FrameworkAlternate="net-10.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "First", "Second", "Third" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "First", "Second", "Third" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TSecond">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TThird">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0;net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IAsyncEnumerable&lt;TFirst&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IAsyncEnumerable&lt;TSecond&gt;" />
        <Parameter Name="third" Type="System.Collections.Generic.IAsyncEnumerable&lt;TThird&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
        <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
        <typeparam name="TThird">The type of the elements of the third input sequence.</typeparam>
        <param name="first">The first sequence to merge.</param>
        <param name="second">The second sequence to merge.</param>
        <param name="third">The third sequence to merge.</param>
        <summary>Produces a sequence of tuples with elements from the three specified sequences.</summary>
        <returns>A sequence of tuples with elements taken from the first, second, and third sequences, in that order.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="third" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
