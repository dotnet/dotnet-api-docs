<Type Name="NIndex" FullName="System.Buffers.NIndex">
  <TypeSignature Language="C#" Value="public readonly struct NIndex : IEquatable&lt;System.Buffers.NIndex&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit NIndex extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Buffers.NIndex&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.NIndex" />
  <TypeSignature Language="VB.NET" Value="Public Structure NIndex&#xA;Implements IEquatable(Of NIndex)" />
  <TypeSignature Language="F#" Value="type NIndex = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class NIndex : IEquatable&lt;System::Buffers::NIndex&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Numerics.Tensors</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Buffers.NIndex&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("SYSLIB5001", UrlFormat="https://aka.ms/dotnet-warnings/{0}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("SYSLIB5001", UrlFormat="https://aka.ms/dotnet-warnings/{0}")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
    <remarks>
      <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
    </remarks>
    <example>
      <code>
int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
int lastElement = someArray[^1]; // lastElement = 5
      </code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NIndex (Index index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Index index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.#ctor(System.Index)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (index As Index)" />
      <MemberSignature Language="F#" Value="new System.Buffers.NIndex : Index -&gt; System.Buffers.NIndex" Usage="new System.Buffers.NIndex index" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NIndex(Index index);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="index" Type="System.Index" />
      </Parameters>
      <Docs>
        <param name="index">The <see cref="T:System.Index" /> to create the <see cref="T:System.Buffers.NIndex" /> from.</param>
        <summary>Construct a <see cref="T:System.Buffers.NIndex" /> from a <see cref="T:System.Index" /></summary>
        <remarks>
            If the NIndex constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NIndex (IntPtr value, bool fromEnd = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int value, bool fromEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As IntPtr, Optional fromEnd As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Buffers.NIndex : nativeint * bool -&gt; System.Buffers.NIndex" Usage="new System.Buffers.NIndex (value, fromEnd)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" />
        <Parameter Name="fromEnd" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The index value. it has to be zero or positive number.</param>
        <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
        <summary>Construct an <see cref="T:System.Buffers.NIndex" /> using a value and indicating if the <see cref="T:System.Buffers.NIndex" /> is from the start or from the end.</summary>
        <remarks>
            If the NIndex constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public static System.Buffers.NIndex End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Buffers.NIndex End" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.NIndex.End" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property End As NIndex" />
      <MemberSignature Language="F#" Value="static member End : System.Buffers.NIndex" Usage="System.Buffers.NIndex.End" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Buffers::NIndex End { System::Buffers::NIndex get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.NIndex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Create an <see cref="T:System.Buffers.NIndex" /> pointing at beyond last element.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Buffers.NIndex other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Buffers.NIndex other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.Equals(System.Buffers.NIndex)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As NIndex) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Buffers.NIndex -&gt; bool" Usage="nIndex.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Buffers::NIndex other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Buffers.NIndex" />
      </Parameters>
      <Docs>
        <param name="other">An object to compare with this object</param>
        <summary>Indicates whether the current NIndex object is equal to another NIndex object.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="nIndex.Equals value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value">An object to compare with this object</param>
        <summary>Indicates whether the current NIndex object is equal to another object of the same type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromEnd">
      <MemberSignature Language="C#" Value="public static System.Buffers.NIndex FromEnd (IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.NIndex FromEnd(native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.FromEnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromEnd (value As IntPtr) As NIndex" />
      <MemberSignature Language="F#" Value="static member FromEnd : nativeint -&gt; System.Buffers.NIndex" Usage="System.Buffers.NIndex.FromEnd value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::NIndex FromEnd(IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.NIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="value">The index value from the end.</param>
        <summary>Create an NIndex from the end at the position indicated by the value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromStart">
      <MemberSignature Language="C#" Value="public static System.Buffers.NIndex FromStart (IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.NIndex FromStart(native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.FromStart(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromStart (value As IntPtr) As NIndex" />
      <MemberSignature Language="F#" Value="static member FromStart : nativeint -&gt; System.Buffers.NIndex" Usage="System.Buffers.NIndex.FromStart value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::NIndex FromStart(IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.NIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="value">The index value from the start.</param>
        <summary>Create an <see cref="T:System.Buffers.NIndex" /> from the start at the position indicated by the value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="nIndex.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOffset">
      <MemberSignature Language="C#" Value="public IntPtr GetOffset (IntPtr length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int GetOffset(native int length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.GetOffset(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOffset (length As IntPtr) As IntPtr" />
      <MemberSignature Language="F#" Value="member this.GetOffset : nativeint -&gt; nativeint" Usage="nIndex.GetOffset length" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr GetOffset(IntPtr length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="length">The length of the collection that the NIndex will be used with. length has to be a positive value</param>
        <summary>Calculate the offset from the start using the giving collection length.</summary>
        <returns>To be added.</returns>
        <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected NIndex will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to NIndex a collection will get out of range exception which will be same affect as the validation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFromEnd">
      <MemberSignature Language="C#" Value="public bool IsFromEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFromEnd" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.NIndex.IsFromEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFromEnd As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsFromEnd : bool" Usage="System.Buffers.NIndex.IsFromEnd" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFromEnd { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="T:System.Buffers.NIndex" /> is from the start or the end.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_CheckedExplicit">
      <MemberSignature Language="C#" Value="public static Index op_CheckedExplicit (System.Buffers.NIndex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Index op_CheckedExplicit(valuetype System.Buffers.NIndex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.op_CheckedExplicit(System.Buffers.NIndex)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_CheckedExplicit (value As NIndex) As Index" />
      <MemberSignature Language="F#" Value="static member op_CheckedExplicit : System.Buffers.NIndex -&gt; Index" Usage="System.Buffers.NIndex.op_CheckedExplicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Index op_CheckedExplicit(System::Buffers::NIndex value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Index</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Buffers.NIndex" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Index (System.Buffers.NIndex value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Index op_Explicit(valuetype System.Buffers.NIndex value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.op_Explicit(System.Buffers.NIndex)~System.Index" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As NIndex) As Index" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Buffers.NIndex -&gt; Index" Usage="System.Buffers.NIndex.op_Explicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Index(System::Buffers::NIndex value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Index</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Buffers.NIndex" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Converts a <see cref="T:System.Buffers.NIndex" /> to an <see cref="T:System.Index" />."/&gt;</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Buffers.NIndex (Index value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Buffers.NIndex op_Implicit(valuetype System.Index value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.op_Implicit(System.Index)~System.Buffers.NIndex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As Index) As NIndex" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Index -&gt; System.Buffers.NIndex" Usage="System.Buffers.NIndex.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Buffers::NIndex(Index value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.NIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Index" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Converts native integer number to an NIndex.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Buffers.NIndex (IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Buffers.NIndex op_Implicit(native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.op_Implicit(System.IntPtr)~System.Buffers.NIndex" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As IntPtr) As NIndex" />
      <MemberSignature Language="F#" Value="static member op_Implicit : nativeint -&gt; System.Buffers.NIndex" Usage="System.Buffers.NIndex.op_Implicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Buffers::NIndex(IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.NIndex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Converts integer number to an NIndex.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Buffers.NIndex Start { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Buffers.NIndex Start" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.NIndex.Start" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Start As NIndex" />
      <MemberSignature Language="F#" Value="static member Start : System.Buffers.NIndex" Usage="System.Buffers.NIndex.Start" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Buffers::NIndex Start { System::Buffers::NIndex get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.NIndex</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Create an <see cref="T:System.Buffers.NIndex" /> pointing at first element.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIndex">
      <MemberSignature Language="C#" Value="public Index ToIndex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Index ToIndex() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.ToIndex" />
      <MemberSignature Language="VB.NET" Value="Public Function ToIndex () As Index" />
      <MemberSignature Language="F#" Value="member this.ToIndex : unit -&gt; Index" Usage="nIndex.ToIndex " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Index ToIndex();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Index</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Converts the <see cref="T:System.Buffers.NIndex" /> to an <see cref="T:System.Index" />.
            </summary>
        <returns>The converted Index.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIndexUnchecked">
      <MemberSignature Language="C#" Value="public Index ToIndexUnchecked ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Index ToIndexUnchecked() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.ToIndexUnchecked" />
      <MemberSignature Language="VB.NET" Value="Public Function ToIndexUnchecked () As Index" />
      <MemberSignature Language="F#" Value="member this.ToIndexUnchecked : unit -&gt; Index" Usage="nIndex.ToIndexUnchecked " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Index ToIndexUnchecked();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Index</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Converts the <see cref="T:System.Buffers.NIndex" /> to an <see cref="T:System.Index" /> without doing bounds checks.
            </summary>
        <returns>The converted Index.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.NIndex.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="nIndex.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current NIndex object to its equivalent string representation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public IntPtr Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Value" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.NIndex.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As IntPtr" />
      <MemberSignature Language="F#" Value="member this.Value : nativeint" Usage="System.Buffers.NIndex.Value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Value { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <see cref="T:System.Buffers.NIndex" /> value.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
