<Type Name="TensorSpan&lt;T&gt;" FullName="System.Numerics.Tensors.TensorSpan&lt;T&gt;">
  <TypeSignature Language="C#" Value="public readonly ref struct TensorSpan&lt;T&gt; : System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;, System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit TensorSpan`1&lt;T&gt; extends System.ValueType implements class System.Numerics.Tensors.IReadOnlyTensor, class System.Numerics.Tensors.IReadOnlyTensor`2&lt;valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;, !T&gt;, class System.Numerics.Tensors.ITensor, class System.Numerics.Tensors.ITensor`2&lt;valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;, !T&gt;" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Tensors.TensorSpan`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure TensorSpan(Of T)&#xA;Implements IReadOnlyTensor(Of TensorSpan(Of T), T), ITensor(Of TensorSpan(Of T), T)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="F#" Value="type TensorSpan&lt;'T&gt; = struct&#xA;    interface ITensor&lt;TensorSpan&lt;'T&gt;, 'T&gt;&#xA;    interface ITensor&#xA;    interface IReadOnlyTensor&#xA;    interface IReadOnlyTensor&lt;TensorSpan&lt;'T&gt;, 'T&gt;" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class TensorSpan : System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;, System::Numerics::Tensors::ITensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="C#" Value="public readonly ref struct TensorSpan&lt;T&gt;" FrameworkAlternate="net-8.0-pp" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit TensorSpan`1&lt;T&gt; extends System.ValueType" FrameworkAlternate="net-8.0-pp" />
  <TypeSignature Language="VB.NET" Value="Public Structure TensorSpan(Of T)" FrameworkAlternate="net-8.0-pp" />
  <TypeSignature Language="F#" Value="type TensorSpan&lt;'T&gt; = struct" FrameworkAlternate="net-8.0-pp" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class TensorSpan" FrameworkAlternate="net-8.0-pp" />
  <AssemblyInfo>
    <AssemblyName>System.Numerics.Tensors</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.1</AssemblyVersion>
    <AssemblyVersion>9.0.0.2</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="net-10.0-pp;net-9.0-pp">
      <InterfaceName>System.Numerics.Tensors.IReadOnlyTensor</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-10.0-pp;net-9.0-pp">
      <InterfaceName>System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-10.0-pp;net-9.0-pp">
      <InterfaceName>System.Numerics.Tensors.IReadOnlyTensor&lt;TSelf,T&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-10.0-pp;net-9.0-pp">
      <InterfaceName>System.Numerics.Tensors.ITensor</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-10.0-pp;net-9.0-pp">
      <InterfaceName>System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{ToString(),raw}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{ToString(),raw}")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerTypeProxy(typeof(System.Numerics.Tensors.TensorSpanDebugView&lt;&gt;))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerTypeProxy(typeof(System.Numerics.Tensors.TensorSpanDebugView&lt;&gt;))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsByRefLike]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsByRefLike&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">The type of the elements within the tensor span.</typeparam>
    <summary>
            Represents a contiguous region of arbitrary memory. Unlike arrays, it can point to either managed
            or native memory, or to memory allocated on the stack. It is type-safe and memory-safe.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (Array? array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Array array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(System.Array)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As Array)" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : Array -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(Array ^ array);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="array">The target array.</param>
        <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> over the provided <see cref="T:System.Array" />. The new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> will
            have a rank of 1 and a length equal to the length of the provided <see cref="T:System.Array" />.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.Array)" />
        <exception cref="T:System.ArrayTypeMismatchException">
          <paramref name="array" /> is covariant and its type is not exactly T[].</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Span`1&lt;!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (span As Span(Of T))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : Span&lt;'T&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; span" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(Span&lt;T&gt; span);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="span">The target span.</param>
        <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> over the provided <see cref="T:System.Span`1" />. The new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> will
            have a rank of 1 and a length equal to the length of the provided <see cref="T:System.Span`1" />.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.ReadOnlySpan{`0})" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (T[]? array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : 'T[] -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(cli::array &lt;T&gt; ^ array);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">The target array.</param>
        <summary>
            Creates a new span over the entirety of the target array.
            </summary>
        <remarks>Returns default when <paramref name="array" /> is null.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[])" />
        <exception cref="T:System.ArrayTypeMismatchException">
          <paramref name="array" /> is covariant and its type is not exactly T[].</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (Span&lt;T&gt; span, scoped ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Span`1&lt;!T&gt; span, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(System.Span{`0},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (span As Span(Of T), lengths As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : Span&lt;'T&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; (span, lengths)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(Span&lt;T&gt; span, ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="span">To be added.</param>
        <param name="lengths">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (T* data, IntPtr dataLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T* data, native int dataLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0*,System.IntPtr)" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : nativeptr&lt;'T&gt; * nativeint -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; (data, dataLength)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(T* data, IntPtr dataLength);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="T*">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="dataLength" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="data">An unmanaged data that points to memory.</param>
        <param name="dataLength">The number of elements the unmanaged memory can hold.</param>
        <summary>
            Creates a new span over the target unmanaged buffer.
            </summary>
        <remarks>
            This constructor is quite dangerous, because the length is not checked.
            But if this creation is correct, then all subsequent uses are correct.
            </remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0*,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (T[]? array, scoped ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0[],System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), lengths As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : 'T[] * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; (array, lengths)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(cli::array &lt;T&gt; ^ array, ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="lengths">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[],System.ReadOnlySpan{System.IntPtr})" />
        <exception cref="T:System.ArrayTypeMismatchException">
          <paramref name="array" /> is covariant and its type is not exactly T[].</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (Span&lt;T&gt; span, scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Span`1&lt;!T&gt; span, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(System.Span{`0},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (span As Span(Of T), lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : Span&lt;'T&gt; * ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; (span, lengths, strides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(Span&lt;T&gt; span, ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="span">The target span.</param>
        <param name="lengths">The lengths of each dimension.</param>
        <param name="strides">The strides for each dimension. The strides will be automatically calculated if not provided.</param>
        <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> over the provided <see cref="T:System.Span`1" /> using the specified lengths and strides.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (T* data, IntPtr dataLength, scoped ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T* data, native int dataLength, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0*,System.IntPtr,System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : nativeptr&lt;'T&gt; * nativeint * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; (data, dataLength, lengths)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(T* data, IntPtr dataLength, ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="T*">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="dataLength" Type="System.IntPtr" />
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="dataLength">To be added.</param>
        <param name="lengths">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0*,System.IntPtr,System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (T[]? array, scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0[],System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : 'T[] * ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; (array, lengths, strides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(cli::array &lt;T&gt; ^ array, ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="lengths">To be added.</param>
        <param name="strides">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[],System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
        <exception cref="T:System.ArrayTypeMismatchException">
          <paramref name="array" /> is covariant and its type is not exactly T[].</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (Array? array, scoped ReadOnlySpan&lt;int&gt; start, scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Array array, valuetype System.ReadOnlySpan`1&lt;int32&gt; start, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(System.Array,System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As Array, start As ReadOnlySpan(Of Integer), lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : Array * ReadOnlySpan&lt;int&gt; * ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; (array, start, lengths, strides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(Array ^ array, ReadOnlySpan&lt;int&gt; start, ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="System.Array">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="start" Type="System.ReadOnlySpan&lt;System.Int32&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">The target array.</param>
        <param name="start">The starting offset for each dimension.</param>
        <param name="lengths">The lengths of each dimension.</param>
        <param name="strides">The strides for each dimension. The strides will be automatically calculated if not provided.</param>
        <summary>
            Creates a new <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> over the provided <see cref="T:System.Array" /> using the specified start offsets, lengths, and strides.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.Array,System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
        <exception cref="T:System.ArrayTypeMismatchException">
          <paramref name="array" /> is covariant and its type is not exactly T[].</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (T* data, IntPtr dataLength, scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T* data, native int dataLength, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0*,System.IntPtr,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : nativeptr&lt;'T&gt; * nativeint * ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; (data, dataLength, lengths, strides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(T* data, IntPtr dataLength, ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="T*">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="dataLength" Type="System.IntPtr" />
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">An unmanaged data that points to memory.</param>
        <param name="dataLength">The number of elements the unmanaged memory can hold.</param>
        <param name="lengths">The lengths of the dimensions. If default is provided, it's assumed to have one dimension with a length equal to the length of the data.</param>
        <param name="strides">The lengths of the strides. If nothing is provided, it figures out the default stride configuration.</param>
        <summary>
            Creates a new span over the target unmanaged buffer.
            </summary>
        <remarks>
            This constructor is quite dangerous, because the length is not checked.
            But if this creation is correct, then all subsequent uses are correct.
            </remarks>
        <exception cref="T:System.ArgumentException">
          <typeparamref name="T" /> is a reference type or contains pointers and hence cannot be stored in unmanaged memory.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
            The specified length is negative.
            </exception>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0*,System.IntPtr,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TensorSpan (T[]? array, int start, scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.#ctor(`0[],System.Int32,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; : 'T[] * int * ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.TensorSpan&lt;'T&gt; (array, start, lengths, strides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TensorSpan(cli::array &lt;T&gt; ^ array, int start, ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">The target array.</param>
        <param name="start">The index at which to begin the span.</param>
        <param name="lengths">The lengths of the dimensions. If default is provided, it's assumed to have one dimension with a length equal to the length of the data.</param>
        <param name="strides">The strides of each dimension. If default or span of length 0 is provided, then strides will be automatically calculated.</param>
        <summary>
            Creates a new span over the portion of the target array beginning
            at 'start' index and ending at 'end' index (exclusive).
            </summary>
        <remarks>Returns default when <paramref name="array" /> is null.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
            The specified <paramref name="start" /> or end index is not in the range (&lt;0 or &gt;FlattenedLength).
            </exception>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[],System.Int32,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
        <exception cref="T:System.ArrayTypeMismatchException">
          <paramref name="array" /> is covariant and its type is not exactly T[].</exception>
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan() cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.AsReadOnlyTensorSpan" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnlyTensorSpan () As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsReadOnlyTensorSpan : unit -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.AsReadOnlyTensorSpan : unit -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="tensorSpan.AsReadOnlyTensorSpan " FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan();" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan() cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.AsReadOnlyTensorSpan : unit -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="tensorSpan.AsReadOnlyTensorSpan " FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan();" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnlyTensorSpan (startIndexes As ReadOnlySpan(Of NIndex)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="tensorSpan.AsReadOnlyTensorSpan startIndexes" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="tensorSpan.AsReadOnlyTensorSpan startIndexes" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan (scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnlyTensorSpan (ranges As ReadOnlySpan(Of NRange)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="tensorSpan.AsReadOnlyTensorSpan ranges" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="tensorSpan.AsReadOnlyTensorSpan ranges" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnlyTensorSpan (startIndexes As ReadOnlySpan(Of IntPtr)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsReadOnlyTensorSpan : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.AsReadOnlyTensorSpan : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="tensorSpan.AsReadOnlyTensorSpan startIndexes" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.AsReadOnlyTensorSpan : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="tensorSpan.AsReadOnlyTensorSpan startIndexes" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="tensorSpan.Clear " FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="tensorSpan.Clear " FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.ITensor.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears the contents of this span.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ITensor.Clear" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;&amp; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.CopyTo(System.Numerics.Tensors.TensorSpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (ByRef destination As TensorSpan(Of T))" />
      <MemberSignature Language="F#" Value="member this.CopyTo : TensorSpan -&gt; unit" Usage="tensorSpan.CopyTo destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::Numerics::Tensors::TensorSpan&lt;T&gt; % destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.CopyTo(System.Numerics.Tensors.TensorSpan{`1}@|System.Runtime.InteropServices.InAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Numerics.Tensors.TensorSpan&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As TensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="static member Empty : System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="Empty" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::Tensors::TensorSpan&lt;T&gt; Empty { System::Numerics::Tensors::TensorSpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="static member Empty : System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.Empty" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor`2.Empty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns an empty <see cref="T:System.Numerics.Tensors.TensorSpan`1" /></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor`2.Empty" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tensorSpan.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("Equals() on TensorSpan will always throw an exception. Use the equality operator instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Equals() on TensorSpan will always throw an exception. Use the equality operator instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>
            This method is not supported as spans cannot be boxed. To compare two spans, use operator ==.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
            In all cases.
            </exception>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public void Fill (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Fill(!T value) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.Fill(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Fill (value As T)" />
      <MemberSignature Language="F#" Value="abstract member Fill : 'T -&gt; unit&#xA;override this.Fill : 'T -&gt; unit" Usage="tensorSpan.Fill value" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Fill(T value);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Fill(!T value) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.Fill : 'T -&gt; unit" Usage="tensorSpan.Fill value" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Fill(T value);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.ITensor`2.Fill(`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Fills the contents of this span with the given value.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ITensor`2.Fill(`1)" />
      </Docs>
    </Member>
    <Member MemberName="FlattenedLength">
      <MemberSignature Language="C#" Value="public IntPtr FlattenedLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int FlattenedLength" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.FlattenedLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FlattenedLength As IntPtr" />
      <MemberSignature Language="F#" Value="member this.FlattenedLength : nativeint" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.FlattenedLength" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr FlattenedLength { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.FlattenedLength</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The number of items in the span.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.FlattenedLength" />
      </Docs>
    </Member>
    <Member MemberName="FlattenTo">
      <MemberSignature Language="C#" Value="public void FlattenTo (scoped Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FlattenTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.FlattenTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub FlattenTo (destination As Span(Of T))" />
      <MemberSignature Language="F#" Value="abstract member FlattenTo : Span&lt;'T&gt; -&gt; unit&#xA;override this.FlattenTo : Span&lt;'T&gt; -&gt; unit" Usage="tensorSpan.FlattenTo destination" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FlattenTo(Span&lt;T&gt; destination);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FlattenTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.FlattenTo : Span&lt;'T&gt; -&gt; unit" Usage="tensorSpan.FlattenTo destination" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FlattenTo(Span&lt;T&gt; destination);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.FlattenTo(System.Span{`1})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">The span to copy items into.</param>
        <summary>
            Flattens the contents of this span into the provided <see cref="T:System.Span`1" />.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.FlattenTo(System.Span{`1})" />
      </Docs>
    </Member>
    <Member MemberName="GetDimensionSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorDimensionSpan&lt;T&gt; GetDimensionSpan (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorDimensionSpan`1&lt;!T&gt; GetDimensionSpan(int32 dimension) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.GetDimensionSpan(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDimensionSpan (dimension As Integer) As TensorDimensionSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetDimensionSpan : int -&gt; System.Numerics.Tensors.TensorDimensionSpan&lt;'T&gt;&#xA;override this.GetDimensionSpan : int -&gt; System.Numerics.Tensors.TensorDimensionSpan&lt;'T&gt;" Usage="tensorSpan.GetDimensionSpan dimension" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::TensorDimensionSpan&lt;T&gt; GetDimensionSpan(int dimension);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.TensorDimensionSpan`1&lt;!T&gt; GetDimensionSpan(int32 dimension) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.GetDimensionSpan : int -&gt; System.Numerics.Tensors.TensorDimensionSpan&lt;'T&gt;" Usage="tensorSpan.GetDimensionSpan dimension" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::TensorDimensionSpan&lt;T&gt; GetDimensionSpan(int dimension);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.ITensor`2.GetDimensionSpan(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorDimensionSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ITensor`2.GetDimensionSpan(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorSpan&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.TensorSpan`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As TensorSpan(Of T).Enumerator" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;.Enumerator" Usage="tensorSpan.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::TensorSpan&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an enumerator for the tensor span.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tensorSpan.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("GetHashCode() on TensorSpan will always throw an exception.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("GetHashCode() on TensorSpan will always throw an exception.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            This method is not supported as spans cannot be boxed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
            In all cases.
            </exception>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public ref T GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T GetPinnableReference() cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As T" />
      <MemberSignature Language="F#" Value="abstract member GetPinnableReference : unit -&gt; 'T&#xA;override this.GetPinnableReference : unit -&gt; 'T" Usage="tensorSpan.GetPinnableReference " FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual T % GetPinnableReference();" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T GetPinnableReference() cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; 'T" Usage="tensorSpan.GetPinnableReference " FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T % GetPinnableReference();" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.ITensor`2.GetPinnableReference</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a reference to the 0th element of the TensorSpan. If the TensorSpan is empty, returns null reference.
            It can be used for pinning and is required to support the use of span within a fixed statement.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ITensor`2.GetPinnableReference" />
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; GetSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Span`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpan (startIndexes As ReadOnlySpan(Of NIndex), length As Integer) As Span(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int -&gt; Span&lt;'T&gt;&#xA;override this.GetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int -&gt; Span&lt;'T&gt;" Usage="tensorSpan.GetSpan (startIndexes, length)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Span&lt;T&gt; GetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Span`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.GetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int -&gt; Span&lt;'T&gt;" Usage="tensorSpan.GetSpan (startIndexes, length)" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt; GetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.ITensor`2.GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ITensor`2.GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; GetSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Span`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpan (startIndexes As ReadOnlySpan(Of IntPtr), length As Integer) As Span(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : ReadOnlySpan&lt;nativeint&gt; * int -&gt; Span&lt;'T&gt;&#xA;override this.GetSpan : ReadOnlySpan&lt;nativeint&gt; * int -&gt; Span&lt;'T&gt;" Usage="tensorSpan.GetSpan (startIndexes, length)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Span&lt;T&gt; GetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Span`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.GetSpan : ReadOnlySpan&lt;nativeint&gt; * int -&gt; Span&lt;'T&gt;" Usage="tensorSpan.GetSpan (startIndexes, length)" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt; GetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.ITensor`2.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ITensor`2.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HasAnyDenseDimensions">
      <MemberSignature Language="C#" Value="public bool HasAnyDenseDimensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnyDenseDimensions" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.HasAnyDenseDimensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnyDenseDimensions As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasAnyDenseDimensions : bool" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.HasAnyDenseDimensions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnyDenseDimensions { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.HasAnyDenseDimensions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.HasAnyDenseDimensions" />
      </Docs>
    </Member>
    <Member MemberName="IsDense">
      <MemberSignature Language="C#" Value="public bool IsDense { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDense" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.IsDense" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDense As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsDense : bool" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.IsDense" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDense { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.IsDense</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.IsDense" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.IsEmpty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.IsEmpty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether this <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> is empty.
            </summary>
        <value>
          <see langword="true" /> if this span is empty; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.IsEmpty" />
      </Docs>
    </Member>
    <Member MemberName="IsPinned">
      <MemberSignature Language="C#" Value="public bool IsPinned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPinned" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.IsPinned" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPinned As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsPinned : bool" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.IsPinned" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPinned { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.IsPinned</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.IsPinned" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public ref T this[scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(indexes As ReadOnlySpan(Of NIndex)) As T" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;System.Buffers.NIndex&gt;) : 'T" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % default[ReadOnlySpan&lt;System::Buffers::NIndex&gt;] { T % get(ReadOnlySpan&lt;System::Buffers::NIndex&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes" />
        <summary>
            Returns a reference to specified element of the TensorSpan.
            </summary>
        <value />
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
            Any index is less than 0 or greater than or equal to FlattenedLength.
            </exception>
        <inheritdoc cref="P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorSpan&lt;T&gt; this[scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.Item(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(ranges As ReadOnlySpan(Of NRange)) As TensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;System.Buffers.NRange&gt;) : System.Numerics.Tensors.TensorSpan&lt;'T&gt; with get, set" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Numerics::Tensors::TensorSpan&lt;T&gt; default[ReadOnlySpan&lt;System::Buffers::NRange&gt;] { System::Numerics::Tensors::TensorSpan&lt;T&gt; get(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges); void set(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges, System::Numerics::Tensors::TensorSpan&lt;T&gt; value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.Buffers.NRange})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges" />
        <summary>
            Returns a slice of the TensorSpan.
            </summary>
        <value />
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
            Any index is less than 0 or greater than or equal to FlattenedLength.
            </exception>
        <inheritdoc cref="P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.Buffers.NRange})" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public ref T this[scoped ReadOnlySpan&lt;IntPtr&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(valuetype System.ReadOnlySpan`1&lt;native int&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.Item(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(indexes As ReadOnlySpan(Of IntPtr)) As T" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;nativeint&gt;) : 'T" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % default[ReadOnlySpan&lt;IntPtr&gt;] { T % get(ReadOnlySpan&lt;IntPtr&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes" />
        <summary>
            Returns a reference to specified element of the TensorSpan.
            </summary>
        <value />
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
            Any index is less than 0 or greater than or equal to FlattenedLength.
            </exception>
        <inheritdoc cref="P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="Lengths">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;IntPtr&gt; Lengths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;native int&gt; Lengths" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.Lengths" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Lengths As ReadOnlySpan(Of IntPtr)" />
      <MemberSignature Language="F#" Value="member this.Lengths : ReadOnlySpan&lt;nativeint&gt;" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.Lengths" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;IntPtr&gt; Lengths { ReadOnlySpan&lt;IntPtr&gt; get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.Lengths</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnscopedRef]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnscopedRef&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.IntPtr&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the length of each dimension in this <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.Lengths" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (in System.Numerics.Tensors.TensorSpan&lt;T&gt; left, in System.Numerics.Tensors.TensorSpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;&amp; left, [in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.op_Equality(System.Numerics.Tensors.TensorSpan{`0}@,System.Numerics.Tensors.TensorSpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (ByRef left As TensorSpan(Of T), ByRef right As TensorSpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : TensorSpan * TensorSpan -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::Tensors::TensorSpan&lt;T&gt; % left, System::Numerics::Tensors::TensorSpan&lt;T&gt; % right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="right" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.op_Equality(System.Numerics.Tensors.ReadOnlyTensorSpan{`0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{`0}@)" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; tensor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; op_Implicit([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;&amp; tensor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.op_Implicit(System.Numerics.Tensors.TensorSpan{`0}@)~System.Numerics.Tensors.ReadOnlyTensorSpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (ByRef tensor As TensorSpan(Of T)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : TensorSpan -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.op_Implicit tensor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;(System::Numerics::Tensors::TensorSpan&lt;T&gt; % tensor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tensor" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tensor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Tensors.TensorSpan&lt;T&gt; (T[]? array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.op_Implicit(`0[])~System.Numerics.Tensors.TensorSpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As TensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.op_Implicit array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Tensors::TensorSpan&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (in System.Numerics.Tensors.TensorSpan&lt;T&gt; left, in System.Numerics.Tensors.TensorSpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;&amp; left, [in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.op_Inequality(System.Numerics.Tensors.TensorSpan{`0}@,System.Numerics.Tensors.TensorSpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (ByRef left As TensorSpan(Of T), ByRef right As TensorSpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : TensorSpan * TensorSpan -&gt; bool" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::Tensors::TensorSpan&lt;T&gt; % left, System::Numerics::Tensors::TensorSpan&lt;T&gt; % right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="right" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.op_Inequality(System.Numerics.Tensors.ReadOnlyTensorSpan{`0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{`0}@)" />
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public int Rank { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rank" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.Rank" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rank As Integer" />
      <MemberSignature Language="F#" Value="member this.Rank : int" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.Rank" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rank { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.Rank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the rank, aka the number of dimensions, of this <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.Rank" />
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorSpan&lt;T&gt; Slice (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.Slice(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (startIndexes As ReadOnlySpan(Of NIndex)) As TensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Slice : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;&#xA;override this.Slice : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.Slice startIndexes" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::TensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.Slice : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.Slice startIndexes" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::TensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>
            Returns a reference to specified element of the TensorSpan.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
            Any index is less than 0 or greater than or equal to <c>FlattenedLength</c>.
            </exception>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NIndex})" />
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorSpan&lt;T&gt; Slice (scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.Slice(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (ranges As ReadOnlySpan(Of NRange)) As TensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Slice : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;&#xA;override this.Slice : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.Slice ranges" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::TensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.Slice : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.Slice ranges" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::TensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NRange})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges">The ranges for the slice.</param>
        <summary>
            Forms a slice out of the given span.
            </summary>
        <returns>A <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> based on the provided <paramref name="ranges" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NRange})" />
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorSpan&lt;T&gt; Slice (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.Slice(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (startIndexes As ReadOnlySpan(Of IntPtr)) As TensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Slice : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;&#xA;override this.Slice : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.Slice startIndexes" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::TensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;IntPtr&gt; startIndexes);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.Slice : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.Slice startIndexes" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::TensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;IntPtr&gt; startIndexes);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="Strides">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;IntPtr&gt; Strides { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;native int&gt; Strides" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.Strides" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Strides As ReadOnlySpan(Of IntPtr)" />
      <MemberSignature Language="F#" Value="member this.Strides : ReadOnlySpan&lt;nativeint&gt;" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.Strides" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;IntPtr&gt; Strides { ReadOnlySpan&lt;IntPtr&gt; get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.Strides</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnscopedRef]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnscopedRef&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.IntPtr&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the strides of this <see cref="T:System.Numerics.Tensors.TensorSpan`1" /></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.Strides" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor.Item">
      <MemberSignature Language="C#" Value="object? System.Numerics.Tensors.IReadOnlyTensor.Item[scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Numerics.Tensors.IReadOnlyTensor.Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor#Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(indexes As ReadOnlySpan(Of NIndex)) As Object Implements IReadOnlyTensor.Item" />
      <MemberSignature Language="F#" Value="member this.System.Numerics.Tensors.IReadOnlyTensor.Item(ReadOnlySpan&lt;System.Buffers.NIndex&gt;) : obj" Usage="System.Numerics.Tensors.IReadOnlyTensor.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Numerics::Tensors::IReadOnlyTensor::Item[ReadOnlySpan&lt;System::Buffers::NIndex&gt;] { System::Object ^ get(ReadOnlySpan&lt;System::Buffers::NIndex&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.Tensors.IReadOnlyTensor.Item(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor.Item">
      <MemberSignature Language="C#" Value="object? System.Numerics.Tensors.IReadOnlyTensor.Item[scoped ReadOnlySpan&lt;IntPtr&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Numerics.Tensors.IReadOnlyTensor.Item(valuetype System.ReadOnlySpan`1&lt;native int&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor#Item(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(indexes As ReadOnlySpan(Of IntPtr)) As Object Implements IReadOnlyTensor.Item" />
      <MemberSignature Language="F#" Value="member this.System.Numerics.Tensors.IReadOnlyTensor.Item(ReadOnlySpan&lt;nativeint&gt;) : obj" Usage="System.Numerics.Tensors.IReadOnlyTensor.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Numerics::Tensors::IReadOnlyTensor::Item[ReadOnlySpan&lt;IntPtr&gt;] { System::Object ^ get(ReadOnlySpan&lt;IntPtr&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.Tensors.IReadOnlyTensor.Item(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void IReadOnlyTensor&lt;TensorSpan&lt;T&gt;,T&gt;.CopyTo (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CopyTo([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#CopyTo(System.Numerics.Tensors.TensorSpan{`0}@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (destination As TensorSpan(Of T)) Implements IReadOnlyTensor(Of TensorSpan(Of T), T).CopyTo" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CopyTo : TensorSpan -&gt; unit&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CopyTo : TensorSpan -&gt; unit" Usage="tensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CopyTo destination" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CopyTo(System::Numerics::Tensors::TensorSpan&lt;T&gt; ^ destination) = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.CopyTo(System.Numerics.Tensors.TensorSpan{`1}@|System.Runtime.InteropServices.InAttribute)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetDimensionSpan">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;T&gt; IReadOnlyTensor&lt;TensorSpan&lt;T&gt;,T&gt;.GetDimensionSpan (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorDimensionSpan`1&lt;!T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetDimensionSpan(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#GetDimensionSpan(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function GetDimensionSpan (dimension As Integer) As ReadOnlyTensorDimensionSpan(Of T) Implements IReadOnlyTensor(Of TensorSpan(Of T), T).GetDimensionSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetDimensionSpan : int -&gt; System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetDimensionSpan : int -&gt; System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;'T&gt;" Usage="tensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetDimensionSpan dimension" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::ReadOnlyTensorDimensionSpan&lt;T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetDimensionSpan(int dimension) = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::GetDimensionSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.GetDimensionSpan(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      </Parameters>
      <Docs>
        <param name="dimension">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetPinnableReference">
      <MemberSignature Language="C#" Value="ref readonly T IReadOnlyTensor&lt;TensorSpan&lt;T&gt;,T&gt;.GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !T System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Function GetPinnableReference () As T Implements IReadOnlyTensor(Of TensorSpan(Of T), T).GetPinnableReference" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetPinnableReference : unit -&gt; 'T&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetPinnableReference : unit -&gt; 'T" Usage="tensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetPinnableReference " />
      <MemberSignature Language="C++ CLI" Value=" virtual T&amp; ^ System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetPinnableReference() = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::GetPinnableReference;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.GetPinnableReference</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan">
      <MemberSignature Language="C#" Value="ReadOnlySpan&lt;T&gt; IReadOnlyTensor&lt;TensorSpan&lt;T&gt;,T&gt;.GetSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.ReadOnlySpan`1&lt;!T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function GetSpan (startIndexes As ReadOnlySpan(Of NIndex), length As Integer) As ReadOnlySpan(Of T) Implements IReadOnlyTensor(Of TensorSpan(Of T), T).GetSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="tensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan (startIndexes, length)" />
      <MemberSignature Language="C++ CLI" Value=" virtual ReadOnlySpan&lt;T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length) = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::GetSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" Index="1" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan">
      <MemberSignature Language="C#" Value="ReadOnlySpan&lt;T&gt; IReadOnlyTensor&lt;TensorSpan&lt;T&gt;,T&gt;.GetSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.ReadOnlySpan`1&lt;!T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function GetSpan (startIndexes As ReadOnlySpan(Of IntPtr), length As Integer) As ReadOnlySpan(Of T) Implements IReadOnlyTensor(Of TensorSpan(Of T), T).GetSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan : ReadOnlySpan&lt;nativeint&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan : ReadOnlySpan&lt;nativeint&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="tensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan (startIndexes, length)" />
      <MemberSignature Language="C++ CLI" Value=" virtual ReadOnlySpan&lt;T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.GetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length) = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::GetSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" Index="1" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.Item">
      <MemberSignature Language="C#" Value="ref readonly T System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.Item[scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(indexes As ReadOnlySpan(Of NIndex)) As T Implements IReadOnlyTensor(Of TensorSpan(Of T), T).Item" />
      <MemberSignature Language="F#" Value="member this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.Item(ReadOnlySpan&lt;System.Buffers.NIndex&gt;) : 'T" Usage="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="property T&amp; ^ System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;,T&gt;::Item[ReadOnlySpan&lt;System::Buffers::NIndex&gt;] { T&amp; ^ get(ReadOnlySpan&lt;System::Buffers::NIndex&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.Item">
      <MemberSignature Language="C#" Value="ref readonly T System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.Item[scoped ReadOnlySpan&lt;IntPtr&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.Item(valuetype System.ReadOnlySpan`1&lt;native int&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#Item(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(indexes As ReadOnlySpan(Of IntPtr)) As T Implements IReadOnlyTensor(Of TensorSpan(Of T), T).Item" />
      <MemberSignature Language="F#" Value="member this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.Item(ReadOnlySpan&lt;nativeint&gt;) : 'T" Usage="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="property T&amp; ^ System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;,T&gt;::Item[ReadOnlySpan&lt;IntPtr&gt;] { T&amp; ^ get(ReadOnlySpan&lt;IntPtr&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.ToDenseTensor">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.TensorSpan&lt;T&gt; IReadOnlyTensor&lt;TensorSpan&lt;T&gt;,T&gt;.ToDenseTensor ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.ToDenseTensor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#ToDenseTensor" />
      <MemberSignature Language="VB.NET" Value="Function ToDenseTensor () As TensorSpan(Of T) Implements IReadOnlyTensor(Of TensorSpan(Of T), T).ToDenseTensor" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.ToDenseTensor : unit -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.ToDenseTensor : unit -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.ToDenseTensor " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::TensorSpan&lt;T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.ToDenseTensor() = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::ToDenseTensor;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.ToDenseTensor</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.TryCopyTo">
      <MemberSignature Language="C#" Value="bool IReadOnlyTensor&lt;TensorSpan&lt;T&gt;,T&gt;.TryCopyTo (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.TryCopyTo([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#TryCopyTo(System.Numerics.Tensors.TensorSpan{`0}@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Function TryCopyTo (destination As TensorSpan(Of T)) As Boolean Implements IReadOnlyTensor(Of TensorSpan(Of T), T).TryCopyTo" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.TryCopyTo : TensorSpan -&gt; bool&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.TryCopyTo : TensorSpan -&gt; bool" Usage="tensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.TryCopyTo destination" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.TryCopyTo(System::Numerics::Tensors::TensorSpan&lt;T&gt; ^ destination) = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::TryCopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.TryCopyTo(System.Numerics.Tensors.TensorSpan{`1}@|System.Runtime.InteropServices.InAttribute)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor.Fill">
      <MemberSignature Language="C#" Value="void ITensor.Fill (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Numerics.Tensors.ITensor.Fill(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor#Fill(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Fill (value As Object) Implements ITensor.Fill" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.ITensor.Fill : obj -&gt; unit&#xA;override this.System.Numerics.Tensors.ITensor.Fill : obj -&gt; unit" Usage="tensorSpan.System.Numerics.Tensors.ITensor.Fill value" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Numerics.Tensors.ITensor.Fill(System::Object ^ value) = System::Numerics::Tensors::ITensor::Fill;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.ITensor.Fill(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Numerics.Tensors.ITensor.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Numerics.Tensors.ITensor.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ITensor.IsReadOnly" />
      <MemberSignature Language="F#" Value="member this.System.Numerics.Tensors.ITensor.IsReadOnly : bool" Usage="System.Numerics.Tensors.ITensor.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Numerics::Tensors::ITensor::IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.Tensors.ITensor.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor.Item">
      <MemberSignature Language="C#" Value="object? System.Numerics.Tensors.ITensor.Item[scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; indexes] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Numerics.Tensors.ITensor.Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor#Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value=" Property Item(indexes As ReadOnlySpan(Of NIndex)) As Object Implements ITensor.Item" />
      <MemberSignature Language="F#" Value="member this.System.Numerics.Tensors.ITensor.Item(ReadOnlySpan&lt;System.Buffers.NIndex&gt;) : obj with get, set" Usage="System.Numerics.Tensors.ITensor.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Numerics::Tensors::ITensor::Item[ReadOnlySpan&lt;System::Buffers::NIndex&gt;] { System::Object ^ get(ReadOnlySpan&lt;System::Buffers::NIndex&gt; indexes); void set(ReadOnlySpan&lt;System::Buffers::NIndex&gt; indexes, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.Tensors.ITensor.Item(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor.Item">
      <MemberSignature Language="C#" Value="object? System.Numerics.Tensors.ITensor.Item[scoped ReadOnlySpan&lt;IntPtr&gt; indexes] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Numerics.Tensors.ITensor.Item(valuetype System.ReadOnlySpan`1&lt;native int&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor#Item(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value=" Property Item(indexes As ReadOnlySpan(Of IntPtr)) As Object Implements ITensor.Item" />
      <MemberSignature Language="F#" Value="member this.System.Numerics.Tensors.ITensor.Item(ReadOnlySpan&lt;nativeint&gt;) : obj with get, set" Usage="System.Numerics.Tensors.ITensor.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Numerics::Tensors::ITensor::Item[ReadOnlySpan&lt;IntPtr&gt;] { System::Object ^ get(ReadOnlySpan&lt;IntPtr&gt; indexes); void set(ReadOnlySpan&lt;IntPtr&gt; indexes, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.Tensors.ITensor.Item(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.TensorSpan&lt;T&gt; ITensor&lt;TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#AsTensorSpan" />
      <MemberSignature Language="VB.NET" Value="Function AsTensorSpan () As TensorSpan(Of T) Implements ITensor(Of TensorSpan(Of T), T).AsTensorSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan : unit -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan : unit -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::TensorSpan&lt;T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan() = System::Numerics::Tensors::ITensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::AsTensorSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.ITensor`2.AsTensorSpan</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.TensorSpan&lt;T&gt; ITensor&lt;TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#AsTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Function AsTensorSpan (startIndexes As ReadOnlySpan(Of NIndex)) As TensorSpan(Of T) Implements ITensor(Of TensorSpan(Of T), T).AsTensorSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan startIndexes" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::TensorSpan&lt;T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes) = System::Numerics::Tensors::ITensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::AsTensorSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.ITensor`2.AsTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.TensorSpan&lt;T&gt; ITensor&lt;TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan (scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#AsTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Function AsTensorSpan (ranges As ReadOnlySpan(Of NRange)) As TensorSpan(Of T) Implements ITensor(Of TensorSpan(Of T), T).AsTensorSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan ranges" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::TensorSpan&lt;T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges) = System::Numerics::Tensors::ITensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::AsTensorSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.ITensor`2.AsTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.TensorSpan&lt;T&gt; ITensor&lt;TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#AsTensorSpan(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Function AsTensorSpan (startIndexes As ReadOnlySpan(Of IntPtr)) As TensorSpan(Of T) Implements ITensor(Of TensorSpan(Of T), T).AsTensorSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="tensorSpan.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan startIndexes" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::TensorSpan&lt;T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.AsTensorSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes) = System::Numerics::Tensors::ITensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::AsTensorSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.ITensor`2.AsTensorSpan(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShape">
      <MemberSignature Language="C#" Value="static System.Numerics.Tensors.TensorSpan&lt;T&gt; ITensor&lt;TensorSpan&lt;T&gt;,T&gt;.CreateFromShape (scoped ReadOnlySpan&lt;IntPtr&gt; lengths, bool pinned);" />
      <MemberSignature Language="ILAsm" Value=".method static hidebysig valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShape(valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#CreateFromShape(System.ReadOnlySpan{System.IntPtr},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value=" Shared Function CreateFromShape (lengths As ReadOnlySpan(Of IntPtr), pinned As Boolean) As TensorSpan(Of T) Implements ITensor(Of TensorSpan(Of T), T).CreateFromShape" />
      <MemberSignature Language="F#" Value="static member System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShape : ReadOnlySpan&lt;nativeint&gt; * bool -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShape (lengths, pinned)" />
      <MemberSignature Language="C++ CLI" Value=" static System::Numerics::Tensors::TensorSpan&lt;T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShape(ReadOnlySpan&lt;IntPtr&gt; lengths, bool pinned) = System::Numerics::Tensors::ITensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::CreateFromShape;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.ITensor`2.CreateFromShape(System.ReadOnlySpan{System.IntPtr},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pinned" Type="System.Boolean" Index="1" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      </Parameters>
      <Docs>
        <param name="lengths">To be added.</param>
        <param name="pinned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShape">
      <MemberSignature Language="C#" Value="static System.Numerics.Tensors.TensorSpan&lt;T&gt; ITensor&lt;TensorSpan&lt;T&gt;,T&gt;.CreateFromShape (scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides, bool pinned);" />
      <MemberSignature Language="ILAsm" Value=".method static hidebysig valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShape(valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#CreateFromShape(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value=" Shared Function CreateFromShape (lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr), pinned As Boolean) As TensorSpan(Of T) Implements ITensor(Of TensorSpan(Of T), T).CreateFromShape" />
      <MemberSignature Language="F#" Value="static member System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShape : ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; * bool -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShape (lengths, strides, pinned)" />
      <MemberSignature Language="C++ CLI" Value=" static System::Numerics::Tensors::TensorSpan&lt;T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShape(ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides, bool pinned) = System::Numerics::Tensors::ITensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::CreateFromShape;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.ITensor`2.CreateFromShape(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pinned" Type="System.Boolean" Index="2" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      </Parameters>
      <Docs>
        <param name="lengths">To be added.</param>
        <param name="strides">To be added.</param>
        <param name="pinned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized">
      <MemberSignature Language="C#" Value="static System.Numerics.Tensors.TensorSpan&lt;T&gt; ITensor&lt;TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized (scoped ReadOnlySpan&lt;IntPtr&gt; lengths, bool pinned);" />
      <MemberSignature Language="ILAsm" Value=".method static hidebysig valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized(valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#CreateFromShapeUninitialized(System.ReadOnlySpan{System.IntPtr},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value=" Shared Function CreateFromShapeUninitialized (lengths As ReadOnlySpan(Of IntPtr), pinned As Boolean) As TensorSpan(Of T) Implements ITensor(Of TensorSpan(Of T), T).CreateFromShapeUninitialized" />
      <MemberSignature Language="F#" Value="static member System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized : ReadOnlySpan&lt;nativeint&gt; * bool -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized (lengths, pinned)" />
      <MemberSignature Language="C++ CLI" Value=" static System::Numerics::Tensors::TensorSpan&lt;T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized(ReadOnlySpan&lt;IntPtr&gt; lengths, bool pinned) = System::Numerics::Tensors::ITensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::CreateFromShapeUninitialized;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.ITensor`2.CreateFromShapeUninitialized(System.ReadOnlySpan{System.IntPtr},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pinned" Type="System.Boolean" Index="1" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      </Parameters>
      <Docs>
        <param name="lengths">To be added.</param>
        <param name="pinned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized">
      <MemberSignature Language="C#" Value="static System.Numerics.Tensors.TensorSpan&lt;T&gt; ITensor&lt;TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized (scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides, bool pinned);" />
      <MemberSignature Language="ILAsm" Value=".method static hidebysig valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized(valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.System#Numerics#Tensors#ITensor&lt;System#Numerics#Tensors#TensorSpan&lt;T&gt;,T&gt;#CreateFromShapeUninitialized(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value=" Shared Function CreateFromShapeUninitialized (lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr), pinned As Boolean) As TensorSpan(Of T) Implements ITensor(Of TensorSpan(Of T), T).CreateFromShapeUninitialized" />
      <MemberSignature Language="F#" Value="static member System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized : ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; * bool -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.TensorSpan&lt;'T&gt;.System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized (lengths, strides, pinned)" />
      <MemberSignature Language="C++ CLI" Value=" static System::Numerics::Tensors::TensorSpan&lt;T&gt; System.Numerics.Tensors.ITensor&lt;System.Numerics.Tensors.TensorSpan&lt;T&gt;,T&gt;.CreateFromShapeUninitialized(ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides, bool pinned) = System::Numerics::Tensors::ITensor&lt;System::Numerics::Tensors::TensorSpan&lt;T&gt;, T&gt;::CreateFromShapeUninitialized;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.ITensor`2.CreateFromShapeUninitialized(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="1" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pinned" Type="System.Boolean" Index="2" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      </Parameters>
      <Docs>
        <param name="lengths">To be added.</param>
        <param name="strides">To be added.</param>
        <param name="pinned">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tensorSpan.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            For <see cref="T:System.Span`1" />, returns a new instance of string that represents the characters pointed to by the span.
            Otherwise, returns a <see cref="T:System.String" /> with the name of the type and the number of elements.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (scoped ReadOnlySpan&lt;IntPtr&gt; maximumLengths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(valuetype System.ReadOnlySpan`1&lt;native int&gt; maximumLengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.ToString(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (maximumLengths As ReadOnlySpan(Of IntPtr)) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : ReadOnlySpan&lt;nativeint&gt; -&gt; string" Usage="tensorSpan.ToString maximumLengths" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(ReadOnlySpan&lt;IntPtr&gt; maximumLengths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maximumLengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="maximumLengths">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.ToString(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;&amp; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.TryCopyTo(System.Numerics.Tensors.TensorSpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (ByRef destination As TensorSpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : TensorSpan -&gt; bool" Usage="tensorSpan.TryCopyTo destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(System::Numerics::Tensors::TensorSpan&lt;T&gt; % destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryCopyTo(System.Numerics.Tensors.TensorSpan{`1}@|System.Runtime.InteropServices.InAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="TryFlattenTo">
      <MemberSignature Language="C#" Value="public bool TryFlattenTo (scoped Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryFlattenTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.TryFlattenTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFlattenTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryFlattenTo : Span&lt;'T&gt; -&gt; bool&#xA;override this.TryFlattenTo : Span&lt;'T&gt; -&gt; bool" Usage="tensorSpan.TryFlattenTo destination" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryFlattenTo(Span&lt;T&gt; destination);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFlattenTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.TryFlattenTo : Span&lt;'T&gt; -&gt; bool" Usage="tensorSpan.TryFlattenTo destination" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryFlattenTo(Span&lt;T&gt; destination);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.TryFlattenTo(System.Span{`1})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">The span to copy items into.</param>
        <summary>
            Flattens the contents of this span into the provided <see cref="T:System.Span`1" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryFlattenTo(System.Span{`1})" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSpan">
      <MemberSignature Language="C#" Value="public bool TryGetSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes, int length, out ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length, [out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.ReadOnlySpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSpan (startIndexes As ReadOnlySpan(Of NIndex), length As Integer, ByRef span As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * ReadOnlySpan -&gt; bool&#xA;override this.TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * ReadOnlySpan -&gt; bool" Usage="tensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length, [Runtime::InteropServices::Out] ReadOnlySpan&lt;T&gt; % span);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length, [out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * ReadOnlySpan -&gt; bool" Usage="tensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length, [Runtime::InteropServices::Out] ReadOnlySpan&lt;T&gt; % span);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.ReadOnlySpan{`1}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.ReadOnlySpan{`1}@)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSpan">
      <MemberSignature Language="C#" Value="public bool TryGetSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes, int length, out Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length, [out] valuetype System.Span`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.Span{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSpan (startIndexes As ReadOnlySpan(Of NIndex), length As Integer, ByRef span As Span(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * Span -&gt; bool&#xA;override this.TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * Span -&gt; bool" Usage="tensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length, [Runtime::InteropServices::Out] Span&lt;T&gt; % span);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length, [out] valuetype System.Span`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * Span -&gt; bool" Usage="tensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length, [Runtime::InteropServices::Out] Span&lt;T&gt; % span);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.ITensor`2.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.Span{`1}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ITensor`2.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.Span{`1}@)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSpan">
      <MemberSignature Language="C#" Value="public bool TryGetSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, out ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length, [out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.ReadOnlySpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSpan (startIndexes As ReadOnlySpan(Of IntPtr), length As Integer, ByRef span As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * ReadOnlySpan -&gt; bool&#xA;override this.TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * ReadOnlySpan -&gt; bool" Usage="tensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, [Runtime::InteropServices::Out] ReadOnlySpan&lt;T&gt; % span);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length, [out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * ReadOnlySpan -&gt; bool" Usage="tensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, [Runtime::InteropServices::Out] ReadOnlySpan&lt;T&gt; % span);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.ReadOnlySpan{`1}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.ReadOnlySpan{`1}@)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSpan">
      <MemberSignature Language="C#" Value="public bool TryGetSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, out Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length, [out] valuetype System.Span`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.TensorSpan`1.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.Span{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSpan (startIndexes As ReadOnlySpan(Of IntPtr), length As Integer, ByRef span As Span(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * Span -&gt; bool&#xA;override this.TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * Span -&gt; bool" Usage="tensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, [Runtime::InteropServices::Out] Span&lt;T&gt; % span);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length, [out] valuetype System.Span`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * Span -&gt; bool" Usage="tensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, [Runtime::InteropServices::Out] Span&lt;T&gt; % span);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.ITensor`2.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.Span{`1}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ITensor`2.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.Span{`1}@)" />
      </Docs>
    </Member>
  </Members>
</Type>
