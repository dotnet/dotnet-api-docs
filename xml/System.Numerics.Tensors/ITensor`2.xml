<Type Name="ITensor&lt;TSelf,T&gt;" FullName="System.Numerics.Tensors.ITensor&lt;TSelf,T&gt;">
  <TypeSignature Language="C#" Value="public interface ITensor&lt;TSelf,T&gt; : System.Numerics.Tensors.IReadOnlyTensor&lt;TSelf,T&gt;, System.Numerics.Tensors.ITensor where TSelf : ITensor&lt;TSelf,T&gt;, allows ref struct" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ITensor`2&lt;(class System.Numerics.Tensors.ITensor`2&lt;!TSelf, !T&gt;) TSelf, T&gt; implements class System.Numerics.Tensors.IReadOnlyTensor, class System.Numerics.Tensors.IReadOnlyTensor`2&lt;!TSelf, !T&gt;, class System.Numerics.Tensors.ITensor" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Tensors.ITensor`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITensor(Of TSelf, T)&#xA;Implements IReadOnlyTensor(Of TSelf, T), ITensor" />
  <TypeSignature Language="F#" Value="type ITensor&lt;'Self, 'T (requires 'Self :&gt; ITensor&lt;'Self, 'T&gt;)&gt; = interface&#xA;    interface ITensor&#xA;    interface IReadOnlyTensor&#xA;    interface IReadOnlyTensor&lt;'Self, 'T (requires 'Self :&gt; ITensor&lt;'Self, 'T&gt;)&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSelf, typename T&gt;&#xA; where TSelf : ITensor&lt;TSelf, T&gt;public interface class ITensor : System::Numerics::Tensors::IReadOnlyTensor&lt;TSelf, T&gt;, System::Numerics::Tensors::ITensor" />
  <TypeSignature Language="C#" Value="public interface ITensor&lt;TSelf,T&gt; : System.Numerics.Tensors.IReadOnlyTensor&lt;TSelf,T&gt;, System.Numerics.Tensors.ITensor where TSelf : ITensor&lt;TSelf,T&gt;" FrameworkAlternate="net-8.0-pp" />
  <AssemblyInfo>
    <AssemblyName>System.Numerics.Tensors</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.1</AssemblyVersion>
    <AssemblyVersion>9.0.0.2</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSelf">
      <Constraints>
        <ParameterAttribute>AllowByRefLike</ParameterAttribute>
        <InterfaceName>System.Numerics.Tensors.ITensor&lt;TSelf,T&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Numerics.Tensors.IReadOnlyTensor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.Tensors.IReadOnlyTensor&lt;TSelf,T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Numerics.Tensors.ITensor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TSelf">The type that implements this interface.</typeparam>
    <typeparam name="T">The element type.</typeparam>
    <summary>Represents a tensor.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorSpan&lt;T&gt; AsTensorSpan ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; AsTensorSpan() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.AsTensorSpan" />
      <MemberSignature Language="VB.NET" Value="Public Function AsTensorSpan () As TensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsTensorSpan : unit -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="iTensor.AsTensorSpan " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::TensorSpan&lt;T&gt; AsTensorSpan();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new tensor span over the tensor.</summary>
        <returns>The tensor span representation of the tensor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorSpan&lt;T&gt; AsTensorSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; AsTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.AsTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Public Function AsTensorSpan (startIndexes As ReadOnlySpan(Of NIndex)) As TensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsTensorSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="iTensor.AsTensorSpan startIndexes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::TensorSpan&lt;T&gt; AsTensorSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>
            Creates a tensor span for the specified start indexes.
            </summary>
        <returns>The converted <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ITensor`2.AsTensorSpan(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="AsTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorSpan&lt;T&gt; AsTensorSpan (scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; AsTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.AsTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Public Function AsTensorSpan (ranges As ReadOnlySpan(Of NRange)) As TensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsTensorSpan : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="iTensor.AsTensorSpan ranges" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::TensorSpan&lt;T&gt; AsTensorSpan(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges">The ranges of the tensor to convert.</param>
        <summary>Creates a new tensor span over a portion of the tensor defined by the specified range.</summary>
        <returns>The tensor span representation of the tensor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorSpan&lt;T&gt; AsTensorSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; AsTensorSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.AsTensorSpan(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Function AsTensorSpan (startIndexes As ReadOnlySpan(Of IntPtr)) As TensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsTensorSpan : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.TensorSpan&lt;'T&gt;" Usage="iTensor.AsTensorSpan startIndexes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::TensorSpan&lt;T&gt; AsTensorSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">The initial indexes from which the tensor will be converted.</param>
        <summary>Creates a new tensor span over a portion of the tensor starting at a specified position to the end of the tensor.</summary>
        <returns>The tensor span representation of the tensor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromShape">
      <MemberSignature Language="C#" Value="public static abstract TSelf CreateFromShape (scoped ReadOnlySpan&lt;IntPtr&gt; lengths, bool pinned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf CreateFromShape(valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.CreateFromShape(System.ReadOnlySpan{System.IntPtr},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromShape (lengths As ReadOnlySpan(Of IntPtr), Optional pinned As Boolean = false) As TSelf" />
      <MemberSignature Language="F#" Value="static member CreateFromShape : ReadOnlySpan&lt;nativeint&gt; * bool -&gt; 'Self" Usage="System.Numerics.Tensors.ITensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.ITensor&lt;'Self, 'T&gt;)&gt;.CreateFromShape (lengths, pinned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pinned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="lengths">The lengths of each dimension.</param>
        <param name="pinned">
          <see langword="true" /> to pin the underlying buffer. The default is <see langword="false" />.</param>
        <summary>Creates a new tensor with the specified lengths.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>If <paramref name="pinned" /> is true the underlying buffer is created permanently pinned, otherwise the underlying buffer is not pinned.</para>
          <para>The underlying buffer is initialized to default values.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromShape">
      <MemberSignature Language="C#" Value="public static abstract TSelf CreateFromShape (scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides, bool pinned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf CreateFromShape(valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.CreateFromShape(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromShape (lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr), Optional pinned As Boolean = false) As TSelf" />
      <MemberSignature Language="F#" Value="static member CreateFromShape : ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; * bool -&gt; 'Self" Usage="System.Numerics.Tensors.ITensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.ITensor&lt;'Self, 'T&gt;)&gt;.CreateFromShape (lengths, strides, pinned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pinned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="lengths">The lengths of each dimension.</param>
        <param name="strides">The strides of each dimension.</param>
        <param name="pinned">
          <see langword="true" /> to pin the underlying buffer. The default is <see langword="false" />.</param>
        <summary>Creates a new tensor with the specified lengths and strides.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>If <paramref name="pinned" /> is true the underlying buffer is created permanently pinned, otherwise the underlying buffer is not pinned.</para>
          <para>The underlying buffer is initialized to default values.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromShapeUninitialized">
      <MemberSignature Language="C#" Value="public static abstract TSelf CreateFromShapeUninitialized (scoped ReadOnlySpan&lt;IntPtr&gt; lengths, bool pinned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf CreateFromShapeUninitialized(valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.CreateFromShapeUninitialized(System.ReadOnlySpan{System.IntPtr},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromShapeUninitialized (lengths As ReadOnlySpan(Of IntPtr), Optional pinned As Boolean = false) As TSelf" />
      <MemberSignature Language="F#" Value="static member CreateFromShapeUninitialized : ReadOnlySpan&lt;nativeint&gt; * bool -&gt; 'Self" Usage="System.Numerics.Tensors.ITensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.ITensor&lt;'Self, 'T&gt;)&gt;.CreateFromShapeUninitialized (lengths, pinned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pinned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="lengths">The lengths of each dimension.</param>
        <param name="pinned">
          <see langword="true" /> to pin the underlying buffer. The default is <see langword="false" />.</param>
        <summary>Creates a new tensor with the specified lengths and strides.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>If <paramref name="pinned" /> is true the underlying buffer is created permanently pinned, otherwise the underlying buffer is not pinned.</para>
          <para>The underlying buffer is not initialized.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromShapeUninitialized">
      <MemberSignature Language="C#" Value="public static abstract TSelf CreateFromShapeUninitialized (scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides, bool pinned = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig virtual !TSelf CreateFromShapeUninitialized(valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.CreateFromShapeUninitialized(System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromShapeUninitialized (lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr), Optional pinned As Boolean = false) As TSelf" />
      <MemberSignature Language="F#" Value="static member CreateFromShapeUninitialized : ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; * bool -&gt; 'Self" Usage="System.Numerics.Tensors.ITensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.ITensor&lt;'Self, 'T&gt;)&gt;.CreateFromShapeUninitialized (lengths, strides, pinned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="pinned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="lengths">The lengths of each dimension.</param>
        <param name="strides">The strides of each dimension.</param>
        <param name="pinned">
          <see langword="true" /> to pin the underlying buffer. The default is <see langword="false" />.</param>
        <summary>Creates a new tensor with the specified lengths and strides. If <paramref name="pinned" /> is true the underlying buffer is created permanently pinned, otherwise the underlying buffer is not pinned. The underlying buffer is not initialized.</summary>
        <returns>To be added.</returns>
        <remarks>
              If <paramref name="pinned" /> is true the underlying buffer is created permanently pinned, otherwise the underlying buffer is not pinned.
            The underlying buffer is not initialized.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public void Fill (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Fill(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.Fill(`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Fill (value As T)" />
      <MemberSignature Language="F#" Value="abstract member Fill : 'T -&gt; unit" Usage="iTensor.Fill value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Fill(T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Fills the contents of this tensor with the given value.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.ITensor.Fill(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetDimensionSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.TensorDimensionSpan&lt;T&gt; GetDimensionSpan (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.TensorDimensionSpan`1&lt;!T&gt; GetDimensionSpan(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.GetDimensionSpan(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDimensionSpan (dimension As Integer) As TensorDimensionSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetDimensionSpan : int -&gt; System.Numerics.Tensors.TensorDimensionSpan&lt;'T&gt;" Usage="iTensor.GetDimensionSpan dimension" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::TensorDimensionSpan&lt;T&gt; GetDimensionSpan(int dimension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.TensorDimensionSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetDimensionSpan(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public ref T GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As T" />
      <MemberSignature Language="F#" Value="abstract member GetPinnableReference : unit -&gt; 'T" Usage="iTensor.GetPinnableReference " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T % GetPinnableReference();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a reference to the 0th element of the tensor. If the tensor is empty, returns <see langword="null" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This method can be used for pinning and is required to support the use of the tensor within a fixed statement.
            </remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetPinnableReference" />
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; GetSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Span`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpan (startIndexes As ReadOnlySpan(Of NIndex), length As Integer) As Span(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int -&gt; Span&lt;'T&gt;" Usage="iTensor.GetSpan (startIndexes, length)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt; GetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; GetSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Span`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpan (startIndexes As ReadOnlySpan(Of IntPtr), length As Integer) As Span(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : ReadOnlySpan&lt;nativeint&gt; * int -&gt; Span&lt;'T&gt;" Usage="iTensor.GetSpan (startIndexes, length)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt; GetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public ref T this[scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(indexes As ReadOnlySpan(Of NIndex)) As T" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;System.Buffers.NIndex&gt;) : 'T" Usage="System.Numerics.Tensors.ITensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.ITensor&lt;'Self, 'T&gt;)&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % default[ReadOnlySpan&lt;System::Buffers::NIndex&gt;] { T % get(ReadOnlySpan&lt;System::Buffers::NIndex&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">The indexes to use.</param>
        <summary>
            Gets the value at the specified indexes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TSelf this[scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TSelf Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(ranges As ReadOnlySpan(Of NRange)) As TSelf" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;System.Buffers.NRange&gt;) : 'Self with get, set" Usage="System.Numerics.Tensors.ITensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.ITensor&lt;'Self, 'T&gt;)&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TSelf default[ReadOnlySpan&lt;System::Buffers::NRange&gt;] { TSelf get(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges); void set(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges, TSelf value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges">The range of which to slice.</param>
        <summary>Gets or sets a slice out of the current tensor that contains a specified range.</summary>
        <value>A tensor that consists of all elements of the current tensor in <paramref name="ranges" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ranges" /> is larger than the tensor.</exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public ref T this[scoped ReadOnlySpan&lt;IntPtr&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(valuetype System.ReadOnlySpan`1&lt;native int&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ITensor`2.Item(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(indexes As ReadOnlySpan(Of IntPtr)) As T" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;nativeint&gt;) : 'T" Usage="System.Numerics.Tensors.ITensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.ITensor&lt;'Self, 'T&gt;)&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % default[ReadOnlySpan&lt;IntPtr&gt;] { T % get(ReadOnlySpan&lt;IntPtr&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">The indexes to use.</param>
        <summary>
            Gets the value at the specified indexes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSpan">
      <MemberSignature Language="C#" Value="public bool TryGetSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes, int length, out Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length, [out] valuetype System.Span`1&lt;!T&gt;&amp; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.Span{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSpan (startIndexes As ReadOnlySpan(Of NIndex), length As Integer, ByRef span As Span(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * Span -&gt; bool" Usage="iTensor.TryGetSpan (startIndexes, length, span)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length, [Runtime::InteropServices::Out] Span&lt;T&gt; % span);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.ReadOnlySpan{`1}@)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSpan">
      <MemberSignature Language="C#" Value="public bool TryGetSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, out Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length, [out] valuetype System.Span`1&lt;!T&gt;&amp; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ITensor`2.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.Span{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSpan (startIndexes As ReadOnlySpan(Of IntPtr), length As Integer, ByRef span As Span(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * Span -&gt; bool" Usage="iTensor.TryGetSpan (startIndexes, length, span)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, [Runtime::InteropServices::Out] Span&lt;T&gt; % span);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="span" Type="System.Span&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.ReadOnlySpan{`1}@)" />
      </Docs>
    </Member>
  </Members>
</Type>
