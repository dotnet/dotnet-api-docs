<Type Name="IReadOnlyTensor&lt;TSelf,T&gt;" FullName="System.Numerics.Tensors.IReadOnlyTensor&lt;TSelf,T&gt;">
  <TypeSignature Language="C#" Value="public interface IReadOnlyTensor&lt;TSelf,T&gt; : System.Numerics.Tensors.IReadOnlyTensor where TSelf : IReadOnlyTensor&lt;TSelf,T&gt;, allows ref struct" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IReadOnlyTensor`2&lt;(class System.Numerics.Tensors.IReadOnlyTensor`2&lt;!TSelf, !T&gt;) TSelf, T&gt; implements class System.Numerics.Tensors.IReadOnlyTensor" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Tensors.IReadOnlyTensor`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReadOnlyTensor(Of TSelf, T)&#xA;Implements IReadOnlyTensor" />
  <TypeSignature Language="F#" Value="type IReadOnlyTensor&lt;'Self, 'T (requires 'Self :&gt; IReadOnlyTensor&lt;'Self, 'T&gt;)&gt; = interface&#xA;    interface IReadOnlyTensor" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSelf, typename T&gt;&#xA; where TSelf : IReadOnlyTensor&lt;TSelf, T&gt;public interface class IReadOnlyTensor : System::Numerics::Tensors::IReadOnlyTensor" />
  <TypeSignature Language="C#" Value="public interface IReadOnlyTensor&lt;TSelf,T&gt; : System.Numerics.Tensors.IReadOnlyTensor where TSelf : IReadOnlyTensor&lt;TSelf,T&gt;" FrameworkAlternate="net-8.0-pp" />
  <AssemblyInfo>
    <AssemblyName>System.Numerics.Tensors</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.1</AssemblyVersion>
    <AssemblyVersion>9.0.0.2</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSelf">
      <Constraints>
        <ParameterAttribute>AllowByRefLike</ParameterAttribute>
        <InterfaceName>System.Numerics.Tensors.IReadOnlyTensor&lt;TSelf,T&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Numerics.Tensors.IReadOnlyTensor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TSelf">The type that implements this interface.</typeparam>
    <typeparam name="T">The element type.</typeparam>
    <summary>Represents a read-only tensor.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnlyTensorSpan () As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsReadOnlyTensorSpan : unit -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="iReadOnlyTensor.AsReadOnlyTensorSpan " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new readonly tensor span over the tensor.</summary>
        <returns>The readonly tensor span representation of the tensor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnlyTensorSpan (startIndexes As ReadOnlySpan(Of NIndex)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="iReadOnlyTensor.AsReadOnlyTensorSpan startIndexes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>
            Creates a read-only tensor span for the specified start indexes.
            </summary>
        <returns>The converted <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan (scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnlyTensorSpan (ranges As ReadOnlySpan(Of NRange)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="iReadOnlyTensor.AsReadOnlyTensorSpan ranges" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges">The ranges of the tensor to convert.</param>
        <summary>Creates a new readonly tensor span over a portion of the tensor defined by the specified range.</summary>
        <returns>The readonly tensor span representation of the tensor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnlyTensorSpan (startIndexes As ReadOnlySpan(Of IntPtr)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member AsReadOnlyTensorSpan : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="iReadOnlyTensor.AsReadOnlyTensorSpan startIndexes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; AsReadOnlyTensorSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">The initial indexes from which the tensor will be converted.</param>
        <summary>Creates a new readonly tensor span over a portion of the tensor starting at a specified position to the end of the tensor.</summary>
        <returns>The readonly tensor span representation of the tensor.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.CopyTo(System.Numerics.Tensors.TensorSpan{`1}@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As TensorSpan(Of T))" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : TensorSpan -&gt; unit" Usage="iReadOnlyTensor.CopyTo destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::Numerics::Tensors::TensorSpan&lt;T&gt; ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">The destination tensor span.</param>
        <summary>Copies the contents of the tensor into a destination tensor span.</summary>
        <remarks>This method copies all of the source tensor to <paramref name="destination" /> even if they overlap.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destination" /> is shorter than the source tensor.</exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static abstract TSelf Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property !TSelf Empty" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.IReadOnlyTensor`2.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As TSelf" />
      <MemberSignature Language="F#" Value="static member Empty : 'Self" Usage="System.Numerics.Tensors.IReadOnlyTensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;'Self, 'T&gt;)&gt;.Empty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TSelf Empty { TSelf get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an empty tensor.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlattenTo">
      <MemberSignature Language="C#" Value="public void FlattenTo (scoped Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FlattenTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.FlattenTo(System.Span{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub FlattenTo (destination As Span(Of T))" />
      <MemberSignature Language="F#" Value="abstract member FlattenTo : Span&lt;'T&gt; -&gt; unit" Usage="iReadOnlyTensor.FlattenTo destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FlattenTo(Span&lt;T&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">The destination span.</param>
        <summary>Flattens the contents of the tensor into a destination span.</summary>
        <remarks>This method copies all of the source tensor to <paramref name="destination" /> even if they overlap.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destination" /> is shorter than the source tensor.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDimensionSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;T&gt; GetDimensionSpan (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorDimensionSpan`1&lt;!T&gt; GetDimensionSpan(int32 dimension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetDimensionSpan(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDimensionSpan (dimension As Integer) As ReadOnlyTensorDimensionSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetDimensionSpan : int -&gt; System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;'T&gt;" Usage="iReadOnlyTensor.GetDimensionSpan dimension" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorDimensionSpan&lt;T&gt; GetDimensionSpan(int dimension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension">The dimension for which the span should be created.</param>
        <summary>Returns a span that can be used to access the flattened elements for a given dimension.</summary>
        <returns>A span that can be used to access the flattened elements for a given dimension.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public ref readonly T GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As T" />
      <MemberSignature Language="F#" Value="abstract member GetPinnableReference : unit -&gt; 'T" Usage="iReadOnlyTensor.GetPinnableReference " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ GetPinnableReference();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a reference to an object of type <typeparamref name="T" /> that can be used for pinning.</summary>
        <returns>A reference to the element of the tensor at index 0, or <c>null</c> if the tensor is empty.</returns>
        <remarks>This method is intended to support .NET compilers and is not intended to be called by user code.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; GetSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ReadOnlySpan`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpan (startIndexes As ReadOnlySpan(Of NIndex), length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="iReadOnlyTensor.GetSpan (startIndexes, length)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; GetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; GetSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ReadOnlySpan`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpan (startIndexes As ReadOnlySpan(Of IntPtr), length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : ReadOnlySpan&lt;nativeint&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="iReadOnlyTensor.GetSpan (startIndexes, length)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; GetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndexes">The index at which the span should start.</param>
        <param name="length">The length for the span to return.</param>
        <summary>Return a span that starts at the specified index and contains the specified number of items.</summary>
        <returns>A span that consists of <paramref name="length" /> elements from the current tensor starting at <paramref name="startIndexes" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="startIndexes" /> does not contain <see cref="P:System.Numerics.Tensors.IReadOnlyTensor.Rank" /> elements.</para>
              -or-
              <para><paramref name="length" /> is negative, greater than <see cref="P:System.Numerics.Tensors.IReadOnlyTensor.FlattenedLength" />, or would cause the span to contain elements that should be skipped due to <see cref="P:System.Numerics.Tensors.IReadOnlyTensor.Strides" />.</para></exception>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="startIndexes" /> is not a valid index into the tensor.</exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public ref readonly T this[scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(indexes As ReadOnlySpan(Of NIndex)) As T" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;System.Buffers.NIndex&gt;) : 'T" Usage="System.Numerics.Tensors.IReadOnlyTensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;'Self, 'T&gt;)&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ default[ReadOnlySpan&lt;System::Buffers::NIndex&gt;] { T&amp; ^ get(ReadOnlySpan&lt;System::Buffers::NIndex&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">The indexes to be used.</param>
        <summary>
            Gets the value at the specified indexes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TSelf this[scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TSelf Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(ranges As ReadOnlySpan(Of NRange)) As TSelf" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;System.Buffers.NRange&gt;) : 'Self" Usage="System.Numerics.Tensors.IReadOnlyTensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;'Self, 'T&gt;)&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TSelf default[ReadOnlySpan&lt;System::Buffers::NRange&gt;] { TSelf get(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges">The ranges to be used.</param>
        <summary>
            Gets the values at the specified ranges.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NRange})" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public ref readonly T this[scoped ReadOnlySpan&lt;IntPtr&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(valuetype System.ReadOnlySpan`1&lt;native int&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(indexes As ReadOnlySpan(Of IntPtr)) As T" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;nativeint&gt;) : 'T" Usage="System.Numerics.Tensors.IReadOnlyTensor&lt;'Self, 'T (requires 'Self :&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;'Self, 'T&gt;)&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ default[ReadOnlySpan&lt;IntPtr&gt;] { T&amp; ^ get(ReadOnlySpan&lt;IntPtr&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">The index of the element for which to get a reference.</param>
        <summary>Gets a reference to the specified element of the tensor.</summary>
        <value>A reference to the element that exists at <paramref name="indexes" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
              One of the following conditions is met:
              * <paramref name="indexes" /> does not contain <see cref="P:System.Numerics.Tensors.IReadOnlyTensor.Rank" /> elements.
              * <paramref name="indexes" /> contains an element that is negative or greater than or equal to the corresponding dimension length.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public TSelf Slice (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TSelf Slice(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (startIndexes As ReadOnlySpan(Of NIndex)) As TSelf" />
      <MemberSignature Language="F#" Value="abstract member Slice : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; 'Self" Usage="iReadOnlyTensor.Slice startIndexes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TSelf Slice(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>
            Slices the tensor using the specified start indexes.
            </summary>
        <returns>The sliced tensor.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public TSelf Slice (scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TSelf Slice(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (ranges As ReadOnlySpan(Of NRange)) As TSelf" />
      <MemberSignature Language="F#" Value="abstract member Slice : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; 'Self" Usage="iReadOnlyTensor.Slice ranges" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TSelf Slice(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges">The range of which to slice.</param>
        <summary>Gets a slice out of the current tensor that contains a specified range.</summary>
        <returns>A tensor that consists of all elements of the current tensor in <paramref name="ranges" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ranges" /> is larger than the tensor.</exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public TSelf Slice (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TSelf Slice(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (startIndexes As ReadOnlySpan(Of IntPtr)) As TSelf" />
      <MemberSignature Language="F#" Value="abstract member Slice : ReadOnlySpan&lt;nativeint&gt; -&gt; 'Self" Usage="iReadOnlyTensor.Slice startIndexes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TSelf Slice(ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">The indexes at which to begin the slice.</param>
        <summary>Forms a slice out of the current tensor that begins at a specified index.</summary>
        <returns>A tensor that consists of all elements of the current tensor from <paramref name="startIndexes" /> to the end of the tensor.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndexes" /> is greater than the number of items in the tensor.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToDenseTensor">
      <MemberSignature Language="C#" Value="public TSelf ToDenseTensor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TSelf ToDenseTensor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.ToDenseTensor" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDenseTensor () As TSelf" />
      <MemberSignature Language="F#" Value="abstract member ToDenseTensor : unit -&gt; 'Self" Usage="iReadOnlyTensor.ToDenseTensor " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TSelf ToDenseTensor();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSelf</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a dense tensor from the elements of the current tensor.</summary>
        <returns>The current tensor if it is already dense; otherwise, a new tensor that contains the elements of this tensor.</returns>
        <remarks>
          <para>A dense tensor is one where the elements are ordered sequentially in memory and where no gaps exist between the elements.</para>
          <para>For a 2x2 Tensor, this would mean it has <c>FlattendLength: 4; Lengths: [2, 2]; Strides: [4, 1]</c>. The elements would be sequentially accessed via indexes: <c>[0, 0]; [0, 1]; [1, 0]; [1, 1]</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCopyTo([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryCopyTo(System.Numerics.Tensors.TensorSpan{`1}@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As TensorSpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryCopyTo : TensorSpan -&gt; bool" Usage="iReadOnlyTensor.TryCopyTo destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(System::Numerics::Tensors::TensorSpan&lt;T&gt; ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">The target of the copy operation.</param>
        <summary>Attempts to copy the contents of this tensor into a destination tensor span and returns a value to indicate whether or not the operation succeeded.</summary>
        <returns>
          <see langword="true" /> if the copy operation succeeded; otherwise, <c>false</c>.</returns>
        <remarks>
          <para>If the source and <paramref name="destination" /> overlap, the entirety of the source is handled as if it was copied to a temporary location before it is copied to <paramref name="destination" />.</para>
          <para>If the <paramref name="destination" /> length is shorter than the source, no items are copied and the method returns <c>false</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFlattenTo">
      <MemberSignature Language="C#" Value="public bool TryFlattenTo (scoped Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryFlattenTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryFlattenTo(System.Span{`1})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFlattenTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryFlattenTo : Span&lt;'T&gt; -&gt; bool" Usage="iReadOnlyTensor.TryFlattenTo destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryFlattenTo(Span&lt;T&gt; destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">The target of the copy operation.</param>
        <summary>Attempts to flatten the contents of this tensor into a destination span and returns a value to indicate whether or not the operation succeeded.</summary>
        <returns>
          <see langword="true" /> if the copy operation succeeded; otherwise, <c>false</c>.</returns>
        <remarks>
          <para>If the source and <paramref name="destination" /> overlap, the entirety of the source is handled as if it was flattened to a temporary location before it is copied to <paramref name="destination" />.</para>
          <para>If the <paramref name="destination" /> length is shorter than the source, no items are copied and the method returns <c>false</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetSpan">
      <MemberSignature Language="C#" Value="public bool TryGetSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes, int length, out ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length, [out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.ReadOnlySpan{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSpan (startIndexes As ReadOnlySpan(Of NIndex), length As Integer, ByRef span As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * ReadOnlySpan -&gt; bool" Usage="iReadOnlyTensor.TryGetSpan (startIndexes, length, span)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length, [Runtime::InteropServices::Out] ReadOnlySpan&lt;T&gt; % span);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.ReadOnlySpan{`1}@)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSpan">
      <MemberSignature Language="C#" Value="public bool TryGetSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, out ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length, [out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.ReadOnlySpan{`1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSpan (startIndexes As ReadOnlySpan(Of IntPtr), length As Integer, ByRef span As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * ReadOnlySpan -&gt; bool" Usage="iReadOnlyTensor.TryGetSpan (startIndexes, length, span)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, [Runtime::InteropServices::Out] ReadOnlySpan&lt;T&gt; % span);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">The index at which the span should start.</param>
        <param name="length">The desired length of the span to retrieve.</param>
        <param name="span">On successful return, a span that consists of <paramref name="length" /> elements from the current tensor starting at <paramref name="startIndexes" />.</param>
        <summary>Tries to return a span that starts at the specified index and contains the specified number of items.</summary>
        <returns>
          <c>true</c> if a span was successfully retrieved; otherwise, <c>false</c> which indicates <paramref name="length" /> was invalid.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndexes" /> does not contain <see cref="P:System.Numerics.Tensors.IReadOnlyTensor.Rank" /> elements.</exception>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="startIndexes" /> is not a valid index into the tensor.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
