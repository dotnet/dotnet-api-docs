<Type Name="ReadOnlyTensorSpan&lt;T&gt;" FullName="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;">
  <TypeSignature Language="C#" Value="public readonly ref struct ReadOnlyTensorSpan&lt;T&gt; : System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ReadOnlyTensorSpan`1&lt;T&gt; extends System.ValueType implements class System.Numerics.Tensors.IReadOnlyTensor, class System.Numerics.Tensors.IReadOnlyTensor`2&lt;valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt;, !T&gt;" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlyTensorSpan(Of T)&#xA;Implements IReadOnlyTensor(Of ReadOnlyTensorSpan(Of T), T)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="F#" Value="type ReadOnlyTensorSpan&lt;'T&gt; = struct&#xA;    interface IReadOnlyTensor&lt;ReadOnlyTensorSpan&lt;'T&gt;, 'T&gt;&#xA;    interface IReadOnlyTensor" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ReadOnlyTensorSpan : System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;, T&gt;" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
  <TypeSignature Language="C#" Value="public readonly ref struct ReadOnlyTensorSpan&lt;T&gt;" FrameworkAlternate="net-8.0-pp" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ReadOnlyTensorSpan`1&lt;T&gt; extends System.ValueType" FrameworkAlternate="net-8.0-pp" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlyTensorSpan(Of T)" FrameworkAlternate="net-8.0-pp" />
  <TypeSignature Language="F#" Value="type ReadOnlyTensorSpan&lt;'T&gt; = struct" FrameworkAlternate="net-8.0-pp" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ReadOnlyTensorSpan" FrameworkAlternate="net-8.0-pp" />
  <AssemblyInfo>
    <AssemblyName>System.Numerics.Tensors</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.1</AssemblyVersion>
    <AssemblyVersion>9.0.0.2</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="net-10.0-pp;net-9.0-pp">
      <InterfaceName>System.Numerics.Tensors.IReadOnlyTensor</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-10.0-pp;net-9.0-pp">
      <InterfaceName>System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{ToString(),raw}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{ToString(),raw}")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerTypeProxy(typeof(System.Numerics.Tensors.TensorSpanDebugView&lt;&gt;))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerTypeProxy(typeof(System.Numerics.Tensors.TensorSpanDebugView&lt;&gt;))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsByRefLike]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsByRefLike&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">The type of the elements within the tensor span.</typeparam>
    <summary>
            Represents a contiguous region of arbitrary memory. Unlike arrays, it can point to either managed
            or native memory, or to memory allocated on the stack. It is type-safe and memory-safe.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (Array? array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Array array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.Array)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As Array)" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : Array -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(Array ^ array);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="array">The target array.</param>
        <summary>Creates a new tensor span over the entirety of the target array.</summary>
        <remarks>
          <para>Returns default when <paramref name="array" /> is null.</para>
          <para>The created tensor span has a single dimension that is the same length as <paramref name="array" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (span As ReadOnlySpan(Of T))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : ReadOnlySpan&lt;'T&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; span" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(ReadOnlySpan&lt;T&gt; span);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="span">The target span.</param>
        <summary>Creates a new tensor span over the entirety of the target span.</summary>
        <remarks>The created tensor span has a single dimension that is the same length as <paramref name="span" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (T[]? array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : 'T[] -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(cli::array &lt;T&gt; ^ array);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">The target array.</param>
        <summary>Creates a new tensor over the entirety of the target array.</summary>
        <remarks>
          <para>Returns default when <paramref name="array" /> is null.</para>
          <para>The created tensor span has a single dimension that is the same length as <paramref name="array" />.</para>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException">
          <paramref name="array" /> is covariant and its type is not exactly T[].</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (ReadOnlySpan&lt;T&gt; span, scoped ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;!T&gt; span, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (span As ReadOnlySpan(Of T), lengths As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; (span, lengths)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="span">The target span.</param>
        <param name="lengths">The lengths of the dimensions. If an empty span is provided, the created tensor span will have a single dimension that is the same length as <paramref name="span" />.</param>
        <summary>Creates a new tensor span over the target span using the specified lengths.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
              One of the following conditions is met:
              * <paramref name="lengths" /> is not empty and contains an element that is either zero or negative.
              * <paramref name="lengths" /> is not empty and has a flattened length greater than <paramref name="span" />.Length.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (T* data, IntPtr dataLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T* data, native int dataLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0*,System.IntPtr)" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : nativeptr&lt;'T&gt; * nativeint -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; (data, dataLength)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(T* data, IntPtr dataLength);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="T*">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="dataLength" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="data">The pointer to the start of the target unmanaged buffer.</param>
        <param name="dataLength">The number of elements the target unmanaged buffer contains.</param>
        <summary>Creates a new tensor span over the target unmanaged buffer.</summary>
        <remarks>Returns default when <paramref name="data" /> is null.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="data" /> is <c>null</c> and <paramref name="dataLength" /> is not zero</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (T[]? array, scoped ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[],System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), lengths As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : 'T[] * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; (array, lengths)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(cli::array &lt;T&gt; ^ array, ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">The target array.</param>
        <param name="lengths">The lengths of the dimensions. If an empty span is provided, the created tensor will have a single dimension that is the same length as <paramref name="array" />.</param>
        <summary>Creates a new tensor over the portion of the target array using the specified lengths.</summary>
        <remarks>Returns default when <paramref name="array" /> is null.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
              One of the following conditions is met:
              * <paramref name="array" /> is null and <paramref name="lengths" /> is not empty.
              * <paramref name="lengths" /> is not empty and contains an element that is either zero or negative.
              * <paramref name="lengths" /> is not empty and has a flattened length greater than <paramref name="array" />.Length.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (ReadOnlySpan&lt;T&gt; span, scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;!T&gt; span, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (span As ReadOnlySpan(Of T), lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; (span, lengths, strides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(ReadOnlySpan&lt;T&gt; span, ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="span">The target span.</param>
        <param name="lengths">The lengths of the dimensions. If an empty span is provided, the created tensor span will have a single dimension that is the same length as <paramref name="span" />.</param>
        <param name="strides">The strides of each dimension. If an empty span is provided, then strides will be automatically calculated from <paramref name="lengths" />.</param>
        <summary>Creates a new tensor span over the target span using the specified lengths and strides.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
              One of the following conditions is met:
              * <paramref name="lengths" /> is not empty and contains an element that is either zero or negative.
              * <paramref name="lengths" /> is not empty and has a flattened length greater than <paramref name="span" />.Length.
              * <paramref name="strides" /> is not empty and has a length different from <paramref name="lengths" />.
              * <paramref name="strides" /> is not empty and contains an element that is negative.
              * <paramref name="strides" /> is not empty and contains an element that is zero in a non leading position.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (T* data, IntPtr dataLength, scoped ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T* data, native int dataLength, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0*,System.IntPtr,System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : nativeptr&lt;'T&gt; * nativeint * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; (data, dataLength, lengths)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(T* data, IntPtr dataLength, ReadOnlySpan&lt;IntPtr&gt; lengths);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="T*">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="dataLength" Type="System.IntPtr" />
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">The pointer to the start of the target unmanaged buffer.</param>
        <param name="dataLength">The number of elements the target unmanaged buffer contains.</param>
        <param name="lengths">The lengths of the dimensions. If an empty span is provided, the created tensor span will have a single dimension that is the same length as <paramref name="dataLength" />.</param>
        <summary>Creates a new tensor span over the target unmanaged buffer using the specified lengths.</summary>
        <remarks>Returns default when <paramref name="data" /> is null.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
              One of the following conditions is met:
              * <paramref name="data" /> is <c>null</c> and <paramref name="dataLength" /> is not zero.
              * <paramref name="data" /> is null and <paramref name="lengths" />.
              * <paramref name="lengths" /> is not empty and contains an element that is either zero or negative.
              * <paramref name="lengths" /> is not empty and has a flattened length greater than <paramref name="dataLength" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (T[]? array, scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[],System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : 'T[] * ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; (array, lengths, strides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(cli::array &lt;T&gt; ^ array, ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">The target array.</param>
        <param name="lengths">The lengths of the dimensions. If an empty span is provided, the created tensor will have a single dimension that is the same length as <paramref name="array" />.</param>
        <param name="strides">The strides of each dimension. If an empty span is provided, then strides will be automatically calculated from <paramref name="lengths" />.</param>
        <summary>Creates a new tensor over the portion of the target array beginning at the specified start index and using the specified lengths and strides.</summary>
        <remarks>Returns default when <paramref name="array" /> is null.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
              One of the following conditions is met:
              * <paramref name="array" /> is null and <paramref name="lengths" /> or <paramref name="strides" /> is not empty.
              * <paramref name="lengths" /> is not empty and contains an element that is either zero or negative.
              * <paramref name="lengths" /> is not empty and has a flattened length greater than <paramref name="array" />.Length.
              * <paramref name="strides" /> is not empty and has a length different from <paramref name="lengths" />.
              * <paramref name="strides" /> is not empty and contains an element that is negative.
              * <paramref name="strides" /> is not empty and contains an element that is zero in a non leading position.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (Array? array, scoped ReadOnlySpan&lt;int&gt; start, scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Array array, valuetype System.ReadOnlySpan`1&lt;int32&gt; start, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(System.Array,System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As Array, start As ReadOnlySpan(Of Integer), lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : Array * ReadOnlySpan&lt;int&gt; * ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; (array, start, lengths, strides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(Array ^ array, ReadOnlySpan&lt;int&gt; start, ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="System.Array">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="start" Type="System.ReadOnlySpan&lt;System.Int32&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">The target array.</param>
        <param name="start">The index at which to begin the tensor span.</param>
        <param name="lengths">The lengths of the dimensions. If an empty span is provided, the created tensor span will have a single dimension that is the same length as <paramref name="array" />.</param>
        <param name="strides">The strides of each dimension. If an empty span is provided, then strides will be automatically calculated from <paramref name="lengths" />.</param>
        <summary>Creates a new tensor span over the portion of the target array beginning at the specified start index and using the specified lengths and strides.</summary>
        <remarks>
          <para>Returns default when <paramref name="array" /> is null.</para>
          <para />
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
              One of the following conditions is met:
              * <paramref name="array" /> is null and <paramref name="lengths" /> or <paramref name="strides" /> is not empty.
              * <paramref name="start" /> is not in range of <paramref name="array" />.
              * <paramref name="lengths" /> is not empty and contains an element that is either zero or negative.
              * <paramref name="lengths" /> is not empty and has a flattened length greater than <paramref name="array" />.Length.
              * <paramref name="strides" /> is not empty and has a length different from <paramref name="lengths" />.
              * <paramref name="strides" /> is not empty and contains an element that is negative.
              * <paramref name="strides" /> is not empty and contains an element that is zero in a non leading position.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (T* data, IntPtr dataLength, scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T* data, native int dataLength, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0*,System.IntPtr,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : nativeptr&lt;'T&gt; * nativeint * ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; (data, dataLength, lengths, strides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(T* data, IntPtr dataLength, ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="T*">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="dataLength" Type="System.IntPtr" />
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">The pointer to the start of the target unmanaged buffer.</param>
        <param name="dataLength">The number of elements the target unmanaged buffer contains.</param>
        <param name="lengths">The lengths of the dimensions. If an empty span is provided, the created tensor span will have a single dimension that is the same length as <paramref name="dataLength" />.</param>
        <param name="strides">The strides of each dimension. If an empty span is provided, then strides will be automatically calculated from <paramref name="lengths" />.</param>
        <summary>Creates a new tensor span over the target unmanaged buffer using the specified lengths and strides.</summary>
        <remarks>Returns default when <paramref name="data" /> is null.</remarks>
        <exception cref="T:System.ArgumentException">
          <typeparamref name="T" /> is a reference type or contains pointers and hence cannot be stored in unmanaged memory.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
              One of the following conditions is met:
              * <paramref name="data" /> is <c>null</c> and <paramref name="dataLength" /> is not zero.
              * <paramref name="data" /> is null and <paramref name="lengths" /> or <paramref name="strides" /> is not empty.
              * <paramref name="lengths" /> is not empty and contains an element that is either zero or negative.
              * <paramref name="lengths" /> is not empty and has a flattened length greater than <paramref name="dataLength" />.
              * <paramref name="strides" /> is not empty and has a length different from <paramref name="lengths" />.
              * <paramref name="strides" /> is not empty and contains an element that is negative.
              * <paramref name="strides" /> is not empty and contains an element that is zero in a non leading position.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyTensorSpan (T[]? array, int start, scoped ReadOnlySpan&lt;IntPtr&gt; lengths, scoped ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, valuetype System.ReadOnlySpan`1&lt;native int&gt; lengths, valuetype System.ReadOnlySpan`1&lt;native int&gt; strides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.#ctor(`0[],System.Int32,System.ReadOnlySpan{System.IntPtr},System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, lengths As ReadOnlySpan(Of IntPtr), strides As ReadOnlySpan(Of IntPtr))" />
      <MemberSignature Language="F#" Value="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; : 'T[] * int * ReadOnlySpan&lt;nativeint&gt; * ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="new System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt; (array, start, lengths, strides)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyTensorSpan(cli::array &lt;T&gt; ^ array, int start, ReadOnlySpan&lt;IntPtr&gt; lengths, ReadOnlySpan&lt;IntPtr&gt; strides);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="lengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="strides" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">The target array.</param>
        <param name="start">The index at which to begin the tensor.</param>
        <param name="lengths">The lengths of the dimensions. If an empty span is provided, the created tensor will have a single dimension that is the same length as <paramref name="array" />.</param>
        <param name="strides">The strides of each dimension. If an empty span is provided, then strides will be automatically calculated from <paramref name="lengths" />.</param>
        <summary>Creates a new tensor over the portion of the target array beginning at the specified start index and using the specified lengths and strides.</summary>
        <remarks>Returns default when <paramref name="array" /> is null.</remarks>
        <exception cref="T:System.ArrayTypeMismatchException">
          <paramref name="array" /> is covariant and its type is not exactly T[].</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
              One of the following conditions is met:
              * <paramref name="array" /> is null and <paramref name="lengths" /> or <paramref name="strides" /> is not empty.
              * <paramref name="start" /> is not in range of <paramref name="array" />.
              * <paramref name="lengths" /> is not empty and contains an element that is either zero or negative.
              * <paramref name="lengths" /> is not empty and has a flattened length greater than <paramref name="array" />.Length.
              * <paramref name="strides" /> is not empty and has a length different from <paramref name="lengths" />.
              * <paramref name="strides" /> is not empty and contains an element that is negative.
              * <paramref name="strides" /> is not empty and contains an element that is zero in a non leading position.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CastUp&lt;TDerived&gt;">
      <MemberSignature Language="C#" Value="public static System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; CastUp&lt;TDerived&gt; (in System.Numerics.Tensors.ReadOnlyTensorSpan&lt;TDerived&gt; items) where TDerived : class, T;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; CastUp&lt;class (!T) TDerived&gt;([in]valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!!TDerived&gt;&amp; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.CastUp``1(System.Numerics.Tensors.ReadOnlyTensorSpan{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CastUp(Of TDerived As {Class, T}) (ByRef items As ReadOnlyTensorSpan(Of TDerived)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="static member CastUp : ReadOnlyTensorSpan -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.CastUp items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDerived&gt;&#xA; where TDerived : class, T static System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; CastUp(System::Numerics::Tensors::ReadOnlyTensorSpan&lt;TDerived&gt; % items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerived">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>T</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="items" Type="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;TDerived&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDerived">The element type of the source tensor span, which must be derived from <typeparamref name="T" />.</typeparam>
        <param name="items">The source tensor span. No copy is made.</param>
        <summary>Casts a tensor span of <typeparamref name="TDerived" /> to a tensor span of <typeparamref name="T" />.</summary>
        <returns>A tensor span with elements cast to the new type.</returns>
        <remarks>This method uses a covariant cast, producing a tensor span that shares the same memory as the source. The relationships expressed in the type constraints ensure that the cast is a safe operation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;&amp; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.CopyTo(System.Numerics.Tensors.TensorSpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (ByRef destination As TensorSpan(Of T))" />
      <MemberSignature Language="F#" Value="member this.CopyTo : TensorSpan -&gt; unit" Usage="readOnlyTensorSpan.CopyTo destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::Numerics::Tensors::TensorSpan&lt;T&gt; % destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.CopyTo(System.Numerics.Tensors.TensorSpan{`1}@|System.Runtime.InteropServices.InAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="static member Empty : System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="Empty" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; Empty { System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="static member Empty : System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.Empty" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor`2.Empty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a 0-length read-only span whose base is the null pointer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor`2.Empty" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="readOnlyTensorSpan.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("Equals() on ReadOnlyTensorSpan will always throw an exception. Use the equality operator instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Equals() on ReadOnlyTensorSpan will always throw an exception. Use the equality operator instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Not supported.</param>
        <summary>Calls to this method are not supported.</summary>
        <returns>Calls to this method are not supported.</returns>
        <remarks>This method is not supported as tensor spans cannot be boxed. To compare two tensor spans, use operator ==.</remarks>
        <exception cref="T:System.NotSupportedException">Calls to this method are not supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="FlattenedLength">
      <MemberSignature Language="C#" Value="public IntPtr FlattenedLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int FlattenedLength" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.FlattenedLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FlattenedLength As IntPtr" />
      <MemberSignature Language="F#" Value="member this.FlattenedLength : nativeint" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.FlattenedLength" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr FlattenedLength { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.FlattenedLength</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of items in the span.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.FlattenedLength" />
      </Docs>
    </Member>
    <Member MemberName="FlattenTo">
      <MemberSignature Language="C#" Value="public void FlattenTo (scoped Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FlattenTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.FlattenTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub FlattenTo (destination As Span(Of T))" />
      <MemberSignature Language="F#" Value="abstract member FlattenTo : Span&lt;'T&gt; -&gt; unit&#xA;override this.FlattenTo : Span&lt;'T&gt; -&gt; unit" Usage="readOnlyTensorSpan.FlattenTo destination" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FlattenTo(Span&lt;T&gt; destination);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FlattenTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.FlattenTo : Span&lt;'T&gt; -&gt; unit" Usage="readOnlyTensorSpan.FlattenTo destination" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FlattenTo(Span&lt;T&gt; destination);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.FlattenTo(System.Span{`1})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">The span to copy items into.</param>
        <summary>
            Flattens the contents of this span into the provided <see cref="T:System.Span`1" />.
            </summary>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.FlattenTo(System.Span{`1})" />
      </Docs>
    </Member>
    <Member MemberName="GetDimensionSpan">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;T&gt; GetDimensionSpan (int dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorDimensionSpan`1&lt;!T&gt; GetDimensionSpan(int32 dimension) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.GetDimensionSpan(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDimensionSpan (dimension As Integer) As ReadOnlyTensorDimensionSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetDimensionSpan : int -&gt; System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;'T&gt;&#xA;override this.GetDimensionSpan : int -&gt; System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.GetDimensionSpan dimension" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::ReadOnlyTensorDimensionSpan&lt;T&gt; GetDimensionSpan(int dimension);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.ReadOnlyTensorDimensionSpan`1&lt;!T&gt; GetDimensionSpan(int32 dimension) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.GetDimensionSpan : int -&gt; System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.GetDimensionSpan dimension" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorDimensionSpan&lt;T&gt; GetDimensionSpan(int dimension);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.GetDimensionSpan(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorDimensionSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dimension">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetDimensionSpan(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ReadOnlyTensorSpan(Of T).Enumerator" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.Enumerator" Usage="readOnlyTensorSpan.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an enumerator for the readonly tensor span.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="readOnlyTensorSpan.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("GetHashCode() on ReadOnlyTensorSpan will always throw an exception.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("GetHashCode() on ReadOnlyTensorSpan will always throw an exception.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calls to this method are not supported.</summary>
        <returns>Calls to this method are not supported.</returns>
        <remarks>This method is not supported as tensor spans cannot be boxed.</remarks>
        <exception cref="T:System.NotSupportedException">Calls to this method are not supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public ref readonly T GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T GetPinnableReference() cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As T" />
      <MemberSignature Language="F#" Value="abstract member GetPinnableReference : unit -&gt; 'T&#xA;override this.GetPinnableReference : unit -&gt; 'T" Usage="readOnlyTensorSpan.GetPinnableReference " FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual T&amp; ^ GetPinnableReference();" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T GetPinnableReference() cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; 'T" Usage="readOnlyTensorSpan.GetPinnableReference " FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ GetPinnableReference();" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.GetPinnableReference</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a reference to the 0th element of the ReadOnlyTensorSpan. If the ReadOnlyTensorSpan is empty, returns null reference.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This method can be used for pinning and is required to support the use of span within a fixed statement.
            </remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetPinnableReference" />
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; GetSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ReadOnlySpan`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpan (startIndexes As ReadOnlySpan(Of NIndex), length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;&#xA;override this.GetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlyTensorSpan.GetSpan (startIndexes, length)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual ReadOnlySpan&lt;T&gt; GetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.GetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlyTensorSpan.GetSpan (startIndexes, length)" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; GetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; GetSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.ReadOnlySpan`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpan (startIndexes As ReadOnlySpan(Of IntPtr), length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : ReadOnlySpan&lt;nativeint&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;&#xA;override this.GetSpan : ReadOnlySpan&lt;nativeint&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlyTensorSpan.GetSpan (startIndexes, length)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual ReadOnlySpan&lt;T&gt; GetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; GetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.GetSpan : ReadOnlySpan&lt;nativeint&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlyTensorSpan.GetSpan (startIndexes, length)" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; GetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.GetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HasAnyDenseDimensions">
      <MemberSignature Language="C#" Value="public bool HasAnyDenseDimensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnyDenseDimensions" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.HasAnyDenseDimensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnyDenseDimensions As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasAnyDenseDimensions : bool" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.HasAnyDenseDimensions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnyDenseDimensions { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.HasAnyDenseDimensions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.HasAnyDenseDimensions" />
      </Docs>
    </Member>
    <Member MemberName="IsDense">
      <MemberSignature Language="C#" Value="public bool IsDense { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDense" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.IsDense" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDense As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsDense : bool" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.IsDense" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDense { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.IsDense</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.IsDense" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.IsEmpty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.IsEmpty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether this <see cref="T:System.Numerics.Tensors.TensorSpan`1" /> is empty.
            </summary>
        <value>
          <see langword="true" /> if this span is empty; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.IsEmpty" />
      </Docs>
    </Member>
    <Member MemberName="IsPinned">
      <MemberSignature Language="C#" Value="public bool IsPinned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPinned" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.IsPinned" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPinned As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsPinned : bool" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.IsPinned" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPinned { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.IsPinned</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.IsPinned" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public ref readonly T this[scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(indexes As ReadOnlySpan(Of NIndex)) As T" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;System.Buffers.NIndex&gt;) : 'T" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ default[ReadOnlySpan&lt;System::Buffers::NIndex&gt;] { T&amp; ^ get(ReadOnlySpan&lt;System::Buffers::NIndex&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes" />
        <summary>
            Returns a reference to specified element of the ReadOnlyTensorSpan.
            </summary>
        <value />
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
            Any index is less than 0 or any index is greater than or equal to FlattenedLength.
            </exception>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; this[scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Item(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(ranges As ReadOnlySpan(Of NRange)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;System.Buffers.NRange&gt;) : System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; default[ReadOnlySpan&lt;System::Buffers::NRange&gt;] { System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; get(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.Buffers.NRange})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges" />
        <summary>
            Returns a slice of the ReadOnlyTensorSpan.
            </summary>
        <value />
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
            Any index is less than 0 or any index is greater than or equal to FlattenedLength.
            </exception>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.Buffers.NRange})" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public ref readonly T this[scoped ReadOnlySpan&lt;IntPtr&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(valuetype System.ReadOnlySpan`1&lt;native int&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Item(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(indexes As ReadOnlySpan(Of IntPtr)) As T" />
      <MemberSignature Language="F#" Value="member this.Item(ReadOnlySpan&lt;nativeint&gt;) : 'T" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ default[ReadOnlySpan&lt;IntPtr&gt;] { T&amp; ^ get(ReadOnlySpan&lt;IntPtr&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes" />
        <summary>
            Returns a reference to specified element of the ReadOnlyTensorSpan.
            </summary>
        <value />
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
            Any index is less than 0 or any index is greater than or equal to FlattenedLength.
            </exception>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor`2.Item(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="Lengths">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;IntPtr&gt; Lengths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;native int&gt; Lengths" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Lengths" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Lengths As ReadOnlySpan(Of IntPtr)" />
      <MemberSignature Language="F#" Value="member this.Lengths : ReadOnlySpan&lt;nativeint&gt;" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.Lengths" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;IntPtr&gt; Lengths { ReadOnlySpan&lt;IntPtr&gt; get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.Lengths</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnscopedRef]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnscopedRef&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.IntPtr&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the length of each dimension in this <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.Lengths" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (in System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; left, in System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality([in]valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt;&amp; left, [in]valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt;&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.op_Equality(System.Numerics.Tensors.ReadOnlyTensorSpan{`0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (ByRef left As ReadOnlyTensorSpan(Of T), ByRef right As ReadOnlyTensorSpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : ReadOnlyTensorSpan * ReadOnlyTensorSpan -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; % left, System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; % right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="right" Type="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">The first tensor span to compare.</param>
        <param name="right">The second tensor span to compare.</param>
        <summary>Returns a value that indicates whether two tensor spans are equal.</summary>
        <returns>
          <c>true</c> if the two tensor span are equal; otherwise, <c>false</c>.</returns>
        <remarks>Two tensor span are equal if they have the same length and the corresponding elements of <paramref name="left" /> and <paramref name="right" /> point to the same memory. Note that the test for equality does not attempt to determine whether the contents are equal.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; (T[]? array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.op_Implicit(`0[])~System.Numerics.Tensors.ReadOnlyTensorSpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.op_Implicit array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (in System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; left, in System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality([in]valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt;&amp; left, [in]valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt;&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.op_Inequality(System.Numerics.Tensors.ReadOnlyTensorSpan{`0}@,System.Numerics.Tensors.ReadOnlyTensorSpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (ByRef left As ReadOnlyTensorSpan(Of T), ByRef right As ReadOnlyTensorSpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : ReadOnlyTensorSpan * ReadOnlyTensorSpan -&gt; bool" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; % left, System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; % right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="right" Type="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="left">The first tensor span to compare.</param>
        <param name="right">The second tensor span to compare.</param>
        <summary>Returns a value that indicates whether two tensor spans are not equal.</summary>
        <returns>
          <c>true</c> if the two tensor span are not equal; otherwise, <c>false</c>.</returns>
        <remarks>Two tensor span are not equal if they have the different lengths or if the corresponding elements of <paramref name="left" /> and <paramref name="right" /> do not point to the same memory. Note that the test for equality does not attempt to determine whether the contents are not equal.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public int Rank { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rank" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Rank" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rank As Integer" />
      <MemberSignature Language="F#" Value="member this.Rank : int" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.Rank" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rank { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.Rank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the rank, or number of dimensions, of this <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.Rank" />
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; Slice (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Slice(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (startIndexes As ReadOnlySpan(Of NIndex)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Slice : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.Slice : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.Slice startIndexes" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.Slice : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.Slice startIndexes" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>
            Returns a reference to specified element of the TensorSpan.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">Any index is less than 0 or greater than or equal to FlattenedLength.
            </exception>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NIndex})" />
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; Slice (scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Slice(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (ranges As ReadOnlySpan(Of NRange)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Slice : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.Slice : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.Slice ranges" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.Slice : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.Slice ranges" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NRange})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges">The ranges for the slice.</param>
        <summary>
            Forms a slice out of the given span.
            </summary>
        <returns>A <see cref="T:System.Numerics.Tensors.ReadOnlyTensorSpan`1" /> based on the provided <paramref name="ranges" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.Buffers.NRange})" />
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; Slice (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Slice(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (startIndexes As ReadOnlySpan(Of IntPtr)) As ReadOnlyTensorSpan(Of T)" />
      <MemberSignature Language="F#" Value="abstract member Slice : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.Slice : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.Slice startIndexes" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;IntPtr&gt; startIndexes);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; Slice(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.Slice : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.Slice startIndexes" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; Slice(ReadOnlySpan&lt;IntPtr&gt; startIndexes);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.Slice(System.ReadOnlySpan{System.IntPtr})" />
      </Docs>
    </Member>
    <Member MemberName="Strides">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;IntPtr&gt; Strides { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;native int&gt; Strides" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Strides" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Strides As ReadOnlySpan(Of IntPtr)" />
      <MemberSignature Language="F#" Value="member this.Strides : ReadOnlySpan&lt;nativeint&gt;" Usage="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;.Strides" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;IntPtr&gt; Strides { ReadOnlySpan&lt;IntPtr&gt; get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">P:System.Numerics.Tensors.IReadOnlyTensor.Strides</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnscopedRef]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnscopedRef&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.IntPtr&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the strides of this <see cref="T:System.Numerics.Tensors.TensorSpan`1" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.Numerics.Tensors.IReadOnlyTensor.Strides" />
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor.Item">
      <MemberSignature Language="C#" Value="object? System.Numerics.Tensors.IReadOnlyTensor.Item[scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Numerics.Tensors.IReadOnlyTensor.Item(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor#Item(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(indexes As ReadOnlySpan(Of NIndex)) As Object Implements IReadOnlyTensor.Item" />
      <MemberSignature Language="F#" Value="member this.System.Numerics.Tensors.IReadOnlyTensor.Item(ReadOnlySpan&lt;System.Buffers.NIndex&gt;) : obj" Usage="System.Numerics.Tensors.IReadOnlyTensor.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Numerics::Tensors::IReadOnlyTensor::Item[ReadOnlySpan&lt;System::Buffers::NIndex&gt;] { System::Object ^ get(ReadOnlySpan&lt;System::Buffers::NIndex&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.Tensors.IReadOnlyTensor.Item(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor.Item">
      <MemberSignature Language="C#" Value="object? System.Numerics.Tensors.IReadOnlyTensor.Item[scoped ReadOnlySpan&lt;IntPtr&gt; indexes] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Numerics.Tensors.IReadOnlyTensor.Item(valuetype System.ReadOnlySpan`1&lt;native int&gt;)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor#Item(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(indexes As ReadOnlySpan(Of IntPtr)) As Object Implements IReadOnlyTensor.Item" />
      <MemberSignature Language="F#" Value="member this.System.Numerics.Tensors.IReadOnlyTensor.Item(ReadOnlySpan&lt;nativeint&gt;) : obj" Usage="System.Numerics.Tensors.IReadOnlyTensor.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Numerics::Tensors::IReadOnlyTensor::Item[ReadOnlySpan&lt;IntPtr&gt;] { System::Object ^ get(ReadOnlySpan&lt;IntPtr&gt; indexes); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Numerics.Tensors.IReadOnlyTensor.Item(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexes">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; IReadOnlyTensor&lt;ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#ReadOnlyTensorSpan&lt;T&gt;,T&gt;#AsReadOnlyTensorSpan" />
      <MemberSignature Language="VB.NET" Value="Function AsReadOnlyTensorSpan () As ReadOnlyTensorSpan(Of T) Implements IReadOnlyTensor(Of ReadOnlyTensorSpan(Of T), T).AsReadOnlyTensorSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan : unit -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan : unit -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan() = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;, T&gt;::AsReadOnlyTensorSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; IReadOnlyTensor&lt;ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#ReadOnlyTensorSpan&lt;T&gt;,T&gt;#AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})" />
      <MemberSignature Language="VB.NET" Value="Function AsReadOnlyTensorSpan (startIndexes As ReadOnlySpan(Of NIndex)) As ReadOnlyTensorSpan(Of T) Implements IReadOnlyTensor(Of ReadOnlyTensorSpan(Of T), T).AsReadOnlyTensorSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan startIndexes" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes) = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;, T&gt;::AsReadOnlyTensorSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NIndex})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; IReadOnlyTensor&lt;ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan (scoped ReadOnlySpan&lt;System.Buffers.NRange&gt; ranges);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NRange&gt; ranges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#ReadOnlyTensorSpan&lt;T&gt;,T&gt;#AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})" />
      <MemberSignature Language="VB.NET" Value="Function AsReadOnlyTensorSpan (ranges As ReadOnlySpan(Of NRange)) As ReadOnlyTensorSpan(Of T) Implements IReadOnlyTensor(Of ReadOnlyTensorSpan(Of T), T).AsReadOnlyTensorSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan : ReadOnlySpan&lt;System.Buffers.NRange&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan ranges" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan(ReadOnlySpan&lt;System::Buffers::NRange&gt; ranges) = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;, T&gt;::AsReadOnlyTensorSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.Buffers.NRange})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ranges" Type="System.ReadOnlySpan&lt;System.Buffers.NRange&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ranges">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; IReadOnlyTensor&lt;ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#ReadOnlyTensorSpan&lt;T&gt;,T&gt;#AsReadOnlyTensorSpan(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Function AsReadOnlyTensorSpan (startIndexes As ReadOnlySpan(Of IntPtr)) As ReadOnlyTensorSpan(Of T) Implements IReadOnlyTensor(Of ReadOnlyTensorSpan(Of T), T).AsReadOnlyTensorSpan" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan : ReadOnlySpan&lt;nativeint&gt; -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan startIndexes" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.AsReadOnlyTensorSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes) = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;, T&gt;::AsReadOnlyTensorSpan;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.AsReadOnlyTensorSpan(System.ReadOnlySpan{System.IntPtr})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void IReadOnlyTensor&lt;ReadOnlyTensorSpan&lt;T&gt;,T&gt;.CopyTo (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.CopyTo([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#ReadOnlyTensorSpan&lt;T&gt;,T&gt;#CopyTo(System.Numerics.Tensors.TensorSpan{`0}@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (destination As TensorSpan(Of T)) Implements IReadOnlyTensor(Of ReadOnlyTensorSpan(Of T), T).CopyTo" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.CopyTo : TensorSpan -&gt; unit&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.CopyTo : TensorSpan -&gt; unit" Usage="readOnlyTensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.CopyTo destination" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.CopyTo(System::Numerics::Tensors::TensorSpan&lt;T&gt; ^ destination) = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;, T&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.CopyTo(System.Numerics.Tensors.TensorSpan{`1}@|System.Runtime.InteropServices.InAttribute)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.ToDenseTensor">
      <MemberSignature Language="C#" Value="System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt; IReadOnlyTensor&lt;ReadOnlyTensorSpan&lt;T&gt;,T&gt;.ToDenseTensor ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Numerics.Tensors.ReadOnlyTensorSpan`1&lt;!T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.ToDenseTensor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#ReadOnlyTensorSpan&lt;T&gt;,T&gt;#ToDenseTensor" />
      <MemberSignature Language="VB.NET" Value="Function ToDenseTensor () As ReadOnlyTensorSpan(Of T) Implements IReadOnlyTensor(Of ReadOnlyTensorSpan(Of T), T).ToDenseTensor" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.ToDenseTensor : unit -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.ToDenseTensor : unit -&gt; System.Numerics.Tensors.ReadOnlyTensorSpan&lt;'T&gt;" Usage="readOnlyTensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.ToDenseTensor " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt; System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.ToDenseTensor() = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;, T&gt;::ToDenseTensor;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.ToDenseTensor</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.TryCopyTo">
      <MemberSignature Language="C#" Value="bool IReadOnlyTensor&lt;ReadOnlyTensorSpan&lt;T&gt;,T&gt;.TryCopyTo (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.TryCopyTo([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.System#Numerics#Tensors#IReadOnlyTensor&lt;System#Numerics#Tensors#ReadOnlyTensorSpan&lt;T&gt;,T&gt;#TryCopyTo(System.Numerics.Tensors.TensorSpan{`0}@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Function TryCopyTo (destination As TensorSpan(Of T)) As Boolean Implements IReadOnlyTensor(Of ReadOnlyTensorSpan(Of T), T).TryCopyTo" />
      <MemberSignature Language="F#" Value="abstract member System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.TryCopyTo : TensorSpan -&gt; bool&#xA;override this.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.TryCopyTo : TensorSpan -&gt; bool" Usage="readOnlyTensorSpan.System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.TryCopyTo destination" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Numerics.Tensors.IReadOnlyTensor&lt;System.Numerics.Tensors.ReadOnlyTensorSpan&lt;T&gt;,T&gt;.TryCopyTo(System::Numerics::Tensors::TensorSpan&lt;T&gt; ^ destination) = System::Numerics::Tensors::IReadOnlyTensor&lt;System::Numerics::Tensors::ReadOnlyTensorSpan&lt;T&gt;, T&gt;::TryCopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Numerics.Tensors.IReadOnlyTensor`2.TryCopyTo(System.Numerics.Tensors.TensorSpan{`1}@|System.Runtime.InteropServices.InAttribute)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" Index="0" FrameworkAlternate="net-10.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="readOnlyTensorSpan.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the string representation of the tensor.</summary>
        <returns>The string representation of the tensor.</returns>
        <remarks>This API only lists the shape of the tensor, it does not include the contents.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (scoped ReadOnlySpan&lt;IntPtr&gt; maximumLengths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(valuetype System.ReadOnlySpan`1&lt;native int&gt; maximumLengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.ToString(System.ReadOnlySpan{System.IntPtr})" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (maximumLengths As ReadOnlySpan(Of IntPtr)) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : ReadOnlySpan&lt;nativeint&gt; -&gt; string" Usage="readOnlyTensorSpan.ToString maximumLengths" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(ReadOnlySpan&lt;IntPtr&gt; maximumLengths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maximumLengths" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="maximumLengths">The maximum number of elements to print for each dimension of the tensor.</param>
        <summary>Creates a <see cref="T:System.String" /> representation of the tensor.</summary>
        <returns>A <see cref="T:System.String" /> representation of the tensor.</returns>
        <remarks>
          <para>No contents will be printed if <paramref name="maximumLengths" /> is empty.</para>
          <para>If a given dimension contains more elements then the corresponding limit specified by <paramref name="maximumLengths" />, remaining elements will be represented by <c>..</c>.</para>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumLengths" /> is not empty and does not contain <see cref="P:System.Numerics.Tensors.ReadOnlyTensorSpan`1.Rank" /> elements.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (scoped in System.Numerics.Tensors.TensorSpan&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo([in]valuetype System.Numerics.Tensors.TensorSpan`1&lt;!T&gt;&amp; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.TryCopyTo(System.Numerics.Tensors.TensorSpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (ByRef destination As TensorSpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : TensorSpan -&gt; bool" Usage="readOnlyTensorSpan.TryCopyTo destination" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(System::Numerics::Tensors::TensorSpan&lt;T&gt; % destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Numerics.Tensors.TensorSpan&lt;T&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryCopyTo(System.Numerics.Tensors.TensorSpan{`1}@|System.Runtime.InteropServices.InAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="TryFlattenTo">
      <MemberSignature Language="C#" Value="public bool TryFlattenTo (scoped Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryFlattenTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.TryFlattenTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFlattenTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryFlattenTo : Span&lt;'T&gt; -&gt; bool&#xA;override this.TryFlattenTo : Span&lt;'T&gt; -&gt; bool" Usage="readOnlyTensorSpan.TryFlattenTo destination" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryFlattenTo(Span&lt;T&gt; destination);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFlattenTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.TryFlattenTo : Span&lt;'T&gt; -&gt; bool" Usage="readOnlyTensorSpan.TryFlattenTo destination" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryFlattenTo(Span&lt;T&gt; destination);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.TryFlattenTo(System.Span{`1})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="destination">The span to copy items into.</param>
        <summary>
            Flattens the contents of this span into the provided <see cref="T:System.Span`1" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryFlattenTo(System.Span{`1})" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSpan">
      <MemberSignature Language="C#" Value="public bool TryGetSpan (scoped ReadOnlySpan&lt;System.Buffers.NIndex&gt; startIndexes, int length, out ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length, [out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.ReadOnlySpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSpan (startIndexes As ReadOnlySpan(Of NIndex), length As Integer, ByRef span As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * ReadOnlySpan -&gt; bool&#xA;override this.TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * ReadOnlySpan -&gt; bool" Usage="readOnlyTensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length, [Runtime::InteropServices::Out] ReadOnlySpan&lt;T&gt; % span);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;valuetype System.Buffers.NIndex&gt; startIndexes, int32 length, [out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.TryGetSpan : ReadOnlySpan&lt;System.Buffers.NIndex&gt; * int * ReadOnlySpan -&gt; bool" Usage="readOnlyTensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSpan(ReadOnlySpan&lt;System::Buffers::NIndex&gt; startIndexes, int length, [Runtime::InteropServices::Out] ReadOnlySpan&lt;T&gt; % span);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.ReadOnlySpan{`1}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.Buffers.NIndex&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.Buffers.NIndex},System.Int32,System.ReadOnlySpan{`1}@)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSpan">
      <MemberSignature Language="C#" Value="public bool TryGetSpan (scoped ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, out ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length, [out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Tensors.ReadOnlyTensorSpan`1.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.ReadOnlySpan{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSpan (startIndexes As ReadOnlySpan(Of IntPtr), length As Integer, ByRef span As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * ReadOnlySpan -&gt; bool&#xA;override this.TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * ReadOnlySpan -&gt; bool" Usage="readOnlyTensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, [Runtime::InteropServices::Out] ReadOnlySpan&lt;T&gt; % span);" FrameworkAlternate="net-10.0-pp;net-9.0-pp" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSpan(valuetype System.ReadOnlySpan`1&lt;native int&gt; startIndexes, int32 length, [out] valuetype System.ReadOnlySpan`1&lt;!T&gt;&amp; span) cil managed" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="F#" Value="member this.TryGetSpan : ReadOnlySpan&lt;nativeint&gt; * int * ReadOnlySpan -&gt; bool" Usage="readOnlyTensorSpan.TryGetSpan (startIndexes, length, span)" FrameworkAlternate="net-8.0-pp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSpan(ReadOnlySpan&lt;IntPtr&gt; startIndexes, int length, [Runtime::InteropServices::Out] ReadOnlySpan&lt;T&gt; % span);" FrameworkAlternate="net-8.0-pp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0-pp;net-9.0-pp">M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.ReadOnlySpan{`1}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Tensors</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndexes" Type="System.ReadOnlySpan&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startIndexes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="span">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.Numerics.Tensors.IReadOnlyTensor`2.TryGetSpan(System.ReadOnlySpan{System.IntPtr},System.Int32,System.ReadOnlySpan{`1}@)" />
      </Docs>
    </Member>
  </Members>
</Type>
