<Type Name="FilterTranslationPreprocessor" FullName="Microsoft.Extensions.VectorData.ConnectorSupport.Filter.FilterTranslationPreprocessor">
  <TypeSignature Language="C#" Value="public class FilterTranslationPreprocessor : System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilterTranslationPreprocessor extends System.Linq.Expressions.ExpressionVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.ConnectorSupport.Filter.FilterTranslationPreprocessor" />
  <TypeSignature Language="VB.NET" Value="Public Class FilterTranslationPreprocessor&#xA;Inherits ExpressionVisitor" />
  <TypeSignature Language="F#" Value="type FilterTranslationPreprocessor = class&#xA;    inherit ExpressionVisitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilterTranslationPreprocessor : System::Linq::Expressions::ExpressionVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.ExpressionVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("MEVD9001")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("MEVD9001")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            A processor for user-provided filter expressions which performs various common transformations before actual translation takes place.
            This is an internal support type meant for use by connectors only, and not for use by applications.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilterTranslationPreprocessor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.Filter.FilterTranslationPreprocessor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilterTranslationPreprocessor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InlineCapturedVariables">
      <MemberSignature Language="C#" Value="public bool InlineCapturedVariables { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InlineCapturedVariables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.ConnectorSupport.Filter.FilterTranslationPreprocessor.InlineCapturedVariables" />
      <MemberSignature Language="VB.NET" Value="Public Property InlineCapturedVariables As Boolean" />
      <MemberSignature Language="F#" Value="member this.InlineCapturedVariables : bool with get, set" Usage="Microsoft.Extensions.VectorData.ConnectorSupport.Filter.FilterTranslationPreprocessor.InlineCapturedVariables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InlineCapturedVariables { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether to inline captured variables in the filter expression (when the database doesn't support parameters).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformCapturedVariablesToQueryParameterExpressions">
      <MemberSignature Language="C#" Value="public bool TransformCapturedVariablesToQueryParameterExpressions { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransformCapturedVariablesToQueryParameterExpressions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.ConnectorSupport.Filter.FilterTranslationPreprocessor.TransformCapturedVariablesToQueryParameterExpressions" />
      <MemberSignature Language="VB.NET" Value="Public Property TransformCapturedVariablesToQueryParameterExpressions As Boolean" />
      <MemberSignature Language="F#" Value="member this.TransformCapturedVariablesToQueryParameterExpressions : bool with get, set" Usage="Microsoft.Extensions.VectorData.ConnectorSupport.Filter.FilterTranslationPreprocessor.TransformCapturedVariablesToQueryParameterExpressions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TransformCapturedVariablesToQueryParameterExpressions { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether to transform captured variables in the filter expression to <see cref="T:Microsoft.Extensions.VectorData.ConnectorSupport.Filter.QueryParameterExpression" /> (when the database supports parameters).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMember">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression VisitMember (System.Linq.Expressions.MemberExpression node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression VisitMember(class System.Linq.Expressions.MemberExpression node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.Filter.FilterTranslationPreprocessor.VisitMember(System.Linq.Expressions.MemberExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function VisitMember (node As MemberExpression) As Expression" />
      <MemberSignature Language="F#" Value="override this.VisitMember : System.Linq.Expressions.MemberExpression -&gt; System.Linq.Expressions.Expression" Usage="filterTranslationPreprocessor.VisitMember node" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Linq::Expressions::Expression ^ VisitMember(System::Linq::Expressions::MemberExpression ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Linq.Expressions.MemberExpression" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
