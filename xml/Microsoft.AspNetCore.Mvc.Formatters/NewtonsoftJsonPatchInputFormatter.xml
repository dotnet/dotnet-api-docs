<Type Name="NewtonsoftJsonPatchInputFormatter" FullName="Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter">
  <TypeSignature Language="C#" Value="public class NewtonsoftJsonPatchInputFormatter : Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NewtonsoftJsonPatchInputFormatter extends Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class NewtonsoftJsonPatchInputFormatter&#xA;Inherits NewtonsoftJsonInputFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class NewtonsoftJsonPatchInputFormatter : Microsoft::AspNetCore::Mvc::Formatters::NewtonsoftJsonInputFormatter" />
  <TypeSignature Language="F#" Value="type NewtonsoftJsonPatchInputFormatter = class&#xA;    inherit NewtonsoftJsonInputFormatter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.NewtonsoftJson</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NewtonsoftJsonPatchInputFormatter (Microsoft.Extensions.Logging.ILogger logger, Newtonsoft.Json.JsonSerializerSettings serializerSettings, System.Buffers.ArrayPool&lt;char&gt; charPool, Microsoft.Extensions.ObjectPool.ObjectPoolProvider objectPoolProvider, Microsoft.AspNetCore.Mvc.MvcOptions options, Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions jsonOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Logging.ILogger logger, class Newtonsoft.Json.JsonSerializerSettings serializerSettings, class System.Buffers.ArrayPool`1&lt;char&gt; charPool, class Microsoft.Extensions.ObjectPool.ObjectPoolProvider objectPoolProvider, class Microsoft.AspNetCore.Mvc.MvcOptions options, class Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions jsonOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter.#ctor(Microsoft.Extensions.Logging.ILogger,Newtonsoft.Json.JsonSerializerSettings,System.Buffers.ArrayPool{System.Char},Microsoft.Extensions.ObjectPool.ObjectPoolProvider,Microsoft.AspNetCore.Mvc.MvcOptions,Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logger As ILogger, serializerSettings As JsonSerializerSettings, charPool As ArrayPool(Of Char), objectPoolProvider As ObjectPoolProvider, options As MvcOptions, jsonOptions As MvcNewtonsoftJsonOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NewtonsoftJsonPatchInputFormatter(Microsoft::Extensions::Logging::ILogger ^ logger, Newtonsoft::Json::JsonSerializerSettings ^ serializerSettings, System::Buffers::ArrayPool&lt;char&gt; ^ charPool, Microsoft::Extensions::ObjectPool::ObjectPoolProvider ^ objectPoolProvider, Microsoft::AspNetCore::Mvc::MvcOptions ^ options, Microsoft::AspNetCore::Mvc::MvcNewtonsoftJsonOptions ^ jsonOptions);" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter : Microsoft.Extensions.Logging.ILogger * Newtonsoft.Json.JsonSerializerSettings * System.Buffers.ArrayPool&lt;char&gt; * Microsoft.Extensions.ObjectPool.ObjectPoolProvider * Microsoft.AspNetCore.Mvc.MvcOptions * Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions -&gt; Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter" Usage="new Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter (logger, serializerSettings, charPool, objectPoolProvider, options, jsonOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.NewtonsoftJson</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" />
        <Parameter Name="serializerSettings" Type="Newtonsoft.Json.JsonSerializerSettings" />
        <Parameter Name="charPool" Type="System.Buffers.ArrayPool&lt;System.Char&gt;" />
        <Parameter Name="objectPoolProvider" Type="Microsoft.Extensions.ObjectPool.ObjectPoolProvider" />
        <Parameter Name="options" Type="Microsoft.AspNetCore.Mvc.MvcOptions" />
        <Parameter Name="jsonOptions" Type="Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions" />
      </Parameters>
      <Docs>
        <param name="logger">To be added.</param>
        <param name="serializerSettings">To be added.</param>
        <param name="charPool">To be added.</param>
        <param name="objectPoolProvider">To be added.</param>
        <param name="options">To be added.</param>
        <param name="jsonOptions">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead (Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanRead(class Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter.CanRead(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanRead (context As InputFormatterContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanRead(Microsoft::AspNetCore::Mvc::Formatters::InputFormatterContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.CanRead : Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext -&gt; bool" Usage="newtonsoftJsonPatchInputFormatter.CanRead context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.NewtonsoftJson</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionPolicy">
      <MemberSignature Language="C#" Value="public override Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy ExceptionPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy ExceptionPolicy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter.ExceptionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ExceptionPolicy As InputFormatterExceptionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::AspNetCore::Mvc::Formatters::InputFormatterExceptionPolicy ExceptionPolicy { Microsoft::AspNetCore::Mvc::Formatters::InputFormatterExceptionPolicy get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionPolicy : Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy" Usage="Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter.ExceptionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.NewtonsoftJson</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadRequestBodyAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult&gt; ReadRequestBodyAsync (Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext context, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult&gt; ReadRequestBodyAsync(class Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext context, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadRequestBodyAsync (context As InputFormatterContext, encoding As Encoding) As Task(Of InputFormatterResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Mvc::Formatters::InputFormatterResult ^&gt; ^ ReadRequestBodyAsync(Microsoft::AspNetCore::Mvc::Formatters::InputFormatterContext ^ context, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="override this.ReadRequestBodyAsync : Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext * System.Text.Encoding -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult&gt;" Usage="newtonsoftJsonPatchInputFormatter.ReadRequestBodyAsync (context, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.NewtonsoftJson</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="encoding">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
