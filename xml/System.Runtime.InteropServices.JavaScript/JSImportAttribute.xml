<Type Name="JSImportAttribute" FullName="System.Runtime.InteropServices.JavaScript.JSImportAttribute">
  <TypeSignature Language="C#" Value="public sealed class JSImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JSImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.JavaScript.JSImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JSImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type JSImportAttribute = class&#xA;    inherit Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class JSImportAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices.JavaScript</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=false)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("browser")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("browser")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indicates that the JSImport source generator should create a managed wrapper to invoke a specific imported JavaScript function and marshal its arguments, return values, and exceptions.</summary>
    <remarks>
      <para>To configure the marshalling behavior for specific values, <see cref="T:System.Runtime.InteropServices.JavaScript.JSMarshalAsAttribute`1" />.</para>
      <para>This attribute is meaningless if the source generator associated with it is not enabled.</para>
      <para>The current built-in source generator only supports C# and only supplies an implementation when applied to static, partial, non-generic methods.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JSImportAttribute (string functionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string functionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.JavaScript.JSImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (functionName As String)" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.JavaScript.JSImportAttribute : string -&gt; System.Runtime.InteropServices.JavaScript.JSImportAttribute" Usage="new System.Runtime.InteropServices.JavaScript.JSImportAttribute functionName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JSImportAttribute(System::String ^ functionName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.JavaScript</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="functionName">The name of the function to be bound in the module. Use dots for nested objects.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.JavaScript.JSImportAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JSImportAttribute (string functionName, string moduleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string functionName, string moduleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.JavaScript.JSImportAttribute.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (functionName As String, moduleName As String)" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.JavaScript.JSImportAttribute : string * string -&gt; System.Runtime.InteropServices.JavaScript.JSImportAttribute" Usage="new System.Runtime.InteropServices.JavaScript.JSImportAttribute (functionName, moduleName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JSImportAttribute(System::String ^ functionName, System::String ^ moduleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.JavaScript</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="moduleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="functionName">The name of the target JavaScript function. This name will be used as a key to locate the function in the module.
            Functions nested inside of objects can be referred to by using the dot operator to connect one or more names.</param>
        <param name="moduleName">Globally unique identifier of the ES6 module, if any, that contains the function. The module must be loaded via <see cref="M:System.Runtime.InteropServices.JavaScript.JSHost.ImportAsync(System.String,System.String,System.Threading.CancellationToken)" /> before any attempt to invoke the function.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.JavaScript.JSImportAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionName">
      <MemberSignature Language="C#" Value="public string FunctionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FunctionName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.JavaScript.JSImportAttribute.FunctionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FunctionName As String" />
      <MemberSignature Language="F#" Value="member this.FunctionName : string" Usage="System.Runtime.InteropServices.JavaScript.JSImportAttribute.FunctionName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FunctionName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.JavaScript</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the target JavaScript function. This name will be used as a key to locate the function in the module.</summary>
        <value>To be added.</value>
        <remarks>Functions nested inside of objects can be referred to by using the dot operator to connect one or more names.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleName">
      <MemberSignature Language="C#" Value="public string? ModuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ModuleName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.JavaScript.JSImportAttribute.ModuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModuleName As String" />
      <MemberSignature Language="F#" Value="member this.ModuleName : string" Usage="System.Runtime.InteropServices.JavaScript.JSImportAttribute.ModuleName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ModuleName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.JavaScript</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the globally unique identifier of the ES6 module, if any, that contains the function. The module must be loaded via <see cref="M:System.Runtime.InteropServices.JavaScript.JSHost.ImportAsync(System.String,System.String,System.Threading.CancellationToken)" /> before any attempt to invoke the function.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
