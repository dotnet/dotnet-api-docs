<Type Name="CborReader" FullName="System.Formats.Cbor.CborReader">
  <TypeSignature Language="C#" Value="public class CborReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CborReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Formats.Cbor.CborReader" />
  <TypeSignature Language="VB.NET" Value="Public Class CborReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class CborReader" />
  <TypeSignature Language="F#" Value="type CborReader = class" />
  <AssemblyInfo>
    <AssemblyName>System.Formats.Cbor</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>A stateful, forward-only reader for Concise Binary Object Representation (CBOR) encoded data.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CborReader (ReadOnlyMemory&lt;byte&gt; data, System.Formats.Cbor.CborConformanceMode conformanceMode = System.Formats.Cbor.CborConformanceMode.Strict, bool allowMultipleRootLevelValues = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; data, valuetype System.Formats.Cbor.CborConformanceMode conformanceMode, bool allowMultipleRootLevelValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.#ctor(System.ReadOnlyMemory{System.Byte},System.Formats.Cbor.CborConformanceMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As ReadOnlyMemory(Of Byte), Optional conformanceMode As CborConformanceMode = System.Formats.Cbor.CborConformanceMode.Strict, Optional allowMultipleRootLevelValues As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Formats.Cbor.CborReader : ReadOnlyMemory&lt;byte&gt; * System.Formats.Cbor.CborConformanceMode * bool -&gt; System.Formats.Cbor.CborReader" Usage="new System.Formats.Cbor.CborReader (data, conformanceMode, allowMultipleRootLevelValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="conformanceMode" Type="System.Formats.Cbor.CborConformanceMode" />
        <Parameter Name="allowMultipleRootLevelValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="data">The CBOR encoded data to read.</param>
        <param name="conformanceMode">One of the enumeration values to specify a conformance mode guiding the checks performed on the encoded data.
              Defaults to <see cref="F:System.Formats.Cbor.CborConformanceMode.Strict" /> conformance mode.</param>
        <param name="allowMultipleRootLevelValues"><see langword="true" /> to indicate that multiple root-level values are supported by the reader; otherwise, <see langword="false" />.</param>
        <summary>Initializes a <see cref="T:System.Formats.Cbor.CborReader" /> instance over the specified <paramref name="data" /> with the given configuration.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="conformanceMode" /> is not defined.</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowMultipleRootLevelValues">
      <MemberSignature Language="C#" Value="public bool AllowMultipleRootLevelValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultipleRootLevelValues" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Cbor.CborReader.AllowMultipleRootLevelValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowMultipleRootLevelValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowMultipleRootLevelValues { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultipleRootLevelValues : bool" Usage="System.Formats.Cbor.CborReader.AllowMultipleRootLevelValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this reader allows multiple root-level CBOR data items.</summary>
        <value><see langword="true"/> if this reader allows multiple root-level CBOR data items; <see langword="false"/> otherwise.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesRemaining">
      <MemberSignature Language="C#" Value="public int BytesRemaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesRemaining" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Cbor.CborReader.BytesRemaining" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesRemaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesRemaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesRemaining : int" Usage="System.Formats.Cbor.CborReader.BytesRemaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the total number of unread bytes in the buffer.</summary>
        <value>The total number of unread bytes in the buffer.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceMode">
      <MemberSignature Language="C#" Value="public System.Formats.Cbor.CborConformanceMode ConformanceMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Formats.Cbor.CborConformanceMode ConformanceMode" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Cbor.CborReader.ConformanceMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConformanceMode As CborConformanceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Formats::Cbor::CborConformanceMode ConformanceMode { System::Formats::Cbor::CborConformanceMode get(); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceMode : System.Formats.Cbor.CborConformanceMode" Usage="System.Formats.Cbor.CborReader.ConformanceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Cbor.CborConformanceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the conformance mode used by this reader.</summary>
        <value>One of the enumeration values that represents the conformance mode used by this reader.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Cbor.CborReader.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Formats.Cbor.CborReader.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the reader's current level of nestedness in the CBOR document.</summary>
        <value>A number that represents the current level of nestedness in the CBOR document.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PeekState">
      <MemberSignature Language="C#" Value="public System.Formats.Cbor.CborReaderState PeekState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Formats.Cbor.CborReaderState PeekState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.PeekState" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekState () As CborReaderState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Formats::Cbor::CborReaderState PeekState();" />
      <MemberSignature Language="F#" Value="member this.PeekState : unit -&gt; System.Formats.Cbor.CborReaderState" Usage="cborReader.PeekState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Cbor.CborReaderState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next CBOR token, without advancing the reader.</summary>
        <returns>An object that represents the current CBOR reader state.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Cbor.CborContentException">The underlying data is not a well-formed CBOR encoding.</exception>
      </Docs>
    </Member>
    <Member MemberName="PeekTag">
      <MemberSignature Language="C#" Value="public System.Formats.Cbor.CborTag PeekTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Formats.Cbor.CborTag PeekTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.PeekTag" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekTag () As CborTag" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Formats::Cbor::CborTag PeekTag();" />
      <MemberSignature Language="F#" Value="member this.PeekTag : unit -&gt; System.Formats.Cbor.CborTag" Usage="cborReader.PeekTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Formats.Cbor.CborTag</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a semantic tag (major type 6), without advancing the reader.</summary>
        <returns>The decoded value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Useful in scenarios where the semantic value decoder needs to be determined at run time.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBigInteger">
      <MemberSignature Language="C#" Value="public System.Numerics.BigInteger ReadBigInteger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.BigInteger ReadBigInteger() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadBigInteger" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBigInteger () As BigInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Numerics::BigInteger ReadBigInteger();" />
      <MemberSignature Language="F#" Value="member this.ReadBigInteger : unit -&gt; System.Numerics.BigInteger" Usage="cborReader.ReadBigInteger " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a tagged bignum encoding, as described in RFC7049 section 2.4.2.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next date item does not have the correct semantic tag.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

Invalid semantic bignum encoding.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBoolean">
      <MemberSignature Language="C#" Value="public bool ReadBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReadBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReadBoolean();" />
      <MemberSignature Language="F#" Value="member this.ReadBoolean : unit -&gt; bool" Usage="cborReader.ReadBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a boolean value (major type 7).</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next simple value is not a boolean encoding</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByteString">
      <MemberSignature Language="C#" Value="public byte[] ReadByteString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ReadByteString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadByteString" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadByteString () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ReadByteString();" />
      <MemberSignature Language="F#" Value="member this.ReadByteString : unit -&gt; byte[]" Usage="cborReader.ReadByteString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a byte string (major type 2).</summary>
        <returns>The decoded byte array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The method accepts indefinite length strings, which it concatenates to a single string.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The next date item does not have the correct major type.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCborNegativeIntegerRepresentation">
      <MemberSignature Language="C#" Value="public ulong ReadCborNegativeIntegerRepresentation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 ReadCborNegativeIntegerRepresentation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadCborNegativeIntegerRepresentation" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCborNegativeIntegerRepresentation () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 ReadCborNegativeIntegerRepresentation();" />
      <MemberSignature Language="F#" Value="member this.ReadCborNegativeIntegerRepresentation : unit -&gt; uint64" Usage="cborReader.ReadCborNegativeIntegerRepresentation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a CBOR negative integer representation (major type 1).</summary>
        <returns>An unsigned integer denoting -1 minus the integer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method supports decoding integers between -18446744073709551616 and -1.
              Useful for handling values that do not fit in the <xref:System.Int64> type.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.OverflowException">The encoded integer is out of range for <see cref="T:System.UInt32" /></exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDateTimeOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ReadDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ReadDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadDateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDateTimeOffset () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ReadDateTimeOffset();" />
      <MemberSignature Language="F#" Value="member this.ReadDateTimeOffset : unit -&gt; DateTimeOffset" Usage="cborReader.ReadDateTimeOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a tagged date/time string, as described in RFC7049 section 2.4.1.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next date item does not have the correct semantic tag.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

Invalid semantic date/time encoding.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDecimal">
      <MemberSignature Language="C#" Value="public decimal ReadDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal ReadDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Decimal ReadDecimal();" />
      <MemberSignature Language="F#" Value="member this.ReadDecimal : unit -&gt; decimal" Usage="cborReader.ReadDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a tagged decimal fraction encoding, as described in RFC7049 section 2.4.3.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next date item does not have the correct semantic tag.</exception>
        <exception cref="T:System.OverflowException">Decoded decimal fraction is either too large or too small for a <see cref="T:System.Decimal" /> value.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

Invalid semantic decimal fraction encoding.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDefiniteLengthByteString">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt; ReadDefiniteLengthByteString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; ReadDefiniteLengthByteString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadDefiniteLengthByteString" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDefiniteLengthByteString () As ReadOnlyMemory(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyMemory&lt;System::Byte&gt; ReadDefiniteLengthByteString();" />
      <MemberSignature Language="F#" Value="member this.ReadDefiniteLengthByteString : unit -&gt; ReadOnlyMemory&lt;byte&gt;" Usage="cborReader.ReadDefiniteLengthByteString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a definite-length byte string (major type 2).</summary>
        <returns>A <see cref="T:System.ReadOnlyMemory`1" /> view of the byte string payload.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The data item is an indefinite-length byte string.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDefiniteLengthTextStringBytes">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt; ReadDefiniteLengthTextStringBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; ReadDefiniteLengthTextStringBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadDefiniteLengthTextStringBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDefiniteLengthTextStringBytes () As ReadOnlyMemory(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyMemory&lt;System::Byte&gt; ReadDefiniteLengthTextStringBytes();" />
      <MemberSignature Language="F#" Value="member this.ReadDefiniteLengthTextStringBytes : unit -&gt; ReadOnlyMemory&lt;byte&gt;" Usage="cborReader.ReadDefiniteLengthTextStringBytes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a definite-length UTF-8 text string (major type 3).</summary>
        <returns>A <see cref="T:System.ReadOnlyMemory`1" /> view of the raw UTF-8 payload.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The data item is an indefinite-length text string.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadDouble">
      <MemberSignature Language="C#" Value="public double ReadDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ReadDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadDouble" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ReadDouble();" />
      <MemberSignature Language="F#" Value="member this.ReadDouble : unit -&gt; double" Usage="cborReader.ReadDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a double-precision floating point number (major type 7).</summary>
        <returns>The decoded <see cref="T:System.Double" /> value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next simple value is not a floating-point number encoding</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEncodedValue">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt; ReadEncodedValue (bool disableConformanceModeChecks = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; ReadEncodedValue(bool disableConformanceModeChecks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadEncodedValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEncodedValue (Optional disableConformanceModeChecks As Boolean = false) As ReadOnlyMemory(Of Byte)" />
      <MemberSignature Language="F#" Value="member this.ReadEncodedValue : bool -&gt; ReadOnlyMemory&lt;byte&gt;" Usage="cborReader.ReadEncodedValue disableConformanceModeChecks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disableConformanceModeChecks" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disableConformanceModeChecks"><see langword="true" /> to disable conformance mode validation for the read value, equivalent to using <see cref="F:System.Formats.Cbor.CborConformanceMode.Lax" />; otherwise, <see langword="false" />.</param>
        <summary>Reads the next CBOR data item, returning a <see cref="T:System.ReadOnlyMemory`1" /> view of the encoded value. For indefinite length encodings this includes the break byte.</summary>
        <returns>A view of the encoded value as a contiguous region of memory.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Cbor.CborContentException">The data item is not a valid CBOR data item encoding.

-or-

The CBOR encoding is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEndArray">
      <MemberSignature Language="C#" Value="public void ReadEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadEndArray();" />
      <MemberSignature Language="F#" Value="member this.ReadEndArray : unit -&gt; unit" Usage="cborReader.ReadEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the end of an array (major type 4).</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The current context is not an array.

-or-

The reader is not at the end of the array.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEndIndefiniteLengthByteString">
      <MemberSignature Language="C#" Value="public void ReadEndIndefiniteLengthByteString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadEndIndefiniteLengthByteString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadEndIndefiniteLengthByteString" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadEndIndefiniteLengthByteString ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadEndIndefiniteLengthByteString();" />
      <MemberSignature Language="F#" Value="member this.ReadEndIndefiniteLengthByteString : unit -&gt; unit" Usage="cborReader.ReadEndIndefiniteLengthByteString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends reading an indefinite-length byte string (major type 2).</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The current context is not an indefinite-length string.

-or-

The reader is not at the end of the string.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">There was an unexpected end of CBOR encoding data.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEndIndefiniteLengthTextString">
      <MemberSignature Language="C#" Value="public void ReadEndIndefiniteLengthTextString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadEndIndefiniteLengthTextString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadEndIndefiniteLengthTextString" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadEndIndefiniteLengthTextString ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadEndIndefiniteLengthTextString();" />
      <MemberSignature Language="F#" Value="member this.ReadEndIndefiniteLengthTextString : unit -&gt; unit" Usage="cborReader.ReadEndIndefiniteLengthTextString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends reading an indefinite-length UTF-8 text string (major type 3).</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The current context is not an indefinite-length string.

-or-

The reader is not at the end of the string.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">There was an unexpected end of CBOR encoding data.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEndMap">
      <MemberSignature Language="C#" Value="public void ReadEndMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadEndMap() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadEndMap" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadEndMap ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadEndMap();" />
      <MemberSignature Language="F#" Value="member this.ReadEndMap : unit -&gt; unit" Usage="cborReader.ReadEndMap " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the end of a map (major type 5).</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The current context is not a map.

-or-

The reader is not at the end of the map.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadHalf">
      <MemberSignature Language="C#" Value="public Half ReadHalf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Half ReadHalf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadHalf" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadHalf () As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Half ReadHalf();" />
      <MemberSignature Language="F#" Value="member this.ReadHalf : unit -&gt; Half" Usage="cborReader.ReadHalf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a half-precision floating point number (major type 7).</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next simple value is not a floating-point number encoding.

-or-

The encoded value is a double-precision float.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt32">
      <MemberSignature Language="C#" Value="public int ReadInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadInt32();" />
      <MemberSignature Language="F#" Value="member this.ReadInt32 : unit -&gt; int" Usage="cborReader.ReadInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a signed integer (major types 0,1)</summary>
        <returns>The decoded integer value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.OverflowException">The encoded integer is out of range for <see cref="T:System.Int32" />.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInt64">
      <MemberSignature Language="C#" Value="public long ReadInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ReadInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ReadInt64();" />
      <MemberSignature Language="F#" Value="member this.ReadInt64 : unit -&gt; int64" Usage="cborReader.ReadInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a signed integer (major types 0,1)</summary>
        <returns>The decoded integer value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.OverflowException">The encoded integer is out of range for <see cref="T:System.Int64" />.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadNull">
      <MemberSignature Language="C#" Value="public void ReadNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadNull();" />
      <MemberSignature Language="F#" Value="member this.ReadNull : unit -&gt; unit" Usage="cborReader.ReadNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a <see langword="null" /> value (major type 7).</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next simple value is not a <see langword="null" /> value encoding.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSimpleValue">
      <MemberSignature Language="C#" Value="public System.Formats.Cbor.CborSimpleValue ReadSimpleValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Formats.Cbor.CborSimpleValue ReadSimpleValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadSimpleValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadSimpleValue () As CborSimpleValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Formats::Cbor::CborSimpleValue ReadSimpleValue();" />
      <MemberSignature Language="F#" Value="member this.ReadSimpleValue : unit -&gt; System.Formats.Cbor.CborSimpleValue" Usage="cborReader.ReadSimpleValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Cbor.CborSimpleValue</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a CBOR simple value (major type 7).</summary>
        <returns>The decoded CBOR simple value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next simple value is not a simple value encoding.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSingle">
      <MemberSignature Language="C#" Value="public float ReadSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 ReadSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadSingle" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float ReadSingle();" />
      <MemberSignature Language="F#" Value="member this.ReadSingle : unit -&gt; single" Usage="cborReader.ReadSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a single-precision floating point number (major type 7).</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next simple value is not a floating-point number encoding.

-or-

The encoded value is a double-precision float</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadStartArray">
      <MemberSignature Language="C#" Value="public int? ReadStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;int32&gt; ReadStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadStartArray () As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;int&gt; ReadStartArray();" />
      <MemberSignature Language="F#" Value="member this.ReadStartArray : unit -&gt; Nullable&lt;int&gt;" Usage="cborReader.ReadStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as the start of an array (major type 4).</summary>
        <returns>The length of the definite-length array, or <see langword="null" /> if the array is indefinite-length.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadStartIndefiniteLengthByteString">
      <MemberSignature Language="C#" Value="public void ReadStartIndefiniteLengthByteString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadStartIndefiniteLengthByteString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadStartIndefiniteLengthByteString" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadStartIndefiniteLengthByteString ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadStartIndefiniteLengthByteString();" />
      <MemberSignature Language="F#" Value="member this.ReadStartIndefiniteLengthByteString : unit -&gt; unit" Usage="cborReader.ReadStartIndefiniteLengthByteString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as the start of an indefinite-length byte string (major type 2).</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next data item is a definite-length encoded string.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadStartIndefiniteLengthTextString">
      <MemberSignature Language="C#" Value="public void ReadStartIndefiniteLengthTextString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadStartIndefiniteLengthTextString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadStartIndefiniteLengthTextString" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadStartIndefiniteLengthTextString ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadStartIndefiniteLengthTextString();" />
      <MemberSignature Language="F#" Value="member this.ReadStartIndefiniteLengthTextString : unit -&gt; unit" Usage="cborReader.ReadStartIndefiniteLengthTextString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as the start of an indefinite-length UTF-8 text string (major type 3).</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next data item is a definite-length encoded string.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadStartMap">
      <MemberSignature Language="C#" Value="public int? ReadStartMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;int32&gt; ReadStartMap() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadStartMap" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadStartMap () As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;int&gt; ReadStartMap();" />
      <MemberSignature Language="F#" Value="member this.ReadStartMap : unit -&gt; Nullable&lt;int&gt;" Usage="cborReader.ReadStartMap " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as the start of a map (major type 5).</summary>
        <returns>The number of key-value pairs in a definite-length map, or <see langword="null" /> if the map is indefinite-length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Map contents are consumed as if they were arrays twice the length of the map's declared size.
For instance, a map of size `1` containing a key of type `int` with a value of type `string` must be consumed by successive calls to <xref:System.Formats.Cbor.CborReader.ReadInt32> and <xref:System.Formats.Cbor.CborReader.ReadTextString>.
It is up to the caller to keep track of whether the next value is a key or a value.
Fundamentally, this is a technical restriction stemming from the fact that CBOR allows keys of arbitrary type, for instance a map can contain keys that are maps themselves.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTag">
      <MemberSignature Language="C#" Value="public System.Formats.Cbor.CborTag ReadTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Formats.Cbor.CborTag ReadTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadTag" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTag () As CborTag" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Formats::Cbor::CborTag ReadTag();" />
      <MemberSignature Language="F#" Value="member this.ReadTag : unit -&gt; System.Formats.Cbor.CborTag" Usage="cborReader.ReadTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Formats.Cbor.CborTag</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a semantic tag (major type 6).</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTextString">
      <MemberSignature Language="C#" Value="public string ReadTextString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadTextString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadTextString" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTextString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadTextString();" />
      <MemberSignature Language="F#" Value="member this.ReadTextString : unit -&gt; string" Usage="cborReader.ReadTextString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a UTF-8 text string (major type 3).</summary>
        <returns>The decoded string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The method accepts indefinite length strings, which it will concatenate to a single string.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt32">
      <MemberSignature Language="C#" Value="public uint ReadUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 ReadUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 ReadUInt32();" />
      <MemberSignature Language="F#" Value="member this.ReadUInt32 : unit -&gt; uint32" Usage="cborReader.ReadUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as an unsigned integer (major type 0).</summary>
        <returns>The decoded integer value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.OverflowException">The encoded integer is out of range for <see cref="T:System.UInt32" />.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt64">
      <MemberSignature Language="C#" Value="public ulong ReadUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 ReadUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 ReadUInt64();" />
      <MemberSignature Language="F#" Value="member this.ReadUInt64 : unit -&gt; uint64" Usage="cborReader.ReadUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as an unsigned integer (major type 0).</summary>
        <returns>The decoded integer value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.OverflowException">The encoded integer is out of range for <see cref="T:System.UInt64" />.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset ReadUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ReadUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.ReadUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadUnixTimeSeconds () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ReadUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ReadUnixTimeSeconds : unit -&gt; DateTimeOffset" Usage="cborReader.ReadUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next data item as a tagged unix time in seconds, as described in RFC7049 section 2.4.1.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.

-or-

The next date item does not have the correct semantic tag.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

invalid semantic date/time encoding.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipToParent">
      <MemberSignature Language="C#" Value="public void SkipToParent (bool disableConformanceModeChecks = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToParent(bool disableConformanceModeChecks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.SkipToParent(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToParent (Optional disableConformanceModeChecks As Boolean = false)" />
      <MemberSignature Language="F#" Value="member this.SkipToParent : bool -&gt; unit" Usage="cborReader.SkipToParent disableConformanceModeChecks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disableConformanceModeChecks" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disableConformanceModeChecks"><see langword="true" /> to disable conformance mode validation for the skipped values, equivalent to using <see cref="F:System.Formats.Cbor.CborConformanceMode.Lax" />; otherwise, <see langword="false" />.</param>
        <summary>Reads the remaining contents of the current value context, discarding results and advancing the reader to the next value in the parent context.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The reader is at the root context</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipValue">
      <MemberSignature Language="C#" Value="public void SkipValue (bool disableConformanceModeChecks = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipValue(bool disableConformanceModeChecks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.SkipValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipValue (Optional disableConformanceModeChecks As Boolean = false)" />
      <MemberSignature Language="F#" Value="member this.SkipValue : bool -&gt; unit" Usage="cborReader.SkipValue disableConformanceModeChecks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disableConformanceModeChecks" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disableConformanceModeChecks"><see langword="true" /> to disable conformance mode validation for the skipped values, equivalent to using <see cref="F:System.Formats.Cbor.CborConformanceMode.Lax" />; otherwise, <see langword="false" />.</param>
        <summary>Reads the contents of the next value, discarding the result and advancing the reader.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The reader is not at the start of new value.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadByteString">
      <MemberSignature Language="C#" Value="public bool TryReadByteString (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadByteString(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.TryReadByteString(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadByteString (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReadByteString(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryReadByteString : Span&lt;byte&gt; * int -&gt; bool" Usage="cborReader.TryReadByteString (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer in which to write the read bytes.</param>
        <param name="bytesWritten">On success, receives the number of bytes written to <paramref name="destination" />.</param>
        <summary>Reads the next data item as a byte string (major type 2).</summary>
        <returns>
          <see langword="true" /> if <paramref name="destination" /> had sufficient length to receive the value and the reader advances; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The method accepts indefinite length strings, which it will concatenate to a single string.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadTextString">
      <MemberSignature Language="C#" Value="public bool TryReadTextString (Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadTextString(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborReader.TryReadTextString(System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadTextString (destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReadTextString(Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="member this.TryReadTextString : Span&lt;char&gt; * int -&gt; bool" Usage="cborReader.TryReadTextString (destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer in which to write.</param>
        <param name="charsWritten">On success, receives the number of chars written to <paramref name="destination" />.</param>
        <summary>Reads the next data item as a UTF-8 text string (major type 3).</summary>
        <returns>
          <see langword="true" /> and advances the reader if <paramref name="destination" /> had sufficient length to receive the value, otherwise <see langword="false" /> and the reader does not advance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The method accepts indefinite length strings, which it will concatenate to a single string.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The next data item does not have the correct major type.</exception>
        <exception cref="T:System.Formats.Cbor.CborContentException">The next value has an invalid CBOR encoding.

-or-

There was an unexpected end of CBOR encoding data.

-or-

The next value uses a CBOR encoding that is not valid under the current conformance mode.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
