<Type Name="DynamicUpdateMapQuery" FullName="System.Activities.DynamicUpdate.DynamicUpdateMapQuery">
  <TypeSignature Language="C#" Value="public class DynamicUpdateMapQuery" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicUpdateMapQuery extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicUpdateMapQuery" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicUpdateMapQuery" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a dynamic update map query.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This class supports the versioning and dynamic update functionality of Windows Workflow Foundation. For more information about workflow versioning, workflow identity, and dynamic update, see the following topics.  
  
 [Workflow Versioning](http://go.microsoft.com/fwlink/?LinkID=271561)  
 Describes the workflow versioning functionality introduced in [!INCLUDE[net_v45](~/includes/net-v45-md.md)].  
  
 [Dynamic Update](http://go.microsoft.com/fwlink/?LinkId=271563)  
 Describes how to update the workflow definition of a persisted workflow instance by using dynamic update.  
  
 [Using WorkflowApplication Identity and Versioning](http://go.microsoft.com/fwlink/?LinkId=271564)  
 Describes how to use <xref:System.Activities.WorkflowIdentity> to host multiple versions of a workflow side-by-side.  
  
 [Side by Side Versioning in WorkflowServiceHost](http://go.microsoft.com/fwlink/?LinkId=271565)  
 Describes how to host multiple versions of a workflow on a single endpoint.  
  
 [How to: Host Multiple Versions of a Workflow Side-by-Side](http://go.microsoft.com/fwlink/?LinkId=271566)  
 This step in the [Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkId=271570) demonstrates updating a workflow definition, and hosting workflows using both the old and new definition at the same time.  
  
 [How to: Update the Definition of a Running Workflow Instance](http://go.microsoft.com/fwlink/?LinkId=271567)  
 This step in the [Getting Started Tutorial](http://go.microsoft.com/fwlink/?LinkId=271570) demonstrates updating persisted workflow instances to use a new workflow definition.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanApplyUpdateWhileRunning">
      <MemberSignature Language="C#" Value="public bool CanApplyUpdateWhileRunning (System.Activities.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanApplyUpdateWhileRunning(class System.Activities.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.DynamicUpdate.DynamicUpdateMapQuery.CanApplyUpdateWhileRunning(System.Activities.Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanApplyUpdateWhileRunning(System::Activities::Activity ^ activity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">The current activity.</param>
        <summary>Specifies whether the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> can update while running.</summary>
        <returns>
          <see langword="True" /> if the <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> can update while running; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindMatch">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Searches for the match with <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindMatch">
      <MemberSignature Language="C#" Value="public System.Activities.Activity FindMatch (System.Activities.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Activities.Activity FindMatch(class System.Activities.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.DynamicUpdate.DynamicUpdateMapQuery.FindMatch(System.Activities.Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Activities::Activity ^ FindMatch(System::Activities::Activity ^ activity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">The activity to be searched for a match.</param>
        <summary>Searches for the match with <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> using the specified activities.</summary>
        <returns>The match for the activity.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMatch">
      <MemberSignature Language="C#" Value="public System.Activities.Variable FindMatch (System.Activities.Variable variable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Activities.Variable FindMatch(class System.Activities.Variable variable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.DynamicUpdate.DynamicUpdateMapQuery.FindMatch(System.Activities.Variable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Activities::Variable ^ FindMatch(System::Activities::Variable ^ variable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Variable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Activities.Variable" />
      </Parameters>
      <Docs>
        <param name="variable">The variable to be searched for a match.</param>
        <summary>Searches for the match with <see cref="T:System.Activities.DynamicUpdate.DynamicUpdateMapQuery" /> using the specified variable.</summary>
        <returns>The match for the variable.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>