<Type Name="X509CertificateLoader" FullName="System.Security.Cryptography.X509Certificates.X509CertificateLoader">
  <TypeSignature Language="C#" Value="public static class X509CertificateLoader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit X509CertificateLoader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.X509Certificates.X509CertificateLoader" />
  <TypeSignature Language="VB.NET" Value="Public Class X509CertificateLoader" />
  <TypeSignature Language="F#" Value="type X509CertificateLoader = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class X509CertificateLoader abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="Microsoft.Bcl.Cryptography" FromVersion="9.0.0.0" To="System.Security.Cryptography" ToVersion="9.0.0.0" FrameworkAlternate="net-9.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("browser")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("browser")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="LoadCertificate">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2 LoadCertificate (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2 LoadCertificate(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadCertificate(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadCertificate (data As Byte()) As X509Certificate2" />
      <MemberSignature Language="F#" Value="static member LoadCertificate : byte[] -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadCertificate data" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::X509Certificates::X509Certificate2 ^ LoadCertificate(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">The data to load.</param>
        <summary>
              Loads a single X.509 certificate from <paramref name="data" />, in either the PEM
              or DER encoding.
            </summary>
        <returns>
              The certificate loaded from <paramref name="data" />.
            </returns>
        <remarks>
              This method only loads plain certificates, which are identified as
              <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert" /> by <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])" /></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              The data did not load as a valid X.509 certificate.
            </exception>
        <altmember cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LoadCertificate">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2 LoadCertificate (ReadOnlySpan&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2 LoadCertificate(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadCertificate(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadCertificate (data As ReadOnlySpan(Of Byte)) As X509Certificate2" />
      <MemberSignature Language="F#" Value="static member LoadCertificate : ReadOnlySpan&lt;byte&gt; -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadCertificate data" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::X509Certificates::X509Certificate2 ^ LoadCertificate(ReadOnlySpan&lt;System::Byte&gt; data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The data to load.</param>
        <summary>
              Loads a single X.509 certificate from <paramref name="data" />, in either the PEM
              or DER encoding.
            </summary>
        <returns>
              The certificate loaded from <paramref name="data" />.
            </returns>
        <remarks>
              This method only loads plain certificates, which are identified as
              <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert" /> by <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])" /></remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              The data did not load as a valid X.509 certificate.
            </exception>
        <altmember cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LoadCertificateFromFile">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2 LoadCertificateFromFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2 LoadCertificateFromFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadCertificateFromFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadCertificateFromFile (path As String) As X509Certificate2" />
      <MemberSignature Language="F#" Value="static member LoadCertificateFromFile : string -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadCertificateFromFile path" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::X509Certificates::X509Certificate2 ^ LoadCertificateFromFile(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the file to open.</param>
        <summary>
              Loads a single X.509 certificate (in either the PEM or DER encoding)
              from the specified file.
            </summary>
        <returns>
              The loaded certificate.
            </returns>
        <remarks>
              This method only loads plain certificates, which are identified as
              <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert" /> by <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)" /></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              The data did not load as a valid X.509 certificate.
            </exception>
        <exception cref="T:System.IO.IOException">
              An error occurred while loading the specified file.
            </exception>
        <altmember cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LoadPkcs12">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2 LoadPkcs12 (byte[] data, string? password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits? loaderLimits = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2 LoadPkcs12(unsigned int8[] data, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, class System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits loaderLimits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPkcs12 (data As Byte(), password As String, Optional keyStorageFlags As X509KeyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, Optional loaderLimits As Pkcs12LoaderLimits = Nothing) As X509Certificate2" />
      <MemberSignature Language="F#" Value="static member LoadPkcs12 : byte[] * string * System.Security.Cryptography.X509Certificates.X509KeyStorageFlags * System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12 (data, password, keyStorageFlags, loaderLimits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
        <Parameter Name="loaderLimits" Type="System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">The data to load.</param>
        <param name="password">The password to decrypt the contents of the PFX.</param>
        <param name="keyStorageFlags">
              A bitwise combination of the enumeration values that control where and how to
              import the private key associated with the returned certificate.
            </param>
        <param name="loaderLimits">
              Limits to apply when loading the PFX.  A <see langword="null" /> value, the default,
              is equivalent to <see cref="P:System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits.Defaults" />.
            </param>
        <summary>
              Loads the provided data as a PKCS#12 PFX and extracts a certificate.
            </summary>
        <returns>The loaded certificate.</returns>
        <remarks>
              A PKCS#12/PFX can contain multiple certificates.
              Using the ordering that the certificates appear in the results of
              <see cref="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12Collection(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />,
              this method returns the first
              certificate where <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> is
              <see langword="true" />.
              If no certificates have associated private keys, then the first
              certificate is returned.
              If the PKCS#12/PFX contains no certificates, a
              <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyStorageFlags" /> contains a value, or combination of values,
              that is not valid.
            </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="keyStorageFlags" /> contains a value that is not valid for the
              current platform.
            </exception>
        <exception cref="T:System.Security.Cryptography.X509Certificates.Pkcs12LoadLimitExceededException">
              The PKCS#12/PFX violated one or more constraints of <paramref name="loaderLimits" />.
            </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              An error occurred while loading the PKCS#12/PFX.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LoadPkcs12">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2 LoadPkcs12 (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits? loaderLimits = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2 LoadPkcs12(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, class System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits loaderLimits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPkcs12 (data As ReadOnlySpan(Of Byte), password As ReadOnlySpan(Of Char), Optional keyStorageFlags As X509KeyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, Optional loaderLimits As Pkcs12LoaderLimits = Nothing) As X509Certificate2" />
      <MemberSignature Language="F#" Value="static member LoadPkcs12 : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.X509Certificates.X509KeyStorageFlags * System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12 (data, password, keyStorageFlags, loaderLimits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
        <Parameter Name="loaderLimits" Type="System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">The data to load.</param>
        <param name="password">The password to decrypt the contents of the PFX.</param>
        <param name="keyStorageFlags">
              A bitwise combination of the enumeration values that control where and how to
              import the private key associated with the returned certificate.
            </param>
        <param name="loaderLimits">
              Limits to apply when loading the PFX.  A <see langword="null" /> value, the default,
              is equivalent to <see cref="P:System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits.Defaults" />.
            </param>
        <summary>
              Loads the provided data as a PKCS#12 PFX and extracts a certificate.
            </summary>
        <returns>The loaded certificate.</returns>
        <remarks>
              A PKCS#12/PFX can contain multiple certificates.
              Using the ordering that the certificates appear in the results of
              <see cref="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12Collection(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />,
              this method returns the first
              certificate where <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> is
              <see langword="true" />.
              If no certificates have associated private keys, then the first
              certificate is returned.
              If the PKCS#12/PFX contains no certificates, a
              <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyStorageFlags" /> contains a value, or combination of values,
              that is not valid.
            </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="keyStorageFlags" /> contains a value that is not valid for the
              current platform.
            </exception>
        <exception cref="T:System.Security.Cryptography.X509Certificates.Pkcs12LoadLimitExceededException">
              The PKCS#12/PFX violated one or more constraints of <paramref name="loaderLimits" />.
            </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              An error occurred while loading the PKCS#12/PFX.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LoadPkcs12Collection">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2Collection LoadPkcs12Collection (byte[] data, string? password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits? loaderLimits = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2Collection LoadPkcs12Collection(unsigned int8[] data, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, class System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits loaderLimits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12Collection(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPkcs12Collection (data As Byte(), password As String, Optional keyStorageFlags As X509KeyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, Optional loaderLimits As Pkcs12LoaderLimits = Nothing) As X509Certificate2Collection" />
      <MemberSignature Language="F#" Value="static member LoadPkcs12Collection : byte[] * string * System.Security.Cryptography.X509Certificates.X509KeyStorageFlags * System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2Collection" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12Collection (data, password, keyStorageFlags, loaderLimits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2Collection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
        <Parameter Name="loaderLimits" Type="System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">The data to load.</param>
        <param name="password">The password to decrypt the contents of the PFX.</param>
        <param name="keyStorageFlags">
              A bitwise combination of the enumeration values that control where and how to
              import the private key associated with the returned certificate.
            </param>
        <param name="loaderLimits">
              Limits to apply when loading the PFX.  A <see langword="null" /> value, the default,
              is equivalent to <see cref="P:System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits.Defaults" />.
            </param>
        <summary>
              Loads the provided data as a PKCS#12 PFX and returns a collection of
              all of the certificates therein.
            </summary>
        <returns>A collection of the certificates loaded from the input.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyStorageFlags" /> contains a value, or combination of values,
              that is not valid.
            </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="keyStorageFlags" /> contains a value that is not valid for the
              current platform.
            </exception>
        <exception cref="T:System.Security.Cryptography.X509Certificates.Pkcs12LoadLimitExceededException">
              The PKCS#12/PFX violated one or more constraints of <paramref name="loaderLimits" />.
            </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              An error occurred while loading the PKCS#12/PFX.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LoadPkcs12Collection">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2Collection LoadPkcs12Collection (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits? loaderLimits = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2Collection LoadPkcs12Collection(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, class System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits loaderLimits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12Collection(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPkcs12Collection (data As ReadOnlySpan(Of Byte), password As ReadOnlySpan(Of Char), Optional keyStorageFlags As X509KeyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, Optional loaderLimits As Pkcs12LoaderLimits = Nothing) As X509Certificate2Collection" />
      <MemberSignature Language="F#" Value="static member LoadPkcs12Collection : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.X509Certificates.X509KeyStorageFlags * System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2Collection" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12Collection (data, password, keyStorageFlags, loaderLimits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2Collection</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
        <Parameter Name="loaderLimits" Type="System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">The data to load.</param>
        <param name="password">The password to decrypt the contents of the PFX.</param>
        <param name="keyStorageFlags">
              A bitwise combination of the enumeration values that control where and how to
              import the private key associated with the returned certificate.
            </param>
        <param name="loaderLimits">
              Limits to apply when loading the PFX.  A <see langword="null" /> value, the default,
              is equivalent to <see cref="P:System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits.Defaults" />.
            </param>
        <summary>
              Loads the provided data as a PKCS#12 PFX and returns a collection of
              all of the certificates therein.
            </summary>
        <returns>A collection of the certificates loaded from the input.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyStorageFlags" /> contains a value, or combination of values,
              that is not valid.
            </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="keyStorageFlags" /> contains a value that is not valid for the
              current platform.
            </exception>
        <exception cref="T:System.Security.Cryptography.X509Certificates.Pkcs12LoadLimitExceededException">
              The PKCS#12/PFX violated one or more constraints of <paramref name="loaderLimits" />.
            </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              An error occurred while loading the PKCS#12/PFX.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LoadPkcs12CollectionFromFile">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2Collection LoadPkcs12CollectionFromFile (string path, ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits? loaderLimits = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2Collection LoadPkcs12CollectionFromFile(string path, valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, class System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits loaderLimits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12CollectionFromFile(System.String,System.ReadOnlySpan{System.Char},System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPkcs12CollectionFromFile (path As String, password As ReadOnlySpan(Of Char), Optional keyStorageFlags As X509KeyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, Optional loaderLimits As Pkcs12LoaderLimits = Nothing) As X509Certificate2Collection" />
      <MemberSignature Language="F#" Value="static member LoadPkcs12CollectionFromFile : string * ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.X509Certificates.X509KeyStorageFlags * System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2Collection" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12CollectionFromFile (path, password, keyStorageFlags, loaderLimits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2Collection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
        <Parameter Name="loaderLimits" Type="System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">The path of the file to open.</param>
        <param name="password">The password to decrypt the contents of the PFX.</param>
        <param name="keyStorageFlags">
              A bitwise combination of the enumeration values that control where and how to
              import the private key associated with the returned certificate.
            </param>
        <param name="loaderLimits">
              Limits to apply when loading the PFX.  A <see langword="null" /> value, the default,
              is equivalent to <see cref="P:System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits.Defaults" />.
            </param>
        <summary>
              Opens the specified file, reads the contents as a PKCS#12 PFX and extracts a certificate.
              Loads the provided data as a PKCS#12 PFX and returns a collection of
              all of the certificates therein.
            </summary>
        <returns>
              The loaded certificate.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyStorageFlags" /> contains a value, or combination of values,
              that is not valid.
            </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="keyStorageFlags" /> contains a value that is not valid for the
              current platform.
            </exception>
        <exception cref="T:System.Security.Cryptography.X509Certificates.Pkcs12LoadLimitExceededException">
              The PKCS#12/PFX violated one or more constraints of <paramref name="loaderLimits" />.
            </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              An error occurred while loading the PKCS#12/PFX.
            </exception>
        <exception cref="T:System.IO.IOException">
              An error occurred while loading the specified file.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LoadPkcs12CollectionFromFile">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2Collection LoadPkcs12CollectionFromFile (string path, string? password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits? loaderLimits = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2Collection LoadPkcs12CollectionFromFile(string path, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, class System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits loaderLimits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12CollectionFromFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPkcs12CollectionFromFile (path As String, password As String, Optional keyStorageFlags As X509KeyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, Optional loaderLimits As Pkcs12LoaderLimits = Nothing) As X509Certificate2Collection" />
      <MemberSignature Language="F#" Value="static member LoadPkcs12CollectionFromFile : string * string * System.Security.Cryptography.X509Certificates.X509KeyStorageFlags * System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2Collection" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12CollectionFromFile (path, password, keyStorageFlags, loaderLimits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2Collection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="password" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
        <Parameter Name="loaderLimits" Type="System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">The path of the file to open.</param>
        <param name="password">The password to decrypt the contents of the PFX.</param>
        <param name="keyStorageFlags">
              A bitwise combination of the enumeration values that control where and how to
              import the private key associated with the returned certificate.
            </param>
        <param name="loaderLimits">
              Limits to apply when loading the PFX.  A <see langword="null" /> value, the default,
              is equivalent to <see cref="P:System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits.Defaults" />.
            </param>
        <summary>
              Opens the specified file, reads the contents as a PKCS#12 PFX and extracts a certificate.
              Loads the provided data as a PKCS#12 PFX and returns a collection of
              all of the certificates therein.
            </summary>
        <returns>
              The loaded certificate.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyStorageFlags" /> contains a value, or combination of values,
              that is not valid.
            </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="keyStorageFlags" /> contains a value that is not valid for the
              current platform.
            </exception>
        <exception cref="T:System.Security.Cryptography.X509Certificates.Pkcs12LoadLimitExceededException">
              The PKCS#12/PFX violated one or more constraints of <paramref name="loaderLimits" />.
            </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              An error occurred while loading the PKCS#12/PFX.
            </exception>
        <exception cref="T:System.IO.IOException">
              An error occurred while loading the specified file.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LoadPkcs12FromFile">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2 LoadPkcs12FromFile (string path, ReadOnlySpan&lt;char&gt; password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits? loaderLimits = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2 LoadPkcs12FromFile(string path, valuetype System.ReadOnlySpan`1&lt;char&gt; password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, class System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits loaderLimits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12FromFile(System.String,System.ReadOnlySpan{System.Char},System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPkcs12FromFile (path As String, password As ReadOnlySpan(Of Char), Optional keyStorageFlags As X509KeyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, Optional loaderLimits As Pkcs12LoaderLimits = Nothing) As X509Certificate2" />
      <MemberSignature Language="F#" Value="static member LoadPkcs12FromFile : string * ReadOnlySpan&lt;char&gt; * System.Security.Cryptography.X509Certificates.X509KeyStorageFlags * System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12FromFile (path, password, keyStorageFlags, loaderLimits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="password" Type="System.ReadOnlySpan&lt;System.Char&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
        <Parameter Name="loaderLimits" Type="System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">The path of the file to open.</param>
        <param name="password">The password to decrypt the contents of the PFX.</param>
        <param name="keyStorageFlags">
              A bitwise combination of the enumeration values that control where and how to
              import the private key associated with the returned certificate.
            </param>
        <param name="loaderLimits">
              Limits to apply when loading the PFX.  A <see langword="null" /> value, the default,
              is equivalent to <see cref="P:System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits.Defaults" />.
            </param>
        <summary>
              Opens the specified file, reads the contents as a PKCS#12 PFX and extracts a certificate.
            </summary>
        <returns>
              The loaded certificate.
            </returns>
        <remarks>
              A PKCS#12/PFX can contain multiple certificates.
              Using the ordering that the certificates appear in the results of
              <see cref="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12CollectionFromFile(System.String,System.ReadOnlySpan{System.Char},System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />,
              this method returns the first
              certificate where <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> is
              <see langword="true" />.
              If no certificates have associated private keys, then the first
              certificate is returned.
              If the PKCS#12/PFX contains no certificates, a
              <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyStorageFlags" /> contains a value, or combination of values,
              that is not valid.
            </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="keyStorageFlags" /> contains a value that is not valid for the
              current platform.
            </exception>
        <exception cref="T:System.Security.Cryptography.X509Certificates.Pkcs12LoadLimitExceededException">
              The PKCS#12/PFX violated one or more constraints of <paramref name="loaderLimits" />.
            </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              An error occurred while loading the PKCS#12/PFX.
            </exception>
        <exception cref="T:System.IO.IOException">
              An error occurred while loading the specified file.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LoadPkcs12FromFile">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2 LoadPkcs12FromFile (string path, string? password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits? loaderLimits = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2 LoadPkcs12FromFile(string path, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags, class System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits loaderLimits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12FromFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadPkcs12FromFile (path As String, password As String, Optional keyStorageFlags As X509KeyStorageFlags = System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet, Optional loaderLimits As Pkcs12LoaderLimits = Nothing) As X509Certificate2" />
      <MemberSignature Language="F#" Value="static member LoadPkcs12FromFile : string * string * System.Security.Cryptography.X509Certificates.X509KeyStorageFlags * System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2" Usage="System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12FromFile (path, password, keyStorageFlags, loaderLimits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="password" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
        <Parameter Name="loaderLimits" Type="System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">The path of the file to open.</param>
        <param name="password">The password to decrypt the contents of the PFX.</param>
        <param name="keyStorageFlags">
              A bitwise combination of the enumeration values that control where and how to
              import the private key associated with the returned certificate.
            </param>
        <param name="loaderLimits">
              Limits to apply when loading the PFX.  A <see langword="null" /> value, the default,
              is equivalent to <see cref="P:System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits.Defaults" />.
            </param>
        <summary>
              Opens the specified file, reads the contents as a PKCS#12 PFX and extracts a certificate.
            </summary>
        <returns>
              The loaded certificate.
            </returns>
        <remarks>
              A PKCS#12/PFX can contain multiple certificates.
              Using the ordering that the certificates appear in the results of
              <see cref="M:System.Security.Cryptography.X509Certificates.X509CertificateLoader.LoadPkcs12CollectionFromFile(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags,System.Security.Cryptography.X509Certificates.Pkcs12LoaderLimits)" />,
              this method returns the first
              certificate where <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> is
              <see langword="true" />.
              If no certificates have associated private keys, then the first
              certificate is returned.
              If the PKCS#12/PFX contains no certificates, a
              <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keyStorageFlags" /> contains a value, or combination of values,
              that is not valid.
            </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="keyStorageFlags" /> contains a value that is not valid for the
              current platform.
            </exception>
        <exception cref="T:System.Security.Cryptography.X509Certificates.Pkcs12LoadLimitExceededException">
              The PKCS#12/PFX violated one or more constraints of <paramref name="loaderLimits" />.
            </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
              An error occurred while loading the PKCS#12/PFX.
            </exception>
        <exception cref="T:System.IO.IOException">
              An error occurred while loading the specified file.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
