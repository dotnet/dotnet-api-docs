<Type Name="ValidatorCollection" FullName="System.Web.UI.ValidatorCollection">
  <TypeSignature Language="C#" Value="public sealed class ValidatorCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ValidatorCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ValidatorCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ValidatorCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValidatorCollection sealed : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type ValidatorCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Exposes an array of <see cref="T:System.Web.UI.IValidator" /> references. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each <xref:System.Web.UI.ValidatorCollection> reference is associated with a validation server control contained on the requested page. These controls add themselves to this collection when the <xref:System.Web.UI.Control.Init> event of the <xref:System.Web.UI.Page> object is handled. They remove themselves when the <xref:System.Web.UI.Control.Unload> event of the <xref:System.Web.UI.Page> object is handled. The <xref:System.Web.UI.Page> class inherits both of these methods from the <xref:System.Web.UI.Control> class.  
  
 You can access this collection, its methods, and its properties through the <xref:System.Web.UI.Page.Validators%2A?displayProperty=nameWithType> property. If the tested condition of any validator in this collection fails, the <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> property is set to `false`.  
  
   
  
## Examples  
 The following code example demonstrates how to access the collection through the <xref:System.Web.UI.Page.Validators%2A?displayProperty=nameWithType> property and use the <xref:System.Web.UI.ValidatorCollection.GetEnumerator%2A> method to iterate through the values.  
  
 [!code-csharp[ValidatorCollection_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_GetEnumerator/CS/validatorcollection_getenumerator.cs.aspx#1)]
 [!code-vb[ValidatorCollection_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_GetEnumerator/VB/validatorcollection_getenumerator.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IValidator" />
    <altmember cref="P:System.Web.UI.Page.Validators" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidatorCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ValidatorCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ValidatorCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.ValidatorCollection" /> class.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.IValidator" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Web.UI.IValidator validator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Web.UI.IValidator validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ValidatorCollection.Add(System.Web.UI.IValidator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (validator As IValidator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Web::UI::IValidator ^ validator);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Web.UI.IValidator -&gt; unit" Usage="validatorCollection.Add validator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validator" Type="System.Web.UI.IValidator" />
      </Parameters>
      <Docs>
        <param name="validator">The validation server control to add.</param>
        <summary>Adds the specified validation server control to the <see cref="T:System.Web.UI.ValidatorCollection" /> collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When added to the <xref:System.Web.UI.ValidatorCollection> collection of a <xref:System.Web.UI.Page> object through the <xref:System.Web.UI.Page.Validators%2A> property, the <xref:System.Web.UI.IValidator> implementation takes part in validation. Its <xref:System.Web.UI.IValidator.Validate%2A> method is called together with the <xref:System.Web.UI.IValidator.Validate%2A> methods of all other validators. All validators then share in determining whether the <xref:System.Web.UI.Page> object as a whole is valid.  
  
   
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Web.UI.ValidatorCollection.Add%2A> method.  
  
 [!code-csharp[ValidatorCollection_Add#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_Add/CS/validatorcollection_add.cs#1)]
 [!code-vb[ValidatorCollection_Add#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_Add/VB/validatorcollection_add.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IValidator" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.IValidator validator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.IValidator validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ValidatorCollection.Contains(System.Web.UI.IValidator)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (validator As IValidator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Web::UI::IValidator ^ validator);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Web.UI.IValidator -&gt; bool" Usage="validatorCollection.Contains validator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validator" Type="System.Web.UI.IValidator" />
      </Parameters>
      <Docs>
        <param name="validator">The validation server control to check for.</param>
        <summary>Determines whether the specified validation server control is contained within the page's <see cref="T:System.Web.UI.ValidatorCollection" /> collection.</summary>
        <returns>
          <see langword="true" /> if the validation server control is in the collection; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Web.UI.ValidatorCollection.Contains%2A> method.  
  
 [!code-csharp[ValidatorCollection_Contains_Remove#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_Contains_Remove/CS/validatorcollection_contains_remove.cs#1)]
 [!code-vb[ValidatorCollection_Contains_Remove#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_Contains_Remove/VB/validatorcollection_contains_remove.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IValidator" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ValidatorCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="validatorCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The collection to which the validation server control is added.</param>
        <param name="index">The index where the validation server control is copied.</param>
        <summary>Copies the validator collection to the specified array, beginning at the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates using the <xref:System.Web.UI.ValidatorCollection.CopyTo%2A> method.  
  
 [!code-csharp[ValidatorCollection_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_CopyTo/CS/validatorcollection_copyto.cs.aspx#1)]
 [!code-vb[ValidatorCollection_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_CopyTo/VB/validatorcollection_copyto.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IValidator" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ValidatorCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.UI.ValidatorCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of references in the collection.</summary>
        <value>The number of validation controls in the page's <see cref="T:System.Web.UI.ValidatorCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates using the <xref:System.Web.UI.ValidatorCollection.Count%2A> property.  
  
 [!code-csharp[ValidatorCollection_Constructor_Count#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_Constructor_Count/CS/validatorcollection_constructor_count.cs.aspx#2)]
 [!code-vb[ValidatorCollection_Constructor_Count#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_Constructor_Count/VB/validatorcollection_constructor_count.vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IValidator" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ValidatorCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="validatorCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> instance for the <see cref="T:System.Web.UI.ValidatorCollection" /> collection.</summary>
        <returns>The <see cref="T:System.Collections.IEnumerator" /> for the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create an <xref:System.Collections.IEnumerator?displayProperty=nameWithType> instance that can be iterated through easily to get each item in the <xref:System.Web.UI.ValidatorCollection> collection.  
  
   
  
## Examples  
 The following code example demonstrates using the <xref:System.Web.UI.ValidatorCollection.GetEnumerator%2A> method.  
  
 [!code-csharp[ValidatorCollection_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_GetEnumerator/CS/validatorcollection_getenumerator.cs.aspx#1)]
 [!code-vb[ValidatorCollection_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_GetEnumerator/VB/validatorcollection_getenumerator.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ValidatorCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Web.UI.ValidatorCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="T:System.Web.UI.ValidatorCollection" /> collection is read-only.</summary>
        <value>
          <see langword="true" /> if the collection is read-only; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates using the <xref:System.Web.UI.ValidatorCollection.IsReadOnly%2A> property.  
  
 [!code-csharp[ValidatorCollection_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_3/CS/validatorcollection_3.cs.aspx#1)]
 [!code-vb[ValidatorCollection_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_3/VB/validatorcollection_3.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IValidator" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ValidatorCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Web.UI.ValidatorCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="T:System.Web.UI.ValidatorCollection" /> collection is synchronized.</summary>
        <value>
          <see langword="true" /> if the collection is synchronized; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the collection is synchronized, it is thread safe.  
  
   
  
## Examples  
 The following code example demonstrates using the <xref:System.Web.UI.ValidatorCollection.IsSynchronized%2A> property.  
  
 [!code-csharp[ValidatorCollection_3#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_3/CS/validatorcollection_3.cs.aspx#2)]
 [!code-vb[ValidatorCollection_3#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_3/VB/validatorcollection_3.vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IValidator" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.IValidator this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IValidator Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ValidatorCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::IValidator ^ default[int] { System::Web::UI::IValidator ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Web.UI.IValidator" Usage="System.Web.UI.ValidatorCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IValidator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the validator to return.</param>
        <summary>Gets the validation server control at the specified index location in the <see cref="T:System.Web.UI.ValidatorCollection" /> collection.</summary>
        <value>The value of the specified validator.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates using the <xref:System.Web.UI.ValidatorCollection.Item%2A> property.  
  
 [!code-csharp[ValidatorCollection_Item#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_Item/CS/validatorcollection_item.cs.aspx#1)]
 [!code-vb[ValidatorCollection_Item#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_Item/VB/validatorcollection_item.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IValidator" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Web.UI.IValidator validator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Web.UI.IValidator validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ValidatorCollection.Remove(System.Web.UI.IValidator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (validator As IValidator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Web::UI::IValidator ^ validator);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Web.UI.IValidator -&gt; unit" Usage="validatorCollection.Remove validator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validator" Type="System.Web.UI.IValidator" />
      </Parameters>
      <Docs>
        <param name="validator">The validation server control to remove from the collection.</param>
        <summary>Removes the specified validation server control from the page's <see cref="T:System.Web.UI.ValidatorCollection" /> collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the <xref:System.Web.UI.ValidatorCollection.Remove%2A> method.  
  
 [!code-csharp[ValidatorCollection_Contains_Remove#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_Contains_Remove/CS/validatorcollection_contains_remove.cs#1)]
 [!code-vb[ValidatorCollection_Contains_Remove#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_Contains_Remove/VB/validatorcollection_contains_remove.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IValidator" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ValidatorCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Web.UI.ValidatorCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize the <see cref="T:System.Web.UI.ValidatorCollection" /> collection.</summary>
        <value>The <see cref="T:System.Object" /> to synchronize the collection with.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates using the <xref:System.Web.UI.ValidatorCollection.SyncRoot%2A> property.  
  
 [!code-csharp[ValidatorCollection_3#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ValidatorCollection_3/CS/validatorcollection_3.cs.aspx#2)]
 [!code-vb[ValidatorCollection_3#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ValidatorCollection_3/VB/validatorcollection_3.vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IValidator" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
  </Members>
</Type>