<Type Name="MessageParameterAttribute" FullName="System.ServiceModel.MessageParameterAttribute">
  <TypeSignature Language="C#" Value="public sealed class MessageParameterAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MessageParameterAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageParameterAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MessageParameterAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageParameterAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type MessageParameterAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Controls the name of the request and response parameter names. Cannot be used with <see cref="T:System.ServiceModel.Channels.Message" /> or message contracts.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.ServiceModel.MessageParameterAttribute> to control the name of the parameter or the return value. This attribute has no effect if the parameters are marked by the <xref:System.ServiceModel.MessageContractAttribute> attribute.  
  
> [!NOTE]
>  The value of the parameter names in the operation signature are part of the contract and are case sensitive. Use this attribute when you need to distinguish between the local parameter name and the metadata that describes the operation for client applications.  
  
 For more information about controlling the serialization of the contents of a SOAP body without modifying the default SOAP envelope itself, see <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, [Specifying Data Transfer in Service Contracts](~/docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md), and [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).  
  
 For more information about creating message contracts, see [Using Message Contracts](~/docs/framework/wcf/feature-details/using-message-contracts.md).  
  
   
  
## Examples  
 The following code example shows the use of <xref:System.ServiceModel.MessageParameterAttribute> to establish the name of the parameter and the return value in metadata.  
  
 [!code-csharp[MessageParameterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/services.cs#1)]
 [!code-vb[MessageParameterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/services.vb#1)]  
  
 The following example shows the generated service contract for the preceding service. Note that the name of the parameter is now `Input`.  
  
 [!code-csharp[MessageParameterAttribute#2](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/proxycode.cs#2)]
 [!code-vb[MessageParameterAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/proxycode.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageParameterAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageParameterAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageParameterAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageParameterAttribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the use of <xref:System.ServiceModel.MessageParameterAttribute> to establish the name of the parameter and the return value in metadata.  
  
 [!code-csharp[MessageParameterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/services.cs#1)]
 [!code-vb[MessageParameterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/services.vb#1)]  
  
 The following example shows the generated service contract for the preceding service. Note that the name of the parameter is now `Input`.  
  
 [!code-csharp[MessageParameterAttribute#2](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/proxycode.cs#2)]
 [!code-vb[MessageParameterAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/proxycode.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageParameterAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.MessageParameterAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains or sets the name attribute of the parameter in the XML Schema (XSD).</summary>
        <value>The name attribute of the parameter in the XSD.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows the use of <xref:System.ServiceModel.MessageParameterAttribute> to establish the name of the parameter and the return value in metadata.  
  
 [!code-csharp[MessageParameterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/services.cs#1)]
 [!code-vb[MessageParameterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/services.vb#1)]  
  
 The following example shows the generated service contract for the preceding service. Note that the name of the parameter is now `Input`.  
  
 [!code-csharp[MessageParameterAttribute#2](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/proxycode.cs#2)]
 [!code-vb[MessageParameterAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/proxycode.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
