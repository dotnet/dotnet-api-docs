<Type Name="Executor" FullName="System.CodeDom.Compiler.Executor">
  <TypeSignature Language="C#" Value="public static class Executor" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Executor extends System.Object" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.Executor" />
  <TypeSignature Language="VB.NET" Value="Public Class Executor" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Executor abstract sealed" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Executor = class" />
  <TypeSignature Language="C#" Value="public sealed class Executor" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Executor extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Executor" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class Executor sealed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides command execution functions for invoking compilers. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This class provides a collection of methods that can be used to invoke a compiler, typically from an <xref:System.CodeDom.Compiler.ICodeCompiler> implementation.  
  
> [!NOTE]
>  This class contains a link demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when the immediate caller does not have full-trust permission. For more information, see [Link Demands](~/docs/framework/misc/link-demands.md).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecWait">
      <MemberSignature Language="C#" Value="public static void ExecWait (string cmd, System.CodeDom.Compiler.TempFileCollection tempFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExecWait(string cmd, class System.CodeDom.Compiler.TempFileCollection tempFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExecWait (cmd As String, tempFiles As TempFileCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExecWait(System::String ^ cmd, System::CodeDom::Compiler::TempFileCollection ^ tempFiles);" />
      <MemberSignature Language="F#" Value="static member ExecWait : string * System.CodeDom.Compiler.TempFileCollection -&gt; unit" Usage="System.CodeDom.Compiler.Executor.ExecWait (cmd, tempFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cmd" Type="System.String" />
        <Parameter Name="tempFiles" Type="System.CodeDom.Compiler.TempFileCollection" />
      </Parameters>
      <Docs>
        <param name="cmd">The command to execute.</param>
        <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> with which to manage and store references to intermediate files generated during compilation.</param>
        <summary>Executes the command using the specified temporary files and waits for the call to return.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.Compiler.TempFileCollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecWaitWithCapture">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Executes the specified command.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecWaitWithCapture">
      <MemberSignature Language="C#" Value="public static int ExecWaitWithCapture (string cmd, System.CodeDom.Compiler.TempFileCollection tempFiles, ref string outputName, ref string errorName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ExecWaitWithCapture(string cmd, class System.CodeDom.Compiler.TempFileCollection tempFiles, string&amp; outputName, string&amp; errorName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExecWaitWithCapture (cmd As String, tempFiles As TempFileCollection, ByRef outputName As String, ByRef errorName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ExecWaitWithCapture(System::String ^ cmd, System::CodeDom::Compiler::TempFileCollection ^ tempFiles, System::String ^ % outputName, System::String ^ % errorName);" />
      <MemberSignature Language="F#" Value="static member ExecWaitWithCapture : string * System.CodeDom.Compiler.TempFileCollection * string * string -&gt; int" Usage="System.CodeDom.Compiler.Executor.ExecWaitWithCapture (cmd, tempFiles, outputName, errorName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cmd" Type="System.String" />
        <Parameter Name="tempFiles" Type="System.CodeDom.Compiler.TempFileCollection" />
        <Parameter Name="outputName" Type="System.String" RefType="ref" />
        <Parameter Name="errorName" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="cmd">The command to execute.</param>
        <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> with which to manage and store references to intermediate files generated during compilation.</param>
        <param name="outputName">A reference to a string that will store the compiler's message output.</param>
        <param name="errorName">A reference to a string that will store the name of the error or errors encountered.</param>
        <summary>Executes the specified command using the specified temporary files and waits for the call to return, storing output and error information from the compiler in the specified strings.</summary>
        <returns>The return value from the compiler.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecWaitWithCapture">
      <MemberSignature Language="C#" Value="public static int ExecWaitWithCapture (IntPtr userToken, string cmd, System.CodeDom.Compiler.TempFileCollection tempFiles, ref string outputName, ref string errorName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ExecWaitWithCapture(native int userToken, string cmd, class System.CodeDom.Compiler.TempFileCollection tempFiles, string&amp; outputName, string&amp; errorName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExecWaitWithCapture (userToken As IntPtr, cmd As String, tempFiles As TempFileCollection, ByRef outputName As String, ByRef errorName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ExecWaitWithCapture(IntPtr userToken, System::String ^ cmd, System::CodeDom::Compiler::TempFileCollection ^ tempFiles, System::String ^ % outputName, System::String ^ % errorName);" />
      <MemberSignature Language="F#" Value="static member ExecWaitWithCapture : nativeint * string * System.CodeDom.Compiler.TempFileCollection * string * string -&gt; int" Usage="System.CodeDom.Compiler.Executor.ExecWaitWithCapture (userToken, cmd, tempFiles, outputName, errorName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.IntPtr" />
        <Parameter Name="cmd" Type="System.String" />
        <Parameter Name="tempFiles" Type="System.CodeDom.Compiler.TempFileCollection" />
        <Parameter Name="outputName" Type="System.String" RefType="ref" />
        <Parameter Name="errorName" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="userToken">The token to start the compiler process with.</param>
        <param name="cmd">The command to execute.</param>
        <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> with which to manage and store references to intermediate files generated during compilation.</param>
        <param name="outputName">A reference to a string that will store the compiler's message output.</param>
        <param name="errorName">A reference to a string that will store the name of the error or errors encountered.</param>
        <summary>Executes the specified command using the specified user token and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.</summary>
        <returns>The return value from the compiler.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `userToken` parameter accepts a Win32 security access token that indicates the security context for the process to be started in. For more information, see [CreateProcessAsUser](/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessasusera) method documentation.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.TempFileCollection" />
      </Docs>
    </Member>
    <Member MemberName="ExecWaitWithCapture">
      <MemberSignature Language="C#" Value="public static int ExecWaitWithCapture (string cmd, string currentDir, System.CodeDom.Compiler.TempFileCollection tempFiles, ref string outputName, ref string errorName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ExecWaitWithCapture(string cmd, string currentDir, class System.CodeDom.Compiler.TempFileCollection tempFiles, string&amp; outputName, string&amp; errorName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExecWaitWithCapture (cmd As String, currentDir As String, tempFiles As TempFileCollection, ByRef outputName As String, ByRef errorName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ExecWaitWithCapture(System::String ^ cmd, System::String ^ currentDir, System::CodeDom::Compiler::TempFileCollection ^ tempFiles, System::String ^ % outputName, System::String ^ % errorName);" />
      <MemberSignature Language="F#" Value="static member ExecWaitWithCapture : string * string * System.CodeDom.Compiler.TempFileCollection * string * string -&gt; int" Usage="System.CodeDom.Compiler.Executor.ExecWaitWithCapture (cmd, currentDir, tempFiles, outputName, errorName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cmd" Type="System.String" />
        <Parameter Name="currentDir" Type="System.String" />
        <Parameter Name="tempFiles" Type="System.CodeDom.Compiler.TempFileCollection" />
        <Parameter Name="outputName" Type="System.String" RefType="ref" />
        <Parameter Name="errorName" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="cmd">The command to execute.</param>
        <param name="currentDir">The current directory.</param>
        <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> with which to manage and store references to intermediate files generated during compilation.</param>
        <param name="outputName">A reference to a string that will store the compiler's message output.</param>
        <param name="errorName">A reference to a string that will store the name of the error or errors encountered.</param>
        <summary>Executes the specified command using the specified current directory and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.</summary>
        <returns>The return value from the compiler.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.Compiler.TempFileCollection" />
      </Docs>
    </Member>
    <Member MemberName="ExecWaitWithCapture">
      <MemberSignature Language="C#" Value="public static int ExecWaitWithCapture (IntPtr userToken, string cmd, string currentDir, System.CodeDom.Compiler.TempFileCollection tempFiles, ref string outputName, ref string errorName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ExecWaitWithCapture(native int userToken, string cmd, string currentDir, class System.CodeDom.Compiler.TempFileCollection tempFiles, string&amp; outputName, string&amp; errorName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExecWaitWithCapture (userToken As IntPtr, cmd As String, currentDir As String, tempFiles As TempFileCollection, ByRef outputName As String, ByRef errorName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ExecWaitWithCapture(IntPtr userToken, System::String ^ cmd, System::String ^ currentDir, System::CodeDom::Compiler::TempFileCollection ^ tempFiles, System::String ^ % outputName, System::String ^ % errorName);" />
      <MemberSignature Language="F#" Value="static member ExecWaitWithCapture : nativeint * string * string * System.CodeDom.Compiler.TempFileCollection * string * string -&gt; int" Usage="System.CodeDom.Compiler.Executor.ExecWaitWithCapture (userToken, cmd, currentDir, tempFiles, outputName, errorName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.IntPtr" />
        <Parameter Name="cmd" Type="System.String" />
        <Parameter Name="currentDir" Type="System.String" />
        <Parameter Name="tempFiles" Type="System.CodeDom.Compiler.TempFileCollection" />
        <Parameter Name="outputName" Type="System.String" RefType="ref" />
        <Parameter Name="errorName" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="userToken">The token to start the compiler process with.</param>
        <param name="cmd">The command to execute.</param>
        <param name="currentDir">The directory to start the process in.</param>
        <param name="tempFiles">A <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> with which to manage and store references to intermediate files generated during compilation.</param>
        <param name="outputName">A reference to a string that will store the compiler's message output.</param>
        <param name="errorName">A reference to a string that will store the name of the error or errors encountered.</param>
        <summary>Executes the specified command using the specified user token, current directory, and temporary files; then waits for the call to return, storing output and error information from the compiler in the specified strings.</summary>
        <returns>The return value from the compiler.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.Compiler.TempFileCollection" />
      </Docs>
    </Member>
  </Members>
</Type>
