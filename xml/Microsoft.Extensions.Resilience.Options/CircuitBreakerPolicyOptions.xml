<Type Name="CircuitBreakerPolicyOptions" FullName="Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions">
  <TypeSignature Language="C#" Value="public class CircuitBreakerPolicyOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CircuitBreakerPolicyOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class CircuitBreakerPolicyOptions" />
  <TypeSignature Language="F#" Value="type CircuitBreakerPolicyOptions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class CircuitBreakerPolicyOptions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Circuit breaker policy options.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CircuitBreakerPolicyOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CircuitBreakerPolicyOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BreakDuration">
      <MemberSignature Language="C#" Value="public TimeSpan BreakDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BreakDuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.BreakDuration" />
      <MemberSignature Language="VB.NET" Value="Public Property BreakDuration As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.BreakDuration : TimeSpan with get, set" Usage="Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.BreakDuration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BreakDuration { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the duration of break.
            </summary>
        <value>To be added.</value>
        <remarks>
            The duration the circuit will stay open before resetting.
            Value must be greater than 0.5 seconds.
            Default set to 5 seconds.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FailureThreshold">
      <MemberSignature Language="C#" Value="public double FailureThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 FailureThreshold" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.FailureThreshold" />
      <MemberSignature Language="VB.NET" Value="Public Property FailureThreshold As Double" />
      <MemberSignature Language="F#" Value="member this.FailureThreshold : double with get, set" Usage="Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.FailureThreshold" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double FailureThreshold { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the failure threshold.
            </summary>
        <value>To be added.</value>
        <remarks>
            If the ratio (between the number of failed request and total request) exceeds this threshold, the circuit will break.
            A ratio number higher than 0, up to 1.
            Default set to 0.1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumThroughput">
      <MemberSignature Language="C#" Value="public int MinimumThroughput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumThroughput" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.MinimumThroughput" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumThroughput As Integer" />
      <MemberSignature Language="F#" Value="member this.MinimumThroughput : int with get, set" Usage="Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.MinimumThroughput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumThroughput { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the minimum throughput.
            </summary>
        <value>To be added.</value>
        <remarks>
            This defines how many actions must pass through the circuit in the time-slice,
            for statistics to be considered significant and the circuit-breaker to come into action.
            Value must be greater than one.
            Default set to 100.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCircuitBreak">
      <MemberSignature Language="C#" Value="public Action&lt;Microsoft.Extensions.Resilience.Options.BreakActionArguments&gt; OnCircuitBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;valuetype Microsoft.Extensions.Resilience.Options.BreakActionArguments&gt; OnCircuitBreak" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.OnCircuitBreak" />
      <MemberSignature Language="VB.NET" Value="Public Property OnCircuitBreak As Action(Of BreakActionArguments)" />
      <MemberSignature Language="F#" Value="member this.OnCircuitBreak : Action&lt;Microsoft.Extensions.Resilience.Options.BreakActionArguments&gt; with get, set" Usage="Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.OnCircuitBreak" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Action&lt;Microsoft::Extensions::Resilience::Options::BreakActionArguments&gt; ^ OnCircuitBreak { Action&lt;Microsoft::Extensions::Resilience::Options::BreakActionArguments&gt; ^ get(); void set(Action&lt;Microsoft::Extensions::Resilience::Options::BreakActionArguments&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DataAnnotations.Required]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DataAnnotations.Required&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action&lt;Microsoft.Extensions.Resilience.Options.BreakActionArguments&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the action performed when the circuit breaker breaks.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCircuitReset">
      <MemberSignature Language="C#" Value="public Action&lt;Microsoft.Extensions.Resilience.Options.ResetActionArguments&gt; OnCircuitReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;valuetype Microsoft.Extensions.Resilience.Options.ResetActionArguments&gt; OnCircuitReset" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.OnCircuitReset" />
      <MemberSignature Language="VB.NET" Value="Public Property OnCircuitReset As Action(Of ResetActionArguments)" />
      <MemberSignature Language="F#" Value="member this.OnCircuitReset : Action&lt;Microsoft.Extensions.Resilience.Options.ResetActionArguments&gt; with get, set" Usage="Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.OnCircuitReset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Action&lt;Microsoft::Extensions::Resilience::Options::ResetActionArguments&gt; ^ OnCircuitReset { Action&lt;Microsoft::Extensions::Resilience::Options::ResetActionArguments&gt; ^ get(); void set(Action&lt;Microsoft::Extensions::Resilience::Options::ResetActionArguments&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DataAnnotations.Required]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DataAnnotations.Required&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action&lt;Microsoft.Extensions.Resilience.Options.ResetActionArguments&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the action performed when the circuit breaker resets itself.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SamplingDuration">
      <MemberSignature Language="C#" Value="public TimeSpan SamplingDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan SamplingDuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.SamplingDuration" />
      <MemberSignature Language="VB.NET" Value="Public Property SamplingDuration As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.SamplingDuration : TimeSpan with get, set" Usage="Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.SamplingDuration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan SamplingDuration { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the duration of the sampling.
            </summary>
        <value>To be added.</value>
        <remarks>
            The duration of the time-slice over which failure ratios are assessed.
            Value must be greater than 0.5 seconds.
            Default set to 30 seconds.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldHandleException">
      <MemberSignature Language="C#" Value="public Predicate&lt;Exception&gt; ShouldHandleException { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Predicate`1&lt;class System.Exception&gt; ShouldHandleException" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.ShouldHandleException" />
      <MemberSignature Language="VB.NET" Value="Public Property ShouldHandleException As Predicate(Of Exception)" />
      <MemberSignature Language="F#" Value="member this.ShouldHandleException : Predicate&lt;Exception&gt; with get, set" Usage="Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.ShouldHandleException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Predicate&lt;Exception ^&gt; ^ ShouldHandleException { Predicate&lt;Exception ^&gt; ^ get(); void set(Predicate&lt;Exception ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Predicate&lt;System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the predicate which filters the type of exception the policy can handle.
            </summary>
        <value>To be added.</value>
        <remarks>
            By default any exception will be retried.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
