<Type Name="HedgingPolicyOptions" FullName="Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions">
  <TypeSignature Language="C#" Value="public class HedgingPolicyOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HedgingPolicyOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class HedgingPolicyOptions" />
  <TypeSignature Language="F#" Value="type HedgingPolicyOptions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class HedgingPolicyOptions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Hedging policy options.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HedgingPolicyOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HedgingPolicyOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HedgingDelay">
      <MemberSignature Language="C#" Value="public TimeSpan HedgingDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan HedgingDelay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property HedgingDelay As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.HedgingDelay : TimeSpan with get, set" Usage="Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelay" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan HedgingDelay { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the minimal time of waiting before spawning a new hedged call.
             </summary>
        <value>To be added.</value>
        <remarks>
             Default is set to 2 seconds.
            
             You can also use <see cref="F:System.TimeSpan.Zero" /> to create all hedged tasks (value of <see cref="P:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.MaxHedgedAttempts" />) at once
             or <see cref="F:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.InfiniteHedgingDelay" /> to force the hedging policy to never create new task before the old one is finished.
            
             If you want a greater control over hedging delay customization use <see cref="P:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelayGenerator" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="HedgingDelayGenerator">
      <MemberSignature Language="C#" Value="public Func&lt;Microsoft.Extensions.Resilience.Options.HedgingDelayArguments,TimeSpan&gt;? HedgingDelayGenerator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;valuetype Microsoft.Extensions.Resilience.Options.HedgingDelayArguments, valuetype System.TimeSpan&gt; HedgingDelayGenerator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelayGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Property HedgingDelayGenerator As Func(Of HedgingDelayArguments, TimeSpan)" />
      <MemberSignature Language="F#" Value="member this.HedgingDelayGenerator : Func&lt;Microsoft.Extensions.Resilience.Options.HedgingDelayArguments, TimeSpan&gt; with get, set" Usage="Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelayGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;Microsoft::Extensions::Resilience::Options::HedgingDelayArguments, TimeSpan&gt; ^ HedgingDelayGenerator { Func&lt;Microsoft::Extensions::Resilience::Options::HedgingDelayArguments, TimeSpan&gt; ^ get(); void set(Func&lt;Microsoft::Extensions::Resilience::Options::HedgingDelayArguments, TimeSpan&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.Extensions.Resilience.Options.HedgingDelayArguments,System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the delegate that is used to customize the hedging delays after each hedging task is created.
             </summary>
        <value>To be added.</value>
        <remarks>
             The <see cref="P:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelayGenerator" /> takes precedence over <see cref="P:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelay" />. If specified, the <see cref="P:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelay" /> is ignored.
            
             By default, this value is <c>null</c>.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="InfiniteHedgingDelay">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteHedgingDelay;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteHedgingDelay" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.InfiniteHedgingDelay" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteHedgingDelay As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable InfiniteHedgingDelay : TimeSpan" Usage="Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.InfiniteHedgingDelay" />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteHedgingDelay;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A <see cref="T:System.TimeSpan" /> that represents the infinite hedging delay.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHedgedAttempts">
      <MemberSignature Language="C#" Value="public int MaxHedgedAttempts { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxHedgedAttempts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.MaxHedgedAttempts" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHedgedAttempts As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxHedgedAttempts : int with get, set" Usage="Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.MaxHedgedAttempts" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxHedgedAttempts { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DataAnnotations.Range(2, 10)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DataAnnotations.Range(2, 10)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the maximum hedged attempts to perform the desired task.
            </summary>
        <value>To be added.</value>
        <remarks>
            Default set to 2.
            The value defines how many concurrent hedged tasks will be triggered by the policy.
            This includes the primary hedged task that is initially performed, and the further tasks that will
            be fetched from the provider and spawned in parallel.
            The value must be bigger or equal to 2, and lower or equal to 10.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHedgingAsync">
      <MemberSignature Language="C#" Value="public Func&lt;Microsoft.Extensions.Resilience.Options.HedgingTaskArguments,System.Threading.Tasks.Task&gt; OnHedgingAsync { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;valuetype Microsoft.Extensions.Resilience.Options.HedgingTaskArguments, class System.Threading.Tasks.Task&gt; OnHedgingAsync" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.OnHedgingAsync" />
      <MemberSignature Language="VB.NET" Value="Public Property OnHedgingAsync As Func(Of HedgingTaskArguments, Task)" />
      <MemberSignature Language="F#" Value="member this.OnHedgingAsync : Func&lt;Microsoft.Extensions.Resilience.Options.HedgingTaskArguments, System.Threading.Tasks.Task&gt; with get, set" Usage="Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.OnHedgingAsync" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;Microsoft::Extensions::Resilience::Options::HedgingTaskArguments, System::Threading::Tasks::Task ^&gt; ^ OnHedgingAsync { Func&lt;Microsoft::Extensions::Resilience::Options::HedgingTaskArguments, System::Threading::Tasks::Task ^&gt; ^ get(); void set(Func&lt;Microsoft::Extensions::Resilience::Options::HedgingTaskArguments, System::Threading::Tasks::Task ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DataAnnotations.Required]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DataAnnotations.Required&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.Extensions.Resilience.Options.HedgingTaskArguments,System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the action to call asynchronously before invoking the hedging delegate.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldHandleException">
      <MemberSignature Language="C#" Value="public Predicate&lt;Exception&gt; ShouldHandleException { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Predicate`1&lt;class System.Exception&gt; ShouldHandleException" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.ShouldHandleException" />
      <MemberSignature Language="VB.NET" Value="Public Property ShouldHandleException As Predicate(Of Exception)" />
      <MemberSignature Language="F#" Value="member this.ShouldHandleException : Predicate&lt;Exception&gt; with get, set" Usage="Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.ShouldHandleException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Predicate&lt;Exception ^&gt; ^ ShouldHandleException { Predicate&lt;Exception ^&gt; ^ get(); void set(Predicate&lt;Exception ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DataAnnotations.Required]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DataAnnotations.Required&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Predicate&lt;System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the exception predicate to filter the type of exception the policy can handle.
            </summary>
        <value>To be added.</value>
        <remarks>
            By default any exception will be retried.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
