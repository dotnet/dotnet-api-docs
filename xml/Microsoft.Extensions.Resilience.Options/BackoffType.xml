<Type Name="BackoffType" FullName="Microsoft.Extensions.Resilience.Options.BackoffType">
  <TypeSignature Language="C#" Value="public enum BackoffType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed BackoffType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Resilience.Options.BackoffType" />
  <TypeSignature Language="VB.NET" Value="Public Enum BackoffType" />
  <TypeSignature Language="F#" Value="type BackoffType = " />
  <TypeSignature Language="C++ CLI" Value="public enum class BackoffType" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            Retry type.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="Constant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Extensions.Resilience.Options.BackoffType Constant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Extensions.Resilience.Options.BackoffType.Constant" />
      <MemberSignature Language="VB.NET" Value="Constant" />
      <MemberSignature Language="F#" Value="Constant = 1" Usage="Microsoft.Extensions.Resilience.Options.BackoffType.Constant" />
      <MemberSignature Language="C++ CLI" Value="Constant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Resilience.Options.BackoffType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
            The constant retry type.
            </summary>
        <remarks>
            It ensures a constant wait duration before each retry attempt.
            For concurrent database access with possibility of conflicting updates,
            retrying the failures in a constant manner allows consistent transient failures mitigation.
            </remarks>
        <example>
            200ms, 200ms, 200ms, etc.
            </example>
      </Docs>
    </Member>
    <Member MemberName="ExponentialWithJitter">
      <MemberSignature Language="C#" Value="ExponentialWithJitter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Extensions.Resilience.Options.BackoffType ExponentialWithJitter = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Extensions.Resilience.Options.BackoffType.ExponentialWithJitter" />
      <MemberSignature Language="VB.NET" Value="ExponentialWithJitter" />
      <MemberSignature Language="F#" Value="ExponentialWithJitter = 0" Usage="Microsoft.Extensions.Resilience.Options.BackoffType.ExponentialWithJitter" />
      <MemberSignature Language="C++ CLI" Value="ExponentialWithJitter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Resilience.Options.BackoffType</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
            Exponential delay with randomization retry type,
            making sure to mitigate any correlations.
            </summary>
        <remarks>
            In transient failures handling scenarios, this is the
            <see href=" https://github.com/Polly-Contrib/Polly.Contrib.WaitAndRetry#new-jitter-recommendation"> recommended retry type</see>.
            </remarks>
        <example>
            850ms, 1455ms, 3060ms.
            </example>
      </Docs>
    </Member>
    <Member MemberName="Linear">
      <MemberSignature Language="C#" Value="Linear" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Extensions.Resilience.Options.BackoffType Linear = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Extensions.Resilience.Options.BackoffType.Linear" />
      <MemberSignature Language="VB.NET" Value="Linear" />
      <MemberSignature Language="F#" Value="Linear = 2" Usage="Microsoft.Extensions.Resilience.Options.BackoffType.Linear" />
      <MemberSignature Language="C++ CLI" Value="Linear" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Resilience.Options.BackoffType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
            The linear retry type.
            </summary>
        <remarks>
            Generates sleep durations in an linear manner.
            In case randomization introduced by the jitter and exponential growth are not intended,
            the linear growth allows more control over the delay intervals.
            </remarks>
        <example>
            100ms, 200ms, 300ms, 400ms, etc.
            </example>
      </Docs>
    </Member>
  </Members>
</Type>
