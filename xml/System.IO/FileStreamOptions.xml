<Type Name="FileStreamOptions" FullName="System.IO.FileStreamOptions">
  <TypeSignature Language="C#" Value="public sealed class FileStreamOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileStreamOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.FileStreamOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FileStreamOptions" />
  <TypeSignature Language="F#" Value="type FileStreamOptions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileStreamOptions sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines a variety of configuration options for <see cref="T:System.IO.FileStream" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStreamOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStreamOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStreamOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a <see cref="T:System.IO.FileStreamOptions" /> instance with default values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Access">
      <MemberSignature Language="C#" Value="public System.IO.FileAccess Access { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAccess Access" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStreamOptions.Access" />
      <MemberSignature Language="VB.NET" Value="Public Property Access As FileAccess" />
      <MemberSignature Language="F#" Value="member this.Access : System.IO.FileAccess with get, set" Usage="System.IO.FileStreamOptions.Access" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAccess Access { System::IO::FileAccess get(); void set(System::IO::FileAccess value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A bitwise combination of the enumeration values that determines how the file can be accessed by the <see cref="T:System.IO.FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see cref="T:System.IO.FileStream" /> object.</summary>
        <value>A bitwise combination of the <see cref="T:System.IO.FileAccess" /> enum flags.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="value" /> contains an invalid value.</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public int BufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BufferSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStreamOptions.BufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BufferSize As Integer" />
      <MemberSignature Language="F#" Value="member this.BufferSize : int with get, set" Usage="System.IO.FileStreamOptions.BufferSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size of the buffer used by <see cref="T:System.IO.FileStream" /> for buffering. The default buffer size is 4096.
            0 or 1 means that buffering should be disabled. Negative values are not allowed.</summary>
        <value>A non-negative number that represents the buffer size used by <see cref="T:System.IO.FileStream" /> for buffering.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="value" /> is negative.</exception>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.IO.FileMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStreamOptions.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As FileMode" />
      <MemberSignature Language="F#" Value="member this.Mode : System.IO.FileMode with get, set" Usage="System.IO.FileStreamOptions.Mode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileMode Mode { System::IO::FileMode get(); void set(System::IO::FileMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>One of the enumeration values that determines how to open or create the file.</summary>
        <value>One of the enumeration values of the <see cref="T:System.IO.FileMode" /> enum.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="value" /> contains an invalid value.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.IO.FileOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStreamOptions.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As FileOptions" />
      <MemberSignature Language="F#" Value="member this.Options : System.IO.FileOptions with get, set" Usage="System.IO.FileStreamOptions.Options" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileOptions Options { System::IO::FileOptions get(); void set(System::IO::FileOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A bitwise combination of the enumeration values that specifies additional file options. The default value is <see cref="F:System.IO.FileOptions.None" />, which indicates synchronous IO.</summary>
        <value>A bitwise combination of the <see cref="T:System.IO.FileOptions" /> enum flags.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="value" /> contains an invalid value.</exception>
      </Docs>
    </Member>
    <Member MemberName="PreallocationSize">
      <MemberSignature Language="C#" Value="public long PreallocationSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PreallocationSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStreamOptions.PreallocationSize" />
      <MemberSignature Language="VB.NET" Value="Public Property PreallocationSize As Long" />
      <MemberSignature Language="F#" Value="member this.PreallocationSize : int64 with get, set" Usage="System.IO.FileStreamOptions.PreallocationSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PreallocationSize { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The initial allocation size in bytes for the file. A positive value is effective only when a regular file is being created or overwritten (<see cref="F:System.IO.FileMode.Create" /> or <see cref="F:System.IO.FileMode.CreateNew" />). Negative values are not allowed. In other cases (including the default 0 value), it's ignored. This value is a hint and is not a strong guarantee. It is not supported on Web Assembly (WASM) and FreeBSD (the value is ignored). For Windows, Linux and macOS we will try to preallocate the disk space to fill the requested allocation size. If that turns out to be impossible, the operation is going to throw an exception. The final file length (EOF) will be determined by the number of bytes written to the file.</summary>
        <value>A non-negative number that represents the initial allocation size in bytes for the file.</value>
        <remarks>
          <format><![CDATA[

## Remarks

<xref:System.IO.FileStreamOptions.PreallocationSize> can only be requested for write mode (<xref:System.IO.FileStreamOptions.Access> must be set to <xref:System.IO.FileAccess.Write>) and when creating new files (<xref:System.IO.FileStreamOptions.Mode> must be set to either <xref:System.IO.FileMode.Create> or to <xref:System.IO.FileMode.CreateNew>). Otherwise, the <xref:System.IO.FileStream> constructor will throw an exception.

If the operating system, platform or file system does not support preallocation, then <xref:System.IO.FileStreamOptions.PreallocationSize> is ignored. This is the case for Web Assembly (WASM) and FreeBSD.

If there is not enough disk space or the file system does not support files of given size (example: 5 GB file on FAT32), an exception is thrown.

The file length is determined by how many bytes were written to the file.

When the file is closed and not all of the allocated space is written to, what happens to the remaining space is platform dependent. On Windows, this space is no longer reserved for the file. On other platforms, such as Linux and macOS, it remains allocated to the file.

For example, assume 2 GB is preallocated for a file, but only 1 GB is written. After closing the file, the file length is 1 GB on all operating systems. On Windows, the allocated size is also 1 GB, but on Linux and macOS, the allocated size is still 2 GB.

It's permissible to write more than what was initially preallocated. As long as there is enough disk space, the operation should succeed.

## Examples  

 The following code example demonstrates how to use <xref:System.IO.FileStreamOptions.PreallocationSize> when working with <xref:System.IO.FileStream> objects:

:::code language="csharp" source="~/snippets/csharp/System.IO/FileStreamOptions/PreallocationSizeExample.cs" id="Snippet1":::
:::code language="vb" source="~/snippets/visualbasic/System.IO/FileStreamOptions/PreallocationSizeExample.vb" id="Snippet1":::  
  
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="value" /> is negative.</exception>
      </Docs>
    </Member>
    <Member MemberName="Share">
      <MemberSignature Language="C#" Value="public System.IO.FileShare Share { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileShare Share" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStreamOptions.Share" />
      <MemberSignature Language="VB.NET" Value="Public Property Share As FileShare" />
      <MemberSignature Language="F#" Value="member this.Share : System.IO.FileShare with get, set" Usage="System.IO.FileStreamOptions.Share" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileShare Share { System::IO::FileShare get(); void set(System::IO::FileShare value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileShare</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A bitwise combination of the enumeration values that determines how the file will be shared by processes. The default value is <see cref="F:System.IO.FileShare.Read" />.</summary>
        <value>A bitwise combination of the <see cref="T:System.IO.FileShare" /> enum flags.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="value" /> contains an invalid value.</exception>
      </Docs>
    </Member>
    <Member MemberName="UnixCreateMode">
      <MemberSignature Language="C#" Value="public System.IO.UnixFileMode? UnixCreateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.IO.UnixFileMode&gt; UnixCreateMode" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStreamOptions.UnixCreateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property UnixCreateMode As Nullable(Of UnixFileMode)" />
      <MemberSignature Language="F#" Value="member this.UnixCreateMode : Nullable&lt;System.IO.UnixFileMode&gt; with get, set" Usage="System.IO.FileStreamOptions.UnixCreateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;System::IO::UnixFileMode&gt; UnixCreateMode { Nullable&lt;System::IO::UnixFileMode&gt; get(); void set(Nullable&lt;System::IO::UnixFileMode&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-7.0">
          <AttributeName Language="C#">[set: System.Runtime.Versioning.UnsupportedOSPlatform("windows")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.Versioning.UnsupportedOSPlatform("windows")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.IO.UnixFileMode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the Unix file mode used when a new file is created.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is an invalid file mode.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
