<Type Name="QuicConnectionOptions" FullName="System.Net.Quic.QuicConnectionOptions">
  <TypeSignature Language="C#" Value="public abstract class QuicConnectionOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit QuicConnectionOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Quic.QuicConnectionOptions" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class QuicConnectionOptions" />
  <TypeSignature Language="F#" Value="type QuicConnectionOptions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class QuicConnectionOptions abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Quic</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Shared options for both client (outbound) and server (inbound) <see cref="T:System.Net.Quic.QuicConnection">Quic connections</see>.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DefaultCloseErrorCode">
      <MemberSignature Language="C#" Value="public long DefaultCloseErrorCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 DefaultCloseErrorCode" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicConnectionOptions.DefaultCloseErrorCode" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultCloseErrorCode As Long" />
      <MemberSignature Language="F#" Value="member this.DefaultCloseErrorCode : int64 with get, set" Usage="System.Net.Quic.QuicConnectionOptions.DefaultCloseErrorCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long DefaultCloseErrorCode { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the error code used for <see cref="M:System.Net.Quic.QuicConnection.CloseAsync(System.Int64,System.Threading.CancellationToken)" /> when the connection is disposed.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This property is mandatory, and not setting it will result in validation errors when establishing a connection.

To use a different close error code, call <xref:System.Net.Quic.QuicConnection.CloseAsync(System.Int64,System.Threading.CancellationToken)> explicitly before disposing.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStreamErrorCode">
      <MemberSignature Language="C#" Value="public long DefaultStreamErrorCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 DefaultStreamErrorCode" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicConnectionOptions.DefaultStreamErrorCode" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultStreamErrorCode As Long" />
      <MemberSignature Language="F#" Value="member this.DefaultStreamErrorCode : int64 with get, set" Usage="System.Net.Quic.QuicConnectionOptions.DefaultStreamErrorCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long DefaultStreamErrorCode { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the error code used when the stream needs to abort the read or write side of the stream internally.</summary>
        <value>To be added.</value>
        <remarks>This property is mandatory, and not setting it will result in validation errors when establishing a connection.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandshakeTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan HandshakeTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan HandshakeTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicConnectionOptions.HandshakeTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property HandshakeTimeout As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.HandshakeTimeout : TimeSpan with get, set" Usage="System.Net.Quic.QuicConnectionOptions.HandshakeTimeout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan HandshakeTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the upper bound on time when the handshake must complete. If the handshake does not complete in this time, the connection is aborted.</summary>
        <value>The upper bound on time when the handshake must complete. The default is 10 seconds.</value>
        <remarks>A value of <see cref="F:System.TimeSpan.Zero" /> means use the underlying implementation default timeout.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan IdleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan IdleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicConnectionOptions.IdleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property IdleTimeout As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.IdleTimeout : TimeSpan with get, set" Usage="System.Net.Quic.QuicConnectionOptions.IdleTimeout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan IdleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the idle timeout for connections. The idle timeout is the time after which the connection will be closed.
            Default <see cref="F:System.TimeSpan.Zero" /> means underlying implementation default idle timeout.</summary>
        <value>The idle timeout for connections. The default is <see cref="F:System.TimeSpan.Zero" />, which means that the default idle timeout of the underlying implementation is used.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialReceiveWindowSizes">
      <MemberSignature Language="C#" Value="public System.Net.Quic.QuicReceiveWindowSizes InitialReceiveWindowSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Quic.QuicReceiveWindowSizes InitialReceiveWindowSizes" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicConnectionOptions.InitialReceiveWindowSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialReceiveWindowSizes As QuicReceiveWindowSizes" />
      <MemberSignature Language="F#" Value="member this.InitialReceiveWindowSizes : System.Net.Quic.QuicReceiveWindowSizes with get, set" Usage="System.Net.Quic.QuicConnectionOptions.InitialReceiveWindowSizes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Quic::QuicReceiveWindowSizes ^ InitialReceiveWindowSizes { System::Net::Quic::QuicReceiveWindowSizes ^ get(); void set(System::Net::Quic::QuicReceiveWindowSizes ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Quic.QuicReceiveWindowSizes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the initial receive window sizes for the connection and individual stream types.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAliveInterval">
      <MemberSignature Language="C#" Value="public TimeSpan KeepAliveInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan KeepAliveInterval" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicConnectionOptions.KeepAliveInterval" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepAliveInterval As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.KeepAliveInterval : TimeSpan with get, set" Usage="System.Net.Quic.QuicConnectionOptions.KeepAliveInterval" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan KeepAliveInterval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the interval at which keep-alive packets are sent on the connection.</summary>
        <value>The interval at which keep-alive packets are sent on the connection. The default value is <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />, which means keep-alive packets are never sent.</value>
        <remarks>A value of <see cref="F:System.TimeSpan.Zero" /> means use the underlying implementation default timeout.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxInboundBidirectionalStreams">
      <MemberSignature Language="C#" Value="public int MaxInboundBidirectionalStreams { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxInboundBidirectionalStreams" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicConnectionOptions.MaxInboundBidirectionalStreams" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxInboundBidirectionalStreams As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxInboundBidirectionalStreams : int with get, set" Usage="System.Net.Quic.QuicConnectionOptions.MaxInboundBidirectionalStreams" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxInboundBidirectionalStreams { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum number of concurrent bidirectional streams that the remote peer connection can create on an open connection.</summary>
        <value>The limit on the number of bidirectional streams the remote peer connection can create on an open connection. The default is 0 for client connections and 100 for server connections.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxInboundUnidirectionalStreams">
      <MemberSignature Language="C#" Value="public int MaxInboundUnidirectionalStreams { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxInboundUnidirectionalStreams" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicConnectionOptions.MaxInboundUnidirectionalStreams" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxInboundUnidirectionalStreams As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxInboundUnidirectionalStreams : int with get, set" Usage="System.Net.Quic.QuicConnectionOptions.MaxInboundUnidirectionalStreams" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxInboundUnidirectionalStreams { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum number of concurrent unidirectional streams that the remote peer connection can create on an open connection.</summary>
        <value>The limit on the number of unidirectional streams the remote peer connection can create on an open connection. The default is 0 for client connections and 10 for server connections.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StreamCapacityCallback">
      <MemberSignature Language="C#" Value="public Action&lt;System.Net.Quic.QuicConnection,System.Net.Quic.QuicStreamCapacityChangedArgs&gt;? StreamCapacityCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`2&lt;class System.Net.Quic.QuicConnection, valuetype System.Net.Quic.QuicStreamCapacityChangedArgs&gt; StreamCapacityCallback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicConnectionOptions.StreamCapacityCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property StreamCapacityCallback As Action(Of QuicConnection, QuicStreamCapacityChangedArgs)" />
      <MemberSignature Language="F#" Value="member this.StreamCapacityCallback : Action&lt;System.Net.Quic.QuicConnection, System.Net.Quic.QuicStreamCapacityChangedArgs&gt; with get, set" Usage="System.Net.Quic.QuicConnectionOptions.StreamCapacityCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Action&lt;System::Net::Quic::QuicConnection ^, System::Net::Quic::QuicStreamCapacityChangedArgs&gt; ^ StreamCapacityCallback { Action&lt;System::Net::Quic::QuicConnection ^, System::Net::Quic::QuicStreamCapacityChangedArgs&gt; ^ get(); void set(Action&lt;System::Net::Quic::QuicConnection ^, System::Net::Quic::QuicStreamCapacityChangedArgs&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Net.Quic.QuicConnection,System.Net.Quic.QuicStreamCapacityChangedArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Optional callback that is invoked when new stream limit is released by the peer. Corresponds to receiving a MAX_STREAMS frame.</para>
          <para>The callback values represent increments of stream limits, e.g.: current limit is 10 bidirectional streams, callback arguments notify 5 more additional bidirectional streams =&gt; 15 bidirectional streams can be opened in total at the moment.</para>
          <para>The initial capacity is reported with the first invocation of the callback that might happen before the <see cref="T:System.Net.Quic.QuicConnection" /> instance is handed out via either <see cref="M:System.Net.Quic.QuicConnection.ConnectAsync(System.Net.Quic.QuicClientConnectionOptions,System.Threading.CancellationToken)" /> or <see cref="M:System.Net.Quic.QuicListener.AcceptConnectionAsync(System.Threading.CancellationToken)" />.</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
