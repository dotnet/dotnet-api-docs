<Type Name="QuicListener" FullName="System.Net.Quic.QuicListener">
  <TypeSignature Language="C#" Value="public sealed class QuicListener : IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit QuicListener extends System.Object implements class System.IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Quic.QuicListener" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class QuicListener&#xA;Implements IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type QuicListener = class&#xA;    interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class QuicListener sealed : IAsyncDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Quic</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a listener that listens for incoming QUIC connections. <see cref="T:System.Net.Quic.QuicListener" /> can accept multiple <see cref="T:System.Net.Quic.QuicConnection">Quic connections</see>.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Unlike the connection and stream, the lifetime of a <xref:System.Net.Quic.QuicListener> isn't linked to any of the accepted connections. It can be safely disposed while keeping the accepted connection alive. Calling <xref:System.Net.Quic.QuicListener.DisposeAsync> will only cause the listener to stop listening for any other inbound connections.

      ]]></format>
    </remarks>
    <related type="Article" href="https://www.rfc-editor.org/rfc/rfc9000.html#name-connections">RFC 9000: Connections</related>
  </Docs>
  <Members>
    <Member MemberName="AcceptConnectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;System.Net.Quic.QuicConnection&gt; AcceptConnectionAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Net.Quic.QuicConnection&gt; AcceptConnectionAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Quic.QuicListener.AcceptConnectionAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptConnectionAsync (Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of QuicConnection)" />
      <MemberSignature Language="F#" Value="member this.AcceptConnectionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Net.Quic.QuicConnection&gt;" Usage="quicListener.AcceptConnectionAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Net.Quic.QuicConnection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
        <summary>Accepts an inbound <see cref="T:System.Net.Quic.QuicConnection" />.</summary>
        <returns>A task that contains a fully connected <see cref="T:System.Net.Quic.QuicConnection" /> that successfully finished the handshake and is ready to be used.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Net.Quic.QuicListener> doesn't have a mechanism to report inbound connections that fail the handshake process. Such connections are only logged by the listener and never surfaced on the outside.

This method propagates exceptions from <xref:System.Net.Quic.QuicListenerOptions.ConnectionOptionsCallback>, including validation errors from misconfigured <xref:System.Net.Quic.QuicServerConnectionOptions>, for example, <xref:System.ArgumentException>. It also propagates exceptions from failed connection handshakes, for example, <xref:System.Security.Authentication.AuthenticationException> and <xref:System.Net.Quic.QuicException>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Quic.QuicListener.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="quicListener.DisposeAsync " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops listening for new connections and releases all resources associated with the listener.</summary>
        <returns>A task that represents the asynchronous dispose operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicListener.IsSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsSupported As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSupported : bool" Usage="System.Net.Quic.QuicListener.IsSupported" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsSupported { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether QUIC is supported on the current machine.</summary>
        <value>
          <see langword="true" /> if QUIC is supported on the current machine and can be used; otherwise, <see langword="false" />.</value>
        <remarks>The current implementation depends on <see href="https://github.com/microsoft/msquic">MsQuic</see> native library, this property checks its presence (Linux machines).

It also checks whether TLS 1.3, requirement for QUIC protocol, is available and enabled (Windows machines).</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListenAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;System.Net.Quic.QuicListener&gt; ListenAsync (System.Net.Quic.QuicListenerOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Net.Quic.QuicListener&gt; ListenAsync(class System.Net.Quic.QuicListenerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Quic.QuicListener.ListenAsync(System.Net.Quic.QuicListenerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListenAsync (options As QuicListenerOptions, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of QuicListener)" />
      <MemberSignature Language="F#" Value="static member ListenAsync : System.Net.Quic.QuicListenerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Net.Quic.QuicListener&gt;" Usage="System.Net.Quic.QuicListener.ListenAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Net.Quic.QuicListener&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Net.Quic.QuicListenerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">Options for the listener.</param>
        <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
        <summary>Creates a new <see cref="T:System.Net.Quic.QuicListener" /> and starts listening for new connections.</summary>
        <returns>An asynchronous task that completes with the started listener.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndPoint">
      <MemberSignature Language="C#" Value="public System.Net.IPEndPoint LocalEndPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPEndPoint LocalEndPoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicListener.LocalEndPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndPoint As IPEndPoint" />
      <MemberSignature Language="F#" Value="member this.LocalEndPoint : System.Net.IPEndPoint" Usage="System.Net.Quic.QuicListener.LocalEndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPEndPoint ^ LocalEndPoint { System::Net::IPEndPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPEndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the actual listening endpoint.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Quic.QuicListener.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="quicListener.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current object.</summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
