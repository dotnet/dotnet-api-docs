<Type Name="QuicStreamCapacityChangedArgs" FullName="System.Net.Quic.QuicStreamCapacityChangedArgs">
  <TypeSignature Language="C#" Value="public readonly struct QuicStreamCapacityChangedArgs" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit QuicStreamCapacityChangedArgs extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Net.Quic.QuicStreamCapacityChangedArgs" />
  <TypeSignature Language="VB.NET" Value="Public Structure QuicStreamCapacityChangedArgs" />
  <TypeSignature Language="F#" Value="type QuicStreamCapacityChangedArgs = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class QuicStreamCapacityChangedArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Quic</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Arguments for <see cref="P:System.Net.Quic.QuicConnectionOptions.StreamCapacityCallback" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BidirectionalIncrement">
      <MemberSignature Language="C#" Value="public int BidirectionalIncrement { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BidirectionalIncrement" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicStreamCapacityChangedArgs.BidirectionalIncrement" />
      <MemberSignature Language="VB.NET" Value="Public Property BidirectionalIncrement As Integer" />
      <MemberSignature Language="F#" Value="member this.BidirectionalIncrement : int with get, set" Usage="System.Net.Quic.QuicStreamCapacityChangedArgs.BidirectionalIncrement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BidirectionalIncrement { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The increment saying how many additional bidirectional streams can be opened on the connection, increased via the latest MAX_STREAMS frame.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnidirectionalIncrement">
      <MemberSignature Language="C#" Value="public int UnidirectionalIncrement { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UnidirectionalIncrement" />
      <MemberSignature Language="DocId" Value="P:System.Net.Quic.QuicStreamCapacityChangedArgs.UnidirectionalIncrement" />
      <MemberSignature Language="VB.NET" Value="Public Property UnidirectionalIncrement As Integer" />
      <MemberSignature Language="F#" Value="member this.UnidirectionalIncrement : int with get, set" Usage="System.Net.Quic.QuicStreamCapacityChangedArgs.UnidirectionalIncrement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int UnidirectionalIncrement { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Quic</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The increment saying how many additional unidirectional streams can be opened on the connection, increased via the latest MAX_STREAMS frame.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
