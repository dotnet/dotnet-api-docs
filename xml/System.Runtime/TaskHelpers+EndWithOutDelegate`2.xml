<Type Name="TaskHelpers+EndWithOutDelegate&lt;T1,TResult&gt;" FullName="System.Runtime.TaskHelpers+EndWithOutDelegate&lt;T1,TResult&gt;">
  <TypeSignature Language="C#" Value="public delegate TResult TaskHelpers.EndWithOutDelegate&lt;T1,TResult&gt;(IAsyncResult iar, out T1 arg1);" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed TaskHelpers/EndWithOutDelegate`2&lt;T1, TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.TaskHelpers.EndWithOutDelegate`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function TaskHelpers.EndWithOutDelegate(Of T1, TResult)(iar As IAsyncResult, ByRef arg1 As T1) As TResult " />
  <TypeSignature Language="F#" Value="type TaskHelpers.EndWithOutDelegate&lt;'T1, 'Result&gt; = delegate of IAsyncResult * 'T1 -&gt; 'Result" />
  <TypeSignature Language="C++ CLI" Value="public: generic &lt;typename T1, typename TResult&gt;&#xA;delegate TResult TaskHelpers::EndWithOutDelegate(IAsyncResult ^ iar, [Runtime::InteropServices::Out] T1 % arg1);" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="iar" Type="System.IAsyncResult" />
    <Parameter Name="arg1" Type="T1" RefType="out" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">To be added.</typeparam>
    <typeparam name="TResult">To be added.</typeparam>
    <param name="iar">To be added.</param>
    <param name="arg1">To be added.</param>
    <summary>To be added.</summary>
    <returns>To be added.</returns>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
