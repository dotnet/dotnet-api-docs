<Type Name="DependentHandle" FullName="System.Runtime.DependentHandle">
  <TypeSignature Language="C#" Value="public struct DependentHandle : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DependentHandle extends System.ValueType implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.DependentHandle" />
  <TypeSignature Language="VB.NET" Value="Public Structure DependentHandle&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type DependentHandle = struct&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public value class DependentHandle : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a dependent garbage-collection handle. The handle will conditionally keep a dependent object instance alive as long as a target object instance is alive as well, without representing a strong reference to the target instance.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

A <xref:System.Runtime.DependentHandle> value with a given object instance as target will not cause the target
to be kept alive if there are no other strong references to it, but it will do so for the dependent
object instance as long as the target is alive.
            
Using this type is conceptually equivalent to having a weak reference to a given target object instance A,
with that object having a field or property (or some other strong reference) to a dependent object instance B.

The <xref:System.Runtime.DependentHandle> type is not thread-safe, and consumers are responsible for ensuring that
<xref:System.Runtime.DependentHandle.Dispose> is not called concurrently with other APIs. Not doing so results in undefined behavior.

The <xref:System.Runtime.DependentHandle.IsAllocated>, <xref:System.Runtime.DependentHandle.Target>, <xref:System.Runtime.DependentHandle.Dependent>, and <xref:System.Runtime.DependentHandle.TargetAndDependent>
properties are instead thread-safe, and safe to use if <xref:System.Runtime.DependentHandle.Dispose> is not concurrently invoked as well.
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependentHandle (object? target, object? dependent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object target, object dependent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DependentHandle.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (target As Object, dependent As Object)" />
      <MemberSignature Language="F#" Value="new System.Runtime.DependentHandle : obj * obj -&gt; System.Runtime.DependentHandle" Usage="new System.Runtime.DependentHandle (target, dependent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependentHandle(System::Object ^ target, System::Object ^ dependent);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="dependent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target">The target object instance to track.</param>
        <param name="dependent">The dependent object instance to associate with <paramref name="target" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.DependentHandle" /> struct with the specified arguments.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependent">
      <MemberSignature Language="C#" Value="public object? Dependent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Dependent" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DependentHandle.Dependent" />
      <MemberSignature Language="VB.NET" Value="Public Property Dependent As Object" />
      <MemberSignature Language="F#" Value="member this.Dependent : obj with get, set" Usage="System.Runtime.DependentHandle.Dependent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Dependent { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the dependent object instance for the current handle.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

If you need to retrieve both <xref:System.Runtime.DependentHandle.Target> and <xref:System.Runtime.DependentHandle.Dependent>,
ensure that the returned instance from <xref:System.Runtime.DependentHandle.Target> will be kept alive until <xref:System.Runtime.DependentHandle.Dependent>
is retrieved as well, or it might be collected and result in unexpected behavior. This can be done by storing the
target in a local and calling <xref:System.GC.KeepAlive(System.Object)> on it after <xref:System.Runtime.DependentHandle.Dependent> is accessed.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Runtime.DependentHandle.IsAllocated" /> is <see langword="false" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DependentHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="dependentHandle.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method is not thread-safe.

          ]]></format>
        </remarks>
        <inheritdoc cref="M:System.IDisposable.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="IsAllocated">
      <MemberSignature Language="C#" Value="public bool IsAllocated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAllocated" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DependentHandle.IsAllocated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAllocated As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsAllocated : bool" Usage="System.Runtime.DependentHandle.IsAllocated" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAllocated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this instance was constructed with <see cref="M:System.Runtime.DependentHandle.#ctor(System.Object,System.Object)" /> and has not yet been disposed.</summary>
        <value>
          <see langword="true" /> if this instance was constructed with <see cref="M:System.Runtime.DependentHandle.#ctor(System.Object,System.Object)" /> and has not yet been disposed; <see langword="false" /> otherwise.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This property is thread-safe.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object? Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DependentHandle.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As Object" />
      <MemberSignature Language="F#" Value="member this.Target : obj with get, set" Usage="System.Runtime.DependentHandle.Target" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the target object instance for the current handle. The target can only be set to a <see langword="null" /> value once the <see cref="T:System.Runtime.DependentHandle" /> instance has been created. Doing so will cause <see cref="P:System.Runtime.DependentHandle.Dependent" /> to start returning <see langword="null" /> as well, and to become eligible for collection even if the previous target is still alive.</summary>
        <value>The target object instance for the current handle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This property is thread-safe.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Runtime.DependentHandle.IsAllocated" /> is <see langword="false" /> or the input value is not <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TargetAndDependent">
      <MemberSignature Language="C#" Value="public (object? Target, object? Dependent) TargetAndDependent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ValueTuple`2&lt;object, object&gt; TargetAndDependent" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DependentHandle.TargetAndDependent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetAndDependent As ValueTuple(Of Object, Object)" />
      <MemberSignature Language="F#" Value="member this.TargetAndDependent : ValueTuple&lt;obj, obj&gt;" Usage="System.Runtime.DependentHandle.TargetAndDependent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ValueTuple&lt;System::Object ^, System::Object ^&gt; TargetAndDependent { ValueTuple&lt;System::Object ^, System::Object ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Target", "Dependent" })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Target", "Dependent" })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the values of both <see cref="P:System.Runtime.DependentHandle.Target" /> and <see cref="P:System.Runtime.DependentHandle.Dependent" /> (if available) as an atomic operation.
            That is, even if <see cref="P:System.Runtime.DependentHandle.Target" /> is concurrently set to <see langword="null" />, calling this method will either return <see langword="null" /> for both target and dependent, or return both previous values.
            If <see cref="P:System.Runtime.DependentHandle.Target" /> and <see cref="P:System.Runtime.DependentHandle.Dependent" /> were used sequentially in this scenario instead, it would be possible to sometimes successfully retrieve the previous target, but then fail to get the dependent.</summary>
        <value>The values of <see cref="P:System.Runtime.DependentHandle.Target" /> and <see cref="P:System.Runtime.DependentHandle.Dependent" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This property is thread-safe.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Runtime.DependentHandle.IsAllocated" /> is <see langword="false" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
