<Type Name="ControlledExecution" FullName="System.Runtime.ControlledExecution">
  <TypeSignature Language="C#" Value="public static class ControlledExecution" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ControlledExecution extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ControlledExecution" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlledExecution" />
  <TypeSignature Language="F#" Value="type ControlledExecution = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlledExecution abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Enables code to be run and aborted asynchronously.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ControlledExecution.Run(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (action As Action, cancellationToken As CancellationToken)" />
      <MemberSignature Language="F#" Value="static member Run : Action * System.Threading.CancellationToken -&gt; unit" Usage="System.Runtime.ControlledExecution.Run (action, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("ControlledExecution.Run method may corrupt the process and should not be used in production code.", DiagnosticId="SYSLIB0046", UrlFormat="https://aka.ms/dotnet-warnings/{0}")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("ControlledExecution.Run method may corrupt the process and should not be used in production code.", DiagnosticId="SYSLIB0046", UrlFormat="https://aka.ms/dotnet-warnings/{0}")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">The delegate that represents the code to execute.</param>
        <param name="cancellationToken">The cancellation token that can be used to abort execution.</param>
        <summary>Runs code that can be aborted asynchronously.</summary>
        <remarks>
          <para>This method enables aborting arbitrary managed code in a non-cooperative manner by throwing an exception in the thread executing that code.  While the exception may be caught by the code, it is re-thrown at the end of <see langword="catch"/> blocks until the execution flow returns to the <c>ControlledExecution.Run</c> method.</para>
          <para>Execution of the code is not guaranteed to abort immediately, or at all.  This situation can occur, for example, if a thread is stuck executing unmanaged code or the <see langword="catch"/> and <see langword="finally"/> blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.  Furthermore, execution may not be aborted immediately if the thread is currently executing a <see langword="catch"/> or <see langword="finally"/> block.</para>
          <para>Aborting code at an unexpected location may corrupt the state of data structures in the process and lead to unpredictable results.  For that reason, this method should not be used in production code and calling it produces a compile-time warning.</para>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">The method is not supported on this platform.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current thread is already running the <see cref="M:System.Runtime.ControlledExecution.Run(System.Action,System.Threading.CancellationToken)" /> method.</exception>
        <exception cref="T:System.OperationCanceledException">The execution was aborted.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
