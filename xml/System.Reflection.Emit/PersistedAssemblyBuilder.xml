<Type Name="PersistedAssemblyBuilder" FullName="System.Reflection.Emit.PersistedAssemblyBuilder">
  <TypeSignature Language="C#" Value="public sealed class PersistedAssemblyBuilder : System.Reflection.Emit.AssemblyBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PersistedAssemblyBuilder extends System.Reflection.Emit.AssemblyBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.PersistedAssemblyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PersistedAssemblyBuilder&#xA;Inherits AssemblyBuilder" />
  <TypeSignature Language="F#" Value="type PersistedAssemblyBuilder = class&#xA;    inherit AssemblyBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistedAssemblyBuilder sealed : System::Reflection::Emit::AssemblyBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.Emit.AssemblyBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides an AssemblyBuilder implementation that can persist assembly to a disk or stream.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PersistedAssemblyBuilder (System.Reflection.AssemblyName name, System.Reflection.Assembly coreAssembly, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;? assemblyAttributes = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.AssemblyName name, class System.Reflection.Assembly coreAssembly, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PersistedAssemblyBuilder.#ctor(System.Reflection.AssemblyName,System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As AssemblyName, coreAssembly As Assembly, Optional assemblyAttributes As IEnumerable(Of CustomAttributeBuilder) = Nothing)" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.PersistedAssemblyBuilder : System.Reflection.AssemblyName * System.Reflection.Assembly * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; -&gt; System.Reflection.Emit.PersistedAssemblyBuilder" Usage="new System.Reflection.Emit.PersistedAssemblyBuilder (name, coreAssembly, assemblyAttributes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="coreAssembly" Type="System.Reflection.Assembly" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">The name of the assembly.</param>
        <param name="coreAssembly">The assembly that denotes the "system assembly" that houses the well-known types such as <see cref="T:System.Object" /></param>
        <param name="assemblyAttributes">A collection that contains the attributes of the assembly.</param>
        <summary>Creates a <see cref="T:System.Reflection.Emit.PersistedAssemblyBuilder" /> instance that can be saved to a file or stream.</summary>
        <remarks>Currently the persisted assembly doesn't support running. You must save it and load it back to run.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> or <paramref name="name.Name.Name" /> or <paramref name="coreAssembly" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicModuleCore">
      <MemberSignature Language="C#" Value="protected override System.Reflection.Emit.ModuleBuilder DefineDynamicModuleCore (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModuleCore(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PersistedAssemblyBuilder.DefineDynamicModuleCore(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function DefineDynamicModuleCore (name As String) As ModuleBuilder" />
      <MemberSignature Language="F#" Value="override this.DefineDynamicModuleCore : string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="persistedAssemblyBuilder.DefineDynamicModuleCore name" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::Emit::ModuleBuilder ^ DefineDynamicModuleCore(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Defining a dynamic assembly requires dynamic code.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.RequiresDynamicCode("Defining a dynamic assembly requires dynamic code.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string? FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PersistedAssemblyBuilder.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.Emit.PersistedAssemblyBuilder.FullName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the display name of the current dynamic assembly.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateMetadata">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.Ecma335.MetadataBuilder GenerateMetadata (out System.Reflection.Metadata.BlobBuilder ilStream, out System.Reflection.Metadata.BlobBuilder mappedFieldData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.Ecma335.MetadataBuilder GenerateMetadata([out] class System.Reflection.Metadata.BlobBuilder&amp; ilStream, [out] class System.Reflection.Metadata.BlobBuilder&amp; mappedFieldData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PersistedAssemblyBuilder.GenerateMetadata(System.Reflection.Metadata.BlobBuilder@,System.Reflection.Metadata.BlobBuilder@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateMetadata (ByRef ilStream As BlobBuilder, ByRef mappedFieldData As BlobBuilder) As MetadataBuilder" />
      <MemberSignature Language="F#" Value="member this.GenerateMetadata : BlobBuilder * BlobBuilder -&gt; System.Reflection.Metadata.Ecma335.MetadataBuilder" Usage="persistedAssemblyBuilder.GenerateMetadata (ilStream, mappedFieldData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::Ecma335::MetadataBuilder ^ GenerateMetadata([Runtime::InteropServices::Out] System::Reflection::Metadata::BlobBuilder ^ % ilStream, [Runtime::InteropServices::Out] System::Reflection::Metadata::BlobBuilder ^ % mappedFieldData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.Ecma335.MetadataBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ilStream" Type="System.Reflection.Metadata.BlobBuilder" RefType="out" />
        <Parameter Name="mappedFieldData" Type="System.Reflection.Metadata.BlobBuilder" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ilStream">When this method returns, contains the <see cref="T:System.Reflection.Metadata.BlobBuilder" /> bytes that includes all method's IL (body) emitted.</param>
        <param name="mappedFieldData">When this method returns, contains the <see cref="T:System.Reflection.Metadata.BlobBuilder" /> bytes that includes all field RVA data defined in the assembly.</param>
        <summary>Generates the metadata for the <see cref="T:System.Reflection.Emit.PersistedAssemblyBuilder" />.</summary>
        <returns>A <see cref="T:System.Reflection.Metadata.Ecma335.MetadataBuilder" /> that includes all members defined in the Assembly.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">A module is not defined for the assembly.</exception>
        <exception cref="T:System.InvalidOperationException">The metadata was previously populated for the assembly.</exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateMetadata">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.Ecma335.MetadataBuilder GenerateMetadata (out System.Reflection.Metadata.BlobBuilder ilStream, out System.Reflection.Metadata.BlobBuilder mappedFieldData, out System.Reflection.Metadata.Ecma335.MetadataBuilder pdbBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.Ecma335.MetadataBuilder GenerateMetadata([out] class System.Reflection.Metadata.BlobBuilder&amp; ilStream, [out] class System.Reflection.Metadata.BlobBuilder&amp; mappedFieldData, [out] class System.Reflection.Metadata.Ecma335.MetadataBuilder&amp; pdbBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PersistedAssemblyBuilder.GenerateMetadata(System.Reflection.Metadata.BlobBuilder@,System.Reflection.Metadata.BlobBuilder@,System.Reflection.Metadata.Ecma335.MetadataBuilder@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GenerateMetadata (ByRef ilStream As BlobBuilder, ByRef mappedFieldData As BlobBuilder, ByRef pdbBuilder As MetadataBuilder) As MetadataBuilder" />
      <MemberSignature Language="F#" Value="member this.GenerateMetadata : BlobBuilder * BlobBuilder * MetadataBuilder -&gt; System.Reflection.Metadata.Ecma335.MetadataBuilder" Usage="persistedAssemblyBuilder.GenerateMetadata (ilStream, mappedFieldData, pdbBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::Ecma335::MetadataBuilder ^ GenerateMetadata([Runtime::InteropServices::Out] System::Reflection::Metadata::BlobBuilder ^ % ilStream, [Runtime::InteropServices::Out] System::Reflection::Metadata::BlobBuilder ^ % mappedFieldData, [Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::MetadataBuilder ^ % pdbBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.Ecma335.MetadataBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ilStream" Type="System.Reflection.Metadata.BlobBuilder" RefType="out" />
        <Parameter Name="mappedFieldData" Type="System.Reflection.Metadata.BlobBuilder" RefType="out" />
        <Parameter Name="pdbBuilder" Type="System.Reflection.Metadata.Ecma335.MetadataBuilder" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ilStream">When this method returns, contains the <see cref="T:System.Reflection.Metadata.BlobBuilder" /> bytes that includes all method's IL (body) emitted.</param>
        <param name="mappedFieldData">When this method returns, contains the <see cref="T:System.Reflection.Metadata.BlobBuilder" /> bytes that includes all field RVA data defined in the assembly.</param>
        <param name="pdbBuilder">When this method returns, contains the <see cref="T:System.Reflection.Metadata.Ecma335.MetadataBuilder" /> that includes PDB metadata.</param>
        <summary>Generates the metadata for the <see cref="T:System.Reflection.Emit.PersistedAssemblyBuilder" />.</summary>
        <returns>A <see cref="T:System.Reflection.Metadata.Ecma335.MetadataBuilder" /> that includes all members defined in the Assembly.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">A module not defined for the assembly.</exception>
        <exception cref="T:System.InvalidOperationException">The metadata already populated for the assembly previously.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicModuleCore">
      <MemberSignature Language="C#" Value="protected override System.Reflection.Emit.ModuleBuilder? GetDynamicModuleCore (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.Emit.ModuleBuilder GetDynamicModuleCore(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PersistedAssemblyBuilder.GetDynamicModuleCore(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetDynamicModuleCore (name As String) As ModuleBuilder" />
      <MemberSignature Language="F#" Value="override this.GetDynamicModuleCore : string -&gt; System.Reflection.Emit.ModuleBuilder" Usage="persistedAssemblyBuilder.GetDynamicModuleCore name" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::Emit::ModuleBuilder ^ GetDynamicModuleCore(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ModuleBuilder</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public override System.Reflection.AssemblyName GetName (bool copiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.AssemblyName GetName(bool copiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PersistedAssemblyBuilder.GetName(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetName (copiedName As Boolean) As AssemblyName" />
      <MemberSignature Language="F#" Value="override this.GetName : bool -&gt; System.Reflection.AssemblyName" Usage="persistedAssemblyBuilder.GetName copiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::AssemblyName ^ GetName(bool copiedName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copiedName" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="copiedName">
          <see langword="true" /> to get a copied name; <see langword="false" /> to set get the original name.</param>
        <summary>Gets the <see cref="T:System.Reflection.AssemblyName" /> that was specified when the current dynamic assembly was created.</summary>
        <returns>The name of the dynamic assembly.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDynamic">
      <MemberSignature Language="C#" Value="public override bool IsDynamic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDynamic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PersistedAssemblyBuilder.IsDynamic" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDynamic As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsDynamic : bool" Usage="System.Reflection.Emit.PersistedAssemblyBuilder.IsDynamic" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDynamic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates that the current assembly is a dynamic assembly.</summary>
        <value>Always <see langword="true" />.</value>
        <remarks>A <see cref="T:System.Reflection.Emit.PersistedAssemblyBuilder" /> object always represents a dynamic assembly.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManifestModule">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module ManifestModule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module ManifestModule" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PersistedAssemblyBuilder.ManifestModule" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ManifestModule As Module" />
      <MemberSignature Language="F#" Value="member this.ManifestModule : System.Reflection.Module" Usage="System.Reflection.Emit.PersistedAssemblyBuilder.ManifestModule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ ManifestModule { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the module in the current <see cref="T:System.Reflection.Emit.PersistedAssemblyBuilder" /> that contains the assembly manifest.</summary>
        <value>To be added.</value>
        <remarks>
          <see cref="T:System.Reflection.Emit.PersistedAssemblyBuilder" /> supports only one module per assembly.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PersistedAssemblyBuilder.Save(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (stream As Stream)" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream -&gt; unit" Usage="persistedAssemblyBuilder.Save stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">The <see cref="T:System.IO.Stream" /> to which the assembly should be serialized.</param>
        <summary>Serializes the assembly to the specified stream.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A module not defined for the assembly.</exception>
        <exception cref="T:System.InvalidOperationException">The metadata already populated for the assembly before.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string assemblyFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string assemblyFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PersistedAssemblyBuilder.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (assemblyFileName As String)" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="persistedAssemblyBuilder.Save assemblyFileName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ assemblyFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFileName">The file name of the assembly.</param>
        <summary>Saves the assembly to disk.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A module not defined for the assembly.</exception>
        <exception cref="T:System.InvalidOperationException">The metadata already populated for the assembly before.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttributeCore">
      <MemberSignature Language="C#" Value="protected override void SetCustomAttributeCore (System.Reflection.ConstructorInfo con, ReadOnlySpan&lt;byte&gt; binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetCustomAttributeCore(class System.Reflection.ConstructorInfo con, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PersistedAssemblyBuilder.SetCustomAttributeCore(System.Reflection.ConstructorInfo,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetCustomAttributeCore (con As ConstructorInfo, binaryAttribute As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="F#" Value="override this.SetCustomAttributeCore : System.Reflection.ConstructorInfo * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="persistedAssemblyBuilder.SetCustomAttributeCore (con, binaryAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetCustomAttributeCore(System::Reflection::ConstructorInfo ^ con, ReadOnlySpan&lt;System::Byte&gt; binaryAttribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="binaryAttribute" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="con">To be added.</param>
        <param name="binaryAttribute">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
