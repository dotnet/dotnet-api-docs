<Type Name="ScenarioRunResultExtensions" FullName="Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResultExtensions">
  <TypeSignature Language="C#" Value="public static class ScenarioRunResultExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ScenarioRunResultExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResultExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ScenarioRunResultExtensions" />
  <TypeSignature Language="F#" Value="type ScenarioRunResultExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScenarioRunResultExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ContainsDiagnostics">
      <MemberSignature Language="C#" Value="public static bool ContainsDiagnostics (this Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult result, Func&lt;Microsoft.Extensions.AI.Evaluation.EvaluationDiagnostic,bool&gt;? predicate = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ContainsDiagnostics(class Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult result, class System.Func`2&lt;class Microsoft.Extensions.AI.Evaluation.EvaluationDiagnostic, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResultExtensions.ContainsDiagnostics(Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult,System.Func{Microsoft.Extensions.AI.Evaluation.EvaluationDiagnostic,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ContainsDiagnostics (result As ScenarioRunResult, Optional predicate As Func(Of EvaluationDiagnostic, Boolean) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member ContainsDiagnostics : Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult * Func&lt;Microsoft.Extensions.AI.Evaluation.EvaluationDiagnostic, bool&gt; -&gt; bool" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResultExtensions.ContainsDiagnostics (result, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;Microsoft.Extensions.AI.Evaluation.EvaluationDiagnostic,System.Boolean&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="result">The <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" /> that is to be inspected.</param>
        <param name="predicate">
            A predicate that returns <see langword="true" /> if a matching <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationDiagnostic" /> is found;
            <see langword="false" /> otherwise.
            </param>
        <summary>
            Returns <see langword="true" /> if any <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetric" /> contained in the supplied
            <paramref name="result" /> contains an <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationDiagnostic" /> matching the supplied
            <paramref name="predicate" />; <see langword="false" /> otherwise.
            </summary>
        <returns>
          <see langword="true" /> if any <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetric" /> contained in the supplied
            <paramref name="result" /> contains an <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationDiagnostic" /> matching the supplied
            <paramref name="predicate" />; <see langword="false" /> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
