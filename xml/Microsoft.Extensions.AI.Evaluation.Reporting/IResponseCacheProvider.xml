<Type Name="IResponseCacheProvider" FullName="Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider">
  <TypeSignature Language="C#" Value="public interface IResponseCacheProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IResponseCacheProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IResponseCacheProvider" />
  <TypeSignature Language="F#" Value="type IResponseCacheProvider = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IResponseCacheProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Provides a way to get the <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> that caches the AI responses associated with a particular
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />.
            </summary>
    <remarks>
      <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider" /> can be used to set up caching of AI-generated responses (both the AI responses
            under evaluation as well as the AI responses for the evaluations themselves). When caching is enabled, the AI
            responses associated with each <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" /> are stored in the <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> that is
            returned from this <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider" />. So long as the inputs (such as the content included in the
            requests, the AI model being invoked etc.) remain unchanged, subsequent evaluations of the same
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" /> use the cached responses instead of invoking the AI model to generate new ones. Bypassing
            the AI model when the inputs remain unchanged results in faster execution at a lower cost.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="DeleteExpiredCacheEntriesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DeleteExpiredCacheEntriesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DeleteExpiredCacheEntriesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider.DeleteExpiredCacheEntriesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteExpiredCacheEntriesAsync (Optional cancellationToken As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DeleteExpiredCacheEntriesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="iResponseCacheProvider.DeleteExpiredCacheEntriesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can cancel the operation.</param>
        <summary>
            Deletes expired cache entries for all <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />s.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.Caching.Distributed.IDistributedCache&gt; GetCacheAsync (string scenarioName, string iterationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Microsoft.Extensions.Caching.Distributed.IDistributedCache&gt; GetCacheAsync(string scenarioName, string iterationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider.GetCacheAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCacheAsync (scenarioName As String, iterationName As String, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of IDistributedCache)" />
      <MemberSignature Language="F#" Value="abstract member GetCacheAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.Caching.Distributed.IDistributedCache&gt;" Usage="iResponseCacheProvider.GetCacheAsync (scenarioName, iterationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.Caching.Distributed.IDistributedCache&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scenarioName" Type="System.String" />
        <Parameter Name="iterationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scenarioName">The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />.</param>
        <param name="iterationName">The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" />.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can cancel the operation.</param>
        <summary>
            Returns an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> that caches the AI responses associated with a particular
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />.
            </summary>
        <returns>
            An <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> that caches the AI responses associated with a particular
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask ResetAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask ResetAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider.ResetAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResetAsync (Optional cancellationToken As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member ResetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="iResponseCacheProvider.ResetAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can cancel the operation.</param>
        <summary>
            Deletes cached AI responses for all <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />s.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
