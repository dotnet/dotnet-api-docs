<Type Name="ReportingConfiguration" FullName="Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration">
  <TypeSignature Language="C#" Value="public sealed class ReportingConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReportingConfiguration extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReportingConfiguration" />
  <TypeSignature Language="F#" Value="type ReportingConfiguration = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReportingConfiguration sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents the configuration for a set of <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />s that defines the set of
            <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluator" />s that should be invoked, the <see cref="T:Microsoft.Extensions.AI.Evaluation.ChatConfiguration" /> that should be
            used by these <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluator" />s, how the resulting <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s should be persisted,
            and how AI responses should be cached.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReportingConfiguration (System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.Evaluation.IEvaluator&gt; evaluators, Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore resultStore, Microsoft.Extensions.AI.Evaluation.ChatConfiguration? chatConfiguration = default, Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider? responseCacheProvider = default, System.Collections.Generic.IEnumerable&lt;string&gt;? cachingKeys = default, string executionName = &quot;Default&quot;, Func&lt;Microsoft.Extensions.AI.Evaluation.EvaluationMetric,Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation?&gt;? evaluationMetricInterpreter = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.Evaluation.IEvaluator&gt; evaluators, class Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore resultStore, class Microsoft.Extensions.AI.Evaluation.ChatConfiguration chatConfiguration, class Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider responseCacheProvider, class System.Collections.Generic.IEnumerable`1&lt;string&gt; cachingKeys, string executionName, class System.Func`2&lt;class Microsoft.Extensions.AI.Evaluation.EvaluationMetric, class Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation&gt; evaluationMetricInterpreter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.Evaluation.IEvaluator},Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore,Microsoft.Extensions.AI.Evaluation.ChatConfiguration,Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider,System.Collections.Generic.IEnumerable{System.String},System.String,System.Func{Microsoft.Extensions.AI.Evaluation.EvaluationMetric,Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (evaluators As IEnumerable(Of IEvaluator), resultStore As IResultStore, Optional chatConfiguration As ChatConfiguration = Nothing, Optional responseCacheProvider As IResponseCacheProvider = Nothing, Optional cachingKeys As IEnumerable(Of String) = Nothing, Optional executionName As String = &quot;Default&quot;, Optional evaluationMetricInterpreter As Func(Of EvaluationMetric, EvaluationMetricInterpretation) = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration : seq&lt;Microsoft.Extensions.AI.Evaluation.IEvaluator&gt; * Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore * Microsoft.Extensions.AI.Evaluation.ChatConfiguration * Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider * seq&lt;string&gt; * string * Func&lt;Microsoft.Extensions.AI.Evaluation.EvaluationMetric, Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation&gt; -&gt; Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration" Usage="new Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration (evaluators, resultStore, chatConfiguration, responseCacheProvider, cachingKeys, executionName, evaluationMetricInterpreter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="evaluators" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.Evaluation.IEvaluator&gt;" />
        <Parameter Name="resultStore" Type="Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore" />
        <Parameter Name="chatConfiguration" Type="Microsoft.Extensions.AI.Evaluation.ChatConfiguration">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="responseCacheProvider" Type="Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cachingKeys" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="executionName" Type="System.String" />
        <Parameter Name="evaluationMetricInterpreter" Type="System.Func&lt;Microsoft.Extensions.AI.Evaluation.EvaluationMetric,Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="evaluators">
            The set of <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluator" />s that should be invoked to evaluate AI responses.
            </param>
        <param name="resultStore">
            The <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore" /> that should be used to persist the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s.
            </param>
        <param name="chatConfiguration">
            A <see cref="T:Microsoft.Extensions.AI.Evaluation.ChatConfiguration" /> that specifies the <see cref="T:Microsoft.Extensions.AI.IChatClient" /> and the
            <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluationTokenCounter" /> that are used by AI-based <paramref name="evaluators" /> included in this
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration" />. Can be omitted if none of the included <paramref name="evaluators" /> are
            AI-based.
            </param>
        <param name="responseCacheProvider">
            The <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider" /> that should be used to cache AI responses. If omitted, AI responses
            will not be cached.
            </param>
        <param name="cachingKeys">
            An optional collection of unique strings that should be hashed when generating the cache keys for cached AI
            responses. See <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.CachingKeys" /> for more information about this concept.
            </param>
        <param name="executionName">
            The name of the current execution. See <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" /> for more information about this
            concept. Uses a fixed default value <c>"Default"</c> if omitted.
            </param>
        <param name="evaluationMetricInterpreter">
            An optional function that can be used to override <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation" />s for
            <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetric" />s returned from evaluations that use this <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration" />.
            The supplied function can either return a new <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation" /> for any
            <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetric" /> that is supplied to it, or return <see langword="null" /> if the
            <see cref="P:Microsoft.Extensions.AI.Evaluation.EvaluationMetric.Interpretation" /> should be left unchanged.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CachingKeys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;string&gt; CachingKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; CachingKeys" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.CachingKeys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CachingKeys As IReadOnlyList(Of String)" />
      <MemberSignature Language="F#" Value="member this.CachingKeys : System.Collections.Generic.IReadOnlyList&lt;string&gt;" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.CachingKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;System::String ^&gt; ^ CachingKeys { System::Collections::Generic::IReadOnlyList&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the collection of unique strings that should be hashed when generating the cache keys for cached AI
            responses.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            If no additional caching keys are supplied, then the cache keys for a cached response are generated based on
            the content of the AI request that produced this response, metadata such as model name and endpoint present in
            the configured <see cref="T:Microsoft.Extensions.AI.IChatClient" /> and the <see cref="T:Microsoft.Extensions.AI.ChatOptions" /> that are supplied as part of
            generating the response.
            </para>
          <para>
            Additionally, the name of the scenario and the iteration are always included in the cache key. This means that
            the cached responses for a particular scenario and iteration will not be reused for a different scenario and
            iteration even if the AI request content and metadata happen to be the same.
            </para>
          <para>
            Supplying additional caching keys can be useful when some external factors need to be considered when deciding
            whether a cached AI response is still valid. For example, consider the case where one of the supplied
            additional caching keys is the version of the AI model being invoked. If the product moves to a newer version
            of the model, then updating the caching key to reflect this change will cause all cached entries that rely on
            this caching key to be invalidated thereby ensuring that the subsequent evaluations will not use the outdated
            cached responses produced by the previous model version.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChatConfiguration">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.AI.Evaluation.ChatConfiguration? ChatConfiguration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.AI.Evaluation.ChatConfiguration ChatConfiguration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.ChatConfiguration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChatConfiguration As ChatConfiguration" />
      <MemberSignature Language="F#" Value="member this.ChatConfiguration : Microsoft.Extensions.AI.Evaluation.ChatConfiguration" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.ChatConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::AI::Evaluation::ChatConfiguration ^ ChatConfiguration { Microsoft::Extensions::AI::Evaluation::ChatConfiguration ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.Evaluation.ChatConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a <see cref="T:Microsoft.Extensions.AI.Evaluation.ChatConfiguration" /> that specifies the <see cref="T:Microsoft.Extensions.AI.IChatClient" /> and the
            <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluationTokenCounter" /> that are used by AI-based <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.Evaluators" /> included in this
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScenarioRunAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun&gt; CreateScenarioRunAsync (string scenarioName, string iterationName = &quot;1&quot;, System.Collections.Generic.IEnumerable&lt;string&gt;? additionalCachingKeys = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun&gt; CreateScenarioRunAsync(string scenarioName, string iterationName, class System.Collections.Generic.IEnumerable`1&lt;string&gt; additionalCachingKeys, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.CreateScenarioRunAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateScenarioRunAsync (scenarioName As String, Optional iterationName As String = &quot;1&quot;, Optional additionalCachingKeys As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of ScenarioRun)" />
      <MemberSignature Language="F#" Value="member this.CreateScenarioRunAsync : string * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun&gt;" Usage="reportingConfiguration.CreateScenarioRunAsync (scenarioName, iterationName, additionalCachingKeys, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scenarioName" Type="System.String" />
        <Parameter Name="iterationName" Type="System.String" />
        <Parameter Name="additionalCachingKeys" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scenarioName">The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />.</param>
        <param name="iterationName">
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" />. Uses default value <c>"1"</c> if omitted.
            </param>
        <param name="additionalCachingKeys">
            An optional collection of unique strings that should be hashed when generating the cache keys for cached AI
            responses. See <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.CachingKeys" /> for more information about this concept.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can cancel the operation.</param>
        <summary>
            Creates a new <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" /> with the specified <paramref name="scenarioName" /> and
            <paramref name="iterationName" />.
            </summary>
        <returns>
            A new <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" /> with the specified <paramref name="scenarioName" /> and
            <paramref name="iterationName" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluationMetricInterpreter">
      <MemberSignature Language="C#" Value="public Func&lt;Microsoft.Extensions.AI.Evaluation.EvaluationMetric,Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation?&gt;? EvaluationMetricInterpreter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class Microsoft.Extensions.AI.Evaluation.EvaluationMetric, class Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation&gt; EvaluationMetricInterpreter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.EvaluationMetricInterpreter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EvaluationMetricInterpreter As Func(Of EvaluationMetric, EvaluationMetricInterpretation)" />
      <MemberSignature Language="F#" Value="member this.EvaluationMetricInterpreter : Func&lt;Microsoft.Extensions.AI.Evaluation.EvaluationMetric, Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation&gt;" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.EvaluationMetricInterpreter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;Microsoft::Extensions::AI::Evaluation::EvaluationMetric ^, Microsoft::Extensions::AI::Evaluation::EvaluationMetricInterpretation ^&gt; ^ EvaluationMetricInterpreter { Func&lt;Microsoft::Extensions::AI::Evaluation::EvaluationMetric ^, Microsoft::Extensions::AI::Evaluation::EvaluationMetricInterpretation ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 2 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 2 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.Extensions.AI.Evaluation.EvaluationMetric,Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a function that can be optionally used to override <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation" />s for
            <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetric" />s returned from evaluations that use this <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration" />.
            </summary>
        <value>To be added.</value>
        <remarks>
            The supplied function can either return a new <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetricInterpretation" /> for any
            <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetric" /> that is supplied to it, or return <see langword="null" /> if the
            <see cref="P:Microsoft.Extensions.AI.Evaluation.EvaluationMetric.Interpretation" /> should be left unchanged.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.Evaluation.IEvaluator&gt; Evaluators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Extensions.AI.Evaluation.IEvaluator&gt; Evaluators" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.Evaluators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Evaluators As IReadOnlyList(Of IEvaluator)" />
      <MemberSignature Language="F#" Value="member this.Evaluators : System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.Evaluation.IEvaluator&gt;" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.Evaluators" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;Microsoft::Extensions::AI::Evaluation::IEvaluator ^&gt; ^ Evaluators { System::Collections::Generic::IReadOnlyList&lt;Microsoft::Extensions::AI::Evaluation::IEvaluator ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.Evaluation.IEvaluator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the set of <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluator" />s that should be invoked to evaluate AI responses.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionName">
      <MemberSignature Language="C#" Value="public string ExecutionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExecutionName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.ExecutionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionName As String" />
      <MemberSignature Language="F#" Value="member this.ExecutionName : string" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.ExecutionName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExecutionName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the current execution.
            </summary>
        <value>To be added.</value>
        <remarks>
            See <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" /> for more information about this concept.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseCacheProvider">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider? ResponseCacheProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider ResponseCacheProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.ResponseCacheProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResponseCacheProvider As IResponseCacheProvider" />
      <MemberSignature Language="F#" Value="member this.ResponseCacheProvider : Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.ResponseCacheProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::AI::Evaluation::Reporting::IResponseCacheProvider ^ ResponseCacheProvider { Microsoft::Extensions::AI::Evaluation::Reporting::IResponseCacheProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider" /> that should be used to cache AI responses.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResultStore">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore ResultStore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore ResultStore" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.ResultStore" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResultStore As IResultStore" />
      <MemberSignature Language="F#" Value="member this.ResultStore : Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ReportingConfiguration.ResultStore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::AI::Evaluation::Reporting::IResultStore ^ ResultStore { Microsoft::Extensions::AI::Evaluation::Reporting::IResultStore ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore" /> that should be used to persist the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
