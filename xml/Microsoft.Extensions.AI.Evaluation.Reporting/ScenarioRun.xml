<Type Name="ScenarioRun" FullName="Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun">
  <TypeSignature Language="C#" Value="public sealed class ScenarioRun : IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ScenarioRun extends System.Object implements class System.IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ScenarioRun&#xA;Implements IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type ScenarioRun = class&#xA;    interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScenarioRun sealed : IAsyncDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a single execution of a particular iteration of a particular scenario under evaluation.
            </summary>
    <remarks>
            Each execution of an evaluation run is assigned a unique <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />. A single such evaluation run
            can contain evaluations for multiple scenarios each with a unique <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />. The execution of each
            such scenario in turn can include multiple iterations each with a unique <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChatConfiguration">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.AI.Evaluation.ChatConfiguration? ChatConfiguration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.AI.Evaluation.ChatConfiguration ChatConfiguration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ChatConfiguration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChatConfiguration As ChatConfiguration" />
      <MemberSignature Language="F#" Value="member this.ChatConfiguration : Microsoft.Extensions.AI.Evaluation.ChatConfiguration" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ChatConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::AI::Evaluation::ChatConfiguration ^ ChatConfiguration { Microsoft::Extensions::AI::Evaluation::ChatConfiguration ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.Evaluation.ChatConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a <see cref="T:Microsoft.Extensions.AI.Evaluation.ChatConfiguration" /> that specifies the <see cref="T:Microsoft.Extensions.AI.IChatClient" /> and the
            <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluationTokenCounter" /> that are used by AI-based <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluator" />s that are invoked as
            part of the evaluation of this <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="scenarioRun.DisposeAsync " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Disposes the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" /> and writes the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" /> to the configured
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt; EvaluateAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt; messages, Microsoft.Extensions.AI.ChatMessage modelResponse, System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt;? additionalContext = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt; EvaluateAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt; messages, class Microsoft.Extensions.AI.ChatMessage modelResponse, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt; additionalContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.EvaluateAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatMessage,System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.Evaluation.EvaluationContext},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function EvaluateAsync (messages As IEnumerable(Of ChatMessage), modelResponse As ChatMessage, Optional additionalContext As IEnumerable(Of EvaluationContext) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of EvaluationResult)" />
      <MemberSignature Language="F#" Value="member this.EvaluateAsync : seq&lt;Microsoft.Extensions.AI.ChatMessage&gt; * Microsoft.Extensions.AI.ChatMessage * seq&lt;Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt;" Usage="scenarioRun.EvaluateAsync (messages, modelResponse, additionalContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.AI.Evaluation.EvaluationResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-10.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt;" />
        <Parameter Name="modelResponse" Type="Microsoft.Extensions.AI.ChatMessage" />
        <Parameter Name="additionalContext" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.Evaluation.EvaluationContext&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="messages">
            The conversation history including the request that produced the supplied <paramref name="modelResponse" />.
            </param>
        <param name="modelResponse">The response that is to be evaluated.</param>
        <param name="additionalContext">
            Additional contextual information (beyond that which is available in <paramref name="messages" />) that the
            <see cref="T:Microsoft.Extensions.AI.Evaluation.IEvaluator" />s included in this <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" /> may need to accurately evaluate the
            supplied <paramref name="modelResponse" />.
            </param>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> that can cancel the evaluation operation.
            </param>
        <summary>
            Evaluates the supplied <paramref name="modelResponse" /> and returns an <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationResult" />
            containing one or more <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetric" />s.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationResult" /> containing one or more <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetric" />s.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionName">
      <MemberSignature Language="C#" Value="public string ExecutionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExecutionName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionName As String" />
      <MemberSignature Language="F#" Value="member this.ExecutionName : string" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExecutionName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the execution that this <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" /> represents.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" /> can be set to any string that uniquely identifies a particular execution of a set
            scenarios and iterations that are part of an evaluation run. For example, <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" /> could be
            set to the build number of the GitHub Actions workflow that runs the evaluation. Or it could be set to the
            version number of the product being evaluated. It could also be set to a timestamp (so long as all
            <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />s in a particular evaluation run share the same timestamp for their
            <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />s).
            </para>
          <para>
            As new builds / workflows are kicked off over time, this would produce a series of executions each with a
            unique <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />. The results for individual scenarios and iterations can then be compared
            across these different executions to track how the <see cref="T:Microsoft.Extensions.AI.Evaluation.EvaluationMetric" />s for each scenario and
            iteration are trending over time.
            </para>
          <para>
            If the supplied <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" /> is not unique, then the results for the scenarios and iterations
            from the previous execution with the same <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" /> will be overwritten with the results from
            the new execution.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IterationName">
      <MemberSignature Language="C#" Value="public string IterationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IterationName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IterationName As String" />
      <MemberSignature Language="F#" Value="member this.IterationName : string" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IterationName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the iteration that this <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" /> represents.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" />s of different iterations within a particular scenario execution must be unique.
            </para>
          <para>
            Logically, an iteration can be mapped to a single loop iteration within a particular unit test, or to a single
            data row within a data-driven test. <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" /> could be set to any string that uniquely
            identifies the particular loop iteration / data row. For example, it could be set to an integer index that is
            incremented with each loop iteration.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScenarioName">
      <MemberSignature Language="C#" Value="public string ScenarioName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScenarioName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScenarioName As String" />
      <MemberSignature Language="F#" Value="member this.ScenarioName : string" Usage="Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScenarioName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the scenario that this <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" /> represents.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />s of different scenarios within a particular evaluation run must be unique.
            </para>
          <para>
            Logically, a scenario can be mapped to a single unit test within a suite of unit tests that are executed as
            part of an evaluation. In this case, the <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" /> for each <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" /> in the
            suite can be set to the fully qualified name of the corresponding unit test.
            </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
