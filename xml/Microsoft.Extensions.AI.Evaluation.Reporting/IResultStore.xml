<Type Name="IResultStore" FullName="Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore">
  <TypeSignature Language="C#" Value="public interface IResultStore" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IResultStore" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore" />
  <TypeSignature Language="VB.NET" Value="Public Interface IResultStore" />
  <TypeSignature Language="F#" Value="type IResultStore = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IResultStore" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Represents a store for <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DeleteResultsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DeleteResultsAsync (string? executionName = default, string? scenarioName = default, string? iterationName = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DeleteResultsAsync(string executionName, string scenarioName, string iterationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore.DeleteResultsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteResultsAsync (Optional executionName As String = Nothing, Optional scenarioName As String = Nothing, Optional iterationName As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DeleteResultsAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="iResultStore.DeleteResultsAsync (executionName, scenarioName, iterationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionName" Type="System.String" />
        <Parameter Name="scenarioName" Type="System.String" />
        <Parameter Name="iterationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="executionName">
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" /> by which the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s should be filtered.
            If omitted, all <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />s are considered.
            </param>
        <param name="scenarioName">
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" /> by which the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s should be filtered.
            If omitted, all <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />s that are in scope based on the specified
            <paramref name="executionName" /> filter are considered.
            </param>
        <param name="iterationName">
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" /> by which the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s should be filtered.
            If omitted, all <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" />s that are in scope based on the specified
            <paramref name="executionName" />, and <paramref name="scenarioName" /> filters are considered.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can cancel the operation.</param>
        <summary>
            Deletes <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s for <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />s filtered by the specified
            <paramref name="executionName" />, <paramref name="scenarioName" />, and <paramref name="iterationName" /> from
            the store.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Deletes all <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s in the store if <paramref name="executionName" />,
            <paramref name="scenarioName" />, and <paramref name="iterationName" /> are all omitted.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIterationNamesAsync">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;string&gt; GetIterationNamesAsync (string executionName, string scenarioName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;string&gt; GetIterationNamesAsync(string executionName, string scenarioName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore.GetIterationNamesAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIterationNamesAsync (executionName As String, scenarioName As String, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetIterationNamesAsync : string * string * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;string&gt;" Usage="iResultStore.GetIterationNamesAsync (executionName, scenarioName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionName" Type="System.String" />
        <Parameter Name="scenarioName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="executionName">The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />.</param>
        <param name="scenarioName">The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can cancel the operation.</param>
        <summary>
            Gets the <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" />s present in the scenario with the specified
            <paramref name="scenarioName" /> under the execution with the specified <paramref name="executionName" />.
            </summary>
        <returns>
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" />s present in the scenario with the specified
            <paramref name="scenarioName" /> under the execution with the specified <paramref name="executionName" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLatestExecutionNamesAsync">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;string&gt; GetLatestExecutionNamesAsync (int? count = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;string&gt; GetLatestExecutionNamesAsync(valuetype System.Nullable`1&lt;int32&gt; count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore.GetLatestExecutionNamesAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLatestExecutionNamesAsync (Optional count As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetLatestExecutionNamesAsync : Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;string&gt;" Usage="iResultStore.GetLatestExecutionNamesAsync (count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="count">The number of <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />s to retrieve.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can cancel the operation.</param>
        <summary>
            Gets the <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />s of the most recent <paramref name="count" /> executions from
            the store (ordered from most recent to least recent).
            </summary>
        <returns>
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />s of the most recent <paramref name="count" /> executions from the
            store (ordered from most recent to least recent).
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScenarioNamesAsync">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;string&gt; GetScenarioNamesAsync (string executionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;string&gt; GetScenarioNamesAsync(string executionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore.GetScenarioNamesAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetScenarioNamesAsync (executionName As String, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetScenarioNamesAsync : string * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;string&gt;" Usage="iResultStore.GetScenarioNamesAsync (executionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="executionName">The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can cancel the operation.</param>
        <summary>
            Gets the <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />s present in the execution with the specified
            <paramref name="executionName" />.
            </summary>
        <returns>
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />s present in the execution with the specified
            <paramref name="executionName" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadResultsAsync">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult&gt; ReadResultsAsync (string? executionName = default, string? scenarioName = default, string? iterationName = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult&gt; ReadResultsAsync(string executionName, string scenarioName, string iterationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore.ReadResultsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadResultsAsync (Optional executionName As String = Nothing, Optional scenarioName As String = Nothing, Optional iterationName As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of ScenarioRunResult)" />
      <MemberSignature Language="F#" Value="abstract member ReadResultsAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult&gt;" Usage="iResultStore.ReadResultsAsync (executionName, scenarioName, iterationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionName" Type="System.String" />
        <Parameter Name="scenarioName" Type="System.String" />
        <Parameter Name="iterationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="executionName">
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" /> by which the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s should be filtered.
            If omitted, all <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ExecutionName" />s are considered.
            </param>
        <param name="scenarioName">
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" /> by which the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s should be filtered.
            If omitted, all <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.ScenarioName" />s that are in scope based on the specified
            <paramref name="executionName" /> filter are considered.
            </param>
        <param name="iterationName">
            The <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" /> by which the <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s should be filtered.
            If omitted, all <see cref="P:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun.IterationName" />s that are in scope based on the specified
            <paramref name="executionName" />, and <paramref name="scenarioName" /> filters are considered.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can cancel the operation.</param>
        <summary>
            Returns <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s for <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRun" />s filtered by the specified
            <paramref name="executionName" />, <paramref name="scenarioName" />, and <paramref name="iterationName" /> from
            the store.
            </summary>
        <returns>The matching <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s.</returns>
        <remarks>
            Returns all <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s in the store if <paramref name="executionName" />,
            <paramref name="scenarioName" />, and <paramref name="iterationName" /> are all omitted.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteResultsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask WriteResultsAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult&gt; results, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask WriteResultsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult&gt; results, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.IResultStore.WriteResultsAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteResultsAsync (results As IEnumerable(Of ScenarioRunResult), Optional cancellationToken As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member WriteResultsAsync : seq&lt;Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="iResultStore.WriteResultsAsync (results, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="results">The <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.ScenarioRunResult" />s to be written.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can cancel the operation.</param>
        <summary>
            Writes the supplied <paramref name="results" />s to the store.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
