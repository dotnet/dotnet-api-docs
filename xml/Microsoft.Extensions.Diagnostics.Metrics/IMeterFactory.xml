<Type Name="IMeterFactory" FullName="Microsoft.Extensions.Diagnostics.Metrics.IMeterFactory">
  <TypeSignature Language="C#" Value="public interface IMeterFactory : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMeterFactory implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Diagnostics.Metrics.IMeterFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMeterFactory&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type IMeterFactory = interface&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMeterFactory : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Diagnostics.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A factory for creating <see cref="T:System.Diagnostics.Metrics.Meter" /> instances.
            </summary>
    <remarks>
            Meter factories will be accountable for the following responsibilities:
            - Creating a new meter.
            - Attaching the factory instance as a scope to the Meter constructor for all created Meter objects.
            - Storing created meters in a cache and returning a cached instance if a meter with the same parameters (name, version, and tags) is requested.
            - Disposing of all cached Meter objects upon factory disposal.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Metrics.Meter Create (System.Diagnostics.Metrics.MeterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Diagnostics.Metrics.Meter Create(class System.Diagnostics.Metrics.MeterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Metrics.IMeterFactory.Create(System.Diagnostics.Metrics.MeterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Create (options As MeterOptions) As Meter" />
      <MemberSignature Language="F#" Value="abstract member Create : System.Diagnostics.Metrics.MeterOptions -&gt; System.Diagnostics.Metrics.Meter" Usage="iMeterFactory.Create options" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Metrics::Meter ^ Create(System::Diagnostics::Metrics::MeterOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Metrics.Meter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Diagnostics.Metrics.MeterOptions" />
      </Parameters>
      <Docs>
        <param name="options">The <see cref="T:System.Diagnostics.Metrics.MeterOptions" /> to use when creating the meter.</param>
        <summary>
            Creates a new <see cref="T:System.Diagnostics.Metrics.Meter" /> instance.
            </summary>
        <returns>A new <see cref="T:System.Diagnostics.Metrics.Meter" /> instance.</returns>
        <remarks>
            The <see cref="T:System.Diagnostics.Metrics.Meter" /> instance returned by this method should be cached by the factory and returned for subsequent requests for a meter with the same parameters (name, version, and tags).
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
