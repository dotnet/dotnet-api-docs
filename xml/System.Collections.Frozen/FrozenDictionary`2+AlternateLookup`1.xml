<Type Name="FrozenDictionary&lt;TKey,TValue&gt;+AlternateLookup&lt;TAlternateKey&gt;" FullName="System.Collections.Frozen.FrozenDictionary&lt;TKey,TValue&gt;+AlternateLookup&lt;TAlternateKey&gt;">
  <TypeSignature Language="C#" Value="public readonly struct FrozenDictionary&lt;TKey,TValue&gt;.AlternateLookup&lt;TAlternateKey&gt;" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit FrozenDictionary`2/AlternateLookup`1&lt;TKey, TValue, TAlternateKey&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Frozen.FrozenDictionary`2.AlternateLookup`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure FrozenDictionary(Of TKey, TValue).AlternateLookup(Of TAlternateKey)" />
  <TypeSignature Language="F#" Value="type FrozenDictionary&lt;'Key, 'Value&gt;.AlternateLookup&lt;'AlternateKey&gt; = struct" />
  <TypeSignature Language="C++ CLI" Value="public: generic &lt;typename TAlternateKey&gt;&#xA;value class FrozenDictionary&lt;TKey, TValue&gt;::AlternateLookup" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
    <TypeParameter Name="TAlternateKey" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TAlternateKey">The alternate type of a key for performing lookups.</typeparam>
    <summary>
      <para>Provides a type that may be used to perform operations on a <see cref="T:System.Collections.Frozen.FrozenDictionary`2" /></para>
      <para>using a <typeparamref name="TAlternateKey" /> as a key instead of a <typeparamref name="TKey" />.</para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TAlternateKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsKey(!TAlternateKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Frozen.FrozenDictionary`2.AlternateLookup`1.ContainsKey(`2)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TAlternateKey) As Boolean" />
      <MemberSignature Language="F#" Value="member this.ContainsKey : 'AlternateKey -&gt; bool" Usage="alternateLookup.ContainsKey key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsKey(TAlternateKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TAlternateKey" />
      </Parameters>
      <Docs>
        <param name="key">The alternate key to check.</param>
        <summary>Determines whether the <see cref="T:System.Collections.Frozen.FrozenDictionary`2" /> contains the specified alternate key.</summary>
        <returns>
          <see langword="true" /> if the key is in the dictionary; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="public System.Collections.Frozen.FrozenDictionary&lt;TKey,TValue&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Frozen.FrozenDictionary`2&lt;!TKey, !TValue&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Frozen.FrozenDictionary`2.AlternateLookup`1.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dictionary As FrozenDictionary(Of TKey, TValue)" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Frozen.FrozenDictionary&lt;'Key, 'Value&gt;" Usage="System.Collections.Frozen.FrozenDictionary&lt;'Key, 'Value&gt;.AlternateLookup&lt;'AlternateKey&gt;.Dictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Frozen::FrozenDictionary&lt;TKey, TValue&gt; ^ Dictionary { System::Collections::Frozen::FrozenDictionary&lt;TKey, TValue&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Frozen.FrozenDictionary&lt;TKey,TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Collections.Frozen.FrozenDictionary`2" /> against which this instance performs operations.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TAlternateKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TAlternateKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Frozen.FrozenDictionary`2.AlternateLookup`1.Item(`2)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TAlternateKey) As TValue" />
      <MemberSignature Language="F#" Value="member this.Item('AlternateKey) : 'Value" Usage="System.Collections.Frozen.FrozenDictionary&lt;'Key, 'Value&gt;.AlternateLookup&lt;'AlternateKey&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TAlternateKey] { TValue get(TAlternateKey key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TAlternateKey" />
      </Parameters>
      <Docs>
        <param name="key">The alternate key of the value to get or set.</param>
        <summary>Gets or sets the value associated with the specified alternate key.</summary>
        <value>
          <para>The value associated with the specified alternate key. If the specified alternate key is not found, a get operation throws</para>
          <para>a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element with the specified key.</para>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">The alternate key does not exist in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TAlternateKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TAlternateKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Frozen.FrozenDictionary`2.AlternateLookup`1.TryGetValue(`2,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TAlternateKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'AlternateKey * 'Value -&gt; bool" Usage="alternateLookup.TryGetValue (key, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TAlternateKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TAlternateKey" />
        <Parameter Name="value" Type="TValue" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="key">The alternate key of the value to get.</param>
        <param name="value">
          <para>When this method returns, contains the value associated with the specified key, if the key is found;</para>
          <para>otherwise, the default value for the type of the value parameter.</para>
        </param>
        <summary>Gets the value associated with the specified alternate key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
