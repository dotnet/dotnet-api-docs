<Type Name="ChannelOptions" FullName="System.Threading.Channels.ChannelOptions">
  <TypeSignature Language="C#" Value="public abstract class ChannelOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChannelOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Channels.ChannelOptions" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChannelOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChannelOptions abstract" />
  <TypeSignature Language="F#" Value="type ChannelOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Channels</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides options that control the behavior of channel instances.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChannelOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Channels.ChannelOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChannelOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSynchronousContinuations">
      <MemberSignature Language="C#" Value="public bool AllowSynchronousContinuations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSynchronousContinuations" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Channels.ChannelOptions.AllowSynchronousContinuations" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowSynchronousContinuations As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowSynchronousContinuations { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowSynchronousContinuations : bool with get, set" Usage="System.Threading.Channels.ChannelOptions.AllowSynchronousContinuations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <code>true</code> if operations performed on a channel may synchronously invoke continuations subscribed to
            notifications of pending async operations; <code>false</code> if all continuations should be invoked asynchronously.
            </summary>
        <value>To be added.</value>
        <remarks>
            Setting this option to <code>true</code> can provide measurable throughput improvements by avoiding
            scheduling additional work items. However, it may come at the cost of reduced parallelism, as for example a producer
            may then be the one to execute work associated with a consumer, and if not done thoughtfully, this can lead
            to unexpected interactions. The default is false.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleReader">
      <MemberSignature Language="C#" Value="public bool SingleReader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SingleReader" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Channels.ChannelOptions.SingleReader" />
      <MemberSignature Language="VB.NET" Value="Public Property SingleReader As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SingleReader { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SingleReader : bool with get, set" Usage="System.Threading.Channels.ChannelOptions.SingleReader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <code>true</code> readers from the channel guarantee that there will only ever be at most one read operation at a time;
            <code>false</code> if no such constraint is guaranteed.
            </summary>
        <value>To be added.</value>
        <remarks>
            If true, the channel may be able to optimize certain operations based on knowing about the single-reader guarantee.
            The default is false.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleWriter">
      <MemberSignature Language="C#" Value="public bool SingleWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SingleWriter" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Channels.ChannelOptions.SingleWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property SingleWriter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SingleWriter { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SingleWriter : bool with get, set" Usage="System.Threading.Channels.ChannelOptions.SingleWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Channels</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <code>true</code> if writers to the channel guarantee that there will only ever be at most one write operation
            at a time; <code>false</code> if no such constraint is guaranteed.
            </summary>
        <value>To be added.</value>
        <remarks>
            If true, the channel may be able to optimize certain operations based on knowing about the single-writer guarantee.
            The default is false.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>