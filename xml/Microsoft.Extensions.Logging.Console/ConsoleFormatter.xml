<Type Name="ConsoleFormatter" FullName="Microsoft.Extensions.Logging.Console.ConsoleFormatter">
  <TypeSignature Language="C#" Value="public abstract class ConsoleFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConsoleFormatter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.Console.ConsoleFormatter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ConsoleFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleFormatter abstract" />
  <TypeSignature Language="F#" Value="type ConsoleFormatter = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConsoleFormatter (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Console.ConsoleFormatter.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ConsoleFormatter(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Logging.Console.ConsoleFormatter : string -&gt; Microsoft.Extensions.Logging.Console.ConsoleFormatter" Usage="new Microsoft.Extensions.Logging.Console.ConsoleFormatter name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.Console.ConsoleFormatter.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.Extensions.Logging.Console.ConsoleFormatter.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public abstract void Write&lt;TState&gt; (Microsoft.Extensions.Logging.Abstractions.LogEntry&lt;TState&gt;? logEntry, Microsoft.Extensions.Logging.IExternalScopeProvider scopeProvider, System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write&lt;TState&gt;([in]valuetype Microsoft.Extensions.Logging.Abstractions.LogEntry`1&lt;!!TState&gt; logEntry, class Microsoft.Extensions.Logging.IExternalScopeProvider scopeProvider, class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Console.ConsoleFormatter.Write``1(Microsoft.Extensions.Logging.Abstractions.LogEntry{``0}@|System.Runtime.InteropServices.InAttribute,Microsoft.Extensions.Logging.IExternalScopeProvider,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write(Of TState) (logEntry As LogEntry(Of TState), scopeProvider As IExternalScopeProvider, textWriter As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; abstract void Write(Microsoft::Extensions::Logging::Abstractions::LogEntry&lt;TState&gt; ^ logEntry, Microsoft::Extensions::Logging::IExternalScopeProvider ^ scopeProvider, System::IO::TextWriter ^ textWriter);" />
      <MemberSignature Language="F#" Value="abstract member Write : LogEntry * Microsoft.Extensions.Logging.IExternalScopeProvider * System.IO.TextWriter -&gt; unit" Usage="consoleFormatter.Write (logEntry, scopeProvider, textWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Console</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="logEntry" Type="Microsoft.Extensions.Logging.Abstractions.LogEntry&lt;TState&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="scopeProvider" Type="Microsoft.Extensions.Logging.IExternalScopeProvider" />
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="logEntry">To be added.</param>
        <param name="scopeProvider">To be added.</param>
        <param name="textWriter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
