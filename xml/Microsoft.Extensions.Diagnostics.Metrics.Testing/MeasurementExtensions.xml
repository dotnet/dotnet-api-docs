<Type Name="MeasurementExtensions" FullName="Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions">
  <TypeSignature Language="C#" Value="public static class MeasurementExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MeasurementExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module MeasurementExtensions" />
  <TypeSignature Language="F#" Value="type MeasurementExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class MeasurementExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.4.0.0</AssemblyVersion>
    <AssemblyVersion>8.5.0.0</AssemblyVersion>
    <AssemblyVersion>8.6.0.0</AssemblyVersion>
    <AssemblyVersion>8.7.0.0</AssemblyVersion>
    <AssemblyVersion>8.8.0.0</AssemblyVersion>
    <AssemblyVersion>8.9.1.0</AssemblyVersion>
    <AssemblyVersion>8.10.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions to simplify working with lists of measurements.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ContainsTags&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt; ContainsTags&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt; measurements, params System.Collections.Generic.KeyValuePair&lt;string,object&gt;[] tags) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1&lt;!!T&gt;&gt; ContainsTags&lt;struct .ctor (class System.ValueType) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1&lt;!!T&gt;&gt; measurements, valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;[] tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.ContainsTags``1(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement{``0}},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ContainsTags(Of T As Structure) (measurements As IEnumerable(Of CollectedMeasurement(Of T)), ParamArray tags As KeyValuePair(Of String, Object)()) As IEnumerable(Of CollectedMeasurement(Of T))" />
      <MemberSignature Language="F#" Value="static member ContainsTags : seq&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;'T&gt;&gt; * System.Collections.Generic.KeyValuePair&lt;string, obj&gt;[] -&gt; seq&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;'T&gt;&gt; (requires 'T : struct)" Usage="Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.ContainsTags (measurements, tags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Diagnostics::Metrics::Testing::CollectedMeasurement&lt;T&gt; ^&gt; ^ ContainsTags(System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Diagnostics::Metrics::Testing::CollectedMeasurement&lt;T&gt; ^&gt; ^ measurements, ... cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ tags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="measurements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="tags" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type of measurement value.</typeparam>
        <param name="measurements">The original full list of measurements.</param>
        <param name="tags">The set of tags to match against. Only measurements that have at least these matching tags are returned.</param>
        <summary>
            Filters a list of measurements based on subset tags matching.
            </summary>
        <returns>A list of matching measurements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsTags&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt; ContainsTags&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt; measurements, params string[] tags) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1&lt;!!T&gt;&gt; ContainsTags&lt;struct .ctor (class System.ValueType) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1&lt;!!T&gt;&gt; measurements, string[] tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.ContainsTags``1(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement{``0}},System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ContainsTags(Of T As Structure) (measurements As IEnumerable(Of CollectedMeasurement(Of T)), ParamArray tags As String()) As IEnumerable(Of CollectedMeasurement(Of T))" />
      <MemberSignature Language="F#" Value="static member ContainsTags : seq&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;'T&gt;&gt; * string[] -&gt; seq&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;'T&gt;&gt; (requires 'T : struct)" Usage="Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.ContainsTags (measurements, tags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Diagnostics::Metrics::Testing::CollectedMeasurement&lt;T&gt; ^&gt; ^ ContainsTags(System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Diagnostics::Metrics::Testing::CollectedMeasurement&lt;T&gt; ^&gt; ^ measurements, ... cli::array &lt;System::String ^&gt; ^ tags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="measurements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="tags" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type of measurement value.</typeparam>
        <param name="measurements">The original full list of measurements.</param>
        <param name="tags">The set of tags to match against. Only measurements that have at least these matching tag names are returned.</param>
        <summary>
            Filters a list of measurements based on subset tag matching.
            </summary>
        <returns>A list of matching measurements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateAsCounter&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EvaluateAsCounter&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt; measurements) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EvaluateAsCounter&lt;struct .ctor (class System.ValueType) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1&lt;!!T&gt;&gt; measurements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.EvaluateAsCounter``1(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EvaluateAsCounter(Of T As Structure) (measurements As IEnumerable(Of CollectedMeasurement(Of T))) As T" />
      <MemberSignature Language="F#" Value="static member EvaluateAsCounter : seq&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;'T&gt;&gt; -&gt; 'T (requires 'T : struct)" Usage="Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.EvaluateAsCounter measurements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class[System::Runtime::CompilerServices::Extension]&#xA; static T EvaluateAsCounter(System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Diagnostics::Metrics::Testing::CollectedMeasurement&lt;T&gt; ^&gt; ^ measurements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="measurements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type of measurement value.</typeparam>
        <param name="measurements">The list of measurements to process.</param>
        <summary>
            Process the series of measurements adding all values together to produce a final count, identical to what a <see cref="T:System.Diagnostics.Metrics.Counter`1" /> instrument would produce.
            </summary>
        <returns>The resulting count.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchesTags&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt; MatchesTags&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt; measurements, params System.Collections.Generic.KeyValuePair&lt;string,object&gt;[] tags) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1&lt;!!T&gt;&gt; MatchesTags&lt;struct .ctor (class System.ValueType) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1&lt;!!T&gt;&gt; measurements, valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;[] tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.MatchesTags``1(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement{``0}},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MatchesTags(Of T As Structure) (measurements As IEnumerable(Of CollectedMeasurement(Of T)), ParamArray tags As KeyValuePair(Of String, Object)()) As IEnumerable(Of CollectedMeasurement(Of T))" />
      <MemberSignature Language="F#" Value="static member MatchesTags : seq&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;'T&gt;&gt; * System.Collections.Generic.KeyValuePair&lt;string, obj&gt;[] -&gt; seq&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;'T&gt;&gt; (requires 'T : struct)" Usage="Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.MatchesTags (measurements, tags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Diagnostics::Metrics::Testing::CollectedMeasurement&lt;T&gt; ^&gt; ^ MatchesTags(System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Diagnostics::Metrics::Testing::CollectedMeasurement&lt;T&gt; ^&gt; ^ measurements, ... cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ tags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="measurements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="tags" Type="System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type of measurement value.</typeparam>
        <param name="measurements">The original full list of measurements.</param>
        <param name="tags">The set of tags to match against. Only measurements that have exactly those matching tags are returned.</param>
        <summary>
            Filters a list of measurements based on exact tag matching.
            </summary>
        <returns>A list of matching measurements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchesTags&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt; MatchesTags&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt; measurements, params string[] tags) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1&lt;!!T&gt;&gt; MatchesTags&lt;struct .ctor (class System.ValueType) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1&lt;!!T&gt;&gt; measurements, string[] tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.MatchesTags``1(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement{``0}},System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MatchesTags(Of T As Structure) (measurements As IEnumerable(Of CollectedMeasurement(Of T)), ParamArray tags As String()) As IEnumerable(Of CollectedMeasurement(Of T))" />
      <MemberSignature Language="F#" Value="static member MatchesTags : seq&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;'T&gt;&gt; * string[] -&gt; seq&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;'T&gt;&gt; (requires 'T : struct)" Usage="Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.MatchesTags (measurements, tags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Diagnostics::Metrics::Testing::CollectedMeasurement&lt;T&gt; ^&gt; ^ MatchesTags(System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Diagnostics::Metrics::Testing::CollectedMeasurement&lt;T&gt; ^&gt; ^ measurements, ... cli::array &lt;System::String ^&gt; ^ tags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.10.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="measurements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement&lt;T&gt;&gt;" RefType="this">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="tags" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type of measurement value.</typeparam>
        <param name="measurements">The original full list of measurements.</param>
        <param name="tags">The set of tags to match against. Only measurements that have exactly those matching tag names are returned.</param>
        <summary>
            Filters a list of measurements based on exact tag name matching.
            </summary>
        <returns>A list of matching measurements.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
