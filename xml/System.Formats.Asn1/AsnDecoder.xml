<Type Name="AsnDecoder" FullName="System.Formats.Asn1.AsnDecoder">
  <TypeSignature Language="C#" Value="public static class AsnDecoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsnDecoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Formats.Asn1.AsnDecoder" />
  <TypeSignature Language="VB.NET" Value="Public Class AsnDecoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsnDecoder abstract sealed" />
  <TypeSignature Language="F#" Value="type AsnDecoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Formats.Asn1</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides stateless methods for decoding BER-, CER-, or DER-encoded ASN.1 data.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ReadBitString">
      <MemberSignature Language="C#" Value="public static byte[] ReadBitString (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int unusedBitCount, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadBitString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; unusedBitCount, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadBitString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadBitString (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef unusedBitCount As Integer, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Byte()" />
      <MemberSignature Language="F#" Value="static member ReadBitString : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; byte[]" Usage="System.Formats.Asn1.AsnDecoder.ReadBitString (source, ruleSet, unusedBitCount, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="unusedBitCount" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="unusedBitCount">On success, receives the number of bits in the last byte which were reported as "unused" by the writer.
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 3).</param>
        <summary>Reads a Bit String value from <paramref name="source" /> with a specified tag under the specified encoding rules, returning the contents in a new array.</summary>
        <returns>An array containing the contents of the Bit String value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The least significant bits in the last byte which are reported as "unused" by the `unusedBitCount` value will be copied into the return value as unset bits, irrespective of their value in the encoded representation.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBoolean">
      <MemberSignature Language="C#" Value="public static bool ReadBoolean (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ReadBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadBoolean(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadBoolean (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member ReadBoolean : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.ReadBoolean (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 1).</param>
        <summary>Reads a Boolean value from <paramref name="source" /> with a specified tag under the specified encoding rules.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCharacterString">
      <MemberSignature Language="C#" Value="public static string ReadCharacterString (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, System.Formats.Asn1.UniversalTagNumber encodingType, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadCharacterString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, valuetype System.Formats.Asn1.UniversalTagNumber encodingType, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadCharacterString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.UniversalTagNumber,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadCharacterString (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, encodingType As UniversalTagNumber, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As String" />
      <MemberSignature Language="F#" Value="static member ReadCharacterString : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * System.Formats.Asn1.UniversalTagNumber * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; string" Usage="System.Formats.Asn1.AsnDecoder.ReadCharacterString (source, ruleSet, encodingType, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="encodingType" Type="System.Formats.Asn1.UniversalTagNumber" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="encodingType">One of the enumeration values which represents the value type to process.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the universal tag that is appropriate to the requested encoding type.</param>
        <summary>Reads the next value as character string with the specified tag and encoding type, returning the decoded string.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.
             -or- 
               <paramref name="encodingType" /> is not a known character string type.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the string did not successfully decode.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not the same as <paramref name="encodingType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEncodedValue">
      <MemberSignature Language="C#" Value="public static System.Formats.Asn1.Asn1Tag ReadEncodedValue (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int contentOffset, out int contentLength, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Formats.Asn1.Asn1Tag ReadEncodedValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; contentOffset, [out] int32&amp; contentLength, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadEncodedValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadEncodedValue (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef contentOffset As Integer, ByRef contentLength As Integer, ByRef bytesConsumed As Integer) As Asn1Tag" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Formats::Asn1::Asn1Tag ReadEncodedValue(ReadOnlySpan&lt;System::Byte&gt; source, System::Formats::Asn1::AsnEncodingRules ruleSet, [Runtime::InteropServices::Out] int % contentOffset, [Runtime::InteropServices::Out] int % contentLength, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member ReadEncodedValue : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * int * int -&gt; System.Formats.Asn1.Asn1Tag" Usage="System.Formats.Asn1.AsnDecoder.ReadEncodedValue (source, ruleSet, contentOffset, contentLength, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Asn1.Asn1Tag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="contentOffset" Type="System.Int32" RefType="out" />
        <Parameter Name="contentLength" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="contentOffset">When this method returns, the offset of the content payload relative to the start of <paramref name="source" />.
              This parameter is treated as uninitialized.</param>
        <param name="contentLength">When this method returns, the number of bytes in the content payload (which may be 0).
              This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
              This parameter is treated as uninitialized.</param>
        <summary>Locates the contents range for the encoded value at the beginning of the <paramref name="source" /> buffer using the specified encoding rules.</summary>
        <returns>The tag identifying the content.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 This method performs very little validation on the contents.
                If the encoded value uses a definite length, the contents are not inspected at all.
                If the encoded value uses an indefinite length, the contents are only inspected as necessary to determine the location of the relevant end-of-contents marker.
              

 When the encoded value uses an indefinite length, the `bytesConsumed` value will be larger than the sum of `contentOffset` and `contentLength` to account for the end-of-contents marker.
              



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">
          <paramref name="source" /> does not represent a value encoded under the specified encoding rules.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEnumeratedBytes">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; ReadEnumeratedBytes (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; ReadEnumeratedBytes(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadEnumeratedBytes(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadEnumeratedBytes (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="F#" Value="static member ReadEnumeratedBytes : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; ReadOnlySpan&lt;byte&gt;" Usage="System.Formats.Asn1.AsnDecoder.ReadEnumeratedBytes (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 10).</param>
        <summary>Reads an Enumerated value from <paramref name="source" /> with a specified tag under the specified encoding rules, returning the contents as a slice of the buffer.</summary>
        <returns>The slice of the buffer containing the bytes of the Enumerated value, in signed big-endian form.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEnumeratedValue">
      <MemberSignature Language="C#" Value="public static Enum ReadEnumeratedValue (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, Type enumType, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Enum ReadEnumeratedValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, class System.Type enumType, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadEnumeratedValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Type,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadEnumeratedValue (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, enumType As Type, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Enum" />
      <MemberSignature Language="F#" Value="static member ReadEnumeratedValue : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * Type * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; Enum" Usage="System.Formats.Asn1.AsnDecoder.ReadEnumeratedValue (source, ruleSet, enumType, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Enum</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="enumType">Type object representing the destination type.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 10).</param>
        <summary>Reads an Enumerated from <paramref name="source" /> with a specified tag under the specified encoding rules, converting it to the non-[<see cref="T:System.FlagsAttribute" />] enum specified by <paramref name="enumType" />.</summary>
        <returns>The Enumerated value converted to a <paramref name="enumType" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method does not validate that the return value is defined within `enumType`.

          ]]></format>
        </remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the encoded value is too big to fit in a <paramref name="enumType" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="enumType" /> is not an enum type.
             -or- 
               <paramref name="enumType" /> was declared with <see cref="T:System.FlagsAttribute" />.
             -or- 
               <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="enumType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEnumeratedValue&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum ReadEnumeratedValue&lt;TEnum&gt; (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default) where TEnum : Enum;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum ReadEnumeratedValue&lt;(class System.Enum) TEnum&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadEnumeratedValue``1(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadEnumeratedValue(Of TEnum As Enum) (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As TEnum" />
      <MemberSignature Language="F#" Value="static member ReadEnumeratedValue : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; 'Enum (requires 'Enum :&gt; Enum)" Usage="System.Formats.Asn1.AsnDecoder.ReadEnumeratedValue (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <BaseTypeName>System.Enum</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">Destination enum type</typeparam>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 10).</param>
        <summary>Reads an Enumerated from <paramref name="source" /> with a specified tag under the specified encoding rules, converting it to the non-[<see cref="T:System.FlagsAttribute" />] enum specified by <typeparamref name="TEnum" />.</summary>
        <returns>The Enumerated value converted to a <typeparamref name="TEnum" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method does not validate that the return value is defined within <typeparamref name="TEnum>.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the encoded value is too big to fit in a <typeparamref name="TEnum" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <typeparamref name="TEnum" /> is not an enum type.
             -or- 
               <typeparamref name="TEnum" /> was declared with <see cref="T:System.FlagsAttribute" />.
             -or- 
               <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadGeneralizedTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ReadGeneralizedTime (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ReadGeneralizedTime(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadGeneralizedTime(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadGeneralizedTime (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ReadGeneralizedTime : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; DateTimeOffset" Usage="System.Formats.Asn1.AsnDecoder.ReadGeneralizedTime (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 24).</param>
        <summary>Reads a GeneralizedTime value from <paramref name="source" /> with a specified tag under the specified encoding rules.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInteger">
      <MemberSignature Language="C#" Value="public static System.Numerics.BigInteger ReadInteger (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.BigInteger ReadInteger(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadInteger(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadInteger (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As BigInteger" />
      <MemberSignature Language="F#" Value="static member ReadInteger : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; System.Numerics.BigInteger" Usage="System.Formats.Asn1.AsnDecoder.ReadInteger (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Reads an Integer value from <paramref name="source" /> with a specified tag under the specified encoding rules.</summary>
        <returns>The decoded numeric value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadIntegerBytes">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; ReadIntegerBytes (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; ReadIntegerBytes(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadIntegerBytes(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadIntegerBytes (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="F#" Value="static member ReadIntegerBytes : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; ReadOnlySpan&lt;byte&gt;" Usage="System.Formats.Asn1.AsnDecoder.ReadIntegerBytes (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Reads an Integer value from <paramref name="source" /> with a specified tag under the specified encoding rules, returning the contents as a slice of the buffer.</summary>
        <returns>The slice of the buffer containing the bytes of the Integer value, in signed big-endian form.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadNamedBitList">
      <MemberSignature Language="C#" Value="public static System.Collections.BitArray ReadNamedBitList (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.BitArray ReadNamedBitList(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadNamedBitList(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadNamedBitList (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As BitArray" />
      <MemberSignature Language="F#" Value="static member ReadNamedBitList : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; System.Collections.BitArray" Usage="System.Formats.Asn1.AsnDecoder.ReadNamedBitList (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.BitArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 3).</param>
        <summary>Reads a NamedBitList from <paramref name="source" /> with a specified tag under the specified encoding rules.</summary>
        <returns>The bits from the encoded value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The bit alignment performed by this method is to interpret the most significant bit in the first byte of the value as bit 0, with bits increasing in value until the least significant bit of the first byte, proceeding with the most significant bit of the second byte, and so on.
               This means that the number used in an ASN.1 NamedBitList construction is the index in the return value.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadNamedBitListValue">
      <MemberSignature Language="C#" Value="public static Enum ReadNamedBitListValue (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, Type flagsEnumType, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Enum ReadNamedBitListValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, class System.Type flagsEnumType, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadNamedBitListValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Type,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadNamedBitListValue (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, flagsEnumType As Type, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Enum" />
      <MemberSignature Language="F#" Value="static member ReadNamedBitListValue : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * Type * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; Enum" Usage="System.Formats.Asn1.AsnDecoder.ReadNamedBitListValue (source, ruleSet, flagsEnumType, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Enum</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="flagsEnumType" Type="System.Type" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="flagsEnumType">Type object representing the destination type.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 3).</param>
        <summary>Reads a NamedBitList from <paramref name="source" /> with a specified tag under the specified encoding rules, converting it to the [<see cref="T:System.FlagsAttribute" />] enum specified by <paramref name="flagsEnumType" />.</summary>
        <returns>The NamedBitList value converted to a <paramref name="flagsEnumType" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- - the encoded value is too big to fit in a <paramref name="flagsEnumType" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="flagsEnumType" /> is not an enum type.
             -or- 
               <paramref name="flagsEnumType" /> was not declared with <see cref="T:System.FlagsAttribute" /> 
               -or- 
               <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="flagsEnumType" /> is <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadNamedBitListValue&lt;TFlagsEnum&gt;">
      <MemberSignature Language="C#" Value="public static TFlagsEnum ReadNamedBitListValue&lt;TFlagsEnum&gt; (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default) where TFlagsEnum : Enum;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TFlagsEnum ReadNamedBitListValue&lt;(class System.Enum) TFlagsEnum&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadNamedBitListValue``1(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadNamedBitListValue(Of TFlagsEnum As Enum) (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As TFlagsEnum" />
      <MemberSignature Language="F#" Value="static member ReadNamedBitListValue : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; 'FlagsEnum (requires 'FlagsEnum :&gt; Enum)" Usage="System.Formats.Asn1.AsnDecoder.ReadNamedBitListValue (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TFlagsEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFlagsEnum">
          <Constraints>
            <BaseTypeName>System.Enum</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFlagsEnum">Destination enum type</typeparam>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 3).</param>
        <summary>Reads a NamedBitList from <paramref name="source" /> with a specified tag under the specified encoding rules, converting it to the [<see cref="T:System.FlagsAttribute" />] enum specified by <typeparamref name="TFlagsEnum" />.</summary>
        <returns>The NamedBitList value converted to a <typeparamref name="TFlagsEnum" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The bit alignment performed by this method is to interpret the most significant bit in the first byte of the value as the least significant bit in <typeparamref name="TFlagsEnum>, with bits increasing in value until the least significant bit of the first byte, proceeding with the most significant bit of the second byte, and so on. Under this scheme, the following ASN.1 type declaration and C# enumeration can be used together:
             <code> KeyUsage ::= BIT STRING { digitalSignature   (0), nonRepudiation     (1), keyEncipherment    (2), dataEncipherment   (3), keyAgreement       (4), keyCertSign        (5), cRLSign            (6), encipherOnly       (7), decipherOnly       (8) } </code><code> [Flags] enum KeyUsage { None              = 0, DigitalSignature  = 1 &lt;&lt; (0), NonRepudiation    = 1 &lt;&lt; (1), KeyEncipherment   = 1 &lt;&lt; (2), DataEncipherment  = 1 &lt;&lt; (3), KeyAgreement      = 1 &lt;&lt; (4), KeyCertSign       = 1 &lt;&lt; (5), CrlSign           = 1 &lt;&lt; (6), EncipherOnly      = 1 &lt;&lt; (7), DecipherOnly      = 1 &lt;&lt; (8), } </code> 
               Note that while the example here uses the KeyUsage NamedBitList from <a href="https://tools.ietf.org/html/rfc3280#section-4.2.1.3">RFC 3280 (4.2.1.3)</a>, the example enum uses values thar are different from System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the encoded value is too big to fit in a <typeparamref name="TFlagsEnum" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <typeparamref name="TFlagsEnum" /> is not an enum type.
             -or- 
               <typeparamref name="TFlagsEnum" /> was not declared with <see cref="T:System.FlagsAttribute" /> 
               -or- 
               <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadNull">
      <MemberSignature Language="C#" Value="public static void ReadNull (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReadNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadNull(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReadNull (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing)" />
      <MemberSignature Language="F#" Value="static member ReadNull : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; unit" Usage="System.Formats.Asn1.AsnDecoder.ReadNull (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 5).</param>
        <summary>Reads a <see langword="null" /> value from <paramref name="source" /> with a specified tag under the specified encoding rules.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadObjectIdentifier">
      <MemberSignature Language="C#" Value="public static string ReadObjectIdentifier (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadObjectIdentifier(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadObjectIdentifier(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadObjectIdentifier (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As String" />
      <MemberSignature Language="F#" Value="static member ReadObjectIdentifier : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; string" Usage="System.Formats.Asn1.AsnDecoder.ReadObjectIdentifier (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 6).</param>
        <summary>Reads an Object Identifier value from <paramref name="source" /> with a specified tag under the specified encoding rules.</summary>
        <returns>The decoded object identifier, in dotted-decimal notation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadOctetString">
      <MemberSignature Language="C#" Value="public static byte[] ReadOctetString (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadOctetString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadOctetString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOctetString (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Byte()" />
      <MemberSignature Language="F#" Value="static member ReadOctetString : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; byte[]" Usage="System.Formats.Asn1.AsnDecoder.ReadOctetString (source, ruleSet, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 4).</param>
        <summary>Reads an Octet String value from <paramref name="source" /> with a specified tag under the specified encoding rules, returning the contents in a new array.</summary>
        <returns>An array containing the contents of the Octet String value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSequence">
      <MemberSignature Language="C#" Value="public static void ReadSequence (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int contentOffset, out int contentLength, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReadSequence(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; contentOffset, [out] int32&amp; contentLength, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadSequence(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReadSequence (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef contentOffset As Integer, ByRef contentLength As Integer, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing)" />
      <MemberSignature Language="F#" Value="static member ReadSequence : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * int * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; unit" Usage="System.Formats.Asn1.AsnDecoder.ReadSequence (source, ruleSet, contentOffset, contentLength, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="contentOffset" Type="System.Int32" RefType="out" />
        <Parameter Name="contentLength" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="contentOffset">When this method returns, the offset of the content payload relative to the start of <paramref name="source" />.
               This parameter is treated as uninitialized.</param>
        <param name="contentLength">When this method returns, the number of bytes in the content payload (which may be 0).
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 16).</param>
        <summary>Reads a Sequence or Sequence-Of value from <paramref name="source" /> with a specified tag under the specified encoding rules.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The nested content is not evaluated by this method, except for minimal processing to determine the location of an end-of-contents marker.
               Therefore, the contents may contain data which is not valid under the current encoding rules.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSetOf">
      <MemberSignature Language="C#" Value="public static void ReadSetOf (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int contentOffset, out int contentLength, out int bytesConsumed, bool skipSortOrderValidation = false, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReadSetOf(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; contentOffset, [out] int32&amp; contentLength, [out] int32&amp; bytesConsumed, bool skipSortOrderValidation, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadSetOf(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@,System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReadSetOf (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef contentOffset As Integer, ByRef contentLength As Integer, ByRef bytesConsumed As Integer, Optional skipSortOrderValidation As Boolean = false, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing)" />
      <MemberSignature Language="F#" Value="static member ReadSetOf : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * int * int * bool * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; unit" Usage="System.Formats.Asn1.AsnDecoder.ReadSetOf (source, ruleSet, contentOffset, contentLength, bytesConsumed, skipSortOrderValidation, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="contentOffset" Type="System.Int32" RefType="out" />
        <Parameter Name="contentLength" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="skipSortOrderValidation" Type="System.Boolean" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="contentOffset">When this method returns, the offset of the content payload relative to the start of <paramref name="source" />.
               This parameter is treated as uninitialized.</param>
        <param name="contentLength">When this method returns, the number of bytes in the content payload (which may be 0).
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="skipSortOrderValidation">
          <see langword="true" /> to always accept the data in the order it is presented, <see langword="false" /> to verify that the data is sorted correctly when the encoding rules say sorting was required (CER and DER).</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 17).</param>
        <summary>Reads a Set-Of value from <paramref name="source" /> with a specified tag under the specified encoding rules.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The nested content is not evaluated by this method, except for minimal processing to determine the location of an end-of-contents marker or verification of the content sort order.
               Therefore, the contents may contain data which is not valid under the current encoding rules.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUtcTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ReadUtcTime (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, int twoDigitYearMax = 2049, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ReadUtcTime(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, int32 twoDigitYearMax, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.ReadUtcTime(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUtcTime (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, Optional twoDigitYearMax As Integer = 2049, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ReadUtcTime : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; DateTimeOffset" Usage="System.Formats.Asn1.AsnDecoder.ReadUtcTime (source, ruleSet, bytesConsumed, twoDigitYearMax, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="twoDigitYearMax" Type="System.Int32" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="twoDigitYearMax">The largest year to represent with this value.
               The default value, 2049, represents the 1950-2049 range for X.509 certificates.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 24).</param>
        <summary>Reads a UtcTime value from <paramref name="source" /> with a specified tag under the specified encoding rules.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.
             -or- 
               <paramref name="twoDigitYearMax" /> is not in the range [99, 9999].</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadBitString">
      <MemberSignature Language="C#" Value="public static bool TryReadBitString (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination, System.Formats.Asn1.AsnEncodingRules ruleSet, out int unusedBitCount, out int bytesConsumed, out int bytesWritten, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadBitString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; unusedBitCount, [out] int32&amp; bytesConsumed, [out] int32&amp; bytesWritten, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadBitString(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadBitString (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ruleSet As AsnEncodingRules, ByRef unusedBitCount As Integer, ByRef bytesConsumed As Integer, ByRef bytesWritten As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryReadBitString : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * int * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadBitString (source, destination, ruleSet, unusedBitCount, bytesConsumed, bytesWritten, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="unusedBitCount" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="destination">The buffer in which to write.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="unusedBitCount">On success, receives the number of bits in the last byte which were reported as "unused" by the writer.
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="bytesWritten">When this method returns, the total number of bytes written to <paramref name="destination" />.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 3).</param>
        <summary>Attempts to copy a Bit String value from <paramref name="source" /> with a specified tag under the specified encoding rules into <paramref name="destination" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="destination" /> is large enough to receive the value of the Bit String; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The least significant bits in the last byte which are reported as "unused" by the `unusedBitCount` value will be copied into `destination` as unset bits, irrespective of their value in the encoded representation.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.
             -or- 
               <paramref name="destination" /> overlaps <paramref name="source" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadCharacterString">
      <MemberSignature Language="C#" Value="public static bool TryReadCharacterString (ReadOnlySpan&lt;byte&gt; source, Span&lt;char&gt; destination, System.Formats.Asn1.AsnEncodingRules ruleSet, System.Formats.Asn1.UniversalTagNumber encodingType, out int bytesConsumed, out int charsWritten, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadCharacterString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;char&gt; destination, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, valuetype System.Formats.Asn1.UniversalTagNumber encodingType, [out] int32&amp; bytesConsumed, [out] int32&amp; charsWritten, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadCharacterString(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.UniversalTagNumber,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadCharacterString (source As ReadOnlySpan(Of Byte), destination As Span(Of Char), ruleSet As AsnEncodingRules, encodingType As UniversalTagNumber, ByRef bytesConsumed As Integer, ByRef charsWritten As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryReadCharacterString : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; * System.Formats.Asn1.AsnEncodingRules * System.Formats.Asn1.UniversalTagNumber * int * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadCharacterString (source, destination, ruleSet, encodingType, bytesConsumed, charsWritten, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="encodingType" Type="System.Formats.Asn1.UniversalTagNumber" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="destination">The buffer in which to write.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="encodingType">One of the enumeration values which represents the value type to process.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="charsWritten">When this method returns, the number of chars written to <paramref name="destination" />.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the universal tag that is appropriate to the requested encoding type.</param>
        <summary>Reads a character string value from <paramref name="source" /> with a specified tag under the specified encoding rules, copying the decoded string into a a provided destination buffer.</summary>
        <returns>
          <see langword="true" /> and advances the reader if <paramref name="destination" /> had sufficient length to receive the value, otherwise <see langword="false" /> and the reader does not advance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.
             -or- 
               <paramref name="encodingType" /> is not a known character string type.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the string did not successfully decode.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not the same as <paramref name="encodingType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadCharacterStringBytes">
      <MemberSignature Language="C#" Value="public static bool TryReadCharacterStringBytes (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination, System.Formats.Asn1.AsnEncodingRules ruleSet, System.Formats.Asn1.Asn1Tag expectedTag, out int bytesConsumed, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadCharacterStringBytes(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, valuetype System.Formats.Asn1.Asn1Tag expectedTag, [out] int32&amp; bytesConsumed, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadCharacterStringBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.Asn1Tag,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadCharacterStringBytes (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ruleSet As AsnEncodingRules, expectedTag As Asn1Tag, ByRef bytesConsumed As Integer, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadCharacterStringBytes(ReadOnlySpan&lt;System::Byte&gt; source, Span&lt;System::Byte&gt; destination, System::Formats::Asn1::AsnEncodingRules ruleSet, System::Formats::Asn1::Asn1Tag expectedTag, [Runtime::InteropServices::Out] int % bytesConsumed, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="static member TryReadCharacterStringBytes : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * System.Formats.Asn1.Asn1Tag * int * int -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadCharacterStringBytes (source, destination, ruleSet, expectedTag, bytesConsumed, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="expectedTag" Type="System.Formats.Asn1.Asn1Tag" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="destination">The buffer in which to write.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="expectedTag">The tag to check for before reading.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="bytesWritten">On success, receives the number of bytes written to <paramref name="destination" />.</param>
        <summary>Attempts to read a character string value from <paramref name="source" /> with a specified tag under the specified encoding rules, copying the unprocessed bytes into the provided destination buffer.</summary>
        <returns>
          <see langword="true" /> if <paramref name="destination" /> is large enough to receive the value of the unprocessed character string; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method does not determine if the string used only characters defined by the encoding.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not a character string tag type.
             -or- 
               <paramref name="destination" /> overlaps <paramref name="source" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadEncodedValue">
      <MemberSignature Language="C#" Value="public static bool TryReadEncodedValue (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out System.Formats.Asn1.Asn1Tag tag, out int contentOffset, out int contentLength, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadEncodedValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] valuetype System.Formats.Asn1.Asn1Tag&amp; tag, [out] int32&amp; contentOffset, [out] int32&amp; contentLength, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadEncodedValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.Asn1Tag@,System.Int32@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadEncodedValue (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef tag As Asn1Tag, ByRef contentOffset As Integer, ByRef contentLength As Integer, ByRef bytesConsumed As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadEncodedValue(ReadOnlySpan&lt;System::Byte&gt; source, System::Formats::Asn1::AsnEncodingRules ruleSet, [Runtime::InteropServices::Out] System::Formats::Asn1::Asn1Tag % tag, [Runtime::InteropServices::Out] int % contentOffset, [Runtime::InteropServices::Out] int % contentLength, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member TryReadEncodedValue : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * Asn1Tag * int * int * int -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadEncodedValue (source, ruleSet, tag, contentOffset, contentLength, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="tag" Type="System.Formats.Asn1.Asn1Tag" RefType="out" />
        <Parameter Name="contentOffset" Type="System.Int32" RefType="out" />
        <Parameter Name="contentLength" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="tag">When this method returns, the tag identifying the content.
              This parameter is treated as uninitialized.</param>
        <param name="contentOffset">When this method returns, the offset of the content payload relative to the start of <paramref name="source" />.
              This parameter is treated as uninitialized.</param>
        <param name="contentLength">When this method returns, the number of bytes in the content payload (which may be 0).
              This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
              This parameter is treated as uninitialized.</param>
        <summary>Attempts locate the contents range for the encoded value at the beginning of the <paramref name="source" /> buffer using the specified encoding rules.</summary>
        <returns>
          <see langword="true" /> if <paramref name="source" /> represents a valid structural encoding for the specified encoding rules; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 This method performs very little validation on the contents.
                If the encoded value uses a definite length, the contents are not inspected at all.
                If the encoded value uses an indefinite length, the contents are only inspected as necessary to determine the location of the relevant end-of-contents marker.
              

 When the encoded value uses an indefinite length, the `bytesConsumed` value will be larger than the sum of `contentOffset` and `contentLength` to account for the end-of-contents marker.
              



          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadInt32">
      <MemberSignature Language="C#" Value="public static bool TryReadInt32 (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int value, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadInt32(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; value, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadInt32(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadInt32 (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef value As Integer, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryReadInt32 : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadInt32 (source, ruleSet, value, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="value" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="value">On success, receives the interpreted numeric value.
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Attempts to read an Integer value from <paramref name="source" /> with a specified tag under the specified encoding rules as a signed 32-bit value.</summary>
        <returns>
          <see langword="true" /> if the Integer represents value is between <see cref="F:System.Int32.MinValue" /> and <see cref="F:System.Int32.MaxValue" />, inclusive; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadInt64">
      <MemberSignature Language="C#" Value="public static bool TryReadInt64 (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out long value, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadInt64(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int64&amp; value, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadInt64(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int64@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadInt64 (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef value As Long, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryReadInt64 : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int64 * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadInt64 (source, ruleSet, value, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="value" Type="System.Int64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="value">On success, receives the interpreted numeric value.
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Attempts to read an Integer value from <paramref name="source" /> with a specified tag under the specified encoding rules as a signed 64-bit value.</summary>
        <returns>
          <see langword="true" /> if the Integer represents value is between <see cref="F:System.Int64.MinValue" /> and <see cref="F:System.Int64.MaxValue" />, inclusive; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadOctetString">
      <MemberSignature Language="C#" Value="public static bool TryReadOctetString (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination, System.Formats.Asn1.AsnEncodingRules ruleSet, out int bytesConsumed, out int bytesWritten, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadOctetString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; bytesConsumed, [out] int32&amp; bytesWritten, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadOctetString(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadOctetString (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ruleSet As AsnEncodingRules, ByRef bytesConsumed As Integer, ByRef bytesWritten As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryReadOctetString : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadOctetString (source, destination, ruleSet, bytesConsumed, bytesWritten, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="destination">The buffer in which to write.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="bytesWritten">When this method returns, the total number of bytes written to <paramref name="destination" />.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 4).</param>
        <summary>Attempts to get an Octet String value from <paramref name="source" /> with a specified tag under the specified encoding rules, copying the value into the provided destination buffer.</summary>
        <returns>
          <see langword="true" /> if <paramref name="destination" /> is large enough to receive the value of the Octet String; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.
             -or- 
               <paramref name="destination" /> overlaps <paramref name="source" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadPrimitiveBitString">
      <MemberSignature Language="C#" Value="public static bool TryReadPrimitiveBitString (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out int unusedBitCount, out ReadOnlySpan&lt;byte&gt; value, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadPrimitiveBitString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] int32&amp; unusedBitCount, [out] valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt;&amp; value, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadPrimitiveBitString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.ReadOnlySpan{System.Byte}@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadPrimitiveBitString (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef unusedBitCount As Integer, ByRef value As ReadOnlySpan(Of Byte), ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryReadPrimitiveBitString : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * int * ReadOnlySpan * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadPrimitiveBitString (source, ruleSet, unusedBitCount, value, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="unusedBitCount" Type="System.Int32" RefType="out" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="unusedBitCount">On success, receives the number of bits in the last byte which were reported as "unused" by the writer.
               This parameter is treated as uninitialized.</param>
        <param name="value">On success, receives a slice of the input buffer that corresponds to the value of the Bit String.
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 3).</param>
        <summary>Attempts to get a Bit String value from <paramref name="source" /> with a specified tag under the specified encoding rules, if the value is contained in a single (primitive) encoding.</summary>
        <returns>
          <see langword="true" /> if the Bit String value has a primitive encoding and all of the bits reported as unused are set to 0; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadPrimitiveCharacterStringBytes">
      <MemberSignature Language="C#" Value="public static bool TryReadPrimitiveCharacterStringBytes (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, System.Formats.Asn1.Asn1Tag expectedTag, out ReadOnlySpan&lt;byte&gt; value, out int bytesConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadPrimitiveCharacterStringBytes(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, valuetype System.Formats.Asn1.Asn1Tag expectedTag, [out] valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt;&amp; value, [out] int32&amp; bytesConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadPrimitiveCharacterStringBytes(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte}@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadPrimitiveCharacterStringBytes (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, expectedTag As Asn1Tag, ByRef value As ReadOnlySpan(Of Byte), ByRef bytesConsumed As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryReadPrimitiveCharacterStringBytes(ReadOnlySpan&lt;System::Byte&gt; source, System::Formats::Asn1::AsnEncodingRules ruleSet, System::Formats::Asn1::Asn1Tag expectedTag, [Runtime::InteropServices::Out] ReadOnlySpan&lt;System::Byte&gt; % value, [Runtime::InteropServices::Out] int % bytesConsumed);" />
      <MemberSignature Language="F#" Value="static member TryReadPrimitiveCharacterStringBytes : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * System.Formats.Asn1.Asn1Tag * ReadOnlySpan * int -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadPrimitiveCharacterStringBytes (source, ruleSet, expectedTag, value, bytesConsumed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="expectedTag" Type="System.Formats.Asn1.Asn1Tag" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="expectedTag">The tag to check for before reading.</param>
        <param name="value">On success, receives a slice of the input buffer that corresponds to the value of the Bit String.
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <summary>Attempts to get an unprocessed character string value from <paramref name="source" /> with a specified tag under the specified encoding rules, if the value is contained in a single (primitive) encoding.</summary>
        <returns>
          <see langword="true" /> if the character string value has a primitive encoding; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method does not determine if the string used only characters defined by the encoding.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not a character string tag type.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadPrimitiveOctetString">
      <MemberSignature Language="C#" Value="public static bool TryReadPrimitiveOctetString (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out ReadOnlySpan&lt;byte&gt; value, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadPrimitiveOctetString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt;&amp; value, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadPrimitiveOctetString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.ReadOnlySpan{System.Byte}@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadPrimitiveOctetString (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef value As ReadOnlySpan(Of Byte), ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryReadPrimitiveOctetString : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * ReadOnlySpan * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadPrimitiveOctetString (source, ruleSet, value, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="value">On success, receives a slice of the input buffer that corresponds to the value of the Octet String.
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 4).</param>
        <summary>Attempts to get an Octet String value from <paramref name="source" /> with a specified tag under the specified encoding rules, if the value is contained in a single (primitive) encoding.</summary>
        <returns>
          <see langword="true" /> if the Octet String value has a primitive encoding; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadUInt32">
      <MemberSignature Language="C#" Value="public static bool TryReadUInt32 (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out uint value, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadUInt32(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] unsigned int32&amp; value, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadUInt32(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.UInt32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadUInt32 (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef value As UInteger, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryReadUInt32 : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * uint32 * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadUInt32 (source, ruleSet, value, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="value">On success, receives the interpreted numeric value.
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Attempts to read an Integer value from <paramref name="source" /> with a specified tag under the specified encoding rules as an unsigned 32-bit value.</summary>
        <returns>
          <see langword="true" /> if the Integer represents value is between <see cref="F:System.UInt32.MinValue" /> and <see cref="F:System.UInt32.MaxValue" />, inclusive; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadUInt64">
      <MemberSignature Language="C#" Value="public static bool TryReadUInt64 (ReadOnlySpan&lt;byte&gt; source, System.Formats.Asn1.AsnEncodingRules ruleSet, out ulong value, out int bytesConsumed, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadUInt64(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, [out] unsigned int64&amp; value, [out] int32&amp; bytesConsumed, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnDecoder.TryReadUInt64(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.UInt64@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryReadUInt64 (source As ReadOnlySpan(Of Byte), ruleSet As AsnEncodingRules, ByRef value As ULong, ByRef bytesConsumed As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryReadUInt64 : ReadOnlySpan&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * uint64 * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="System.Formats.Asn1.AsnDecoder.TryReadUInt64 (source, ruleSet, value, bytesConsumed, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="source">The buffer containing encoded data.</param>
        <param name="ruleSet">The encoding constraints to use when interpreting the data.</param>
        <param name="value">On success, receives the interpreted numeric value.
               This parameter is treated as uninitialized.</param>
        <param name="bytesConsumed">When this method returns, the total number of bytes for the encoded value.
               This parameter is treated as uninitialized.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Attempts to read an Integer value from <paramref name="source" /> with a specified tag under the specified encoding rules as an unsigned 64-bit value.</summary>
        <returns>
          <see langword="true" /> if the Integer represents value is between <see cref="F:System.UInt64.MinValue" /> and <see cref="F:System.UInt64.MaxValue" />, inclusive; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
