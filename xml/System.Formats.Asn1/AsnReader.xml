<Type Name="AsnReader" FullName="System.Formats.Asn1.AsnReader">
  <TypeSignature Language="C#" Value="public class AsnReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AsnReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Formats.Asn1.AsnReader" />
  <TypeSignature Language="VB.NET" Value="Public Class AsnReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsnReader" />
  <TypeSignature Language="F#" Value="type AsnReader = class" />
  <AssemblyInfo>
    <AssemblyName>System.Formats.Asn1</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>A stateful, forward-only reader for BER-, CER-, or DER-encoded ASN.1 data.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsnReader (ReadOnlyMemory&lt;byte&gt; data, System.Formats.Asn1.AsnEncodingRules ruleSet, System.Formats.Asn1.AsnReaderOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; data, valuetype System.Formats.Asn1.AsnEncodingRules ruleSet, valuetype System.Formats.Asn1.AsnReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.#ctor(System.ReadOnlyMemory{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.AsnReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As ReadOnlyMemory(Of Byte), ruleSet As AsnEncodingRules, Optional options As AsnReaderOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new System.Formats.Asn1.AsnReader : ReadOnlyMemory&lt;byte&gt; * System.Formats.Asn1.AsnEncodingRules * System.Formats.Asn1.AsnReaderOptions -&gt; System.Formats.Asn1.AsnReader" Usage="new System.Formats.Asn1.AsnReader (data, ruleSet, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="ruleSet" Type="System.Formats.Asn1.AsnEncodingRules" />
        <Parameter Name="options" Type="System.Formats.Asn1.AsnReaderOptions" />
      </Parameters>
      <Docs>
        <param name="data">The data to read.</param>
        <param name="ruleSet">The encoding constraints for the reader.</param>
        <param name="options">Additional options for the reader.</param>
        <summary>Construct an <see cref="T:System.Formats.Asn1.AsnReader" /> over <paramref name="data" /> with a given ruleset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This constructor does not evaluate `data` for correctness, any correctness checks are done as part of member methods.

This constructor does not copy `data`. The caller is responsible for ensuring that the values do not change until the reader is finished.
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ruleSet" /> is not defined.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Asn1.AsnReader.HasData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="System.Formats.Asn1.AsnReader.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an indication of whether the reader has remaining data available to process.</summary>
        <value>
          <see langword="true" /> if there is more data available for the reader to process; otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PeekContentBytes">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt; PeekContentBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; PeekContentBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.PeekContentBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekContentBytes () As ReadOnlyMemory(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyMemory&lt;System::Byte&gt; PeekContentBytes();" />
      <MemberSignature Language="F#" Value="member this.PeekContentBytes : unit -&gt; ReadOnlyMemory&lt;byte&gt;" Usage="asnReader.PeekContentBytes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get a <see cref="T:System.ReadOnlyMemory`1" /> view of the content octets (bytes) of the next encoded value without advancing the reader.</summary>
        <returns>The bytes of the contents octets of the next encoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">The reader is positioned at a point where the tag or length is invalid under the current encoding rules.</exception>
      </Docs>
    </Member>
    <Member MemberName="PeekEncodedValue">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt; PeekEncodedValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; PeekEncodedValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.PeekEncodedValue" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekEncodedValue () As ReadOnlyMemory(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyMemory&lt;System::Byte&gt; PeekEncodedValue();" />
      <MemberSignature Language="F#" Value="member this.PeekEncodedValue : unit -&gt; ReadOnlyMemory&lt;byte&gt;" Usage="asnReader.PeekEncodedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get a <see cref="T:System.ReadOnlyMemory`1" /> view of the next encoded value without advancing the reader. For indefinite length encodings this includes the End of Contents marker.</summary>
        <returns>The bytes of the next encoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">The reader is positioned at a point where the tag or length is invalid under the current encoding rules.</exception>
      </Docs>
    </Member>
    <Member MemberName="PeekTag">
      <MemberSignature Language="C#" Value="public System.Formats.Asn1.Asn1Tag PeekTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Formats.Asn1.Asn1Tag PeekTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.PeekTag" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekTag () As Asn1Tag" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Formats::Asn1::Asn1Tag PeekTag();" />
      <MemberSignature Language="F#" Value="member this.PeekTag : unit -&gt; System.Formats.Asn1.Asn1Tag" Usage="asnReader.PeekTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Asn1.Asn1Tag</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Read the encoded tag at the next data position, without advancing the reader.</summary>
        <returns>The decoded tag value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">a tag could not be decoded at the reader's current position.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBitString">
      <MemberSignature Language="C#" Value="public byte[] ReadBitString (out int unusedBitCount, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ReadBitString([out] int32&amp; unusedBitCount, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadBitString(System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBitString (ByRef unusedBitCount As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Byte()" />
      <MemberSignature Language="F#" Value="member this.ReadBitString : int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; byte[]" Usage="asnReader.ReadBitString (unusedBitCount, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unusedBitCount" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="unusedBitCount">On success, receives the number of bits in the last byte which were reported as "unused" by the writer.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 1).</param>
        <summary>Reads the next value as a BIT STRING with a specified tag, returning the value in a byte array.</summary>
        <returns>A copy of the value in a newly allocated, precisely sized, array.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBoolean">
      <MemberSignature Language="C#" Value="public bool ReadBoolean (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReadBoolean(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadBoolean(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBoolean (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.ReadBoolean : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="asnReader.ReadBoolean expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 1).</param>
        <summary>Reads the next value as a Boolean with a specified tag.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCharacterString">
      <MemberSignature Language="C#" Value="public string ReadCharacterString (System.Formats.Asn1.UniversalTagNumber encodingType, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadCharacterString(valuetype System.Formats.Asn1.UniversalTagNumber encodingType, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadCharacterString(System.Formats.Asn1.UniversalTagNumber,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCharacterString (encodingType As UniversalTagNumber, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As String" />
      <MemberSignature Language="F#" Value="member this.ReadCharacterString : System.Formats.Asn1.UniversalTagNumber * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; string" Usage="asnReader.ReadCharacterString (encodingType, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodingType" Type="System.Formats.Asn1.UniversalTagNumber" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="encodingType">One of the enumeration values representing the value type to process.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the universal tag that is appropriate to the requested encoding type.</param>
        <summary>Reads the next value as character string with the specified tag and encoding type, returning the decoded value as a string.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="encodingType" /> is not a known character string type.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the string did not successfully decode.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not the same as <paramref name="encodingType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEncodedValue">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt; ReadEncodedValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; ReadEncodedValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadEncodedValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEncodedValue () As ReadOnlyMemory(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlyMemory&lt;System::Byte&gt; ReadEncodedValue();" />
      <MemberSignature Language="F#" Value="member this.ReadEncodedValue : unit -&gt; ReadOnlyMemory&lt;byte&gt;" Usage="asnReader.ReadEncodedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get a <see cref="T:System.ReadOnlyMemory`1" /> view of the next encoded value, and advance the reader past it. For an indefinite length encoding this includes the End of Contents marker.</summary>
        <returns>A <see cref="T:System.ReadOnlyMemory`1" /> view of the next encoded value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadEnumeratedBytes">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt; ReadEnumeratedBytes (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; ReadEnumeratedBytes(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadEnumeratedBytes(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEnumeratedBytes (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As ReadOnlyMemory(Of Byte)" />
      <MemberSignature Language="F#" Value="member this.ReadEnumeratedBytes : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; ReadOnlyMemory&lt;byte&gt;" Usage="asnReader.ReadEnumeratedBytes expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 10).</param>
        <summary>Reads the next value as a Enumerated with a specified tag, returning the contents as a <see cref="T:System.ReadOnlyMemory`1" /> over the original data.</summary>
        <returns>The bytes of the Enumerated value, in signed big-endian form.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEnumeratedValue">
      <MemberSignature Language="C#" Value="public Enum ReadEnumeratedValue (Type enumType, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Enum ReadEnumeratedValue(class System.Type enumType, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadEnumeratedValue(System.Type,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEnumeratedValue (enumType As Type, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Enum" />
      <MemberSignature Language="F#" Value="member this.ReadEnumeratedValue : Type * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; Enum" Usage="asnReader.ReadEnumeratedValue (enumType, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Enum</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="enumType">Type object representing the destination type.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 10).</param>
        <summary>Reads the next value as an Enumerated with a specified tag, converting it to the non-[<see cref="T:System.FlagsAttribute" />] enum specified by <paramref name="enumType" />.</summary>
        <returns>The Enumerated value converted to a <paramref name="enumType" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method does not validate that the return value is defined within `enumType`.

          ]]></format>
        </remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the encoded value is too big to fit in a <paramref name="enumType" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="enumType" /> is not an enum type.
             -or- 
               <paramref name="enumType" /> was declared with <see cref="T:System.FlagsAttribute" />.
             -or- 
               <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="enumType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEnumeratedValue&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public TEnum ReadEnumeratedValue&lt;TEnum&gt; (System.Formats.Asn1.Asn1Tag? expectedTag = default) where TEnum : Enum;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEnum ReadEnumeratedValue&lt;(class System.Enum) TEnum&gt;(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadEnumeratedValue``1(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEnumeratedValue(Of TEnum As Enum) (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As TEnum" />
      <MemberSignature Language="F#" Value="member this.ReadEnumeratedValue : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; 'Enum (requires 'Enum :&gt; Enum)" Usage="asnReader.ReadEnumeratedValue expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <BaseTypeName>System.Enum</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">Destination enum type</typeparam>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 10).</param>
        <summary>Reads the next value as an Enumerated with a specified tag, converting it to the non-[<see cref="T:System.FlagsAttribute" />] enum specified by <typeparamref name="TEnum" />.</summary>
        <returns>The Enumerated value converted to a <typeparamref name="TEnum" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method does not validate that the return value is defined within <typeparamref name="TEnum>.

          ]]></format>
        </remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the encoded value is too big to fit in a <typeparamref name="TEnum" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <typeparamref name="TEnum" /> is not an enum type.
             -or- 
               <typeparamref name="TEnum" /> was declared with <see cref="T:System.FlagsAttribute" />.
             -or- 
               <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadGeneralizedTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ReadGeneralizedTime (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ReadGeneralizedTime(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadGeneralizedTime(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadGeneralizedTime (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="member this.ReadGeneralizedTime : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; DateTimeOffset" Usage="asnReader.ReadGeneralizedTime expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 24).</param>
        <summary>Reads the next value as a GeneralizedTime with a specified tag.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInteger">
      <MemberSignature Language="C#" Value="public System.Numerics.BigInteger ReadInteger (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Numerics.BigInteger ReadInteger(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadInteger(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadInteger (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As BigInteger" />
      <MemberSignature Language="F#" Value="member this.ReadInteger : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; System.Numerics.BigInteger" Usage="asnReader.ReadInteger expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.BigInteger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Reads the next value as an Integer with a specified tag.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadIntegerBytes">
      <MemberSignature Language="C#" Value="public ReadOnlyMemory&lt;byte&gt; ReadIntegerBytes (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; ReadIntegerBytes(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadIntegerBytes(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadIntegerBytes (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As ReadOnlyMemory(Of Byte)" />
      <MemberSignature Language="F#" Value="member this.ReadIntegerBytes : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; ReadOnlyMemory&lt;byte&gt;" Usage="asnReader.ReadIntegerBytes expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Reads the next value as a Integer with a specified tag, returning the contents as a <see cref="T:System.ReadOnlyMemory`1" /> over the original data.</summary>
        <returns>The bytes of the Integer value, in signed big-endian form.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadNamedBitList">
      <MemberSignature Language="C#" Value="public System.Collections.BitArray ReadNamedBitList (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.BitArray ReadNamedBitList(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadNamedBitList(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadNamedBitList (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As BitArray" />
      <MemberSignature Language="F#" Value="member this.ReadNamedBitList : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; System.Collections.BitArray" Usage="asnReader.ReadNamedBitList expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.BitArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading.</param>
        <summary>Reads the next value as a NamedBitList with a specified tag.</summary>
        <returns>The bits from the encoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadNamedBitListValue">
      <MemberSignature Language="C#" Value="public Enum ReadNamedBitListValue (Type flagsEnumType, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Enum ReadNamedBitListValue(class System.Type flagsEnumType, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadNamedBitListValue(System.Type,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadNamedBitListValue (flagsEnumType As Type, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Enum" />
      <MemberSignature Language="F#" Value="member this.ReadNamedBitListValue : Type * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; Enum" Usage="asnReader.ReadNamedBitListValue (flagsEnumType, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Enum</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flagsEnumType" Type="System.Type" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="flagsEnumType">Type object representing the destination type.</param>
        <param name="expectedTag">The tag to check for before reading.</param>
        <summary>Reads the next value as a NamedBitList with a specified tag, converting it to the [<see cref="T:System.FlagsAttribute" />] enum specified by <paramref name="flagsEnumType" />.</summary>
        <returns>The NamedBitList value converted to a <paramref name="flagsEnumType" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the encoded value is too big to fit in a <paramref name="flagsEnumType" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="flagsEnumType" /> is not an enum type.
             -or- 
               <paramref name="flagsEnumType" /> was not declared with <see cref="T:System.FlagsAttribute" /> 
               -or- 
               <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="flagsEnumType" /> is <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadNamedBitListValue&lt;TFlagsEnum&gt;">
      <MemberSignature Language="C#" Value="public TFlagsEnum ReadNamedBitListValue&lt;TFlagsEnum&gt; (System.Formats.Asn1.Asn1Tag? expectedTag = default) where TFlagsEnum : Enum;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TFlagsEnum ReadNamedBitListValue&lt;(class System.Enum) TFlagsEnum&gt;(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadNamedBitListValue``1(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadNamedBitListValue(Of TFlagsEnum As Enum) (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As TFlagsEnum" />
      <MemberSignature Language="F#" Value="member this.ReadNamedBitListValue : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; 'FlagsEnum (requires 'FlagsEnum :&gt; Enum)" Usage="asnReader.ReadNamedBitListValue expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TFlagsEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFlagsEnum">
          <Constraints>
            <BaseTypeName>System.Enum</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFlagsEnum">Destination enum type</typeparam>
        <param name="expectedTag">The tag to check for before reading.</param>
        <summary>Reads the next value as a NamedBitList with a specified tag, converting it to the [<see cref="T:System.FlagsAttribute" />] enum specified by <typeparamref name="TFlagsEnum" />.</summary>
        <returns>The NamedBitList value converted to a <typeparamref name="TFlagsEnum" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The bit alignment performed by this method is to interpret the most significant bit in the first byte of the value as the least significant bit in <typeparamref name="TFlagsEnum>, with bits increasing in value until the least significant bit of the first byte, proceeding with the most significant bit of the second byte, and so on. Under this scheme, the following ASN.1 type declaration and C# enumeration can be used together:
             <code> KeyUsage ::= BIT STRING { digitalSignature   (0), nonRepudiation     (1), keyEncipherment    (2), dataEncipherment   (3), keyAgreement       (4), keyCertSign        (5), cRLSign            (6), encipherOnly       (7), decipherOnly       (8) } </code><code> [Flags] enum KeyUsage { None              = 0, DigitalSignature  = 1 &lt;&lt; (0), NonRepudiation    = 1 &lt;&lt; (1), KeyEncipherment   = 1 &lt;&lt; (2), DataEncipherment  = 1 &lt;&lt; (3), KeyAgreement      = 1 &lt;&lt; (4), KeyCertSign       = 1 &lt;&lt; (5), CrlSign           = 1 &lt;&lt; (6), EncipherOnly      = 1 &lt;&lt; (7), DecipherOnly      = 1 &lt;&lt; (8), } </code> 
               Note that while the example here uses the KeyUsage NamedBitList from <a href="https://tools.ietf.org/html/rfc3280#section-4.2.1.3">RFC 3280 (4.2.1.3)</a>, the example enum uses values thar are different from System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.

          ]]></format>
        </remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the encoded value is too big to fit in a <typeparamref name="TFlagsEnum" /> value.</exception>
        <exception cref="T:System.ArgumentException">
          <typeparamref name="TFlagsEnum" /> is not an enum type.
             -or- 
               <typeparamref name="TFlagsEnum" /> was not declared with <see cref="T:System.FlagsAttribute" /> 
               -or- 
               <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadNull">
      <MemberSignature Language="C#" Value="public void ReadNull (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadNull(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadNull(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadNull (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing)" />
      <MemberSignature Language="F#" Value="member this.ReadNull : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; unit" Usage="asnReader.ReadNull expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 5).</param>
        <summary>Reads the next value as a NULL with a specified tag.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadObjectIdentifier">
      <MemberSignature Language="C#" Value="public string ReadObjectIdentifier (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadObjectIdentifier(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadObjectIdentifier(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadObjectIdentifier (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As String" />
      <MemberSignature Language="F#" Value="member this.ReadObjectIdentifier : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; string" Usage="asnReader.ReadObjectIdentifier expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 6).</param>
        <summary>Reads the next value as an OBJECT IDENTIFIER with a specified tag, returning the value in a dotted decimal format string.</summary>
        <returns>The object identifier value in a dotted decimal format string.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadOctetString">
      <MemberSignature Language="C#" Value="public byte[] ReadOctetString (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ReadOctetString(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadOctetString (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Byte()" />
      <MemberSignature Language="F#" Value="member this.ReadOctetString : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; byte[]" Usage="asnReader.ReadOctetString expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 4).</param>
        <summary>Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the value in a byte array.</summary>
        <returns>A copy of the value in a newly allocated, precisely sized, array.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSequence">
      <MemberSignature Language="C#" Value="public System.Formats.Asn1.AsnReader ReadSequence (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Formats.Asn1.AsnReader ReadSequence(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadSequence (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As AsnReader" />
      <MemberSignature Language="F#" Value="member this.ReadSequence : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; System.Formats.Asn1.AsnReader" Usage="asnReader.ReadSequence expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Asn1.AsnReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 16).</param>
        <summary>Reads the next value as a SEQUENCE or SEQUENCE-OF with the specified tag and returns the result as a new reader positioned at the first value in the sequence (or with <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</summary>
        <returns>A new reader positioned at the first value in the sequence (or with <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

the nested content is not evaluated by this method, and may contain data which is not valid under the current encoding rules.

          ]]></format>
        </remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSetOf">
      <MemberSignature Language="C#" Value="public System.Formats.Asn1.AsnReader ReadSetOf (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Formats.Asn1.AsnReader ReadSetOf(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadSetOf (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As AsnReader" />
      <MemberSignature Language="F#" Value="member this.ReadSetOf : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; System.Formats.Asn1.AsnReader" Usage="asnReader.ReadSetOf expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Asn1.AsnReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 17).</param>
        <summary>Reads the next value as a SET-OF with the specified tag and returns the result as a new reader positioned at the first value in the set-of (or with <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />), using the <see cref="P:System.Formats.Asn1.AsnReaderOptions.SkipSetSortOrderVerification" /> value from the constructor (default <see langword="false" />).</summary>
        <returns>A new reader positioned at the first value in the set-of (or with <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

the nested content is not evaluated by this method (aside from sort order, when required), and may contain data which is not valid under the current encoding rules.

          ]]></format>
        </remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSetOf">
      <MemberSignature Language="C#" Value="public System.Formats.Asn1.AsnReader ReadSetOf (bool skipSortOrderValidation, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Formats.Asn1.AsnReader ReadSetOf(bool skipSortOrderValidation, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadSetOf(System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadSetOf (skipSortOrderValidation As Boolean, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As AsnReader" />
      <MemberSignature Language="F#" Value="member this.ReadSetOf : bool * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; System.Formats.Asn1.AsnReader" Usage="asnReader.ReadSetOf (skipSortOrderValidation, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Asn1.AsnReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipSortOrderValidation" Type="System.Boolean" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="skipSortOrderValidation">
          <see langword="true" /> to always accept the data in the order it is presented, <see langword="false" /> to verify that the data is sorted correctly when the encoding rules say sorting was required (CER and DER).</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 17).</param>
        <summary>Reads the next value as a SET-OF with the specified tag and returns the result as a new reader positioned at the first value in the set-of (or with <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</summary>
        <returns>A new reader positioned at the first value in the set-of (or with <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

the nested content is not evaluated by this method (aside from sort order, when required), and may contain data which is not valid under the current encoding rules.

          ]]></format>
        </remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUtcTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ReadUtcTime (System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ReadUtcTime(valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadUtcTime(System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadUtcTime (Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="member this.ReadUtcTime : Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; DateTimeOffset" Usage="asnReader.ReadUtcTime expectedTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 23).</param>
        <summary>Reads the next value as a UTCTime with a specified tag using the <see cref="P:System.Formats.Asn1.AsnReaderOptions.UtcTimeTwoDigitYearMax" /> value from options passed to the constructor (with a default of 2049).</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadUtcTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ReadUtcTime (int twoDigitYearMax, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ReadUtcTime(int32 twoDigitYearMax, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ReadUtcTime(System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadUtcTime (twoDigitYearMax As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="member this.ReadUtcTime : int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; DateTimeOffset" Usage="asnReader.ReadUtcTime (twoDigitYearMax, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="twoDigitYearMax" Type="System.Int32" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="twoDigitYearMax">The largest year to represent with this value.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 23).</param>
        <summary>Reads the next value as a UTCTime with a specified tag.</summary>
        <returns>The decoded value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="RuleSet">
      <MemberSignature Language="C#" Value="public System.Formats.Asn1.AsnEncodingRules RuleSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Formats.Asn1.AsnEncodingRules RuleSet" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Asn1.AsnReader.RuleSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuleSet As AsnEncodingRules" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Formats::Asn1::AsnEncodingRules RuleSet { System::Formats::Asn1::AsnEncodingRules get(); };" />
      <MemberSignature Language="F#" Value="member this.RuleSet : System.Formats.Asn1.AsnEncodingRules" Usage="System.Formats.Asn1.AsnReader.RuleSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Asn1.AsnEncodingRules</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the encoding rules in use by this reader.</summary>
        <value>The encoding rules in use by this reader.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfNotEmpty">
      <MemberSignature Language="C#" Value="public void ThrowIfNotEmpty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfNotEmpty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.ThrowIfNotEmpty" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfNotEmpty ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfNotEmpty();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfNotEmpty : unit -&gt; unit" Usage="asnReader.ThrowIfNotEmpty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Throws a standardized <see cref="T:System.Formats.Asn1.AsnContentException" /> if the reader has remaining data, performs no function if <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> returns <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method provides a standardized target and standardized exception for reading a "closed" structure, such as the nested content for an explicitly tagged value.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadBitString">
      <MemberSignature Language="C#" Value="public bool TryReadBitString (Span&lt;byte&gt; destination, out int unusedBitCount, out int bytesWritten, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadBitString(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; unusedBitCount, [out] int32&amp; bytesWritten, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadBitString(System.Span{System.Byte},System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadBitString (destination As Span(Of Byte), ByRef unusedBitCount As Integer, ByRef bytesWritten As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadBitString : Span&lt;byte&gt; * int * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="asnReader.TryReadBitString (destination, unusedBitCount, bytesWritten, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="unusedBitCount" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer in which to write.</param>
        <param name="unusedBitCount">On success, receives the number of bits in the last byte which were reported as "unused" by the writer.</param>
        <param name="bytesWritten">On success, receives the number of bytes written to <paramref name="destination" />.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 1).</param>
        <summary>Reads the next value as a BIT STRING with a specified tag, copying the value into a provided destination buffer.</summary>
        <returns>
          <see langword="true" /> and advances the reader if <paramref name="destination" /> had sufficient length to receive the value, otherwise <see langword="false" /> and the reader does not advance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadCharacterString">
      <MemberSignature Language="C#" Value="public bool TryReadCharacterString (Span&lt;char&gt; destination, System.Formats.Asn1.UniversalTagNumber encodingType, out int charsWritten, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadCharacterString(valuetype System.Span`1&lt;char&gt; destination, valuetype System.Formats.Asn1.UniversalTagNumber encodingType, [out] int32&amp; charsWritten, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadCharacterString(System.Span{System.Char},System.Formats.Asn1.UniversalTagNumber,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadCharacterString (destination As Span(Of Char), encodingType As UniversalTagNumber, ByRef charsWritten As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadCharacterString : Span&lt;char&gt; * System.Formats.Asn1.UniversalTagNumber * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="asnReader.TryReadCharacterString (destination, encodingType, charsWritten, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="encodingType" Type="System.Formats.Asn1.UniversalTagNumber" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer in which to write.</param>
        <param name="encodingType">One of the enumeration values representing the value type to process.</param>
        <param name="charsWritten">On success, receives the number of chars written to <paramref name="destination" />.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the universal tag that is appropriate to the requested encoding type.</param>
        <summary>Reads the next value as character string with the specified tag and encoding type, copying the decoded value into a provided destination buffer.</summary>
        <returns>
          <see langword="true" /> and advances the reader if <paramref name="destination" /> had sufficient length to receive the value, otherwise <see langword="false" /> and the reader does not advance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="encodingType" /> is not a known character string type.</exception>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.
             -or- 
               the string did not successfully decode.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not the same as <paramref name="encodingType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadCharacterStringBytes">
      <MemberSignature Language="C#" Value="public bool TryReadCharacterStringBytes (Span&lt;byte&gt; destination, System.Formats.Asn1.Asn1Tag expectedTag, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadCharacterStringBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Formats.Asn1.Asn1Tag expectedTag, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadCharacterStringBytes(System.Span{System.Byte},System.Formats.Asn1.Asn1Tag,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadCharacterStringBytes (destination As Span(Of Byte), expectedTag As Asn1Tag, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReadCharacterStringBytes(Span&lt;System::Byte&gt; destination, System::Formats::Asn1::Asn1Tag expectedTag, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryReadCharacterStringBytes : Span&lt;byte&gt; * System.Formats.Asn1.Asn1Tag * int -&gt; bool" Usage="asnReader.TryReadCharacterStringBytes (destination, expectedTag, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="expectedTag" Type="System.Formats.Asn1.Asn1Tag" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer in which to write.</param>
        <param name="expectedTag">The tag to check for before reading.</param>
        <param name="bytesWritten">On success, receives the number of bytes written to <paramref name="destination" />.</param>
        <summary>Reads the next value as character string with the specified tag, copying the unprocessed bytes into a provided destination buffer.</summary>
        <returns>
          <see langword="true" /> and advances the reader if <paramref name="destination" /> had sufficient length to receive the value, otherwise <see langword="false" /> and the reader does not advance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method does not determine if the string used only characters defined by the encoding.

          ]]></format>
        </remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not a character string tag type.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadInt32">
      <MemberSignature Language="C#" Value="public bool TryReadInt32 (out int value, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadInt32([out] int32&amp; value, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadInt32(System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadInt32 (ByRef value As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadInt32 : int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="asnReader.TryReadInt32 (value, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="value">On success, receives the decoded value.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Attempts to read the next value as an Integer with a specified tag, as a signed 32-bit value.</summary>
        <returns>
          <see langword="false" /> and does not advance the reader if the value is not between <see cref="F:System.Int32.MinValue" /> and <see cref="F:System.Int32.MaxValue" />, inclusive; otherwise <see langword="true" /> is returned and the reader advances.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadInt64">
      <MemberSignature Language="C#" Value="public bool TryReadInt64 (out long value, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadInt64([out] int64&amp; value, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadInt64(System.Int64@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadInt64 (ByRef value As Long, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadInt64 : int64 * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="asnReader.TryReadInt64 (value, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="value">On success, receives the decoded value.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Attempts to read the next value as an Integer with a specified tag, as a signed 64-bit value.</summary>
        <returns>
          <see langword="false" /> and does not advance the reader if the value is not between <see cref="F:System.Int64.MinValue" /> and <see cref="F:System.Int64.MaxValue" />, inclusive; otherwise <see langword="true" /> is returned and the reader advances.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadOctetString">
      <MemberSignature Language="C#" Value="public bool TryReadOctetString (Span&lt;byte&gt; destination, out int bytesWritten, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadOctetString(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadOctetString(System.Span{System.Byte},System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadOctetString (destination As Span(Of Byte), ByRef bytesWritten As Integer, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadOctetString : Span&lt;byte&gt; * int * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="asnReader.TryReadOctetString (destination, bytesWritten, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">The buffer in which to write.</param>
        <param name="bytesWritten">On success, receives the number of bytes written to <paramref name="destination" />.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 4).</param>
        <summary>Reads the next value as an OCTET STRING with a specified tag, copying the value into a provided destination buffer.</summary>
        <returns>
          <see langword="true" /> and advances the reader if <paramref name="destination" /> had sufficient length to receive the value, otherwise <see langword="false" /> and the reader does not advance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadPrimitiveBitString">
      <MemberSignature Language="C#" Value="public bool TryReadPrimitiveBitString (out int unusedBitCount, out ReadOnlyMemory&lt;byte&gt; value, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadPrimitiveBitString([out] int32&amp; unusedBitCount, [out] valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&amp; value, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadPrimitiveBitString(System.Int32@,System.ReadOnlyMemory{System.Byte}@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadPrimitiveBitString (ByRef unusedBitCount As Integer, ByRef value As ReadOnlyMemory(Of Byte), Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadPrimitiveBitString : int * ReadOnlyMemory * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="asnReader.TryReadPrimitiveBitString (unusedBitCount, value, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unusedBitCount" Type="System.Int32" RefType="out" />
        <Parameter Name="value" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="unusedBitCount">On success, receives the number of bits in the last byte which were reported as "unused" by the writer.</param>
        <param name="value">On success, receives a <see cref="T:System.ReadOnlyMemory`1" /> over the original data corresponding to the value of the BIT STRING.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 1).</param>
        <summary>Reads the next value as a BIT STRING with a specified tag, returning the contents as a <see cref="T:System.ReadOnlyMemory`1" /> over the original data.</summary>
        <returns>
          <see langword="true" /> and advances the reader if the BIT STRING value had a primitive encoding, <see langword="false" /> and does not advance the reader if it had a constructed encoding.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadPrimitiveCharacterStringBytes">
      <MemberSignature Language="C#" Value="public bool TryReadPrimitiveCharacterStringBytes (System.Formats.Asn1.Asn1Tag expectedTag, out ReadOnlyMemory&lt;byte&gt; contents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadPrimitiveCharacterStringBytes(valuetype System.Formats.Asn1.Asn1Tag expectedTag, [out] valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&amp; contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Formats.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadPrimitiveCharacterStringBytes (expectedTag As Asn1Tag, ByRef contents As ReadOnlyMemory(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReadPrimitiveCharacterStringBytes(System::Formats::Asn1::Asn1Tag expectedTag, [Runtime::InteropServices::Out] ReadOnlyMemory&lt;System::Byte&gt; % contents);" />
      <MemberSignature Language="F#" Value="member this.TryReadPrimitiveCharacterStringBytes : System.Formats.Asn1.Asn1Tag * ReadOnlyMemory -&gt; bool" Usage="asnReader.TryReadPrimitiveCharacterStringBytes (expectedTag, contents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedTag" Type="System.Formats.Asn1.Asn1Tag" />
        <Parameter Name="contents" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="expectedTag">The tag to check for before reading.</param>
        <param name="contents">On success, receives a <see cref="T:System.ReadOnlyMemory`1" /> over the original data corresponding to the value of the character string.</param>
        <summary>Reads the next value as a character with a specified tag, returning the contents as an unprocessed <see cref="T:System.ReadOnlyMemory`1" /> over the original data.</summary>
        <returns>
          <see langword="true" /> and advances the reader if the character string value had a primitive encoding, <see langword="false" /> and does not advance the reader if it had a constructed encoding.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This method does not determine if the string used only characters defined by the encoding.

          ]]></format>
        </remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not a character string tag type.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadPrimitiveOctetString">
      <MemberSignature Language="C#" Value="public bool TryReadPrimitiveOctetString (out ReadOnlyMemory&lt;byte&gt; contents, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadPrimitiveOctetString([out] valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt;&amp; contents, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadPrimitiveOctetString(System.ReadOnlyMemory{System.Byte}@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadPrimitiveOctetString (ByRef contents As ReadOnlyMemory(Of Byte), Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadPrimitiveOctetString : ReadOnlyMemory * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="asnReader.TryReadPrimitiveOctetString (contents, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="contents">On success, receives a <see cref="T:System.ReadOnlyMemory`1" /> over the original data corresponding to the value of the OCTET STRING.</param>
        <param name="expectedTag">The tag to check for before reading.</param>
        <summary>Attempts to read the next value as an OCTET STRING with a specified tag, returning the contents as a <see cref="T:System.ReadOnlyMemory`1" /> over the original data.</summary>
        <returns>
          <see langword="true" /> and advances the reader if the OCTET STRING value had a primitive encoding, <see langword="false" /> and does not advance the reader if it had a constructed encoding.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadUInt32">
      <MemberSignature Language="C#" Value="public bool TryReadUInt32 (out uint value, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadUInt32([out] unsigned int32&amp; value, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadUInt32(System.UInt32@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadUInt32 (ByRef value As UInteger, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadUInt32 : uint32 * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="asnReader.TryReadUInt32 (value, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="value">On success, receives the decoded value.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Attempts to read the next value as an Integer with a specified tag, as an unsigned 32-bit value.</summary>
        <returns>
          <see langword="false" /> and does not advance the reader if the value is not between <see cref="F:System.UInt32.MinValue" /> and <see cref="F:System.UInt32.MaxValue" />, inclusive; otherwise <see langword="true" /> is returned and the reader advances.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReadUInt64">
      <MemberSignature Language="C#" Value="public bool TryReadUInt64 (out ulong value, System.Formats.Asn1.Asn1Tag? expectedTag = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadUInt64([out] unsigned int64&amp; value, valuetype System.Nullable`1&lt;valuetype System.Formats.Asn1.Asn1Tag&gt; expectedTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Asn1.AsnReader.TryReadUInt64(System.UInt64@,System.Nullable{System.Formats.Asn1.Asn1Tag})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadUInt64 (ByRef value As ULong, Optional expectedTag As Nullable(Of Asn1Tag) = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryReadUInt64 : uint64 * Nullable&lt;System.Formats.Asn1.Asn1Tag&gt; -&gt; bool" Usage="asnReader.TryReadUInt64 (value, expectedTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Asn1</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
        <Parameter Name="expectedTag" Type="System.Nullable&lt;System.Formats.Asn1.Asn1Tag&gt;" />
      </Parameters>
      <Docs>
        <param name="value">On success, receives the decoded value.</param>
        <param name="expectedTag">The tag to check for before reading, or <see langword="null" /> for the default tag (Universal 2).</param>
        <summary>Attempts to read the next value as an Integer with a specified tag, as an unsigned 64-bit value.</summary>
        <returns>
          <see langword="false" /> and does not advance the reader if the value is not between <see cref="F:System.UInt64.MinValue" /> and <see cref="F:System.UInt64.MaxValue" />, inclusive; otherwise <see langword="true" /> is returned and the reader advances.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Formats.Asn1.AsnContentException">the next value does not have the correct tag.
             -or- 
               the length encoding is not valid under the current encoding rules.
             -or- 
               the contents are not valid under the current encoding rules.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> is <see cref="F:System.Formats.Asn1.TagClass.Universal" />, but <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> is not correct for the method.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
