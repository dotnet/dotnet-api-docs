<Type Name="FaultInjectionExtensions" FullName="Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions">
  <TypeSignature Language="C#" Value="public static class FaultInjectionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit FaultInjectionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module FaultInjectionExtensions" />
  <TypeSignature Language="F#" Value="type FaultInjectionExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class FaultInjectionExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides extension methods for Fault-Injection library.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddFaultInjection">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddFaultInjection (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddFaultInjection(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.AddFaultInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFaultInjection (services As IServiceCollection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddFaultInjection : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.AddFaultInjection services" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddFaultInjection(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
      </Parameters>
      <Docs>
        <param name="services">The services collection.</param>
        <summary>
            Registers default implementations for <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IFaultInjectionOptionsProvider" /> and <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IChaosPolicyFactory" />.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            All parameters cannot be null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFaultInjection">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddFaultInjection (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration section);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddFaultInjection(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Extensions.Configuration.IConfiguration section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.AddFaultInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFaultInjection (services As IServiceCollection, section As IConfiguration) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddFaultInjection : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.Configuration.IConfiguration -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.AddFaultInjection (services, section)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddFaultInjection(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Microsoft::Extensions::Configuration::IConfiguration ^ section);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfiguration" />
      </Parameters>
      <Docs>
        <param name="services">The services collection.</param>
        <param name="section">
            The configuration section to bind to <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions" />.
            </param>
        <summary>
            Configures <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions" /> and registers default implementations for
            <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IFaultInjectionOptionsProvider" /> and <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IChaosPolicyFactory" />.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            All parameters cannot be null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFaultInjection">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddFaultInjection (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddFaultInjection(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.AddFaultInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFaultInjection (services As IServiceCollection, configure As Action(Of FaultInjectionOptionsBuilder)) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddFaultInjection : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.AddFaultInjection (services, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddFaultInjection(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Action&lt;Microsoft::Extensions::Resilience::FaultInjection::FaultInjectionOptionsBuilder ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="services">The services collection.</param>
        <param name="configure">Function to configure <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions" />.</param>
        <summary>
            Calls the given action to configure <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions" /> and registers default implementations for
            <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IFaultInjectionOptionsProvider" /> and <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IChaosPolicyFactory" />.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            All parameters cannot be null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFaultInjectionGroupName">
      <MemberSignature Language="C#" Value="public static string? GetFaultInjectionGroupName (this Polly.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFaultInjectionGroupName(class Polly.Context context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.GetFaultInjectionGroupName(Polly.Context)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFaultInjectionGroupName (context As Context) As String" />
      <MemberSignature Language="F#" Value="static member GetFaultInjectionGroupName : Polly.Context -&gt; string" Usage="Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.GetFaultInjectionGroupName context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetFaultInjectionGroupName(Polly::Context ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Polly.Context" RefType="this" />
      </Parameters>
      <Docs>
        <param name="context">The context instance.</param>
        <summary>
            Gets the name of the registered <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup" /> from <see cref="T:Polly.Context" />.
            </summary>
        <returns>
            The <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup" /> if registered; null if it isn't.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            All parameters must not be null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WithFaultInjection">
      <MemberSignature Language="C#" Value="public static Polly.Context WithFaultInjection (this Polly.Context context, Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions weightAssignments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Polly.Context WithFaultInjection(class Polly.Context context, class Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions weightAssignments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.WithFaultInjection(Polly.Context,Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithFaultInjection (context As Context, weightAssignments As FaultPolicyWeightAssignmentsOptions) As Context" />
      <MemberSignature Language="F#" Value="static member WithFaultInjection : Polly.Context * Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions -&gt; Polly.Context" Usage="Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.WithFaultInjection (context, weightAssignments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Polly::Context ^ WithFaultInjection(Polly::Context ^ context, Microsoft::Extensions::Resilience::FaultInjection::FaultPolicyWeightAssignmentsOptions ^ weightAssignments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Polly.Context</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Polly.Context" RefType="this" />
        <Parameter Name="weightAssignments" Type="Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions" />
      </Parameters>
      <Docs>
        <param name="context">The context instance.</param>
        <param name="weightAssignments">The fault policy weight assignment.</param>
        <summary>
            Associates <paramref name="weightAssignments" /> to the calling <see cref="T:Polly.Context" /> instance, where <paramref name="weightAssignments" />
            will be used to determine which <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup" /> to use at each fault-injection run.
            </summary>
        <returns>
            The <see cref="T:Polly.Context" /> so that additional calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            All parameters must not be null.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WithFaultInjection">
      <MemberSignature Language="C#" Value="public static Polly.Context WithFaultInjection (this Polly.Context context, string groupName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Polly.Context WithFaultInjection(class Polly.Context context, string groupName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.WithFaultInjection(Polly.Context,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithFaultInjection (context As Context, groupName As String) As Context" />
      <MemberSignature Language="F#" Value="static member WithFaultInjection : Polly.Context * string -&gt; Polly.Context" Usage="Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.WithFaultInjection (context, groupName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Polly::Context ^ WithFaultInjection(Polly::Context ^ context, System::String ^ groupName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Resilience</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Polly.Context</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Polly.Context" RefType="this" />
        <Parameter Name="groupName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">The context instance.</param>
        <param name="groupName">The identifier name for an <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup" />.</param>
        <summary>
            Associates the given <see cref="T:Polly.Context" /> instance to the given identifier name
            for an <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup" /> registered at <see cref="T:Microsoft.Extensions.Resilience.FaultInjection.IFaultInjectionOptionsProvider" />.
            </summary>
        <returns>
            The <see cref="T:Polly.Context" /> so that additional calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            All parameters must not be null.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
