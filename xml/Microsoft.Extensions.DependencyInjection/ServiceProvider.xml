<Type Name="ServiceProvider" FullName="Microsoft.Extensions.DependencyInjection.ServiceProvider">
  <TypeSignature Language="C#" Value="public sealed class ServiceProvider : IAsyncDisposable, IDisposable, IServiceProvider, Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceProvider extends System.Object implements class Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider, class System.IAsyncDisposable, class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.ServiceProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceProvider&#xA;Implements IAsyncDisposable, IDisposable, IKeyedServiceProvider, IServiceProvider" />
  <TypeSignature Language="F#" Value="type ServiceProvider = class&#xA;    interface IServiceProvider&#xA;    interface IKeyedServiceProvider&#xA;    interface IDisposable&#xA;    interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProvider sealed : IAsyncDisposable, IDisposable, IServiceProvider, Microsoft::Extensions::DependencyInjection::IKeyedServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.DependencyInjection</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{DebuggerToString(),nq}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{DebuggerToString(),nq}")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.Extensions.DependencyInjection.ServiceProvider+ServiceProviderDebugView))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.Extensions.DependencyInjection.ServiceProvider+ServiceProviderDebugView))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            The default IServiceProvider.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="serviceProvider.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProvider.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="serviceProvider.DisposeAsync " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</summary>
        <returns>A task that represents the asynchronous dispose operation.</returns>
        <remarks>This method stores in the task it returns all non-usage exceptions that the method's synchronous counterpart can throw. If an exception is stored into the returned task, that exception will be thrown when the task is awaited. Usage exceptions, such as <see cref="T:System.ArgumentException" />, are still thrown synchronously. For the stored exceptions, see the exceptions thrown by <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceProvider.Dispose" />.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetKeyedService">
      <MemberSignature Language="C#" Value="public object? GetKeyedService (Type serviceType, object? serviceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetKeyedService(class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProvider.GetKeyedService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKeyedService (serviceType As Type, serviceKey As Object) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetKeyedService : Type * obj -&gt; obj&#xA;override this.GetKeyedService : Type * obj -&gt; obj" Usage="serviceProvider.GetKeyedService (serviceType, serviceKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetKeyedService(Type ^ serviceType, System::Object ^ serviceKey);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider.GetKeyedService(System.Type,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="serviceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of the service to get.</param>
        <param name="serviceKey">The key of the service to get.</param>
        <summary>
            Gets the service object of the specified type with the specified key.
            </summary>
        <returns>The keyed service.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredKeyedService">
      <MemberSignature Language="C#" Value="public object GetRequiredKeyedService (Type serviceType, object? serviceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRequiredKeyedService(class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProvider.GetRequiredKeyedService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequiredKeyedService (serviceType As Type, serviceKey As Object) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetRequiredKeyedService : Type * obj -&gt; obj&#xA;override this.GetRequiredKeyedService : Type * obj -&gt; obj" Usage="serviceProvider.GetRequiredKeyedService (serviceType, serviceKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRequiredKeyedService(Type ^ serviceType, System::Object ^ serviceKey);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider.GetRequiredKeyedService(System.Type,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceKey" Type="System.Object">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">The type of the service to get.</param>
        <param name="serviceKey">The key of the service to get.</param>
        <summary>
            Gets the service object of the specified type.
            </summary>
        <returns>The keyed service.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The service wasn't found.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object? GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="serviceProvider.GetService serviceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of the service to get.</param>
        <summary>
            Gets the service object of the specified type.
            </summary>
        <returns>The service that was produced.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
