<Type Name="EntityFrameworkCoreHealthChecksBuilderExtensions" FullName="Microsoft.Extensions.DependencyInjection.EntityFrameworkCoreHealthChecksBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class EntityFrameworkCoreHealthChecksBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EntityFrameworkCoreHealthChecksBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.EntityFrameworkCoreHealthChecksBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module EntityFrameworkCoreHealthChecksBuilderExtensions" />
  <TypeSignature Language="F#" Value="type EntityFrameworkCoreHealthChecksBuilderExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityFrameworkCoreHealthChecksBuilderExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.4.0</AssemblyVersion>
    <AssemblyVersion>8.0.5.0</AssemblyVersion>
    <AssemblyVersion>8.0.6.0</AssemblyVersion>
    <AssemblyVersion>8.0.7.0</AssemblyVersion>
    <AssemblyVersion>8.0.8.0</AssemblyVersion>
    <AssemblyVersion>8.0.10.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder" /> extension methods for Entity Framework Core.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddDbContextCheck&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddDbContextCheck&lt;TContext&gt; (this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string? name = default, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus? failureStatus = default, System.Collections.Generic.IEnumerable&lt;string&gt;? tags = default, Func&lt;TContext,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;bool&gt;&gt;? customTestQuery = default) where TContext : Microsoft.EntityFrameworkCore.DbContext;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder AddDbContextCheck&lt;(class Microsoft.EntityFrameworkCore.DbContext) TContext&gt;(class Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string name, valuetype System.Nullable`1&lt;valuetype Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus&gt; failureStatus, class System.Collections.Generic.IEnumerable`1&lt;string&gt; tags, class System.Func`3&lt;!!TContext, valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; customTestQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.EntityFrameworkCoreHealthChecksBuilderExtensions.AddDbContextCheck``1(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder,System.String,System.Nullable{Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus},System.Collections.Generic.IEnumerable{System.String},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDbContextCheck(Of TContext As DbContext) (builder As IHealthChecksBuilder, Optional name As String = Nothing, Optional failureStatus As Nullable(Of HealthStatus) = Nothing, Optional tags As IEnumerable(Of String) = Nothing, Optional customTestQuery As Func(Of TContext, CancellationToken, Task(Of Boolean)) = Nothing) As IHealthChecksBuilder" />
      <MemberSignature Language="F#" Value="static member AddDbContextCheck : Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder * string * Nullable&lt;Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus&gt; * seq&lt;string&gt; * Func&lt;'Context, System.Threading.CancellationToken, System.Threading.Tasks.Task&lt;bool&gt; (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder (requires 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext)" Usage="Microsoft.Extensions.DependencyInjection.EntityFrameworkCoreHealthChecksBuilderExtensions.AddDbContextCheck (builder, name, failureStatus, tags, customTestQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="failureStatus" Type="System.Nullable&lt;Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus&gt;" />
        <Parameter Name="tags" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="customTestQuery" Type="System.Func&lt;TContext,System.Threading.CancellationToken,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TContext">The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder" />.</param>
        <param name="name">
            The health check name. Optional. If <c>null</c> the type name of <typeparamref name="TContext" /> will be used for the name.
            </param>
        <param name="failureStatus">
            The <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus" /> that should be reported when the health check fails. Optional. If <c>null</c> then
            the default status of <see cref="F:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy" /> will be reported.
            </param>
        <param name="tags">A list of tags that can be used to filter sets of health checks. Optional.</param>
        <param name="customTestQuery">
            A custom test query that will be executed when the health check executes to test the health of the database
            connection and configurations.
            </param>
        <summary>
            Adds a health check for the specified <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type.
            </summary>
        <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder" />.</returns>
        <remarks>
          <para>
            The health check implementation added by this method will use the dependency injection container
            to create an instance of <typeparamref name="TContext" />.
            </para>
          <para>
            By default the health check implementation will use the <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CanConnectAsync(System.Threading.CancellationToken)" /> method
            to test connectivity to the database. This method requires that the database provider has correctly implemented the
            <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator" /> interface. If the database provider has not implemented this interface
            then the health check will report a failure.
            </para>
          <para>
            Providing a <paramref name="customTestQuery" /> will replace the use of <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.CanConnectAsync(System.Threading.CancellationToken)" />
            to test database connectivity. An implementation of a test query should handle exceptions that can arise due to connectivity failure,
            and should return a pass/fail result. The test query should be be designed to complete in a short and predicatable amount of time.
            </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
