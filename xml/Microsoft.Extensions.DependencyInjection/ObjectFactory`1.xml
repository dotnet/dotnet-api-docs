<Type Name="ObjectFactory&lt;T&gt;" FullName="Microsoft.Extensions.DependencyInjection.ObjectFactory&lt;T&gt;">
  <TypeSignature Language="C#" Value="public delegate T ObjectFactory&lt;T&gt;(IServiceProvider serviceProvider, object?[]? arguments);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ObjectFactory`1&lt;T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.ObjectFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function ObjectFactory(Of T)(serviceProvider As IServiceProvider, arguments As Object()) As T " />
  <TypeSignature Language="F#" Value="type ObjectFactory&lt;'T&gt; = delegate of IServiceProvider * obj[] -&gt; 'T" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate T ObjectFactory(IServiceProvider ^ serviceProvider, cli::array &lt;System::Object ^&gt; ^ arguments);" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.DependencyInjection.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
    <Parameter Name="arguments" Type="System.Object[]" />
  </Parameters>
  <ReturnValue>
    <ReturnType>T</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <param name="serviceProvider">To be added.</param>
    <param name="arguments">To be added.</param>
    <summary>To be added.</summary>
    <returns>To be added.</returns>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
