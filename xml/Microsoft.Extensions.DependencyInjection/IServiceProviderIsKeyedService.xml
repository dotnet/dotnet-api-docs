<Type Name="IServiceProviderIsKeyedService" FullName="Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService">
  <TypeSignature Language="C#" Value="public interface IServiceProviderIsKeyedService : Microsoft.Extensions.DependencyInjection.IServiceProviderIsService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IServiceProviderIsKeyedService implements class Microsoft.Extensions.DependencyInjection.IServiceProviderIsService" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceProviderIsKeyedService&#xA;Implements IServiceProviderIsService" />
  <TypeSignature Language="F#" Value="type IServiceProviderIsKeyedService = interface&#xA;    interface IServiceProviderIsService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceProviderIsKeyedService : Microsoft::Extensions::DependencyInjection::IServiceProviderIsService" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.DependencyInjection.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.DependencyInjection.IServiceProviderIsService</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Optional service used to determine if the specified type with the specified service key is available
            from the <see cref="T:System.IServiceProvider" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="IsKeyedService">
      <MemberSignature Language="C#" Value="public bool IsKeyedService (Type serviceType, object? serviceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsKeyedService(class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService.IsKeyedService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsKeyedService (serviceType As Type, serviceKey As Object) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsKeyedService : Type * obj -&gt; bool" Usage="iServiceProviderIsKeyedService.IsKeyedService (serviceType, serviceKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsKeyedService(Type ^ serviceType, System::Object ^ serviceKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0;net-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceKey" Type="System.Object">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0;net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">An object that specifies the type of service object to test.</param>
        <param name="serviceKey">The <see cref="P:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceKey" /> of the service.</param>
        <summary>
            Determines if the specified service type with the specified service key is available from the
            <see cref="T:System.IServiceProvider" />.
            </summary>
        <returns>true if the specified service is a available, false if it is not.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
