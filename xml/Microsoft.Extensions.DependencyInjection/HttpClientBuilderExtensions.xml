<Type Name="HttpClientBuilderExtensions" FullName="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class HttpClientBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit HttpClientBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module HttpClientBuilderExtensions" />
  <TypeSignature Language="F#" Value="type HttpClientBuilderExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClientBuilderExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Extension methods for configuring an <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddAsKeyed">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddAsKeyed (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddAsKeyed(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, valuetype Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddAsKeyed(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddAsKeyed (builder As IHttpClientBuilder, Optional lifetime As ServiceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddAsKeyed : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Microsoft.Extensions.DependencyInjection.ServiceLifetime -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddAsKeyed (builder, lifetime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="lifetime" Type="Microsoft.Extensions.DependencyInjection.ServiceLifetime" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="lifetime">Lifetime of the keyed services registered.</param>
        <summary>
            Registers a named <see cref="T:System.Net.Http.HttpClient" /> and the related handler pipeline <see cref="T:System.Net.Http.HttpMessageHandler" /> as keyed
            services with the client's name as the key, and a lifetime provided in the <paramref name="lifetime" /> parameter.
            By default, the lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            A named client resolved from DI as a keyed service will behave similarly to a client you would create with <see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)" />. This
            means that the client will continue reusing the same <see cref="T:System.Net.Http.HttpMessageHandler" /> instance for the duration of <see cref="P:Microsoft.Extensions.Http.HttpClientFactoryOptions.HandlerLifetime" />,
            and it will continue to use the separate, handler's DI scope instead of the scope it was resolved from.
            </para>
          <para>
            WARNING: Registering the client as a keyed <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> service will lead to the <see cref="T:System.Net.Http.HttpClient" /> and <see cref="T:System.Net.Http.HttpMessageHandler" />
            instances being captured by DI as both implement <see cref="T:System.IDisposable" />. This might lead to memory leaks if the client is resolved multiple times within a
            <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service.
            </para>
          <para>
            WARNING: In case of (1) a keyed <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /><see cref="T:System.Net.Http.HttpClient" /> registration, or (2) a keyed <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /><see cref="T:System.Net.Http.HttpClient" /> injected into a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> service, or (3) long-running application scopes,
            the <see cref="T:System.Net.Http.HttpClient" /> instances will get captured by a singleton or a long-running scope, so they will NOT be able to participate in the handler rotation,
            which can result in the loss of DNS changes. (This is a similar issue to the one with Typed Clients, that are registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient" /> services.)
            </para>
          <para>
            If called twice with for a builder with the same name, the lifetime of the keyed service will be updated to the latest used <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceLifetime" /> value.
            </para>
          <para>
            If called for a typed client, only the related named client and handler will be registered as keyed. The typed client itself will continue to be registered as
            a transient service.
            </para>
          <para>
            If used in conjuction with <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.ConfigureHttpClientDefaults(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IHttpClientBuilder})" />,
            the key <see cref="P:Microsoft.Extensions.DependencyInjection.KeyedService.AnyKey" /> is used, so any named <see cref="T:System.Net.Http.HttpClient" /> instance will be resolvable as a keyed service (unless explicitly opted-out
            from the keyed registration via <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RemoveAsKeyed(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />).
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDefaultLogger">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddDefaultLogger (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddDefaultLogger(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddDefaultLogger(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDefaultLogger (builder As IHttpClientBuilder) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddDefaultLogger : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddDefaultLogger builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddDefaultLogger(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <summary>
            Adds back the default logging for a named <see cref="T:System.Net.Http.HttpClient" />, if it was removed previously by calling <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RemoveAllLoggers(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHttpMessageHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Func&lt;IServiceProvider,System.Net.Http.DelegatingHandler&gt; configureHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Func`2&lt;class System.IServiceProvider, class System.Net.Http.DelegatingHandler&gt; configureHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.IServiceProvider,System.Net.Http.DelegatingHandler})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHttpMessageHandler (builder As IHttpClientBuilder, configureHandler As Func(Of IServiceProvider, DelegatingHandler)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddHttpMessageHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Func&lt;IServiceProvider, System.Net.Http.DelegatingHandler&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler (builder, configureHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddHttpMessageHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Func&lt;IServiceProvider ^, System::Net::Http::DelegatingHandler ^&gt; ^ configureHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configureHandler" Type="System.Func&lt;System.IServiceProvider,System.Net.Http.DelegatingHandler&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureHandler">A delegate that is used to create a <see cref="T:System.Net.Http.DelegatingHandler" />.</param>
        <summary>
            Adds a delegate that will be used to create an additional message handler for a named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            The <paramref name="configureHandler" /> delegate should return a new instance of the message handler each time it
            is invoked.
            </para>
          <para>
            The <see cref="T:System.IServiceProvider" /> argument provided to <paramref name="configureHandler" /> will be
            a reference to a scoped service provider that shares the lifetime of the handler being constructed.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHttpMessageHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Func&lt;System.Net.Http.DelegatingHandler&gt; configureHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Func`1&lt;class System.Net.Http.DelegatingHandler&gt; configureHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.DelegatingHandler})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHttpMessageHandler (builder As IHttpClientBuilder, configureHandler As Func(Of DelegatingHandler)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddHttpMessageHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Func&lt;System.Net.Http.DelegatingHandler&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler (builder, configureHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddHttpMessageHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Func&lt;System::Net::Http::DelegatingHandler ^&gt; ^ configureHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configureHandler" Type="System.Func&lt;System.Net.Http.DelegatingHandler&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureHandler">A delegate that is used to create a <see cref="T:System.Net.Http.DelegatingHandler" />.</param>
        <summary>
            Adds a delegate that will be used to create an additional message handler for a named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
            The <paramref name="configureHandler" /> delegate should return a new instance of the message handler each time it
            is invoked.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHttpMessageHandler&lt;THandler&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler&lt;THandler&gt; (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) where THandler : System.Net.Http.DelegatingHandler;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpMessageHandler&lt;(class System.Net.Http.DelegatingHandler) THandler&gt;(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHttpMessageHandler(Of THandler As DelegatingHandler) (builder As IHttpClientBuilder) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddHttpMessageHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder (requires 'Handler :&gt; System.Net.Http.DelegatingHandler)" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename THandler&gt;&#xA; where THandler : System::Net::Http::DelegatingHandler[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddHttpMessageHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="THandler">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>System.Net.Http.DelegatingHandler</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="THandler">
            The type of the <see cref="T:System.Net.Http.DelegatingHandler" />. The handler type must be registered as a transient service.
            </typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <summary>
            Adds an additional message handler from the dependency injection container for a named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            The <typeparamref name="THandler" /> will be resolved from a scoped service provider that shares
            the lifetime of the handler being constructed.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogger">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddLogger (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Func&lt;IServiceProvider,Microsoft.Extensions.Http.Logging.IHttpClientLogger&gt; httpClientLoggerFactory, bool wrapHandlersPipeline = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddLogger(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Func`2&lt;class System.IServiceProvider, class Microsoft.Extensions.Http.Logging.IHttpClientLogger&gt; httpClientLoggerFactory, bool wrapHandlersPipeline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddLogger(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.IServiceProvider,Microsoft.Extensions.Http.Logging.IHttpClientLogger},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddLogger (builder As IHttpClientBuilder, httpClientLoggerFactory As Func(Of IServiceProvider, IHttpClientLogger), Optional wrapHandlersPipeline As Boolean = false) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddLogger : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Func&lt;IServiceProvider, Microsoft.Extensions.Http.Logging.IHttpClientLogger&gt; * bool -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddLogger (builder, httpClientLoggerFactory, wrapHandlersPipeline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="httpClientLoggerFactory" Type="System.Func&lt;System.IServiceProvider,Microsoft.Extensions.Http.Logging.IHttpClientLogger&gt;" />
        <Parameter Name="wrapHandlersPipeline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="httpClientLoggerFactory">A delegate that is used to create a custom logger. The logger should implement
            <see cref="T:Microsoft.Extensions.Http.Logging.IHttpClientLogger" /> or <see cref="T:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger" />.</param>
        <param name="wrapHandlersPipeline">Whether the logging handler with the custom logger would be added to the top
            or to the bottom of the additional handlers chains.</param>
        <summary>
            Adds a delegate that will be used to create an additional logger for a named <see cref="T:System.Net.Http.HttpClient" />. The custom logger would be invoked
            from a dedicated logging DelegatingHandler on every request of the corresponding named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            If the <paramref name="wrapHandlersPipeline" /> is `true`, <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientLogger.LogRequestStart(System.Net.Http.HttpRequestMessage)" /> and
            <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStartAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> would be executed before all
            other additional handlers in the chain. <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientLogger.LogRequestStop(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.TimeSpan)" /> and
            <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStopAsync(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.TimeSpan,System.Threading.CancellationToken)" /> would be executed after all
            other additional handlers, essentially wrapping the whole pipeline.
            </para>
          <para>
            If the <paramref name="wrapHandlersPipeline" /> is `false`, <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientLogger.LogRequestStart(System.Net.Http.HttpRequestMessage)" /> and
            <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStartAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> would be executed after all
            other additional handlers in the chain, right before the primary handler. <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientLogger.LogRequestStop(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.TimeSpan)" /> and
            <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStopAsync(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.TimeSpan,System.Threading.CancellationToken)" /> would be executed before all
            other additional handlers, right after the primary handler.
            </para>
          <para>
            The <see cref="T:System.IServiceProvider" /> argument provided to <paramref name="httpClientLoggerFactory" /> will be
            a reference to a scoped service provider that shares the lifetime of the handler chain being constructed.
            </para>
          <para>
            If <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddLogger(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.IServiceProvider,Microsoft.Extensions.Http.Logging.IHttpClientLogger},System.Boolean)" /> is called multiple times, multiple loggers would be added. If <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RemoveAllLoggers(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" /> was
            not called before calling <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddLogger(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.IServiceProvider,Microsoft.Extensions.Http.Logging.IHttpClientLogger},System.Boolean)" />, then new logger would be added in addition to the default ones.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogger&lt;TLogger&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddLogger&lt;TLogger&gt; (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, bool wrapHandlersPipeline = false) where TLogger : Microsoft.Extensions.Http.Logging.IHttpClientLogger;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddLogger&lt;(class Microsoft.Extensions.Http.Logging.IHttpClientLogger) TLogger&gt;(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, bool wrapHandlersPipeline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddLogger``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddLogger(Of TLogger As IHttpClientLogger) (builder As IHttpClientBuilder, Optional wrapHandlersPipeline As Boolean = false) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddLogger : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * bool -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder (requires 'Logger :&gt; Microsoft.Extensions.Http.Logging.IHttpClientLogger)" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddLogger (builder, wrapHandlersPipeline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLogger">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <InterfaceName>Microsoft.Extensions.Http.Logging.IHttpClientLogger</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="wrapHandlersPipeline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TLogger">
            The service type of the custom logger as it was registered in DI. The logger should implement <see cref="T:Microsoft.Extensions.Http.Logging.IHttpClientLogger" />
            or <see cref="T:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger" />.
            </typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="wrapHandlersPipeline">Whether the logging handler with the custom logger would be added to the top
            or to the bottom of the additional handlers chains.</param>
        <summary>
            Adds a delegate that will be used to create an additional logger for a named <see cref="T:System.Net.Http.HttpClient" />. The custom logger would be invoked
            from a dedicated logging DelegatingHandler on every request of the corresponding named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            If the <paramref name="wrapHandlersPipeline" /> is `true`, <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientLogger.LogRequestStart(System.Net.Http.HttpRequestMessage)" /> and
            <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStartAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> would be executed before all
            other additional handlers in the chain. <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientLogger.LogRequestStop(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.TimeSpan)" /> and
            <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStopAsync(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.TimeSpan,System.Threading.CancellationToken)" /> would be executed after all
            other additional handlers, essentially wrapping the whole pipeline.
            </para>
          <para>
            If the <paramref name="wrapHandlersPipeline" /> is `false`, <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientLogger.LogRequestStart(System.Net.Http.HttpRequestMessage)" /> and
            <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStartAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> would be executed after all
            other additional handlers in the chain, right before the primary handler. <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientLogger.LogRequestStop(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.TimeSpan)" /> and
            <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStopAsync(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.TimeSpan,System.Threading.CancellationToken)" /> would be executed before all
            other additional handlers, right after the primary handler.
            </para>
          <para>
            The <typeparamref name="TLogger" /> will be resolved from a scoped service provider that shares
            the lifetime of the handler chain being constructed.
            </para>
          <para>
            If <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddLogger``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Boolean)" /> is called multiple times, multiple loggers would be added. If <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RemoveAllLoggers(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" /> was
            not called before calling <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddLogger``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Boolean)" />, then new logger would be added in addition to the default ones.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTypedClient&lt;TClient&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient&lt;TClient&gt; (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) where TClient : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient&lt;class TClient&gt;(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddTypedClient(Of TClient As Class) (builder As IHttpClientBuilder) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddTypedClient : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder (requires 'Client : null)" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TClient&gt;&#xA; where TClient : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddTypedClient(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TClient">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TClient">
            The type of the typed client. The type specified will be registered in the service collection as
            a transient service. See <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> for more details about authoring typed clients.
            </typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <summary>
            Configures a binding between the <typeparamref name="TClient" /> type and the named <see cref="T:System.Net.Http.HttpClient" />
            associated with the <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <typeparamref name="TClient" /> instances constructed with the appropriate <see cref="T:System.Net.Http.HttpClient" />
            can be retrieved from <see cref="M:System.IServiceProvider.GetService(System.Type)" /> (and related methods) by providing
            <typeparamref name="TClient" /> as the service type.
            </para>
          <para>
            Calling <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" /> will register a typed
            client binding that creates <typeparamref name="TClient" /> using the <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />.
            </para>
          <para>
            The typed client's service dependencies will be resolved from the same service provider
            that is used to resolve the typed client. It is not possible to access services from the
            scope bound to the message handler, which is managed independently.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTypedClient&lt;TClient&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient&lt;TClient&gt; (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Func&lt;System.Net.Http.HttpClient,IServiceProvider,TClient&gt; factory) where TClient : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient&lt;class TClient&gt;(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Func`3&lt;class System.Net.Http.HttpClient, class System.IServiceProvider, !!TClient&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpClient,System.IServiceProvider,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddTypedClient(Of TClient As Class) (builder As IHttpClientBuilder, factory As Func(Of HttpClient, IServiceProvider, TClient)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddTypedClient : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Func&lt;System.Net.Http.HttpClient, IServiceProvider, 'Client (requires 'Client : null)&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder (requires 'Client : null)" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient (builder, factory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TClient&gt;&#xA; where TClient : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddTypedClient(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Func&lt;System::Net::Http::HttpClient ^, IServiceProvider ^, TClient&gt; ^ factory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TClient">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="factory" Type="System.Func&lt;System.Net.Http.HttpClient,System.IServiceProvider,TClient&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TClient">
            The type of the typed client. They type specified will be registered in the service collection as
            a transient service.
            </typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="factory">A factory function that will be used to construct the typed client.</param>
        <summary>
            Configures a binding between the <typeparamref name="TClient" /> type and the named <see cref="T:System.Net.Http.HttpClient" />
            associated with the <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <typeparamref name="TClient" /> instances constructed with the appropriate <see cref="T:System.Net.Http.HttpClient" />
            can be retrieved from <see cref="M:System.IServiceProvider.GetService(System.Type)" /> (and related methods) by providing
            <typeparamref name="TClient" /> as the service type.
            </para>
          <para>
            Calling <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpClient,System.IServiceProvider,``0})" />
            will register a typed client binding that creates <typeparamref name="TClient" /> using the provided factory function.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTypedClient&lt;TClient&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient&lt;TClient&gt; (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Func&lt;System.Net.Http.HttpClient,TClient&gt; factory) where TClient : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient&lt;class TClient&gt;(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Func`2&lt;class System.Net.Http.HttpClient, !!TClient&gt; factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpClient,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddTypedClient(Of TClient As Class) (builder As IHttpClientBuilder, factory As Func(Of HttpClient, TClient)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddTypedClient : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Func&lt;System.Net.Http.HttpClient, 'Client (requires 'Client : null)&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder (requires 'Client : null)" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient (builder, factory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TClient&gt;&#xA; where TClient : class[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddTypedClient(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Func&lt;System::Net::Http::HttpClient ^, TClient&gt; ^ factory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TClient">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="factory" Type="System.Func&lt;System.Net.Http.HttpClient,TClient&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TClient">
            The type of the typed client. They type specified will be registered in the service collection as
            a transient service.
            </typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="factory">A factory function that will be used to construct the typed client.</param>
        <summary>
            Configures a binding between the <typeparamref name="TClient" /> type and the named <see cref="T:System.Net.Http.HttpClient" />
            associated with the <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <typeparamref name="TClient" /> instances constructed with the appropriate <see cref="T:System.Net.Http.HttpClient" />
            can be retrieved from <see cref="M:System.IServiceProvider.GetService(System.Type)" /> (and related methods) by providing
            <typeparamref name="TClient" /> as the service type.
            </para>
          <para>
            Calling <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpClient,``0})" />
            will register a typed client binding that creates <typeparamref name="TClient" /> using the provided factory function.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTypedClient&lt;TClient,TImplementation&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient&lt;TClient,TImplementation&gt; (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) where TClient : class where TImplementation : class, TClient;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddTypedClient&lt;class TClient, class (!!TClient) TImplementation&gt;(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``2(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddTypedClient(Of TClient As Class, TImplementation As Class) (builder As IHttpClientBuilder) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member AddTypedClient : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder (requires 'Client : null)" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TClient, typename TImplementation&gt;&#xA; where TClient : class where TImplementation : class, TClient[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ AddTypedClient(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TClient">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TImplementation">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TClient</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TClient">
            The declared type of the typed client. They type specified will be registered in the service collection as
            a transient service. See <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" /> for more details about authoring typed clients.
            </typeparam>
        <typeparam name="TImplementation">
            The implementation type of the typed client. The type specified by will be instantiated by the
            <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />.
            </typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <summary>
            Configures a binding between the <typeparamref name="TClient" /> type and the named <see cref="T:System.Net.Http.HttpClient" />
            associated with the <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />. The created instances will be of type
            <typeparamref name="TImplementation" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <typeparamref name="TClient" /> instances constructed with the appropriate <see cref="T:System.Net.Http.HttpClient" />
            can be retrieved from <see cref="M:System.IServiceProvider.GetService(System.Type)" /> (and related methods) by providing
            <typeparamref name="TClient" /> as the service type.
            </para>
          <para>
            Calling <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``2(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />
            will register a typed client binding that creates <typeparamref name="TImplementation" /> using the
            <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />.
            </para>
          <para>
            The typed client's service dependencies will be resolved from the same service provider
            that is used to resolve the typed client. It is not possible to access services from the
            scope bound to the message handler, which is managed independently.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureAdditionalHttpMessageHandlers">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureAdditionalHttpMessageHandlers (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Action&lt;System.Collections.Generic.IList&lt;System.Net.Http.DelegatingHandler&gt;,IServiceProvider&gt; configureAdditionalHandlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureAdditionalHttpMessageHandlers(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Action`2&lt;class System.Collections.Generic.IList`1&lt;class System.Net.Http.DelegatingHandler&gt;, class System.IServiceProvider&gt; configureAdditionalHandlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureAdditionalHttpMessageHandlers(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{System.Collections.Generic.IList{System.Net.Http.DelegatingHandler},System.IServiceProvider})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureAdditionalHttpMessageHandlers (builder As IHttpClientBuilder, configureAdditionalHandlers As Action(Of IList(Of DelegatingHandler), IServiceProvider)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member ConfigureAdditionalHttpMessageHandlers : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Action&lt;System.Collections.Generic.IList&lt;System.Net.Http.DelegatingHandler&gt;, IServiceProvider&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureAdditionalHttpMessageHandlers (builder, configureAdditionalHandlers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ ConfigureAdditionalHttpMessageHandlers(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Action&lt;System::Collections::Generic::IList&lt;System::Net::Http::DelegatingHandler ^&gt; ^, IServiceProvider ^&gt; ^ configureAdditionalHandlers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configureAdditionalHandlers" Type="System.Action&lt;System.Collections.Generic.IList&lt;System.Net.Http.DelegatingHandler&gt;,System.IServiceProvider&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureAdditionalHandlers">A delegate that is used to configure a collection of <see cref="T:System.Net.Http.DelegatingHandler" />s.</param>
        <summary>
            Adds a delegate that will be used to configure additional message handlers using <see cref="T:Microsoft.Extensions.Http.HttpMessageHandlerBuilder" />
            for a named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureHttpClient">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpClient (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Action&lt;IServiceProvider,System.Net.Http.HttpClient&gt; configureClient);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpClient(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Action`2&lt;class System.IServiceProvider, class System.Net.Http.HttpClient&gt; configureClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{System.IServiceProvider,System.Net.Http.HttpClient})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureHttpClient (builder As IHttpClientBuilder, configureClient As Action(Of IServiceProvider, HttpClient)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member ConfigureHttpClient : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Action&lt;IServiceProvider, System.Net.Http.HttpClient&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient (builder, configureClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ ConfigureHttpClient(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Action&lt;IServiceProvider ^, System::Net::Http::HttpClient ^&gt; ^ configureClient);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configureClient" Type="System.Action&lt;System.IServiceProvider,System.Net.Http.HttpClient&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureClient">A delegate that is used to configure an <see cref="T:System.Net.Http.HttpClient" />.</param>
        <summary>
            Adds a delegate that will be used to configure a named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
            The <see cref="T:System.IServiceProvider" /> provided to <paramref name="configureClient" /> will be the
            same application's root service provider instance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureHttpClient">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpClient (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Action&lt;System.Net.Http.HttpClient&gt; configureClient);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpClient(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Action`1&lt;class System.Net.Http.HttpClient&gt; configureClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{System.Net.Http.HttpClient})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureHttpClient (builder As IHttpClientBuilder, configureClient As Action(Of HttpClient)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member ConfigureHttpClient : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Action&lt;System.Net.Http.HttpClient&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient (builder, configureClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ ConfigureHttpClient(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Action&lt;System::Net::Http::HttpClient ^&gt; ^ configureClient);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configureClient" Type="System.Action&lt;System.Net.Http.HttpClient&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureClient">A delegate that is used to configure an <see cref="T:System.Net.Http.HttpClient" />.</param>
        <summary>
            Adds a delegate that will be used to configure a named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureHttpMessageHandlerBuilder">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpMessageHandlerBuilder (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Action&lt;Microsoft.Extensions.Http.HttpMessageHandlerBuilder&gt; configureBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigureHttpMessageHandlerBuilder(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Http.HttpMessageHandlerBuilder&gt; configureBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpMessageHandlerBuilder(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{Microsoft.Extensions.Http.HttpMessageHandlerBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureHttpMessageHandlerBuilder (builder As IHttpClientBuilder, configureBuilder As Action(Of HttpMessageHandlerBuilder)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member ConfigureHttpMessageHandlerBuilder : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Action&lt;Microsoft.Extensions.Http.HttpMessageHandlerBuilder&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpMessageHandlerBuilder (builder, configureBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ ConfigureHttpMessageHandlerBuilder(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Action&lt;Microsoft::Extensions::Http::HttpMessageHandlerBuilder ^&gt; ^ configureBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This method has been deprecated. Use ConfigurePrimaryHttpMessageHandler or ConfigureAdditionalHttpMessageHandlers instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method has been deprecated. Use ConfigurePrimaryHttpMessageHandler or ConfigureAdditionalHttpMessageHandlers instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configureBuilder" Type="System.Action&lt;Microsoft.Extensions.Http.HttpMessageHandlerBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureBuilder">A delegate that is used to configure an <see cref="T:Microsoft.Extensions.Http.HttpMessageHandlerBuilder" />.</param>
        <summary>
            Adds a delegate that will be used to configure message handlers using <see cref="T:Microsoft.Extensions.Http.HttpMessageHandlerBuilder" />
            for a named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigurePrimaryHttpMessageHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Action&lt;System.Net.Http.HttpMessageHandler,IServiceProvider&gt; configureHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Action`2&lt;class System.Net.Http.HttpMessageHandler, class System.IServiceProvider&gt; configureHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{System.Net.Http.HttpMessageHandler,System.IServiceProvider})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigurePrimaryHttpMessageHandler (builder As IHttpClientBuilder, configureHandler As Action(Of HttpMessageHandler, IServiceProvider)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member ConfigurePrimaryHttpMessageHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Action&lt;System.Net.Http.HttpMessageHandler, IServiceProvider&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler (builder, configureHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ ConfigurePrimaryHttpMessageHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Action&lt;System::Net::Http::HttpMessageHandler ^, IServiceProvider ^&gt; ^ configureHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configureHandler" Type="System.Action&lt;System.Net.Http.HttpMessageHandler,System.IServiceProvider&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureHandler">A delegate that is used to configure a previously set or default primary <see cref="T:System.Net.Http.HttpMessageHandler" />.</param>
        <summary>
            Adds a delegate that will be used to configure the primary <see cref="T:System.Net.Http.HttpMessageHandler" /> for a
            named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            The <see cref="T:System.IServiceProvider" /> argument provided to <paramref name="configureHandler" /> will be
            a reference to a scoped service provider that shares the lifetime of the handler being constructed.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigurePrimaryHttpMessageHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Func&lt;IServiceProvider,System.Net.Http.HttpMessageHandler&gt; configureHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Func`2&lt;class System.IServiceProvider, class System.Net.Http.HttpMessageHandler&gt; configureHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.IServiceProvider,System.Net.Http.HttpMessageHandler})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigurePrimaryHttpMessageHandler (builder As IHttpClientBuilder, configureHandler As Func(Of IServiceProvider, HttpMessageHandler)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member ConfigurePrimaryHttpMessageHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Func&lt;IServiceProvider, System.Net.Http.HttpMessageHandler&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler (builder, configureHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ ConfigurePrimaryHttpMessageHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Func&lt;IServiceProvider ^, System::Net::Http::HttpMessageHandler ^&gt; ^ configureHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configureHandler" Type="System.Func&lt;System.IServiceProvider,System.Net.Http.HttpMessageHandler&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureHandler">A delegate that is used to create an <see cref="T:System.Net.Http.HttpMessageHandler" />.</param>
        <summary>
            Adds a delegate that will be used to configure the primary <see cref="T:System.Net.Http.HttpMessageHandler" /> for a
            named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            The <paramref name="configureHandler" /> delegate should return a new instance of the message handler each time it
            is invoked.
            </para>
          <para>
            The <see cref="T:System.IServiceProvider" /> argument provided to <paramref name="configureHandler" /> will be
            a reference to a scoped service provider that shares the lifetime of the handler being constructed.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigurePrimaryHttpMessageHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Func&lt;System.Net.Http.HttpMessageHandler&gt; configureHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Func`1&lt;class System.Net.Http.HttpMessageHandler&gt; configureHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpMessageHandler})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigurePrimaryHttpMessageHandler (builder As IHttpClientBuilder, configureHandler As Func(Of HttpMessageHandler)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member ConfigurePrimaryHttpMessageHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Func&lt;System.Net.Http.HttpMessageHandler&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler (builder, configureHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ ConfigurePrimaryHttpMessageHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Func&lt;System::Net::Http::HttpMessageHandler ^&gt; ^ configureHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="configureHandler" Type="System.Func&lt;System.Net.Http.HttpMessageHandler&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureHandler">A delegate that is used to create an <see cref="T:System.Net.Http.HttpMessageHandler" />.</param>
        <summary>
            Adds a delegate that will be used to configure the primary <see cref="T:System.Net.Http.HttpMessageHandler" /> for a
            named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
            The <paramref name="configureHandler" /> delegate should return a new instance of the message handler each time it
            is invoked.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigurePrimaryHttpMessageHandler&lt;THandler&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler&lt;THandler&gt; (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) where THandler : System.Net.Http.HttpMessageHandler;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder ConfigurePrimaryHttpMessageHandler&lt;(class System.Net.Http.HttpMessageHandler) THandler&gt;(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigurePrimaryHttpMessageHandler(Of THandler As HttpMessageHandler) (builder As IHttpClientBuilder) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member ConfigurePrimaryHttpMessageHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder (requires 'Handler :&gt; System.Net.Http.HttpMessageHandler)" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename THandler&gt;&#xA; where THandler : System::Net::Http::HttpMessageHandler[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ ConfigurePrimaryHttpMessageHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="THandler">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>System.Net.Http.HttpMessageHandler</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="THandler">
            The type of the <see cref="T:System.Net.Http.DelegatingHandler" />. The handler type must be registered as a transient service.
            </typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <summary>
            Configures the primary <see cref="T:System.Net.Http.HttpMessageHandler" /> from the dependency injection container
            for a named <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            The <typeparamref name="THandler" /> will be resolved from a scoped service provider that shares
            the lifetime of the handler being constructed.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedactLoggedHeaders">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RedactLoggedHeaders (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, System.Collections.Generic.IEnumerable&lt;string&gt; redactedLoggedHeaderNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RedactLoggedHeaders(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Collections.Generic.IEnumerable`1&lt;string&gt; redactedLoggedHeaderNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RedactLoggedHeaders(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RedactLoggedHeaders (builder As IHttpClientBuilder, redactedLoggedHeaderNames As IEnumerable(Of String)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member RedactLoggedHeaders : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * seq&lt;string&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RedactLoggedHeaders (builder, redactedLoggedHeaderNames)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ RedactLoggedHeaders(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ redactedLoggedHeaderNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="redactedLoggedHeaderNames" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="redactedLoggedHeaderNames">The collection of HTTP headers names for which values should be redacted before logging.</param>
        <summary>
            Sets the collection of HTTP headers names for which values should be redacted before logging.
            </summary>
        <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedactLoggedHeaders">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RedactLoggedHeaders (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Func&lt;string,bool&gt; shouldRedactHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RedactLoggedHeaders(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Func`2&lt;string, bool&gt; shouldRedactHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RedactLoggedHeaders(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.String,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RedactLoggedHeaders (builder As IHttpClientBuilder, shouldRedactHeaderValue As Func(Of String, Boolean)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member RedactLoggedHeaders : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Func&lt;string, bool&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RedactLoggedHeaders (builder, shouldRedactHeaderValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ RedactLoggedHeaders(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Func&lt;System::String ^, bool&gt; ^ shouldRedactHeaderValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="shouldRedactHeaderValue" Type="System.Func&lt;System.String,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="shouldRedactHeaderValue">The <see cref="T:System.Func`2" /> which determines whether to redact the HTTP header value given its corresponding header name before logging.</param>
        <summary>
            Sets the <see cref="T:System.Func`2" /> which determines whether to redact the HTTP header value given its corresponding header name before logging.
            </summary>
        <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</returns>
        <remarks>The provided <paramref name="shouldRedactHeaderValue" /> predicate will be evaluated for each header name when logging. If the predicate returns <see langword="true" /> then the header value will be replaced with a marker value <c>*</c> in logs; otherwise the header value will be logged.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllLoggers">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RemoveAllLoggers (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RemoveAllLoggers(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RemoveAllLoggers(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveAllLoggers (builder As IHttpClientBuilder) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member RemoveAllLoggers : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RemoveAllLoggers builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ RemoveAllLoggers(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <summary>
            Removes all previously added loggers for a named <see cref="T:System.Net.Http.HttpClient" />, including default ones.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsKeyed">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RemoveAsKeyed (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder RemoveAsKeyed(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RemoveAsKeyed(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveAsKeyed (builder As IHttpClientBuilder) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member RemoveAsKeyed : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.RemoveAsKeyed builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ RemoveAsKeyed(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <summary>
            Removes the keyed registrations for the named <see cref="T:System.Net.Http.HttpClient" /> and <see cref="T:System.Net.Http.HttpMessageHandler" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            If used in conjuction with <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.ConfigureHttpClientDefaults(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IHttpClientBuilder})" />,
            it will only affect the previous "global" <see cref="P:Microsoft.Extensions.DependencyInjection.KeyedService.AnyKey" /> registration, and won't affect the clients registered for a specific name
            with <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddAsKeyed(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,Microsoft.Extensions.DependencyInjection.ServiceLifetime)" />.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandlerLifetime">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder SetHandlerLifetime (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, TimeSpan handlerLifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder SetHandlerLifetime(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, valuetype System.TimeSpan handlerLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.SetHandlerLifetime(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SetHandlerLifetime (builder As IHttpClientBuilder, handlerLifetime As TimeSpan) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member SetHandlerLifetime : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * TimeSpan -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.SetHandlerLifetime (builder, handlerLifetime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ SetHandlerLifetime(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, TimeSpan handlerLifetime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" />
        <Parameter Name="handlerLifetime" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="builder" />
        <param name="handlerLifetime" />
        <summary>
            Sets the length of time that a <see cref="T:System.Net.Http.HttpMessageHandler" /> instance can be reused. Each named
            client can have its own configured handler lifetime value. The default value is two minutes. Set the lifetime to
            <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> to disable handler expiry.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            The default implementation of <see cref="T:System.Net.Http.IHttpClientFactory" /> will pool the <see cref="T:System.Net.Http.HttpMessageHandler" />
            instances created by the factory to reduce resource consumption. This setting configures the amount of time
            a handler can be pooled before it is scheduled for removal from the pool and disposal.
            </para>
          <para>
            Pooling of handlers is desirable as each handler typically manages its own underlying HTTP connections; creating
            more handlers than necessary can result in connection delays. Some handlers also keep connections open indefinitely
            which can prevent the handler from reacting to DNS changes. The value of <paramref name="handlerLifetime" /> should be
            chosen with an understanding of the application's requirement to respond to changes in the network environment.
            </para>
          <para>
            Expiry of a handler will not immediately dispose the handler. An expired handler is placed in a separate pool
            which is processed at intervals to dispose handlers only when they become unreachable. Using long-lived
            <see cref="T:System.Net.Http.HttpClient" /> instances will prevent the underlying <see cref="T:System.Net.Http.HttpMessageHandler" /> from being
            disposed until all references are garbage-collected.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSocketsHttpHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder UseSocketsHttpHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Action&lt;Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder&gt; configureBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder UseSocketsHttpHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder&gt; configureBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.UseSocketsHttpHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSocketsHttpHandler (builder As IHttpClientBuilder, configureBuilder As Action(Of ISocketsHttpHandlerBuilder)) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member UseSocketsHttpHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Action&lt;Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.UseSocketsHttpHandler (builder, configureBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ UseSocketsHttpHandler(Microsoft::Extensions::DependencyInjection::IHttpClientBuilder ^ builder, Action&lt;Microsoft::Extensions::DependencyInjection::ISocketsHttpHandlerBuilder ^&gt; ^ configureBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("browser")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("browser")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" Index="0" FrameworkAlternate="net-8.0-pp;net-9.0-pp" />
        <Parameter Name="configureBuilder" Type="System.Action&lt;Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder&gt;" Index="1" FrameworkAlternate="net-8.0-pp;net-9.0-pp" />
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureBuilder">Delegate that is used to set up the configuration of the primary <see cref="T:System.Net.Http.SocketsHttpHandler" />
            on <see cref="T:Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder" /> that will later be applied on the primary handler during its creation.</param>
        <summary>
            Adds or updates <see cref="T:System.Net.Http.SocketsHttpHandler" /> as a primary handler for a named <see cref="T:System.Net.Http.HttpClient" />
            and configures it using <see cref="T:Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            If a primary handler was already set to be <see cref="T:System.Net.Http.SocketsHttpHandler" /> by previously calling, for example,
            <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpMessageHandler})" /> or
            <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.UseSocketsHttpHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder})" />, then the configuration set on
            <see cref="T:Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder" /> will be applied to the existing instance. Otherwise, a new instance of
            <see cref="T:System.Net.Http.SocketsHttpHandler" /> will be created.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSocketsHttpHandler">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder UseSocketsHttpHandler (this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, Action&lt;System.Net.Http.SocketsHttpHandler,IServiceProvider&gt;? configureHandler = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder UseSocketsHttpHandler(class Microsoft.Extensions.DependencyInjection.IHttpClientBuilder builder, class System.Action`2&lt;class System.Net.Http.SocketsHttpHandler, class System.IServiceProvider&gt; configureHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.UseSocketsHttpHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{System.Net.Http.SocketsHttpHandler,System.IServiceProvider})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSocketsHttpHandler (builder As IHttpClientBuilder, Optional configureHandler As Action(Of SocketsHttpHandler, IServiceProvider) = Nothing) As IHttpClientBuilder" />
      <MemberSignature Language="F#" Value="static member UseSocketsHttpHandler : Microsoft.Extensions.DependencyInjection.IHttpClientBuilder * Action&lt;System.Net.Http.SocketsHttpHandler, IServiceProvider&gt; -&gt; Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" Usage="Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.UseSocketsHttpHandler (builder, configureHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.Versioning.UnsupportedOSPlatform("browser")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.UnsupportedOSPlatform("browser")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IHttpClientBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" RefType="this" Index="0" FrameworkAlternate="net-8.0-pp;net-9.0-pp" />
        <Parameter Name="configureHandler" Type="System.Action&lt;System.Net.Http.SocketsHttpHandler,System.IServiceProvider&gt;" Index="1" FrameworkAlternate="net-8.0-pp;net-9.0-pp">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />.</param>
        <param name="configureHandler">Optional delegate that is used to configure the primary <see cref="T:System.Net.Http.SocketsHttpHandler" />.</param>
        <summary>
            Adds or updates <see cref="T:System.Net.Http.SocketsHttpHandler" /> as a primary handler for a named <see cref="T:System.Net.Http.HttpClient" />. If provided,
            also adds a delegate that will be used to configure the primary <see cref="T:System.Net.Http.SocketsHttpHandler" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" /> that can be used to configure the client.</returns>
        <remarks>
          <para>
            If a primary handler was already set to be <see cref="T:System.Net.Http.SocketsHttpHandler" /> by previously calling, for example,
            <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpMessageHandler})" /> or
            <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.UseSocketsHttpHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{Microsoft.Extensions.DependencyInjection.ISocketsHttpHandlerBuilder})" />, then the passed <paramref name="configureHandler" />
            delegate will be applied to the existing instance. Otherwise, a new instance of <see cref="T:System.Net.Http.SocketsHttpHandler" /> will be created.
            </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
