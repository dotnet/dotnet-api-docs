<Type Name="ServiceProviderOptions" FullName="Microsoft.Extensions.DependencyInjection.ServiceProviderOptions">
  <TypeSignature Language="C#" Value="public class ServiceProviderOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProviderOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProviderOptions" />
  <TypeSignature Language="F#" Value="type ServiceProviderOptions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProviderOptions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.DependencyInjection</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Options for configuring various behaviors of the default <see cref="T:System.IServiceProvider" /> implementation.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProviderOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProviderOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateOnBuild">
      <MemberSignature Language="C#" Value="public bool ValidateOnBuild { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateOnBuild" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions.ValidateOnBuild" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateOnBuild As Boolean" />
      <MemberSignature Language="F#" Value="member this.ValidateOnBuild : bool with get, set" Usage="Microsoft.Extensions.DependencyInjection.ServiceProviderOptions.ValidateOnBuild" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateOnBuild { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <c>true</c> to perform check verifying that all services can be created during <c>BuildServiceProvider</c> call; otherwise <c>false</c>. Defaults to <c>false</c>.
            NOTE: this check doesn't verify open generics services.
            </summary>
        <value>
          <see langword="true" /> if validation is performed to ensure all services can be created during a <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)" /> call; otherwise, <see langword="false" />. The default is the value of <see cref="M:Microsoft.Extensions.Hosting.HostingEnvironmentExtensions.IsDevelopment(Microsoft.Extensions.Hosting.IHostingEnvironment)" />.</value>
        <remarks>Open generics services aren't validated.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateScopes">
      <MemberSignature Language="C#" Value="public bool ValidateScopes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateScopes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.ServiceProviderOptions.ValidateScopes" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateScopes As Boolean" />
      <MemberSignature Language="F#" Value="member this.ValidateScopes : bool with get, set" Usage="Microsoft.Extensions.DependencyInjection.ServiceProviderOptions.ValidateScopes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateScopes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <c>true</c> to perform check verifying that scoped services never gets resolved from root provider; otherwise <c>false</c>. Defaults to <c>false</c>.
            </summary>
        <value>
          <see langword="true" /> if validation is performed to ensure that scoped services aren't resolved from the root provider; otherwise, <see langword="false" />. The default is the value of <see cref="M:Microsoft.Extensions.Hosting.HostingEnvironmentExtensions.IsDevelopment(Microsoft.Extensions.Hosting.IHostingEnvironment)" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
