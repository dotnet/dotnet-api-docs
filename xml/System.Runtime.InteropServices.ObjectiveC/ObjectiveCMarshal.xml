<Type Name="ObjectiveCMarshal" FullName="System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal">
  <TypeSignature Language="C#" Value="public static class ObjectiveCMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ObjectiveCMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectiveCMarshal" />
  <TypeSignature Language="F#" Value="type ObjectiveCMarshal = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectiveCMarshal abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("macos")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("macos")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>API to enable Objective-C marshalling.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateReferenceTrackingHandle">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.GCHandle CreateReferenceTrackingHandle (object obj, out Span&lt;IntPtr&gt; taggedMemory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.InteropServices.GCHandle CreateReferenceTrackingHandle(object obj, [out] valuetype System.Span`1&lt;native int&gt;&amp; taggedMemory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.CreateReferenceTrackingHandle(System.Object,System.Span{System.IntPtr}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReferenceTrackingHandle (obj As Object, ByRef taggedMemory As Span(Of IntPtr)) As GCHandle" />
      <MemberSignature Language="F#" Value="static member CreateReferenceTrackingHandle : obj * Span -&gt; System.Runtime.InteropServices.GCHandle" Usage="System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.CreateReferenceTrackingHandle (obj, taggedMemory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::GCHandle CreateReferenceTrackingHandle(System::Object ^ obj, [Runtime::InteropServices::Out] Span&lt;IntPtr&gt; % taggedMemory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.GCHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="taggedMemory" Type="System.Span&lt;System.IntPtr&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="obj">The object to track.</param>
        <param name="taggedMemory">A pointer to memory tagged to the object.</param>
        <summary>Request native reference tracking for the supplied object.</summary>
        <returns>Reference tracking GC handle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

The Initialize() must be called prior to calling this function.
            
The `obj` must have a type in its hierarchy marked with
<xref:System.Runtime.InteropServices.ObjectiveC.ObjectiveCTrackedTypeAttribute>.

The "Is Referenced" callback passed to Initialize()
will be passed the `taggedMemory` returned from this function.
The memory it points at is defined by the length in the <xref:System.Span`1> and
will be zeroed out. It will be available until `obj` is collected by the GC.
The memory pointed to by `taggedMemory` can be used for any purpose by the
caller of this function and usable during the "Is Referenced" callback.

Calling this function multiple times with the same `obj` will
return a new handle each time but the same tagged memory will be returned. The
tagged memory is only guaranteed to be zero initialized on the first call.

The caller is responsible for freeing the returned <xref:System.Runtime.InteropServices.GCHandle>.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The ObjectiveCMarshal API has not been initialized.</exception>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize (delegate* unmanaged&lt;void&gt; beginEndCallback, delegate* unmanaged&lt;IntPtr, int&gt; isReferencedCallback, delegate* unmanaged&lt;IntPtr, void&gt; trackedObjectEnteredFinalization, System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.UnhandledExceptionPropagationHandler unhandledExceptionPropagationHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize(method beginEndCallback, method isReferencedCallback, method trackedObjectEnteredFinalization, class System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal/UnhandledExceptionPropagationHandler unhandledExceptionPropagationHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.Initialize(=FUNC:System.Void,=FUNC:System.Int32(System.IntPtr),=FUNC:System.Void(System.IntPtr),System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.UnhandledExceptionPropagationHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Initialize (beginEndCallback As delegate* unmanaged&lt;Void&gt;, isReferencedCallback As delegate* unmanaged&lt; As IntPtr, Integer&gt;, trackedObjectEnteredFinalization As delegate* unmanaged&lt; As IntPtr, Void&gt;, unhandledExceptionPropagationHandler As ObjectiveCMarshal.UnhandledExceptionPropagationHandler)" />
      <MemberSignature Language="F#" Value="static member Initialize : delegate* unmanaged&lt;unit&gt; * delegate* unmanaged&lt;nativeint, int&gt; * delegate* unmanaged&lt;nativeint, unit&gt; * System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.UnhandledExceptionPropagationHandler -&gt; unit" Usage="System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.Initialize (beginEndCallback, isReferencedCallback, trackedObjectEnteredFinalization, unhandledExceptionPropagationHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Initialize(delegate* unmanaged&lt;void&gt; ^ beginEndCallback, delegate* unmanaged&lt;IntPtr , int&gt; ^ isReferencedCallback, delegate* unmanaged&lt;IntPtr , void&gt; ^ trackedObjectEnteredFinalization, System::Runtime::InteropServices::ObjectiveC::ObjectiveCMarshal::UnhandledExceptionPropagationHandler ^ unhandledExceptionPropagationHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginEndCallback" Type="delegate* unmanaged&lt;System.Void&gt;" />
        <Parameter Name="isReferencedCallback" Type="delegate* unmanaged&lt;System.IntPtr, System.Int32&gt;" />
        <Parameter Name="trackedObjectEnteredFinalization" Type="delegate* unmanaged&lt;System.IntPtr, System.Void&gt;" />
        <Parameter Name="unhandledExceptionPropagationHandler" Type="System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal+UnhandledExceptionPropagationHandler" />
      </Parameters>
      <Docs>
        <param name="beginEndCallback">Called when tracking begins and ends.</param>
        <param name="isReferencedCallback">Called to determine if a managed object instance is referenced elsewhere, and must not be collected by the GC.</param>
        <param name="trackedObjectEnteredFinalization">Called when a tracked object enters the finalization queue.</param>
        <param name="unhandledExceptionPropagationHandler">Handler for the propagation of unhandled Exceptions across a managed -&gt; native boundary (that is, Reverse P/Invoke).</param>
        <summary>Initialize the Objective-C marshalling API.</summary>
        <remarks>
All unmanaged function pointers must be written in native code since they will be called by the GC and
managed code is not able to run at that time.

The <paramref name="beginEndCallback" /> will be called when reference tracking begins and ends.
The associated begin/end pair will never be nested. When using Workstation GC, the begin/end pair
will be called on the same thread. When using Server GC, the begin/end pair is not guaranteed to
be called on the same thread.

The <paramref name="isReferencedCallback" /> should return 0 for not reference or 1 for
referenced. Any other value has undefined behavior.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMessageSendCallback">
      <MemberSignature Language="C#" Value="public static void SetMessageSendCallback (System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction msgSendFunction, IntPtr func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetMessageSendCallback(valuetype System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal/MessageSendFunction msgSendFunction, native int func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.SetMessageSendCallback(System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetMessageSendCallback (msgSendFunction As ObjectiveCMarshal.MessageSendFunction, func As IntPtr)" />
      <MemberSignature Language="F#" Value="static member SetMessageSendCallback : System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction * nativeint -&gt; unit" Usage="System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.SetMessageSendCallback (msgSendFunction, func)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetMessageSendCallback(System::Runtime::InteropServices::ObjectiveC::ObjectiveCMarshal::MessageSendFunction msgSendFunction, IntPtr func);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msgSendFunction" Type="System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal+MessageSendFunction" />
        <Parameter Name="func" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="msgSendFunction">The export to override.</param>
        <param name="func">The function override.</param>
        <summary>Set a function pointer override for an Objective-C runtime message passing export.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Providing an override can enable support for Objective-C variadic argument support.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The msgSend function has already been overridden.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetMessageSendPendingException">
      <MemberSignature Language="C#" Value="public static void SetMessageSendPendingException (Exception? exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetMessageSendPendingException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.SetMessageSendPendingException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetMessageSendPendingException (exception As Exception)" />
      <MemberSignature Language="F#" Value="static member SetMessageSendPendingException : Exception -&gt; unit" Usage="System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.SetMessageSendPendingException exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetMessageSendPendingException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">The exception.</param>
        <summary>Sets a pending exception to be thrown the next time the runtime is entered from an Objective-C msgSend P/Invoke.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

If `null` is supplied any pending exception is discarded.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
