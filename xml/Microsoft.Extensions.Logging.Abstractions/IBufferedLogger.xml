<Type Name="IBufferedLogger" FullName="Microsoft.Extensions.Logging.Abstractions.IBufferedLogger">
  <TypeSignature Language="C#" Value="public interface IBufferedLogger" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IBufferedLogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.Abstractions.IBufferedLogger" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBufferedLogger" />
  <TypeSignature Language="F#" Value="type IBufferedLogger = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBufferedLogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
             Represents the ability of a logging provider to support buffered logging.
             </summary>
    <remarks>
             A logging provider implements the <see cref="T:Microsoft.Extensions.Logging.ILogger" /> interface that gets invoked by the
             logging infrastructure whenever itâ€™s time to log a piece of state.
            
             A logging provider may also optionally implement the <see cref="T:Microsoft.Extensions.Logging.Abstractions.IBufferedLogger" /> interface.
             The logging infrastructure may type-test the <see cref="T:Microsoft.Extensions.Logging.ILogger" /> object to determine if
             it supports the <see cref="T:Microsoft.Extensions.Logging.Abstractions.IBufferedLogger" /> interface. If it does, that indicates to the
             logging infrastructure that the logging provider supports buffering. Whenever log
             buffering is enabled, buffered log records may be delivered to the logging provider
             in a batch via <see cref="M:Microsoft.Extensions.Logging.Abstractions.IBufferedLogger.LogRecords(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.Abstractions.BufferedLogRecord})" />.
            
             If a logging provider does not support log buffering, then it will always be given
             unbuffered log records. If a logging provider does support log buffering, whether its
             <see cref="T:Microsoft.Extensions.Logging.ILogger" /> or <see cref="T:Microsoft.Extensions.Logging.Abstractions.IBufferedLogger" /> implementation is used is
             determined by the log producer.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName="LogRecords">
      <MemberSignature Language="C#" Value="public void LogRecords (System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Logging.Abstractions.BufferedLogRecord&gt; records);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LogRecords(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.Logging.Abstractions.BufferedLogRecord&gt; records) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Abstractions.IBufferedLogger.LogRecords(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.Abstractions.BufferedLogRecord})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LogRecords (records As IEnumerable(Of BufferedLogRecord))" />
      <MemberSignature Language="F#" Value="abstract member LogRecords : seq&lt;Microsoft.Extensions.Logging.Abstractions.BufferedLogRecord&gt; -&gt; unit" Usage="iBufferedLogger.LogRecords records" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LogRecords(System::Collections::Generic::IEnumerable&lt;Microsoft::Extensions::Logging::Abstractions::BufferedLogRecord ^&gt; ^ records);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="records" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.Logging.Abstractions.BufferedLogRecord&gt;" />
      </Parameters>
      <Docs>
        <param name="records">The buffered log records to log.</param>
        <summary>
            Delivers a batch of buffered log records to a logging provider.
            </summary>
        <remarks>
            Once this function returns, the implementation should no longer access the records
            or state referenced by these records since the instances may be reused to represent other logs.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
