<Type Name="X86Base+X64" FullName="System.Runtime.Intrinsics.X86.X86Base+X64">
  <TypeSignature Language="C#" Value="public abstract class X86Base.X64" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract beforefieldinit X86Base/X64 extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Intrinsics.X86.X86Base.X64" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class X86Base.X64" />
  <TypeSignature Language="F#" Value="type X86Base.X64 = class" />
  <TypeSignature Language="C++ CLI" Value="public: ref class X86Base::X64 abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Intrinsics</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides access to the x86 base hardware instructions, that are only available to 64-bit processes, via intrinsics.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static (long Quotient, long Remainder) DivRem (ulong lower, long upper, long divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;int64, int64&gt; DivRem(unsigned int64 lower, int64 upper, int64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Intrinsics.X86.X86Base.X64.DivRem(System.UInt64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (lower As ULong, upper As Long, divisor As Long) As ValueTuple(Of Long, Long)" />
      <MemberSignature Language="F#" Value="static member DivRem : uint64 * int64 * int64 -&gt; ValueTuple&lt;int64, int64&gt;" Usage="System.Runtime.Intrinsics.X86.X86Base.X64.DivRem (lower, upper, divisor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ValueTuple&lt;long, long&gt; DivRem(System::UInt64 lower, long upper, long divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Intrinsics</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.RequiresPreviewFeatures("DivRem is in preview.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.RequiresPreviewFeatures("DivRem is in preview.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-9.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("SYSLIB5004", UrlFormat="https://aka.ms/dotnet-warnings/{0}")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("SYSLIB5004", UrlFormat="https://aka.ms/dotnet-warnings/{0}")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Int64,System.Int64&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Quotient", "Remainder" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Quotient", "Remainder" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lower" Type="System.UInt64" Index="0" FrameworkAlternate="net-8.0;net-9.0" />
        <Parameter Name="upper" Type="System.Int64" Index="1" FrameworkAlternate="net-8.0;net-9.0" />
        <Parameter Name="divisor" Type="System.Int64" Index="2" FrameworkAlternate="net-8.0;net-9.0" />
      </Parameters>
      <Docs>
        <param name="lower">To be added.</param>
        <param name="upper">To be added.</param>
        <param name="divisor">To be added.</param>
        <summary>
          <para>__int64 _div128(__int64 highdividend, __int64 lowdividend, __int64 divisor, __int64* remainder) DIV reg/m64</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static (ulong Quotient, ulong Remainder) DivRem (ulong lower, ulong upper, ulong divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;unsigned int64, unsigned int64&gt; DivRem(unsigned int64 lower, unsigned int64 upper, unsigned int64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Intrinsics.X86.X86Base.X64.DivRem(System.UInt64,System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (lower As ULong, upper As ULong, divisor As ULong) As ValueTuple(Of ULong, ULong)" />
      <MemberSignature Language="F#" Value="static member DivRem : uint64 * uint64 * uint64 -&gt; ValueTuple&lt;uint64, uint64&gt;" Usage="System.Runtime.Intrinsics.X86.X86Base.X64.DivRem (lower, upper, divisor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ValueTuple&lt;System::UInt64, System::UInt64&gt; DivRem(System::UInt64 lower, System::UInt64 upper, System::UInt64 divisor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Intrinsics</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.RequiresPreviewFeatures("DivRem is in preview.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.RequiresPreviewFeatures("DivRem is in preview.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-9.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("SYSLIB5004", UrlFormat="https://aka.ms/dotnet-warnings/{0}")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("SYSLIB5004", UrlFormat="https://aka.ms/dotnet-warnings/{0}")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.UInt64,System.UInt64&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Quotient", "Remainder" })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "Quotient", "Remainder" })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lower" Type="System.UInt64" Index="0" FrameworkAlternate="net-8.0;net-9.0" />
        <Parameter Name="upper" Type="System.UInt64" Index="1" FrameworkAlternate="net-8.0;net-9.0" />
        <Parameter Name="divisor" Type="System.UInt64" Index="2" FrameworkAlternate="net-8.0;net-9.0" />
      </Parameters>
      <Docs>
        <param name="lower">To be added.</param>
        <param name="upper">To be added.</param>
        <param name="divisor">To be added.</param>
        <summary>
          <para>unsigned __int64 _udiv128(unsigned __int64 highdividend, unsigned __int64 lowdividend, unsigned __int64 divisor, unsigned __int64* remainder) DIV reg/m64</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Intrinsics.X86.X86Base.X64.IsSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsSupported As Boolean" />
      <MemberSignature Language="F#" Value="static member IsSupported : bool" Usage="System.Runtime.Intrinsics.X86.X86Base.X64.IsSupported" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsSupported { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Intrinsics</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the APIs in this class are supported.</summary>
        <value>
          <see langword="true" /> if the APIs are supported; otherwise, <see langword="false" />.</value>
        <remarks>A value of <see langword="false" /> indicates that the APIs will throw <see cref="T:System.PlatformNotSupportedException" />.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
