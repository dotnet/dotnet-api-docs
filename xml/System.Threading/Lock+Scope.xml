<Type Name="Lock+Scope" FullName="System.Threading.Lock+Scope">
  <TypeSignature Language="C#" Value="public ref struct Lock.Scope" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Lock/Scope extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Lock.Scope" />
  <TypeSignature Language="VB.NET" Value="Public Structure Lock.Scope" />
  <TypeSignature Language="F#" Value="type Lock.Scope = struct" />
  <TypeSignature Language="C++ CLI" Value="public: value class Lock::Scope" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsByRefLike]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsByRefLike&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a <see cref="T:System.Threading.Lock" /> that might have been entered.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

This type is intended to be used with the <xref:System.Threading.Lock.EnterScope%2A> method, which returns a <xref:System.Threading.Lock.Scope> representing the lock that was entered, and with a language construct that automatically disposes the <xref:System.Threading.Lock.Scope>, such as the C# `using` keyword. Disposing the `Scope` exits the lock. Ensure that <xref:System.Threading.Lock.Scope.Dispose%2A> is called even in case of exceptions.

For more information, see <xref:System.Threading.Lock.EnterScope%2A> and the Remarks for <xref:System.Threading.Lock>.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Lock.Scope.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="member this.Dispose : unit -&gt; unit" Usage="scope.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exits the lock if the <see cref="T:System.Threading.Lock.Scope" /> represents a lock that was entered.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

If the current thread holds the lock multiple times, such as recursively, the lock is exited only once. The current thread should ensure that each <xref:System.Threading.Lock.EnterScope%2A> is matched with a <xref:System.Threading.Lock.Scope.Dispose%2A> on the `Scope` returned by `EnterScope`.

For more information, see the Remarks for <xref:System.Threading.Lock.Scope>.

          ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">The <see cref="T:System.Threading.Lock.Scope" /> represents a lock that was entered and the current thread does not hold the lock.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
