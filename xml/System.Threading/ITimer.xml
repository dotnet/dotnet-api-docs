<Type Name="ITimer" FullName="System.Threading.ITimer">
  <TypeSignature Language="C#" Value="public interface ITimer : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ITimer implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ITimer" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITimer&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type ITimer = interface&#xA;    interface IDisposable&#xA;    interface IAsyncDisposable" FrameworkAlternate="net-8.0" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITimer : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type ITimer = interface&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" FrameworkAlternate="net-9.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a timer that can have its due time and period changed.</summary>
    <remarks>Implementations of <see cref="M:System.Threading.ITimer.Change(System.TimeSpan,System.TimeSpan)" />, <see cref="M:System.IDisposable.Dispose" />, and <see cref="M:System.IAsyncDisposable.DisposeAsync" /> must all be thread-safe such that the timer instance may be accessed concurrently from multiple threads.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ITimer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Change : TimeSpan * TimeSpan -&gt; bool" Usage="iTimer.Change (dueTime, period)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">A <see cref="T:System.TimeSpan" /> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.ITimer" /> was constructed.
            Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> to prevent the timer from restarting. Specify <see cref="F:System.TimeSpan.Zero" /> to restart the timer immediately.</param>
        <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed.
            Specify <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> to disable periodic signaling.</param>
        <summary>Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</summary>
        <returns>
          <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</returns>
        <remarks>It is the responsibility of the implementer of the ITimer interface to ensure thread safety.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is less than -1 or greater than 4294967294.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
