<Type Name="IChatClient" FullName="Microsoft.Extensions.AI.IChatClient">
  <TypeSignature Language="C#" Value="public interface IChatClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IChatClient implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.IChatClient" />
  <TypeSignature Language="VB.NET" Value="Public Interface IChatClient&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type IChatClient = interface&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IChatClient : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.1.0.0</AssemblyVersion>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
    <AssemblyVersion>9.4.0.0</AssemblyVersion>
    <AssemblyVersion>9.5.0.0</AssemblyVersion>
    <AssemblyVersion>9.6.0.0</AssemblyVersion>
    <AssemblyVersion>9.7.0.0</AssemblyVersion>
    <AssemblyVersion>9.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a chat client.</summary>
    <remarks>
      <para>
            Applications must consider risks such as prompt injection attacks, data sizes, and the number of messages
            sent to the underlying provider or returned from it. Unless a specific <see cref="T:Microsoft.Extensions.AI.IChatClient" /> implementation
            explicitly documents safeguards for these concerns, the application is expected to implement appropriate protections.
            </para>
      <para>
            Unless otherwise specified, all members of <see cref="T:Microsoft.Extensions.AI.IChatClient" /> are thread-safe for concurrent use.
            It is expected that all implementations of <see cref="T:Microsoft.Extensions.AI.IChatClient" /> support being used by multiple requests concurrently.
            Instances must not be disposed of while the instance is still in use.
            </para>
      <para>
            However, implementations of <see cref="T:Microsoft.Extensions.AI.IChatClient" /> might mutate the arguments supplied to <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" /> and
            <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" />, such as by configuring the options instance. Thus, consumers of the interface either
            should avoid using shared instances of these arguments for concurrent invocations or should otherwise ensure by construction
            that no <see cref="T:Microsoft.Extensions.AI.IChatClient" /> instances are used which might employ such mutation. For example, the ConfigureOptions method is
            provided with a callback that could mutate the supplied options argument, and that should be avoided if using a singleton options instance.
            </para>
    </remarks>
    <related type="Article" href="https://learn.microsoft.com/dotnet/ai/quickstarts/build-chat-app">Build an AI chat app with .NET.</related>
    <related type="Article" href="https://learn.microsoft.com/dotnet/ai/microsoft-extensions-ai#the-ichatclient-interface">The IChatClient interface.</related>
  </Docs>
  <Members>
    <Member MemberName="GetResponseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.ChatResponse&gt; GetResponseAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt; messages, Microsoft.Extensions.AI.ChatOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Extensions.AI.ChatResponse&gt; GetResponseAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt; messages, class Microsoft.Extensions.AI.ChatOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetResponseAsync (messages As IEnumerable(Of ChatMessage), Optional options As ChatOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ChatResponse)" />
      <MemberSignature Language="F#" Value="abstract member GetResponseAsync : seq&lt;Microsoft.Extensions.AI.ChatMessage&gt; * Microsoft.Extensions.AI.ChatOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.ChatResponse&gt;" Usage="iChatClient.GetResponseAsync (messages, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.ChatResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt;" />
        <Parameter Name="options" Type="Microsoft.Extensions.AI.ChatOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="messages">The sequence of chat messages to send.</param>
        <param name="options">The chat options with which to configure the request.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Sends chat messages and returns the response.</summary>
        <returns>The response messages generated by the client.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="messages" /> is <see langword="null" />.</exception>
        <related type="Article" href="https://learn.microsoft.com/dotnet/ai/microsoft-extensions-ai#request-a-chat-response">Request a chat response.</related>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object? GetService (Type serviceType, object? serviceKey = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.IChatClient.GetService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type, Optional serviceKey As Object = Nothing) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type * obj -&gt; obj" Usage="iChatClient.GetService (serviceType, serviceKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="serviceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of object being requested.</param>
        <param name="serviceKey">An optional key that can be used to help identify the target service.</param>
        <summary>Asks the <see cref="T:Microsoft.Extensions.AI.IChatClient" /> for an object of the specified type <paramref name="serviceType" />.</summary>
        <returns>The found object, otherwise <see langword="null" />.</returns>
        <remarks>
            The purpose of this method is to allow for the retrieval of strongly-typed services that might be provided by the <see cref="T:Microsoft.Extensions.AI.IChatClient" />,
            including itself or any services it might be wrapping. For example, to access the <see cref="T:Microsoft.Extensions.AI.ChatClientMetadata" /> for the instance,
            <see cref="M:Microsoft.Extensions.AI.IChatClient.GetService(System.Type,System.Object)" /> may be used to request it.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamingResponseAsync">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt; GetStreamingResponseAsync (System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt; messages, Microsoft.Extensions.AI.ChatOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Microsoft.Extensions.AI.ChatResponseUpdate&gt; GetStreamingResponseAsync(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt; messages, class Microsoft.Extensions.AI.ChatOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamingResponseAsync (messages As IEnumerable(Of ChatMessage), Optional options As ChatOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of ChatResponseUpdate)" />
      <MemberSignature Language="F#" Value="abstract member GetStreamingResponseAsync : seq&lt;Microsoft.Extensions.AI.ChatMessage&gt; * Microsoft.Extensions.AI.ChatOptions * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt;" Usage="iChatClient.GetStreamingResponseAsync (messages, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Extensions.AI.ChatMessage&gt;" />
        <Parameter Name="options" Type="Microsoft.Extensions.AI.ChatOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="messages">The sequence of chat messages to send.</param>
        <param name="options">The chat options with which to configure the request.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Sends chat messages and streams the response.</summary>
        <returns>The response messages generated by the client.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="messages" /> is <see langword="null" />.</exception>
        <related type="Article" href="https://learn.microsoft.com/dotnet/ai/microsoft-extensions-ai#request-a-streaming-chat-response">Request a streaming chat response.</related>
      </Docs>
    </Member>
  </Members>
</Type>
