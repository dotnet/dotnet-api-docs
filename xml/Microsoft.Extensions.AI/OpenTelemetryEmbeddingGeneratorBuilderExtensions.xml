<Type Name="OpenTelemetryEmbeddingGeneratorBuilderExtensions" FullName="Microsoft.Extensions.AI.OpenTelemetryEmbeddingGeneratorBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class OpenTelemetryEmbeddingGeneratorBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit OpenTelemetryEmbeddingGeneratorBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGeneratorBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module OpenTelemetryEmbeddingGeneratorBuilderExtensions" />
  <TypeSignature Language="F#" Value="type OpenTelemetryEmbeddingGeneratorBuilderExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpenTelemetryEmbeddingGeneratorBuilderExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.1.0.0</AssemblyVersion>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides extensions for configuring <see cref="T:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2" /> instances.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="UseOpenTelemetry&lt;TInput,TEmbedding&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;TInput,TEmbedding&gt; UseOpenTelemetry&lt;TInput,TEmbedding&gt; (this Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;TInput,TEmbedding&gt; builder, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory = default, string? sourceName = default, Action&lt;Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator&lt;TInput,TEmbedding&gt;&gt;? configure = default) where TEmbedding : Microsoft.Extensions.AI.Embedding;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2&lt;!!TInput, !!TEmbedding&gt; UseOpenTelemetry&lt;TInput, (class Microsoft.Extensions.AI.Embedding) TEmbedding&gt;(class Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2&lt;!!TInput, !!TEmbedding&gt; builder, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, string sourceName, class System.Action`1&lt;class Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2&lt;!!TInput, !!TEmbedding&gt;&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGeneratorBuilderExtensions.UseOpenTelemetry``2(Microsoft.Extensions.AI.EmbeddingGeneratorBuilder{``0,``1},Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Action{Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseOpenTelemetry(Of TInput, TEmbedding) (builder As EmbeddingGeneratorBuilder(Of TInput, TEmbedding), Optional loggerFactory As ILoggerFactory = Nothing, Optional sourceName As String = Nothing, Optional configure As Action(Of OpenTelemetryEmbeddingGenerator(Of TInput, TEmbedding)) = Nothing) As EmbeddingGeneratorBuilder(Of TInput, TEmbedding)" />
      <MemberSignature Language="F#" Value="static member UseOpenTelemetry : Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;'Input, 'Embedding (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)&gt; * Microsoft.Extensions.Logging.ILoggerFactory * string * Action&lt;Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator&lt;'Input, 'Embedding&gt;&gt; -&gt; Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;'Input, 'Embedding (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)&gt; (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)" Usage="Microsoft.Extensions.AI.OpenTelemetryEmbeddingGeneratorBuilderExtensions.UseOpenTelemetry (builder, loggerFactory, sourceName, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;TInput,TEmbedding&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.AI.Embedding</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;TInput,TEmbedding&gt;" RefType="this" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="sourceName" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator&lt;TInput,TEmbedding&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TInput">The type of input used to produce embeddings.</typeparam>
        <typeparam name="TEmbedding">The type of embedding generated.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2" />.</param>
        <param name="loggerFactory">An optional <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> to use to create a logger for logging events.</param>
        <param name="sourceName">An optional source name that will be used on the telemetry data.</param>
        <param name="configure">An optional callback that can be used to configure the <see cref="T:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2" /> instance.</param>
        <summary>
            Adds OpenTelemetry support to the embedding generator pipeline, following the OpenTelemetry Semantic Conventions for Generative AI systems.
            </summary>
        <returns>The <paramref name="builder" />.</returns>
        <remarks>
            The draft specification this follows is available at <see href="https://opentelemetry.io/docs/specs/semconv/gen-ai/" />.
            The specification is still experimental and subject to change; as such, the telemetry output by this generator is also subject to change.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
