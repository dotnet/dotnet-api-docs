<Type Name="UriContent" FullName="Microsoft.Extensions.AI.UriContent">
  <TypeSignature Language="C#" Value="public class UriContent : Microsoft.Extensions.AI.AIContent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UriContent extends Microsoft.Extensions.AI.AIContent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.UriContent" />
  <TypeSignature Language="VB.NET" Value="Public Class UriContent&#xA;Inherits AIContent" />
  <TypeSignature Language="F#" Value="type UriContent = class&#xA;    inherit AIContent" />
  <TypeSignature Language="C++ CLI" Value="public ref class UriContent : Microsoft::Extensions::AI::AIContent" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
    <AssemblyVersion>9.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Extensions.AI.AIContent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a URL, typically to hosted content such as an image, audio, or video.
            </summary>
    <remarks>
            This class is intended for use with HTTP or HTTPS URIs that reference hosted content.
            For data URIs, use <see cref="T:Microsoft.Extensions.AI.DataContent" /> instead.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UriContent (string uri, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string uri, string mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.UriContent.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (uri As String, mediaType As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.AI.UriContent : string * string -&gt; Microsoft.Extensions.AI.UriContent" Usage="new Microsoft.Extensions.AI.UriContent (uri, mediaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UriContent(System::String ^ uri, System::String ^ mediaType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to the represented content.</param>
        <param name="mediaType">The media type (also known as MIME type) represented by the content.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.UriContent" /> class.</summary>
        <remarks>
            A media type must be specified, so that consumers know what to do with the content.
            If an exact media type is not known, but the category (e.g. image) is known, a wildcard
            may be used (e.g. "image/*").
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mediaType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="mediaType" /> is an invalid media type.</exception>
        <exception cref="T:System.UriFormat">
          <paramref name="uri" /> is an invalid URL.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UriContent (Uri uri, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri uri, string mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.UriContent.#ctor(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (uri As Uri, mediaType As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.AI.UriContent : Uri * string -&gt; Microsoft.Extensions.AI.UriContent" Usage="new Microsoft.Extensions.AI.UriContent (uri, mediaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UriContent(Uri ^ uri, System::String ^ mediaType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Text.Json.Serialization.JsonConstructor]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Text.Json.Serialization.JsonConstructor&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to the represented content.</param>
        <param name="mediaType">The media type (also known as MIME type) represented by the content.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.UriContent" /> class.</summary>
        <remarks>
            A media type must be specified, so that consumers know what to do with the content.
            If an exact media type is not known, but the category (e.g. image) is known, a wildcard
            may be used (e.g. "image/*").
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mediaType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="mediaType" /> is an invalid media type.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasTopLevelMediaType">
      <MemberSignature Language="C#" Value="public bool HasTopLevelMediaType (string topLevelType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasTopLevelMediaType(string topLevelType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.UriContent.HasTopLevelMediaType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasTopLevelMediaType (topLevelType As String) As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasTopLevelMediaType : string -&gt; bool" Usage="uriContent.HasTopLevelMediaType topLevelType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasTopLevelMediaType(System::String ^ topLevelType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topLevelType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topLevelType">The type to compare against <see cref="P:Microsoft.Extensions.AI.UriContent.MediaType" />.</param>
        <summary>
            Determines whether the <see cref="P:Microsoft.Extensions.AI.UriContent.MediaType" />'s top-level type matches the specified <paramref name="topLevelType" />.
            </summary>
        <returns>
          <see langword="true" /> if the type portion of <see cref="P:Microsoft.Extensions.AI.UriContent.MediaType" /> matches the specified value; otherwise, false.</returns>
        <remarks>
            A media type is primarily composed of two parts, a "type" and a "subtype", separated by a slash ("/").
            The type portion is also referred to as the "top-level type"; for example,
            "image/png" has a top-level type of "image". <see cref="M:Microsoft.Extensions.AI.UriContent.HasTopLevelMediaType(System.String)" /> compares
            the specified <paramref name="topLevelType" /> against the type portion of <see cref="P:Microsoft.Extensions.AI.UriContent.MediaType" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaType">
      <MemberSignature Language="C#" Value="public string MediaType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MediaType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.UriContent.MediaType" />
      <MemberSignature Language="VB.NET" Value="Public Property MediaType As String" />
      <MemberSignature Language="F#" Value="member this.MediaType : string with get, set" Usage="Microsoft.Extensions.AI.UriContent.MediaType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MediaType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the media type (also known as MIME type) for this content.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public Uri Uri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.UriContent.Uri" />
      <MemberSignature Language="VB.NET" Value="Public Property Uri As Uri" />
      <MemberSignature Language="F#" Value="member this.Uri : Uri with get, set" Usage="Microsoft.Extensions.AI.UriContent.Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Uri { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="P:Microsoft.Extensions.AI.UriContent.Uri" /> for this content.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
