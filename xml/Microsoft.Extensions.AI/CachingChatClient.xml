<Type Name="CachingChatClient" FullName="Microsoft.Extensions.AI.CachingChatClient">
  <TypeSignature Language="C#" Value="public abstract class CachingChatClient : Microsoft.Extensions.AI.DelegatingChatClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CachingChatClient extends Microsoft.Extensions.AI.DelegatingChatClient" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.CachingChatClient" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CachingChatClient&#xA;Inherits DelegatingChatClient" />
  <TypeSignature Language="F#" Value="type CachingChatClient = class&#xA;    inherit DelegatingChatClient" />
  <TypeSignature Language="C++ CLI" Value="public ref class CachingChatClient abstract : Microsoft::Extensions::AI::DelegatingChatClient" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.1.0.0</AssemblyVersion>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Extensions.AI.DelegatingChatClient</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a delegating chat client that caches the results of chat calls.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CachingChatClient (Microsoft.Extensions.AI.IChatClient innerClient);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.AI.IChatClient innerClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.CachingChatClient.#ctor(Microsoft.Extensions.AI.IChatClient)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (innerClient As IChatClient)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.AI.CachingChatClient : Microsoft.Extensions.AI.IChatClient -&gt; Microsoft.Extensions.AI.CachingChatClient" Usage="new Microsoft.Extensions.AI.CachingChatClient innerClient" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CachingChatClient(Microsoft::Extensions::AI::IChatClient ^ innerClient);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerClient" Type="Microsoft.Extensions.AI.IChatClient" />
      </Parameters>
      <Docs>
        <param name="innerClient">The underlying <see cref="T:Microsoft.Extensions.AI.IChatClient" />.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.CachingChatClient" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoalesceStreamingUpdates">
      <MemberSignature Language="C#" Value="public bool CoalesceStreamingUpdates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CoalesceStreamingUpdates" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.CachingChatClient.CoalesceStreamingUpdates" />
      <MemberSignature Language="VB.NET" Value="Public Property CoalesceStreamingUpdates As Boolean" />
      <MemberSignature Language="F#" Value="member this.CoalesceStreamingUpdates : bool with get, set" Usage="Microsoft.Extensions.AI.CachingChatClient.CoalesceStreamingUpdates" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CoalesceStreamingUpdates { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether streaming updates are coalesced.</summary>
        <value>
          <para>
            <see langword="true" /> if the client attempts to coalesce contiguous streaming updates
            into a single update, to reduce the number of individual items that are yielded on
            subsequent enumerations of the cached data; <see langword="false" /> if the updates are
            kept unaltered.
            </para>
          <para>
            The default is <see langword="true" />.
            </para>
        </value>
        <remarks>
          <para>
            When <see langword="true" />, the client will attempt to coalesce contiguous streaming updates
            into a single update, in order to reduce the number of individual items that are yielded on
            subsequent enumerations of the cached data. When <see langword="false" />, the updates are
            kept unaltered.
            </para>
          <para>
            The default is <see langword="true" />.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheKey">
      <MemberSignature Language="C#" Value="protected abstract string GetCacheKey (scoped ReadOnlySpan&lt;object?&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetCacheKey(valuetype System.ReadOnlySpan`1&lt;object&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.CachingChatClient.GetCacheKey(System.ReadOnlySpan{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetCacheKey (values As ReadOnlySpan(Of Object)) As String" />
      <MemberSignature Language="F#" Value="abstract member GetCacheKey : ReadOnlySpan&lt;obj&gt; -&gt; string" Usage="cachingChatClient.GetCacheKey values" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ GetCacheKey(ReadOnlySpan&lt;System::Object ^&gt; values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.ReadOnlySpan&lt;System.Object&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ScopedRef]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ScopedRef&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.ParamCollection]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.ParamCollection&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values">The values to inform the key.</param>
        <summary>Computes a cache key for the specified values.</summary>
        <returns>The computed key.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResponseAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.ChatResponse&gt; GetResponseAsync (System.Collections.Generic.IList&lt;Microsoft.Extensions.AI.ChatMessage&gt; chatMessages, Microsoft.Extensions.AI.ChatOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Extensions.AI.ChatResponse&gt; GetResponseAsync(class System.Collections.Generic.IList`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt; chatMessages, class Microsoft.Extensions.AI.ChatOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.CachingChatClient.GetResponseAsync(System.Collections.Generic.IList{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetResponseAsync (chatMessages As IList(Of ChatMessage), Optional options As ChatOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ChatResponse)" />
      <MemberSignature Language="F#" Value="override this.GetResponseAsync : System.Collections.Generic.IList&lt;Microsoft.Extensions.AI.ChatMessage&gt; * Microsoft.Extensions.AI.ChatOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.ChatResponse&gt;" Usage="cachingChatClient.GetResponseAsync (chatMessages, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.ChatResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chatMessages" Type="System.Collections.Generic.IList&lt;Microsoft.Extensions.AI.ChatMessage&gt;" />
        <Parameter Name="options" Type="Microsoft.Extensions.AI.ChatOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="chatMessages">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetStreamingResponseAsync">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt; GetStreamingResponseAsync (System.Collections.Generic.IList&lt;Microsoft.Extensions.AI.ChatMessage&gt; chatMessages, Microsoft.Extensions.AI.ChatOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Microsoft.Extensions.AI.ChatResponseUpdate&gt; GetStreamingResponseAsync(class System.Collections.Generic.IList`1&lt;class Microsoft.Extensions.AI.ChatMessage&gt; chatMessages, class Microsoft.Extensions.AI.ChatOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.CachingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IList{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetStreamingResponseAsync (chatMessages As IList(Of ChatMessage), Optional options As ChatOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of ChatResponseUpdate)" />
      <MemberSignature Language="F#" Value="override this.GetStreamingResponseAsync : System.Collections.Generic.IList&lt;Microsoft.Extensions.AI.ChatMessage&gt; * Microsoft.Extensions.AI.ChatOptions * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt;" Usage="cachingChatClient.GetStreamingResponseAsync (chatMessages, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.AsyncIteratorStateMachine(typeof(Microsoft.Extensions.AI.CachingChatClient+&lt;GetStreamingResponseAsync&gt;d__8))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.AsyncIteratorStateMachine(typeof(Microsoft.Extensions.AI.CachingChatClient+&lt;GetStreamingResponseAsync&gt;d__8))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chatMessages" Type="System.Collections.Generic.IList&lt;Microsoft.Extensions.AI.ChatMessage&gt;" />
        <Parameter Name="options" Type="Microsoft.Extensions.AI.ChatOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.EnumeratorCancellation]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.EnumeratorCancellation&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="chatMessages">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ReadCacheAsync">
      <MemberSignature Language="C#" Value="protected abstract System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.ChatResponse?&gt; ReadCacheAsync (string key, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Extensions.AI.ChatResponse&gt; ReadCacheAsync(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.CachingChatClient.ReadCacheAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReadCacheAsync (key As String, cancellationToken As CancellationToken) As Task(Of ChatResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReadCacheAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.ChatResponse&gt;" Usage="cachingChatClient.ReadCacheAsync (key, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Threading::Tasks::Task&lt;Microsoft::Extensions::AI::ChatResponse ^&gt; ^ ReadCacheAsync(System::String ^ key, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.ChatResponse&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key">The cache key.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests.</param>
        <summary>
            Returns a previously cached <see cref="T:Microsoft.Extensions.AI.ChatResponse" />, if available.
            This is used when there is a call to <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IList{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" />.
            </summary>
        <returns>The previously cached data, if available, otherwise <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCacheStreamingAsync">
      <MemberSignature Language="C#" Value="protected abstract System.Threading.Tasks.Task&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt;?&gt; ReadCacheStreamingAsync (string key, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Extensions.AI.ChatResponseUpdate&gt;&gt; ReadCacheStreamingAsync(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.CachingChatClient.ReadCacheStreamingAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReadCacheStreamingAsync (key As String, cancellationToken As CancellationToken) As Task(Of IReadOnlyList(Of ChatResponseUpdate))" />
      <MemberSignature Language="F#" Value="abstract member ReadCacheStreamingAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt;&gt;" Usage="cachingChatClient.ReadCacheStreamingAsync (key, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Threading::Tasks::Task&lt;System::Collections::Generic::IReadOnlyList&lt;Microsoft::Extensions::AI::ChatResponseUpdate ^&gt; ^&gt; ^ ReadCacheStreamingAsync(System::String ^ key, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key">The cache key.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests.</param>
        <summary>
            Returns a previously cached list of <see cref="T:Microsoft.Extensions.AI.ChatResponseUpdate" /> values, if available.
            This is used when there is a call to <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IList{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" />.
            </summary>
        <returns>The previously cached data, if available, otherwise <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteCacheAsync">
      <MemberSignature Language="C#" Value="protected abstract System.Threading.Tasks.Task WriteCacheAsync (string key, Microsoft.Extensions.AI.ChatResponse value, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCacheAsync(string key, class Microsoft.Extensions.AI.ChatResponse value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.CachingChatClient.WriteCacheAsync(System.String,Microsoft.Extensions.AI.ChatResponse,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function WriteCacheAsync (key As String, value As ChatResponse, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member WriteCacheAsync : string * Microsoft.Extensions.AI.ChatResponse * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cachingChatClient.WriteCacheAsync (key, value, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Threading::Tasks::Task ^ WriteCacheAsync(System::String ^ key, Microsoft::Extensions::AI::ChatResponse ^ value, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="Microsoft.Extensions.AI.ChatResponse" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key">The cache key.</param>
        <param name="value">The <see cref="T:Microsoft.Extensions.AI.ChatResponse" /> to be stored.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests.</param>
        <summary>
            Stores a <see cref="T:Microsoft.Extensions.AI.ChatResponse" /> in the underlying cache.
            This is used when there is a call to <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IList{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the completion of the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteCacheStreamingAsync">
      <MemberSignature Language="C#" Value="protected abstract System.Threading.Tasks.Task WriteCacheStreamingAsync (string key, System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt; value, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCacheStreamingAsync(string key, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Extensions.AI.ChatResponseUpdate&gt; value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.CachingChatClient.WriteCacheStreamingAsync(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.AI.ChatResponseUpdate},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function WriteCacheStreamingAsync (key As String, value As IReadOnlyList(Of ChatResponseUpdate), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member WriteCacheStreamingAsync : string * System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cachingChatClient.WriteCacheStreamingAsync (key, value, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Threading::Tasks::Task ^ WriteCacheStreamingAsync(System::String ^ key, System::Collections::Generic::IReadOnlyList&lt;Microsoft::Extensions::AI::ChatResponseUpdate ^&gt; ^ value, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.Extensions.AI.ChatResponseUpdate&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key">The cache key.</param>
        <param name="value">The <see cref="T:Microsoft.Extensions.AI.ChatResponse" /> to be stored.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests.</param>
        <summary>
            Stores a list of <see cref="T:Microsoft.Extensions.AI.ChatResponseUpdate" /> values in the underlying cache.
            This is used when there is a call to <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IList{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the completion of the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
