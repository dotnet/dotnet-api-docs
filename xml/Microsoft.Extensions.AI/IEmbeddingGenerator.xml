<Type Name="IEmbeddingGenerator" FullName="Microsoft.Extensions.AI.IEmbeddingGenerator">
  <TypeSignature Language="C#" Value="public interface IEmbeddingGenerator : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IEmbeddingGenerator implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.IEmbeddingGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEmbeddingGenerator&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type IEmbeddingGenerator = interface&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEmbeddingGenerator : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
    <AssemblyVersion>9.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a generator of embeddings.</summary>
    <remarks>
            This base interface is used to allow for embedding generators to be stored in a non-generic manner.
            To use the generator to create embeddings, instances typed as this base interface first need to be
            cast to the generic interface <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object? GetService (Type serviceType, object? serviceKey = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType, object serviceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.IEmbeddingGenerator.GetService(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type, Optional serviceKey As Object = Nothing) As Object" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type * obj -&gt; obj" Usage="iEmbeddingGenerator.GetService (serviceType, serviceKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="serviceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">The type of object being requested.</param>
        <param name="serviceKey">An optional key that can be used to help identify the target service.</param>
        <summary>Asks the <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2" /> for an object of the specified type <paramref name="serviceType" />.</summary>
        <returns>The found object, otherwise <see langword="null" />.</returns>
        <remarks>
            The purpose of this method is to allow for the retrieval of strongly typed services that might be provided by the
            <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2" />, including itself or any services it might be wrapping.
            For example, to access the <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorMetadata" /> for the instance, <see cref="M:Microsoft.Extensions.AI.IEmbeddingGenerator.GetService(System.Type,System.Object)" /> may
            be used to request it.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
