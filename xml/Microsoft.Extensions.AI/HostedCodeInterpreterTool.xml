<Type Name="HostedCodeInterpreterTool" FullName="Microsoft.Extensions.AI.HostedCodeInterpreterTool">
  <TypeSignature Language="C#" Value="public class HostedCodeInterpreterTool : Microsoft.Extensions.AI.AITool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HostedCodeInterpreterTool extends Microsoft.Extensions.AI.AITool" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.HostedCodeInterpreterTool" />
  <TypeSignature Language="VB.NET" Value="Public Class HostedCodeInterpreterTool&#xA;Inherits AITool" />
  <TypeSignature Language="F#" Value="type HostedCodeInterpreterTool = class&#xA;    inherit AITool" />
  <TypeSignature Language="C++ CLI" Value="public ref class HostedCodeInterpreterTool : Microsoft::Extensions::AI::AITool" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
    <AssemblyVersion>9.4.0.0</AssemblyVersion>
    <AssemblyVersion>9.5.0.0</AssemblyVersion>
    <AssemblyVersion>9.6.0.0</AssemblyVersion>
    <AssemblyVersion>9.7.0.0</AssemblyVersion>
    <AssemblyVersion>9.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Extensions.AI.AITool</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a hosted tool that can be specified to an AI service to enable it to execute code it generates.</summary>
    <remarks>
            This tool does not itself implement code interpretation. It is a marker that can be used to inform a service
            that the service is allowed to execute its generated code if the service is capable of doing so.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostedCodeInterpreterTool ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.HostedCodeInterpreterTool.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostedCodeInterpreterTool();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.HostedCodeInterpreterTool" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inputs">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.Extensions.AI.AIContent&gt;? Inputs { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.Extensions.AI.AIContent&gt; Inputs" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.HostedCodeInterpreterTool.Inputs" />
      <MemberSignature Language="VB.NET" Value="Public Property Inputs As IList(Of AIContent)" />
      <MemberSignature Language="F#" Value="member this.Inputs : System.Collections.Generic.IList&lt;Microsoft.Extensions.AI.AIContent&gt; with get, set" Usage="Microsoft.Extensions.AI.HostedCodeInterpreterTool.Inputs" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;Microsoft::Extensions::AI::AIContent ^&gt; ^ Inputs { System::Collections::Generic::IList&lt;Microsoft::Extensions::AI::AIContent ^&gt; ^ get(); void set(System::Collections::Generic::IList&lt;Microsoft::Extensions::AI::AIContent ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Extensions.AI.AIContent&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a collection of <see cref="T:Microsoft.Extensions.AI.AIContent" /> to be used as input to the code interpreter tool.</summary>
        <value>To be added.</value>
        <remarks>
            Services support different varied kinds of inputs. Most support the IDs of files that are hosted by the service,
            represented via <see cref="T:Microsoft.Extensions.AI.HostedFileContent" />. Some also support binary data, represented via <see cref="T:Microsoft.Extensions.AI.DataContent" />.
            Unsupported inputs will be ignored by the <see cref="T:Microsoft.Extensions.AI.IChatClient" /> to which the tool is passed.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
