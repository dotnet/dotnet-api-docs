<Type Name="OpenAIClientExtensions" FullName="Microsoft.Extensions.AI.OpenAIClientExtensions">
  <TypeSignature Language="C#" Value="public static class OpenAIClientExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit OpenAIClientExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.OpenAIClientExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module OpenAIClientExtensions" />
  <TypeSignature Language="F#" Value="type OpenAIClientExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpenAIClientExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.OpenAI</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.1.0.0</AssemblyVersion>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
    <AssemblyVersion>9.4.0.0</AssemblyVersion>
    <AssemblyVersion>9.5.0.0</AssemblyVersion>
    <AssemblyVersion>9.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides extension methods for working with <see cref="T:OpenAI.OpenAIClient" />s.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsIChatClient">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.AI.IChatClient AsIChatClient (this OpenAI.Chat.ChatClient chatClient);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.AI.IChatClient AsIChatClient(class OpenAI.Chat.ChatClient chatClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.OpenAIClientExtensions.AsIChatClient(OpenAI.Chat.ChatClient)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsIChatClient (chatClient As ChatClient) As IChatClient" />
      <MemberSignature Language="F#" Value="static member AsIChatClient : OpenAI.Chat.ChatClient -&gt; Microsoft.Extensions.AI.IChatClient" Usage="Microsoft.Extensions.AI.OpenAIClientExtensions.AsIChatClient chatClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::AI::IChatClient ^ AsIChatClient(OpenAI::Chat::ChatClient ^ chatClient);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.OpenAI</AssemblyName>
        <AssemblyVersion>9.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.IChatClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chatClient" Type="OpenAI.Chat.ChatClient" RefType="this" />
      </Parameters>
      <Docs>
        <param name="chatClient">The client.</param>
        <summary>Gets an <see cref="T:Microsoft.Extensions.AI.IChatClient" /> for use with this <see cref="T:OpenAI.Chat.ChatClient" />.</summary>
        <returns>An <see cref="T:Microsoft.Extensions.AI.IChatClient" /> that can be used to converse via the <see cref="T:OpenAI.Chat.ChatClient" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsIChatClient">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.AI.IChatClient AsIChatClient (this OpenAI.Responses.OpenAIResponseClient responseClient);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.AI.IChatClient AsIChatClient(class OpenAI.Responses.OpenAIResponseClient responseClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.OpenAIClientExtensions.AsIChatClient(OpenAI.Responses.OpenAIResponseClient)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsIChatClient (responseClient As OpenAIResponseClient) As IChatClient" />
      <MemberSignature Language="F#" Value="static member AsIChatClient : OpenAI.Responses.OpenAIResponseClient -&gt; Microsoft.Extensions.AI.IChatClient" Usage="Microsoft.Extensions.AI.OpenAIClientExtensions.AsIChatClient responseClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::AI::IChatClient ^ AsIChatClient(OpenAI::Responses::OpenAIResponseClient ^ responseClient);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.OpenAI</AssemblyName>
        <AssemblyVersion>9.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.IChatClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseClient" Type="OpenAI.Responses.OpenAIResponseClient" RefType="this" />
      </Parameters>
      <Docs>
        <param name="responseClient">The client.</param>
        <summary>Gets an <see cref="T:Microsoft.Extensions.AI.IChatClient" /> for use with this <see cref="T:OpenAI.Responses.OpenAIResponseClient" />.</summary>
        <returns>An <see cref="T:Microsoft.Extensions.AI.IChatClient" /> that can be used to converse via the <see cref="T:OpenAI.Responses.OpenAIResponseClient" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsIChatClient">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.AI.IChatClient AsIChatClient (this OpenAI.Assistants.AssistantClient assistantClient, string assistantId, string? threadId = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.AI.IChatClient AsIChatClient(class OpenAI.Assistants.AssistantClient assistantClient, string assistantId, string threadId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.OpenAIClientExtensions.AsIChatClient(OpenAI.Assistants.AssistantClient,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsIChatClient (assistantClient As AssistantClient, assistantId As String, Optional threadId As String = Nothing) As IChatClient" />
      <MemberSignature Language="F#" Value="static member AsIChatClient : OpenAI.Assistants.AssistantClient * string * string -&gt; Microsoft.Extensions.AI.IChatClient" Usage="Microsoft.Extensions.AI.OpenAIClientExtensions.AsIChatClient (assistantClient, assistantId, threadId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.OpenAI</AssemblyName>
        <AssemblyVersion>9.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("OPENAI001")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("OPENAI001")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.IChatClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantClient" Type="OpenAI.Assistants.AssistantClient" RefType="this" />
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="threadId" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assistantClient">The <see cref="T:OpenAI.Assistants.AssistantClient" /> instance to be accessed as an <see cref="T:Microsoft.Extensions.AI.IChatClient" />.</param>
        <param name="assistantId">The unique identifier of the assistant with which to interact.</param>
        <param name="threadId">
            An optional existing thread identifier for the chat session. This serves as a default, and may be overridden per call to
            <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" /> or <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)" /> via the <see cref="P:Microsoft.Extensions.AI.ChatOptions.ConversationId" />
            property. If no thread ID is provided via either mechanism, a new thread will be created for the request.
            </param>
        <summary>Gets an <see cref="T:Microsoft.Extensions.AI.IChatClient" /> for use with this <see cref="T:OpenAI.Assistants.AssistantClient" />.</summary>
        <returns>An <see cref="T:Microsoft.Extensions.AI.IChatClient" /> instance configured to interact with the specified agent and thread.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsIEmbeddingGenerator">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.AI.IEmbeddingGenerator&lt;string,Microsoft.Extensions.AI.Embedding&lt;float&gt;&gt; AsIEmbeddingGenerator (this OpenAI.Embeddings.EmbeddingClient embeddingClient, int? defaultModelDimensions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.AI.IEmbeddingGenerator`2&lt;string, class Microsoft.Extensions.AI.Embedding`1&lt;float32&gt;&gt; AsIEmbeddingGenerator(class OpenAI.Embeddings.EmbeddingClient embeddingClient, valuetype System.Nullable`1&lt;int32&gt; defaultModelDimensions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.OpenAIClientExtensions.AsIEmbeddingGenerator(OpenAI.Embeddings.EmbeddingClient,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsIEmbeddingGenerator (embeddingClient As EmbeddingClient, Optional defaultModelDimensions As Nullable(Of Integer) = Nothing) As IEmbeddingGenerator(Of String, Embedding(Of Single))" />
      <MemberSignature Language="F#" Value="static member AsIEmbeddingGenerator : OpenAI.Embeddings.EmbeddingClient * Nullable&lt;int&gt; -&gt; Microsoft.Extensions.AI.IEmbeddingGenerator&lt;string, Microsoft.Extensions.AI.Embedding&lt;single&gt;&gt;" Usage="Microsoft.Extensions.AI.OpenAIClientExtensions.AsIEmbeddingGenerator (embeddingClient, defaultModelDimensions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.OpenAI</AssemblyName>
        <AssemblyVersion>9.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.IEmbeddingGenerator&lt;System.String,Microsoft.Extensions.AI.Embedding&lt;System.Single&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="embeddingClient" Type="OpenAI.Embeddings.EmbeddingClient" RefType="this" />
        <Parameter Name="defaultModelDimensions" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="embeddingClient">The client.</param>
        <param name="defaultModelDimensions">The number of dimensions to generate in each embedding.</param>
        <summary>Gets an <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2" /> for use with this <see cref="T:OpenAI.Embeddings.EmbeddingClient" />.</summary>
        <returns>An <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2" /> that can be used to generate embeddings via the <see cref="T:OpenAI.Embeddings.EmbeddingClient" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsISpeechToTextClient">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.AI.ISpeechToTextClient AsISpeechToTextClient (this OpenAI.Audio.AudioClient audioClient);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.AI.ISpeechToTextClient AsISpeechToTextClient(class OpenAI.Audio.AudioClient audioClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.OpenAIClientExtensions.AsISpeechToTextClient(OpenAI.Audio.AudioClient)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsISpeechToTextClient (audioClient As AudioClient) As ISpeechToTextClient" />
      <MemberSignature Language="F#" Value="static member AsISpeechToTextClient : OpenAI.Audio.AudioClient -&gt; Microsoft.Extensions.AI.ISpeechToTextClient" Usage="Microsoft.Extensions.AI.OpenAIClientExtensions.AsISpeechToTextClient audioClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::AI::ISpeechToTextClient ^ AsISpeechToTextClient(OpenAI::Audio::AudioClient ^ audioClient);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.OpenAI</AssemblyName>
        <AssemblyVersion>9.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("MEAI001")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.ISpeechToTextClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioClient" Type="OpenAI.Audio.AudioClient" RefType="this" />
      </Parameters>
      <Docs>
        <param name="audioClient">The client.</param>
        <summary>Gets an <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient" /> for use with this <see cref="T:OpenAI.Audio.AudioClient" />.</summary>
        <returns>An <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient" /> that can be used to transcribe audio via the <see cref="T:OpenAI.Audio.AudioClient" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
