<Type Name="FunctionCallContent" FullName="Microsoft.Extensions.AI.FunctionCallContent">
  <TypeSignature Language="C#" Value="public sealed class FunctionCallContent : Microsoft.Extensions.AI.AIContent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FunctionCallContent extends Microsoft.Extensions.AI.AIContent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.FunctionCallContent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FunctionCallContent&#xA;Inherits AIContent" />
  <TypeSignature Language="F#" Value="type FunctionCallContent = class&#xA;    inherit AIContent" />
  <TypeSignature Language="C++ CLI" Value="public ref class FunctionCallContent sealed : Microsoft::Extensions::AI::AIContent" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Extensions.AI.AIContent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a function call request.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FunctionCallContent (string callId, string name, System.Collections.Generic.IDictionary&lt;string,object?&gt;? arguments = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string callId, string name, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.FunctionCallContent.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callId As String, name As String, Optional arguments As IDictionary(Of String, Object) = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.AI.FunctionCallContent : string * string * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; Microsoft.Extensions.AI.FunctionCallContent" Usage="new Microsoft.Extensions.AI.FunctionCallContent (callId, name, arguments)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Text.Json.Serialization.JsonConstructor]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Text.Json.Serialization.JsonConstructor&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callId" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callId">The function call ID.</param>
        <param name="name">The function name.</param>
        <param name="arguments">The function original arguments.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.FunctionCallContent" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object?&gt;? Arguments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Arguments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.FunctionCallContent.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public Property Arguments As IDictionary(Of String, Object)" />
      <MemberSignature Language="F#" Value="member this.Arguments : System.Collections.Generic.IDictionary&lt;string, obj&gt; with get, set" Usage="Microsoft.Extensions.AI.FunctionCallContent.Arguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Arguments { System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ get(); void set(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 2 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 2 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the arguments requested to be provided to the function.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallId">
      <MemberSignature Language="C#" Value="public string CallId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CallId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.FunctionCallContent.CallId" />
      <MemberSignature Language="VB.NET" Value="Public Property CallId As String" />
      <MemberSignature Language="F#" Value="member this.CallId : string with get, set" Usage="Microsoft.Extensions.AI.FunctionCallContent.CallId" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CallId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the function call ID.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromParsedArguments&lt;TEncoding&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.AI.FunctionCallContent CreateFromParsedArguments&lt;TEncoding&gt; (TEncoding encodedArguments, string callId, string name, Func&lt;TEncoding,System.Collections.Generic.IDictionary&lt;string,object?&gt;?&gt; argumentParser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.AI.FunctionCallContent CreateFromParsedArguments&lt;TEncoding&gt;(!!TEncoding encodedArguments, string callId, string name, class System.Func`2&lt;!!TEncoding, class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&gt; argumentParser) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.FunctionCallContent.CreateFromParsedArguments``1(``0,System.String,System.String,System.Func{``0,System.Collections.Generic.IDictionary{System.String,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromParsedArguments(Of TEncoding) (encodedArguments As TEncoding, callId As String, name As String, argumentParser As Func(Of TEncoding, IDictionary(Of String, Object))) As FunctionCallContent" />
      <MemberSignature Language="F#" Value="static member CreateFromParsedArguments : 'Encoding * string * string * Func&lt;'Encoding, System.Collections.Generic.IDictionary&lt;string, obj&gt;&gt; -&gt; Microsoft.Extensions.AI.FunctionCallContent" Usage="Microsoft.Extensions.AI.FunctionCallContent.CreateFromParsedArguments (encodedArguments, callId, name, argumentParser)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEncoding&gt;&#xA; static Microsoft::Extensions::AI::FunctionCallContent ^ CreateFromParsedArguments(TEncoding encodedArguments, System::String ^ callId, System::String ^ name, Func&lt;TEncoding, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^&gt; ^ argumentParser);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.FunctionCallContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEncoding">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="encodedArguments" Type="TEncoding" />
        <Parameter Name="callId" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="argumentParser" Type="System.Func&lt;TEncoding,System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 2, 1, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 2, 1, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEncoding">The encoding format from which to parse function call arguments.</typeparam>
        <param name="encodedArguments">The input arguments encoded in <typeparamref name="TEncoding" />.</param>
        <param name="callId">The function call ID.</param>
        <param name="name">The function name.</param>
        <param name="argumentParser">The parsing implementation converting the encoding to a dictionary of arguments.</param>
        <summary>
            Creates a new instance of <see cref="T:Microsoft.Extensions.AI.FunctionCallContent" /> parsing arguments using a specified encoding and parser.
            </summary>
        <returns>A new instance of <see cref="T:Microsoft.Extensions.AI.FunctionCallContent" /> containing the parse result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception? Exception { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.FunctionCallContent.Exception" />
      <MemberSignature Language="VB.NET" Value="Public Property Exception As Exception" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception with get, set" Usage="Microsoft.Extensions.AI.FunctionCallContent.Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Text.Json.Serialization.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Text.Json.Serialization.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets any exception that occurred while mapping the original function call data to this class.
            </summary>
        <value>To be added.</value>
        <remarks>
            This property is for information purposes only. The <see cref="P:Microsoft.Extensions.AI.FunctionCallContent.Exception" /> is not serialized as part of serializing
            instances of this class with <see cref="T:System.Text.Json.JsonSerializer" />; as such, upon deserialization, this property will be <see langword="null" />.
            Consumers should not rely on <see langword="null" /> indicating success. 
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.FunctionCallContent.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="Microsoft.Extensions.AI.FunctionCallContent.Name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Abstractions</AssemblyName>
        <AssemblyVersion>9.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the name of the function requested.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
