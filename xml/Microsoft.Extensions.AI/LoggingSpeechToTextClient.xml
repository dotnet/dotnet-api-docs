<Type Name="LoggingSpeechToTextClient" FullName="Microsoft.Extensions.AI.LoggingSpeechToTextClient">
  <TypeSignature Language="C#" Value="public class LoggingSpeechToTextClient : Microsoft.Extensions.AI.DelegatingSpeechToTextClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LoggingSpeechToTextClient extends Microsoft.Extensions.AI.DelegatingSpeechToTextClient" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.LoggingSpeechToTextClient" />
  <TypeSignature Language="VB.NET" Value="Public Class LoggingSpeechToTextClient&#xA;Inherits DelegatingSpeechToTextClient" />
  <TypeSignature Language="F#" Value="type LoggingSpeechToTextClient = class&#xA;    inherit DelegatingSpeechToTextClient" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingSpeechToTextClient : Microsoft::Extensions::AI::DelegatingSpeechToTextClient" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
    <AssemblyVersion>9.4.0.0</AssemblyVersion>
    <AssemblyVersion>9.5.0.0</AssemblyVersion>
    <AssemblyVersion>9.6.0.0</AssemblyVersion>
    <AssemblyVersion>9.7.0.0</AssemblyVersion>
    <AssemblyVersion>9.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Extensions.AI.DelegatingSpeechToTextClient</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("MEAI001")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("MEAI001")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A delegating speech to text client that logs speech to text operations to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />.</summary>
    <remarks>
      <para>
            The provided implementation of <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient" /> is thread-safe for concurrent use so long as the
            <see cref="T:Microsoft.Extensions.Logging.ILogger" /> employed is also thread-safe for concurrent use.
            </para>
      <para>
            When the employed <see cref="T:Microsoft.Extensions.Logging.ILogger" /> enables <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace" />, the contents of
            messages and options are logged. These messages and options may contain sensitive application data.
            <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace" /> is disabled by default and should never be enabled in a production environment.
            Messages and options are not logged at other logging levels.
            </para>
    </remarks>
    <para>
            The provided implementation of <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient" /> is thread-safe for concurrent use so long as the
            <see cref="T:Microsoft.Extensions.Logging.ILogger" /> employed is also thread-safe for concurrent use.
            </para>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LoggingSpeechToTextClient (Microsoft.Extensions.AI.ISpeechToTextClient innerClient, Microsoft.Extensions.Logging.ILogger logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.AI.ISpeechToTextClient innerClient, class Microsoft.Extensions.Logging.ILogger logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.LoggingSpeechToTextClient.#ctor(Microsoft.Extensions.AI.ISpeechToTextClient,Microsoft.Extensions.Logging.ILogger)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerClient As ISpeechToTextClient, logger As ILogger)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.AI.LoggingSpeechToTextClient : Microsoft.Extensions.AI.ISpeechToTextClient * Microsoft.Extensions.Logging.ILogger -&gt; Microsoft.Extensions.AI.LoggingSpeechToTextClient" Usage="new Microsoft.Extensions.AI.LoggingSpeechToTextClient (innerClient, logger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LoggingSpeechToTextClient(Microsoft::Extensions::AI::ISpeechToTextClient ^ innerClient, Microsoft::Extensions::Logging::ILogger ^ logger);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerClient" Type="Microsoft.Extensions.AI.ISpeechToTextClient" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" />
      </Parameters>
      <Docs>
        <param name="innerClient">The underlying <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient" />.</param>
        <param name="logger">An <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance that will be used for all logging.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.LoggingSpeechToTextClient" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStreamingTextAsync">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.SpeechToTextResponseUpdate&gt; GetStreamingTextAsync (System.IO.Stream audioSpeechStream, Microsoft.Extensions.AI.SpeechToTextOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Microsoft.Extensions.AI.SpeechToTextResponseUpdate&gt; GetStreamingTextAsync(class System.IO.Stream audioSpeechStream, class Microsoft.Extensions.AI.SpeechToTextOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.LoggingSpeechToTextClient.GetStreamingTextAsync(System.IO.Stream,Microsoft.Extensions.AI.SpeechToTextOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetStreamingTextAsync (audioSpeechStream As Stream, Optional options As SpeechToTextOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of SpeechToTextResponseUpdate)" />
      <MemberSignature Language="F#" Value="override this.GetStreamingTextAsync : System.IO.Stream * Microsoft.Extensions.AI.SpeechToTextOptions * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.SpeechToTextResponseUpdate&gt;" Usage="loggingSpeechToTextClient.GetStreamingTextAsync (audioSpeechStream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.AsyncIteratorStateMachine(typeof(Microsoft.Extensions.AI.LoggingSpeechToTextClient+&lt;GetStreamingTextAsync&gt;d__7))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.AsyncIteratorStateMachine(typeof(Microsoft.Extensions.AI.LoggingSpeechToTextClient+&lt;GetStreamingTextAsync&gt;d__7))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Microsoft.Extensions.AI.SpeechToTextResponseUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSpeechStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="Microsoft.Extensions.AI.SpeechToTextOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.EnumeratorCancellation]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.EnumeratorCancellation&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audioSpeechStream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetTextAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.SpeechToTextResponse&gt; GetTextAsync (System.IO.Stream audioSpeechStream, Microsoft.Extensions.AI.SpeechToTextOptions? options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Extensions.AI.SpeechToTextResponse&gt; GetTextAsync(class System.IO.Stream audioSpeechStream, class Microsoft.Extensions.AI.SpeechToTextOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.LoggingSpeechToTextClient.GetTextAsync(System.IO.Stream,Microsoft.Extensions.AI.SpeechToTextOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetTextAsync (audioSpeechStream As Stream, Optional options As SpeechToTextOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of SpeechToTextResponse)" />
      <MemberSignature Language="F#" Value="override this.GetTextAsync : System.IO.Stream * Microsoft.Extensions.AI.SpeechToTextOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.SpeechToTextResponse&gt;" Usage="loggingSpeechToTextClient.GetTextAsync (audioSpeechStream, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.SpeechToTextResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSpeechStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="Microsoft.Extensions.AI.SpeechToTextOptions">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="audioSpeechStream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="JsonSerializerOptions">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonSerializerOptions JsonSerializerOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonSerializerOptions JsonSerializerOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.AI.LoggingSpeechToTextClient.JsonSerializerOptions" />
      <MemberSignature Language="VB.NET" Value="Public Property JsonSerializerOptions As JsonSerializerOptions" />
      <MemberSignature Language="F#" Value="member this.JsonSerializerOptions : System.Text.Json.JsonSerializerOptions with get, set" Usage="Microsoft.Extensions.AI.LoggingSpeechToTextClient.JsonSerializerOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonSerializerOptions ^ JsonSerializerOptions { System::Text::Json::JsonSerializerOptions ^ get(); void set(System::Text::Json::JsonSerializerOptions ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonSerializerOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets JSON serialization options to use when serializing logging data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
