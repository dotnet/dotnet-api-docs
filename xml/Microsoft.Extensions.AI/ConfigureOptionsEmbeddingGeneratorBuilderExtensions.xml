<Type Name="ConfigureOptionsEmbeddingGeneratorBuilderExtensions" FullName="Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGeneratorBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class ConfigureOptionsEmbeddingGeneratorBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ConfigureOptionsEmbeddingGeneratorBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGeneratorBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ConfigureOptionsEmbeddingGeneratorBuilderExtensions" />
  <TypeSignature Language="F#" Value="type ConfigureOptionsEmbeddingGeneratorBuilderExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConfigureOptionsEmbeddingGeneratorBuilderExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides extensions for configuring <see cref="T:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGenerator`2" /> instances.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="UseEmbeddingGenerationOptions&lt;TInput,TEmbedding&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;TInput,TEmbedding&gt; UseEmbeddingGenerationOptions&lt;TInput,TEmbedding&gt; (this Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;TInput,TEmbedding&gt; builder, Func&lt;Microsoft.Extensions.AI.EmbeddingGenerationOptions?,Microsoft.Extensions.AI.EmbeddingGenerationOptions?&gt; configureOptions) where TEmbedding : Microsoft.Extensions.AI.Embedding;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2&lt;!!TInput, !!TEmbedding&gt; UseEmbeddingGenerationOptions&lt;TInput, (class Microsoft.Extensions.AI.Embedding) TEmbedding&gt;(class Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2&lt;!!TInput, !!TEmbedding&gt; builder, class System.Func`2&lt;class Microsoft.Extensions.AI.EmbeddingGenerationOptions, class Microsoft.Extensions.AI.EmbeddingGenerationOptions&gt; configureOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGeneratorBuilderExtensions.UseEmbeddingGenerationOptions``2(Microsoft.Extensions.AI.EmbeddingGeneratorBuilder{``0,``1},System.Func{Microsoft.Extensions.AI.EmbeddingGenerationOptions,Microsoft.Extensions.AI.EmbeddingGenerationOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseEmbeddingGenerationOptions(Of TInput, TEmbedding) (builder As EmbeddingGeneratorBuilder(Of TInput, TEmbedding), configureOptions As Func(Of EmbeddingGenerationOptions, EmbeddingGenerationOptions)) As EmbeddingGeneratorBuilder(Of TInput, TEmbedding)" />
      <MemberSignature Language="F#" Value="static member UseEmbeddingGenerationOptions : Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;'Input, 'Embedding (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)&gt; * Func&lt;Microsoft.Extensions.AI.EmbeddingGenerationOptions, Microsoft.Extensions.AI.EmbeddingGenerationOptions&gt; -&gt; Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;'Input, 'Embedding (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)&gt; (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)" Usage="Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGeneratorBuilderExtensions.UseEmbeddingGenerationOptions (builder, configureOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput, typename TEmbedding&gt;&#xA; where TEmbedding : Microsoft::Extensions::AI::Embedding[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::AI::EmbeddingGeneratorBuilder&lt;TInput, TEmbedding&gt; ^ UseEmbeddingGenerationOptions(Microsoft::Extensions::AI::EmbeddingGeneratorBuilder&lt;TInput, TEmbedding&gt; ^ builder, Func&lt;Microsoft::Extensions::AI::EmbeddingGenerationOptions ^, Microsoft::Extensions::AI::EmbeddingGenerationOptions ^&gt; ^ configureOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;TInput,TEmbedding&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.AI.Embedding</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.AI.EmbeddingGeneratorBuilder&lt;TInput,TEmbedding&gt;" RefType="this" />
        <Parameter Name="configureOptions" Type="System.Func&lt;Microsoft.Extensions.AI.EmbeddingGenerationOptions,Microsoft.Extensions.AI.EmbeddingGenerationOptions&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 2 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2, 2 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TInput">Specifies the type of the input passed to the generator.</typeparam>
        <typeparam name="TEmbedding">Specifies the type of the embedding instance produced by the generator.</typeparam>
        <param name="builder">The <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2" />.</param>
        <param name="configureOptions">
            The delegate to invoke to configure the <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions" /> instance. It is passed the caller-supplied
            <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions" /> instance and should return the configured <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions" /> instance to use.
            </param>
        <summary>
            Adds a callback that updates or replaces <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions" />. This can be used to set default options.
            </summary>
        <returns>The <paramref name="builder" />.</returns>
        <remarks>
          <para>
            The configuration callback is invoked with the caller-supplied <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions" /> instance. To override the caller-supplied options
            with a new instance, the callback may simply return that new instance, for example <c>_ =&gt; new EmbeddingGenerationOptions() { Dimensions = 100 }</c>. To provide
            a new instance only if the caller-supplied instance is <see langword="null" />, the callback may conditionally return a new instance, for example
            <c>options =&gt; options ?? new EmbeddingGenerationOptions() { Dimensions = 100 }</c>. Any changes to the caller-provided options instance will persist on the
            original instance, so the callback must take care to only do so when such mutations are acceptable, such as by cloning the original instance
            and mutating the clone, for example:
            <c>
            options =&gt;
            {
                var newOptions = options?.Clone() ?? new();
                newOptions.Dimensions = 100;
                return newOptions;
            }
            </c></para>
          <para>
            The callback may return <see langword="null" />, in which case a <see langword="null" /> options will be passed to the next generator in the pipeline.
            </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
