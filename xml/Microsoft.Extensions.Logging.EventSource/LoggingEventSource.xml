<Type Name="LoggingEventSource" FullName="Microsoft.Extensions.Logging.EventSource.LoggingEventSource">
  <TypeSignature Language="C#" Value="public sealed class LoggingEventSource : System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggingEventSource extends System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggingEventSource&#xA;Inherits EventSource" />
  <TypeSignature Language="F#" Value="type LoggingEventSource = class&#xA;    inherit EventSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingEventSource sealed : System::Diagnostics::Tracing::EventSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Tracing.EventSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Bridges all ILogger-based logging to EventSource/EventListener logging.
            </summary>
    <remarks>
      <para>
            To turn this logging on, you enable the EventSource called <c>Microsoft-Extensions-Logging</c>. When you enable the EventSource, the EventLevel you set is translated in to the level associated with the ILogger (thus <c>Debug</c> = <c>verbose</c>, <c>Informational</c> = <c>Informational</c>, <c>Critical</c> == <c>Critical</c>). This allows you to filter by event level in a straightforward way.
            </para>
      <para>
            For finer control, you can specify an EventSource argument called <c>FilterSpecs</c>. The <c>FilterSpecs</c> argument is a semicolon-separated list of specifications. Where each specification is:
            </para>
      <para>
            SPEC =                          // Empty spec, same as *.
            </para>
      <para>
                 | NAME                     // Named spec. Uses the default level.
            </para>
      <para>
                 | NAME : LEVEL             // Specifies level for a particular logger (can have a * suffix).
            </para>
      <para>
            When "UseAppFilters" is specified in the <c>FilterSpecs</c>, it avoids disabling all categories, which happens by default otherwise.
            </para>
      <para>
        <c>Name</c> is the name of an <see cref="T:Microsoft.Extensions.Logging.ILogger" /> (case matters), and can end with *, which acts as a wildcard. For example, <c>Net*</c> will match any loggers that start with 'Net'.
            </para>
      <para>
        <c>LEVEL</c> is a number or a <see cref="T:Microsoft.Extensions.Logging.LogLevel" /> string (0=Trace, 1=Debug, 2=Information, 3=Warning,  4=Error, Critical=5). This specifies the level for the associated pattern. If the number isn't specified (first form of the specification), it's the default level for the EventSource.
            </para>
      <para>
            The first match is used if a particular name matches more than one pattern.
            </para>
      <para>
            In addition to the level and <c>FilterSpecs</c> argument, you can also set EventSource keywords:
            </para>
      <para>
              * Keywords.Message - Event contains data in parsed form.
            </para>
      <para>
              * Keywords.JsonMessage - Event contains data in parsed form but as a JSON blob (not broken up by argument).
            </para>
      <para>
              * Keywords.FormattedMessage - Event contains data formatted as a string.
            </para>
      <para>
            It's expected that only one of these keywords is turned on at a time, but you can turn them all on (and get
            the same data logged three different ways).
            </para>
    </remarks>
    <example>
            This example shows how to use an EventListener to get ILogging information.
            <code language="csharp">
            class MyEventListener : EventListener {
                protected override void OnEventSourceCreated(EventSource eventSource) {
                    if (eventSource.Name == "Microsoft-Extensions-Logging") {
                        // Initialize a dictionary of arguments to pass to the EventSource.
                        // Turn on loggers matching App* to Information; everything else (*) is the default level (which is EventLevel.Error).
                        var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;*" } };
                        // Set the default level (verbosity) to Error, and only ask for the formatted messages in this case.
                        EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args);
                    }
                }
                protected override void OnEventWritten(EventWrittenEventArgs eventData) {
                    // Look for the formatted message event, which has the following argument layout (as defined in the LoggingEventSource):
                    // FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage);
                    if (eventData.EventName == "FormattedMessage")
                        Console.WriteLine($"Logger {eventData.Payload[2]}: {eventData.Payload[4]}");
                }
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName="OnEventCommand">
      <MemberSignature Language="C#" Value="protected override void OnEventCommand (System.Diagnostics.Tracing.EventCommandEventArgs command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEventCommand(class System.Diagnostics.Tracing.EventCommandEventArgs command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEventCommand (command As EventCommandEventArgs)" />
      <MemberSignature Language="F#" Value="override this.OnEventCommand : System.Diagnostics.Tracing.EventCommandEventArgs -&gt; unit" Usage="loggingEventSource.OnEventCommand command" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Diagnostics.Tracing.EventCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
