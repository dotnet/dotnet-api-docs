<Type Name="BuildManager" FullName="Microsoft.Build.Execution.BuildManager">
  <TypeSignature Language="C#" Value="public class BuildManager : IDisposable" FrameworkAlternate="msbuild-15;msbuild-15-netcore;msbuild-16;msbuild-16-netcore;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BuildManager extends System.Object implements class System.IDisposable" FrameworkAlternate="msbuild-15;msbuild-15-netcore;msbuild-16;msbuild-16-netcore;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Execution.BuildManager" />
  <TypeSignature Language="VB.NET" Value="Public Class BuildManager&#xA;Implements IDisposable" FrameworkAlternate="msbuild-15;msbuild-15-netcore;msbuild-16;msbuild-16-netcore;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class BuildManager : IDisposable" FrameworkAlternate="msbuild-15;msbuild-15-netcore;msbuild-16;msbuild-16-netcore;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type BuildManager = class&#xA;    interface IDisposable" FrameworkAlternate="msbuild-15;msbuild-15-netcore;msbuild-16;msbuild-16-netcore;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C#" Value="public class BuildManager" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BuildManager extends System.Object" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="VB.NET" Value="Public Class BuildManager" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class BuildManager" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="F#" Value="type BuildManager = class" FrameworkAlternate="netframework-4.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="msbuild-15;msbuild-15-netcore;msbuild-16;msbuild-16-netcore;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            This class is the public entry point for executing builds.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a new build manager without specifying a name.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BuildManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BuildManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
            Creates a new unnamed build manager.
            Normally there is only one build manager in a process, and it is the default build manager.
            Access it with <see cref="P:Microsoft.Build.Execution.BuildManager.DefaultBuildManager" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BuildManager (string hostName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BuildManager(System::String ^ hostName);" />
      <MemberSignature Language="F#" Value="new Microsoft.Build.Execution.BuildManager : string -&gt; Microsoft.Build.Execution.BuildManager" Usage="new Microsoft.Build.Execution.BuildManager hostName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostName">The host for the build manager.</param>
        <summary>
            Creates a new build manager with an arbitrary distinct name.
            Normally there is only one build manager in a process, and it is the default build manager.
            Access it with <see cref="P:Microsoft.Build.Execution.BuildManager.DefaultBuildManager" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Create a new BuildManager. Creating multiple multi-processor aware build managers is not supported due to conflicts in the NodeManager.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginBuild">
      <MemberSignature Language="C#" Value="public void BeginBuild (Microsoft.Build.Execution.BuildParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBuild(class Microsoft.Build.Execution.BuildParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.BeginBuild(Microsoft.Build.Execution.BuildParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBuild (parameters As BuildParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBuild(Microsoft::Build::Execution::BuildParameters ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.BeginBuild : Microsoft.Build.Execution.BuildParameters -&gt; unit" Usage="buildManager.BeginBuild parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.Build.Execution.BuildParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">The build parameters.  May be null.</param>
        <summary>
            Prepares the BuildManager to receive build requests.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if a build is already in progress.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginBuild">
      <MemberSignature Language="C#" Value="public void BeginBuild (Microsoft.Build.Execution.BuildParameters parameters, System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Execution.BuildManager.DeferredBuildMessage&gt; deferredBuildMessages);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBuild(class Microsoft.Build.Execution.BuildParameters parameters, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Build.Execution.BuildManager/DeferredBuildMessage&gt; deferredBuildMessages) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.BeginBuild(Microsoft.Build.Execution.BuildParameters,System.Collections.Generic.IEnumerable{Microsoft.Build.Execution.BuildManager.DeferredBuildMessage})" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBuild (parameters As BuildParameters, deferredBuildMessages As IEnumerable(Of BuildManager.DeferredBuildMessage))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBuild(Microsoft::Build::Execution::BuildParameters ^ parameters, System::Collections::Generic::IEnumerable&lt;Microsoft::Build::Execution::BuildManager::DeferredBuildMessage&gt; ^ deferredBuildMessages);" />
      <MemberSignature Language="F#" Value="member this.BeginBuild : Microsoft.Build.Execution.BuildParameters * seq&lt;Microsoft.Build.Execution.BuildManager.DeferredBuildMessage&gt; -&gt; unit" Usage="buildManager.BeginBuild (parameters, deferredBuildMessages)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.Build.Execution.BuildParameters" Index="0" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
        <Parameter Name="deferredBuildMessages" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Execution.BuildManager+DeferredBuildMessage&gt;" Index="1" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
      </Parameters>
      <Docs>
        <param name="parameters">The build parameters.  May be null.</param>
        <param name="deferredBuildMessages"> Build messages to be logged before the build begins. </param>
        <summary>
            Prepares the BuildManager to receive build requests.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if a build is already in progress.</exception>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Execution.BuildResult Build (Microsoft.Build.Execution.BuildParameters parameters, Microsoft.Build.Execution.BuildRequestData requestData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Build.Execution.BuildResult Build(class Microsoft.Build.Execution.BuildParameters parameters, class Microsoft.Build.Execution.BuildRequestData requestData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Execution.BuildRequestData)" />
      <MemberSignature Language="VB.NET" Value="Public Function Build (parameters As BuildParameters, requestData As BuildRequestData) As BuildResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Build::Execution::BuildResult ^ Build(Microsoft::Build::Execution::BuildParameters ^ parameters, Microsoft::Build::Execution::BuildRequestData ^ requestData);" />
      <MemberSignature Language="F#" Value="member this.Build : Microsoft.Build.Execution.BuildParameters * Microsoft.Build.Execution.BuildRequestData -&gt; Microsoft.Build.Execution.BuildResult" Usage="buildManager.Build (parameters, requestData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.Build.Execution.BuildParameters" />
        <Parameter Name="requestData" Type="Microsoft.Build.Execution.BuildRequestData" />
      </Parameters>
      <Docs>
        <param name="parameters">Build parameters.</param>
        <param name="requestData">Build request data.</param>
        <summary>
            Convenience method.  Submits a lone build request and blocks until results are available.
            </summary>
        <returns>The build result.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Convenience method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if a build is already in progress.</exception>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Graph.GraphBuildResult Build (Microsoft.Build.Execution.BuildParameters parameters, Microsoft.Build.Graph.GraphBuildRequestData requestData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Build.Graph.GraphBuildResult Build(class Microsoft.Build.Execution.BuildParameters parameters, class Microsoft.Build.Graph.GraphBuildRequestData requestData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Graph.GraphBuildRequestData)" />
      <MemberSignature Language="VB.NET" Value="Public Function Build (parameters As BuildParameters, requestData As GraphBuildRequestData) As GraphBuildResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Build::Graph::GraphBuildResult ^ Build(Microsoft::Build::Execution::BuildParameters ^ parameters, Microsoft::Build::Graph::GraphBuildRequestData ^ requestData);" />
      <MemberSignature Language="F#" Value="member this.Build : Microsoft.Build.Execution.BuildParameters * Microsoft.Build.Graph.GraphBuildRequestData -&gt; Microsoft.Build.Graph.GraphBuildResult" Usage="buildManager.Build (parameters, requestData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Graph.GraphBuildResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.Build.Execution.BuildParameters" Index="0" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
        <Parameter Name="requestData" Type="Microsoft.Build.Graph.GraphBuildRequestData" Index="1" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <param name="requestData">To be added.</param>
        <summary>
            Convenience method.  Submits a lone graph build request and blocks until results are available.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if a build is already in progress.</exception>
      </Docs>
    </Member>
    <Member MemberName="BuildRequest">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Execution.BuildResult BuildRequest (Microsoft.Build.Execution.BuildRequestData requestData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Build.Execution.BuildResult BuildRequest(class Microsoft.Build.Execution.BuildRequestData requestData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.BuildRequest(Microsoft.Build.Execution.BuildRequestData)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildRequest (requestData As BuildRequestData) As BuildResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Build::Execution::BuildResult ^ BuildRequest(Microsoft::Build::Execution::BuildRequestData ^ requestData);" />
      <MemberSignature Language="F#" Value="member this.BuildRequest : Microsoft.Build.Execution.BuildRequestData -&gt; Microsoft.Build.Execution.BuildResult" Usage="buildManager.BuildRequest requestData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestData" Type="Microsoft.Build.Execution.BuildRequestData" />
      </Parameters>
      <Docs>
        <param name="requestData">Build request.</param>
        <summary>
            Convenience method. Submits a build request and blocks until the results are available.
            </summary>
        <returns>The build result.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Convenience method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
      </Docs>
    </Member>
    <Member MemberName="BuildRequest">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Graph.GraphBuildResult BuildRequest (Microsoft.Build.Graph.GraphBuildRequestData requestData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Build.Graph.GraphBuildResult BuildRequest(class Microsoft.Build.Graph.GraphBuildRequestData requestData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.BuildRequest(Microsoft.Build.Graph.GraphBuildRequestData)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildRequest (requestData As GraphBuildRequestData) As GraphBuildResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Build::Graph::GraphBuildResult ^ BuildRequest(Microsoft::Build::Graph::GraphBuildRequestData ^ requestData);" />
      <MemberSignature Language="F#" Value="member this.BuildRequest : Microsoft.Build.Graph.GraphBuildRequestData -&gt; Microsoft.Build.Graph.GraphBuildResult" Usage="buildManager.BuildRequest requestData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Graph.GraphBuildResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestData" Type="Microsoft.Build.Graph.GraphBuildRequestData" Index="0" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
      </Parameters>
      <Docs>
        <param name="requestData">To be added.</param>
        <summary>
            Convenience method. Submits a graph build request and blocks until the results are available.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
      </Docs>
    </Member>
    <Member MemberName="CancelAllSubmissions">
      <MemberSignature Language="C#" Value="public void CancelAllSubmissions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAllSubmissions() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.CancelAllSubmissions" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAllSubmissions ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAllSubmissions();" />
      <MemberSignature Language="F#" Value="member this.CancelAllSubmissions : unit -&gt; unit" Usage="buildManager.CancelAllSubmissions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Cancels all outstanding submissions asynchronously.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultBuildManager">
      <MemberSignature Language="C#" Value="public static Microsoft.Build.Execution.BuildManager DefaultBuildManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Build.Execution.BuildManager DefaultBuildManager" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Execution.BuildManager.DefaultBuildManager" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBuildManager As BuildManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Build::Execution::BuildManager ^ DefaultBuildManager { Microsoft::Build::Execution::BuildManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBuildManager : Microsoft.Build.Execution.BuildManager" Usage="Microsoft.Build.Execution.BuildManager.DefaultBuildManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the singleton instance of the Build Manager.
            </summary>
        <value>The singleton instance of the Build Manager.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="buildManager.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Dispose of the build manager.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBuild">
      <MemberSignature Language="C#" Value="public void EndBuild ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBuild() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.EndBuild" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBuild ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBuild();" />
      <MemberSignature Language="F#" Value="member this.EndBuild : unit -&gt; unit" Usage="buildManager.EndBuild " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Signals that no more build requests are expected (or allowed) and the BuildManager may clean up.
            </summary>
        <remarks>
            This call blocks until all currently pending requests are complete.
            </remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if there is no build in progress.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BuildManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BuildManager ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="buildManager.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Finalizer
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProjectInstanceForBuild">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Execution.ProjectInstance GetProjectInstanceForBuild (Microsoft.Build.Evaluation.Project project);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Build.Execution.ProjectInstance GetProjectInstanceForBuild(class Microsoft.Build.Evaluation.Project project) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Microsoft.Build.Evaluation.Project)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProjectInstanceForBuild (project As Project) As ProjectInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Build::Execution::ProjectInstance ^ GetProjectInstanceForBuild(Microsoft::Build::Evaluation::Project ^ project);" />
      <MemberSignature Language="F#" Value="member this.GetProjectInstanceForBuild : Microsoft.Build.Evaluation.Project -&gt; Microsoft.Build.Execution.ProjectInstance" Usage="buildManager.GetProjectInstanceForBuild project" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.ProjectInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="Microsoft.Build.Evaluation.Project" />
      </Parameters>
      <Docs>
        <param name="project">The Project for which an instance should be retrieved.</param>
        <summary>
            This methods requests the BuildManager to find a matching ProjectInstance in its cache of previously-built projects.
            If none exist, a new instance will be created from the specified project.
            </summary>
        <returns>The instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PendBuildRequest">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Execution.BuildSubmission PendBuildRequest (Microsoft.Build.Execution.BuildRequestData requestData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Build.Execution.BuildSubmission PendBuildRequest(class Microsoft.Build.Execution.BuildRequestData requestData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.PendBuildRequest(Microsoft.Build.Execution.BuildRequestData)" />
      <MemberSignature Language="VB.NET" Value="Public Function PendBuildRequest (requestData As BuildRequestData) As BuildSubmission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Build::Execution::BuildSubmission ^ PendBuildRequest(Microsoft::Build::Execution::BuildRequestData ^ requestData);" />
      <MemberSignature Language="F#" Value="member this.PendBuildRequest : Microsoft.Build.Execution.BuildRequestData -&gt; Microsoft.Build.Execution.BuildSubmission" Usage="buildManager.PendBuildRequest requestData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Execution.BuildSubmission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestData" Type="Microsoft.Build.Execution.BuildRequestData" />
      </Parameters>
      <Docs>
        <param name="requestData">Build request data.</param>
        <summary>
            Submits a build request to the current build but does not start it immediately.  Allows the user to
            perform asynchronous execution or access the submission ID prior to executing the request.
            </summary>
        <returns>The submission that will be built.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
      </Docs>
    </Member>
    <Member MemberName="PendBuildRequest">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Graph.GraphBuildSubmission PendBuildRequest (Microsoft.Build.Graph.GraphBuildRequestData requestData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Build.Graph.GraphBuildSubmission PendBuildRequest(class Microsoft.Build.Graph.GraphBuildRequestData requestData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.PendBuildRequest(Microsoft.Build.Graph.GraphBuildRequestData)" />
      <MemberSignature Language="VB.NET" Value="Public Function PendBuildRequest (requestData As GraphBuildRequestData) As GraphBuildSubmission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Build::Graph::GraphBuildSubmission ^ PendBuildRequest(Microsoft::Build::Graph::GraphBuildRequestData ^ requestData);" />
      <MemberSignature Language="F#" Value="member this.PendBuildRequest : Microsoft.Build.Graph.GraphBuildRequestData -&gt; Microsoft.Build.Graph.GraphBuildSubmission" Usage="buildManager.PendBuildRequest requestData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Graph.GraphBuildSubmission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestData" Type="Microsoft.Build.Graph.GraphBuildRequestData" Index="0" FrameworkAlternate="msbuild-16;msbuild-16-netcore" />
      </Parameters>
      <Docs>
        <param name="requestData">To be added.</param>
        <summary>
            Submits a graph build request to the current build but does not start it immediately.  Allows the user to
            perform asynchronous execution or access the submission ID prior to executing the request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetCaches">
      <MemberSignature Language="C#" Value="public void ResetCaches ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetCaches() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.ResetCaches" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetCaches ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetCaches();" />
      <MemberSignature Language="F#" Value="member this.ResetCaches : unit -&gt; unit" Usage="buildManager.ResetCaches " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears out all of the cached information.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownAllNodes">
      <MemberSignature Language="C#" Value="public void ShutdownAllNodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownAllNodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Execution.BuildManager.ShutdownAllNodes" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownAllNodes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownAllNodes();" />
      <MemberSignature Language="F#" Value="member this.ShutdownAllNodes : unit -&gt; unit" Usage="buildManager.ShutdownAllNodes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Shuts down all idle MSBuild nodes on the machine
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
