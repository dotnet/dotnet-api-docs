<Type Name="DiskBasedResponseCacheProvider" FullName="Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCacheProvider">
  <TypeSignature Language="C#" Value="public sealed class DiskBasedResponseCacheProvider : Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DiskBasedResponseCacheProvider extends System.Object implements class Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCacheProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DiskBasedResponseCacheProvider&#xA;Implements IResponseCacheProvider" />
  <TypeSignature Language="F#" Value="type DiskBasedResponseCacheProvider = class&#xA;    interface IResponseCacheProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiskBasedResponseCacheProvider sealed : Microsoft::Extensions::AI::Evaluation::Reporting::IResponseCacheProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
    <AssemblyVersion>9.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <param name="storageRootPath">
            The path to a directory on disk under which the cached AI responses should be stored.
            </param>
    <summary>
            An <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider" /> that returns a <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCache" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DiskBasedResponseCacheProvider (string storageRootPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storageRootPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCacheProvider.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (storageRootPath As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCacheProvider : string -&gt; Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCacheProvider" Usage="new Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCacheProvider storageRootPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DiskBasedResponseCacheProvider(System::String ^ storageRootPath);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storageRootPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="storageRootPath">
            The path to a directory on disk under which the cached AI responses should be stored.
            </param>
        <summary>
            An <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider" /> that returns a <see cref="T:Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCache" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteExpiredCacheEntriesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DeleteExpiredCacheEntriesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DeleteExpiredCacheEntriesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCacheProvider.DeleteExpiredCacheEntriesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteExpiredCacheEntriesAsync (Optional cancellationToken As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DeleteExpiredCacheEntriesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DeleteExpiredCacheEntriesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="diskBasedResponseCacheProvider.DeleteExpiredCacheEntriesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider.DeleteExpiredCacheEntriesAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetCacheAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.Caching.Distributed.IDistributedCache&gt; GetCacheAsync (string scenarioName, string iterationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Microsoft.Extensions.Caching.Distributed.IDistributedCache&gt; GetCacheAsync(string scenarioName, string iterationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCacheProvider.GetCacheAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCacheAsync (scenarioName As String, iterationName As String, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of IDistributedCache)" />
      <MemberSignature Language="F#" Value="abstract member GetCacheAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.Caching.Distributed.IDistributedCache&gt;&#xA;override this.GetCacheAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.Caching.Distributed.IDistributedCache&gt;" Usage="diskBasedResponseCacheProvider.GetCacheAsync (scenarioName, iterationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider.GetCacheAsync(System.String,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Microsoft.Extensions.Caching.Distributed.IDistributedCache&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scenarioName" Type="System.String" />
        <Parameter Name="iterationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scenarioName">To be added.</param>
        <param name="iterationName">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ResetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask ResetAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask ResetAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.AI.Evaluation.Reporting.Storage.DiskBasedResponseCacheProvider.ResetAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResetAsync (Optional cancellationToken As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member ResetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&#xA;override this.ResetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="diskBasedResponseCacheProvider.ResetAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.AI.Evaluation.Reporting.IResponseCacheProvider.ResetAsync(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.AI.Evaluation.Reporting</AssemblyName>
        <AssemblyVersion>9.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
