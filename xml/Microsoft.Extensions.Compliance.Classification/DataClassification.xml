<Type Name="DataClassification" FullName="Microsoft.Extensions.Compliance.Classification.DataClassification">
  <TypeSignature Language="C#" Value="public readonly struct DataClassification : IEquatable&lt;Microsoft.Extensions.Compliance.Classification.DataClassification&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DataClassification extends System.ValueType implements class System.IEquatable`1&lt;valuetype Microsoft.Extensions.Compliance.Classification.DataClassification&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Compliance.Classification.DataClassification" />
  <TypeSignature Language="VB.NET" Value="Public Structure DataClassification&#xA;Implements IEquatable(Of DataClassification)" />
  <TypeSignature Language="F#" Value="type DataClassification = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class DataClassification : IEquatable&lt;Microsoft::Extensions::Compliance::Classification::DataClassification&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.Extensions.Compliance.Classification.DataClassification&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a set of data classes as a part of a data taxonomy.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataClassification (string taxonomyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string taxonomyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Classification.DataClassification.#ctor(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (taxonomyName As String, value As ULong)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Compliance.Classification.DataClassification : string * uint64 -&gt; Microsoft.Extensions.Compliance.Classification.DataClassification" Usage="new Microsoft.Extensions.Compliance.Classification.DataClassification (taxonomyName, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataClassification(System::String ^ taxonomyName, System::UInt64 value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="taxonomyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="taxonomyName">Name of the taxonomy this classification belongs to.</param>
        <param name="value">The taxonomy-specific bit vector representing the data classes.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Compliance.Classification.DataClassification" /> struct.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">If bit 63, corresponding to <see cref="F:Microsoft.Extensions.Compliance.Classification.DataClassification.UnknownTaxonomyValue" /> is set in the <paramref name="value" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Compliance.Classification.DataClassification Combine (Microsoft.Extensions.Compliance.Classification.DataClassification left, Microsoft.Extensions.Compliance.Classification.DataClassification right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Extensions.Compliance.Classification.DataClassification Combine(valuetype Microsoft.Extensions.Compliance.Classification.DataClassification left, valuetype Microsoft.Extensions.Compliance.Classification.DataClassification right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Classification.DataClassification.Combine(Microsoft.Extensions.Compliance.Classification.DataClassification,Microsoft.Extensions.Compliance.Classification.DataClassification)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (left As DataClassification, right As DataClassification) As DataClassification" />
      <MemberSignature Language="F#" Value="static member Combine : Microsoft.Extensions.Compliance.Classification.DataClassification * Microsoft.Extensions.Compliance.Classification.DataClassification -&gt; Microsoft.Extensions.Compliance.Classification.DataClassification" Usage="Microsoft.Extensions.Compliance.Classification.DataClassification.Combine (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::Compliance::Classification::DataClassification Combine(Microsoft::Extensions::Compliance::Classification::DataClassification left, Microsoft::Extensions::Compliance::Classification::DataClassification right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Classification.DataClassification</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
        <Parameter Name="right" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
      </Parameters>
      <Docs>
        <param name="left">The first classification to combine.</param>
        <param name="right">The second classification to combine.</param>
        <summary>
            Combines together two data classifications.
            </summary>
        <returns>A new classification object representing the combination of the two input classifications.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">if the two classifications aren't part of the same taxonomy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.Extensions.Compliance.Classification.DataClassification other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.Extensions.Compliance.Classification.DataClassification other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Classification.DataClassification.Equals(Microsoft.Extensions.Compliance.Classification.DataClassification)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DataClassification) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.Extensions.Compliance.Classification.DataClassification -&gt; bool" Usage="dataClassification.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::Extensions::Compliance::Classification::DataClassification other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
      </Parameters>
      <Docs>
        <param name="other">Instance of <see cref="T:Microsoft.Extensions.Compliance.Classification.DataClassification" /> to check for equality.</param>
        <summary>
            Checks if object is equal to this instance of <see cref="T:Microsoft.Extensions.Compliance.Classification.DataClassification" />.
            </summary>
        <returns>
          <see langword="true" /> if object instances are equal <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Classification.DataClassification.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dataClassification.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Object to check for equality.</param>
        <summary>
            Checks if object is equal to this instance of <see cref="T:Microsoft.Extensions.Compliance.Classification.DataClassification" />.
            </summary>
        <returns>
          <see langword="true" /> if object instances are equal <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Classification.DataClassification.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dataClassification.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Get the hash code the current instance.
            </summary>
        <returns>Hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Compliance.Classification.DataClassification None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.Extensions.Compliance.Classification.DataClassification None" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Compliance.Classification.DataClassification.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As DataClassification" />
      <MemberSignature Language="F#" Value="static member None : Microsoft.Extensions.Compliance.Classification.DataClassification" Usage="Microsoft.Extensions.Compliance.Classification.DataClassification.None" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Extensions::Compliance::Classification::DataClassification None { Microsoft::Extensions::Compliance::Classification::DataClassification get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Classification.DataClassification</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the value to represent data with no defined classification.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NoneTaxonomyValue">
      <MemberSignature Language="C#" Value="public const ulong NoneTaxonomyValue = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int64 NoneTaxonomyValue = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Extensions.Compliance.Classification.DataClassification.NoneTaxonomyValue" />
      <MemberSignature Language="VB.NET" Value="Public Const NoneTaxonomyValue As ULong  = 0" />
      <MemberSignature Language="F#" Value="val mutable NoneTaxonomyValue : uint64" Usage="Microsoft.Extensions.Compliance.Classification.DataClassification.NoneTaxonomyValue" />
      <MemberSignature Language="C++ CLI" Value="public: System::UInt64 NoneTaxonomyValue = 0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
            Represents unclassified data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseOr">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Compliance.Classification.DataClassification operator | (Microsoft.Extensions.Compliance.Classification.DataClassification left, Microsoft.Extensions.Compliance.Classification.DataClassification right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype Microsoft.Extensions.Compliance.Classification.DataClassification op_BitwiseOr(valuetype Microsoft.Extensions.Compliance.Classification.DataClassification left, valuetype Microsoft.Extensions.Compliance.Classification.DataClassification right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Classification.DataClassification.op_BitwiseOr(Microsoft.Extensions.Compliance.Classification.DataClassification,Microsoft.Extensions.Compliance.Classification.DataClassification)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Or (left As DataClassification, right As DataClassification) As DataClassification" />
      <MemberSignature Language="F#" Value="static member ( ||| ) : Microsoft.Extensions.Compliance.Classification.DataClassification * Microsoft.Extensions.Compliance.Classification.DataClassification -&gt; Microsoft.Extensions.Compliance.Classification.DataClassification" Usage="left ||| right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::Compliance::Classification::DataClassification operator |(Microsoft::Extensions::Compliance::Classification::DataClassification left, Microsoft::Extensions::Compliance::Classification::DataClassification right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Classification.DataClassification</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
        <Parameter Name="right" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
      </Parameters>
      <Docs>
        <param name="left">The first classification to combine.</param>
        <param name="right">The second classification to combine.</param>
        <summary>
            Combines together two data classifications.
            </summary>
        <returns>A new classification object representing the combination of the two input classifications.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">if the two classifications aren't part of the same taxonomy.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.Extensions.Compliance.Classification.DataClassification left, Microsoft.Extensions.Compliance.Classification.DataClassification right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype Microsoft.Extensions.Compliance.Classification.DataClassification left, valuetype Microsoft.Extensions.Compliance.Classification.DataClassification right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Classification.DataClassification.op_Equality(Microsoft.Extensions.Compliance.Classification.DataClassification,Microsoft.Extensions.Compliance.Classification.DataClassification)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DataClassification, right As DataClassification) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : Microsoft.Extensions.Compliance.Classification.DataClassification * Microsoft.Extensions.Compliance.Classification.DataClassification -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Microsoft::Extensions::Compliance::Classification::DataClassification left, Microsoft::Extensions::Compliance::Classification::DataClassification right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
        <Parameter Name="right" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
      </Parameters>
      <Docs>
        <param name="left">Left argument of the comparison.</param>
        <param name="right">Right argument of the comparison.</param>
        <summary>
            Check if two instances are equal.
            </summary>
        <returns>
          <see langword="true" /> if object instances are equal, or <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.Extensions.Compliance.Classification.DataClassification left, Microsoft.Extensions.Compliance.Classification.DataClassification right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype Microsoft.Extensions.Compliance.Classification.DataClassification left, valuetype Microsoft.Extensions.Compliance.Classification.DataClassification right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Compliance.Classification.DataClassification.op_Inequality(Microsoft.Extensions.Compliance.Classification.DataClassification,Microsoft.Extensions.Compliance.Classification.DataClassification)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DataClassification, right As DataClassification) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Microsoft.Extensions.Compliance.Classification.DataClassification * Microsoft.Extensions.Compliance.Classification.DataClassification -&gt; bool" Usage="Microsoft.Extensions.Compliance.Classification.DataClassification.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Microsoft::Extensions::Compliance::Classification::DataClassification left, Microsoft::Extensions::Compliance::Classification::DataClassification right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
        <Parameter Name="right" Type="Microsoft.Extensions.Compliance.Classification.DataClassification" />
      </Parameters>
      <Docs>
        <param name="left">Left argument of the comparison.</param>
        <param name="right">Right argument of the comparison.</param>
        <summary>
            Check if two instances are not equal.
            </summary>
        <returns>
          <see langword="false" /> if object instances are equal, or <see langword="true" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaxonomyName">
      <MemberSignature Language="C#" Value="public string TaxonomyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TaxonomyName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Compliance.Classification.DataClassification.TaxonomyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TaxonomyName As String" />
      <MemberSignature Language="F#" Value="member this.TaxonomyName : string" Usage="Microsoft.Extensions.Compliance.Classification.DataClassification.TaxonomyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TaxonomyName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the taxonomy that recognizes this classification.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unknown">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Compliance.Classification.DataClassification Unknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.Extensions.Compliance.Classification.DataClassification Unknown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Compliance.Classification.DataClassification.Unknown" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Unknown As DataClassification" />
      <MemberSignature Language="F#" Value="static member Unknown : Microsoft.Extensions.Compliance.Classification.DataClassification" Usage="Microsoft.Extensions.Compliance.Classification.DataClassification.Unknown" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Extensions::Compliance::Classification::DataClassification Unknown { Microsoft::Extensions::Compliance::Classification::DataClassification get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Compliance.Classification.DataClassification</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the value to represent data with an unknown classification.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownTaxonomyValue">
      <MemberSignature Language="C#" Value="public const ulong UnknownTaxonomyValue = 9223372036854775808;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int64 UnknownTaxonomyValue = (9223372036854775808)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Extensions.Compliance.Classification.DataClassification.UnknownTaxonomyValue" />
      <MemberSignature Language="VB.NET" Value="Public Const UnknownTaxonomyValue As ULong  = 9223372036854775808" />
      <MemberSignature Language="F#" Value="val mutable UnknownTaxonomyValue : uint64" Usage="Microsoft.Extensions.Compliance.Classification.DataClassification.UnknownTaxonomyValue" />
      <MemberSignature Language="C++ CLI" Value="public: System::UInt64 UnknownTaxonomyValue = 9223372036854775808;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <MemberValue>9223372036854775808</MemberValue>
      <Docs>
        <summary>
            Represents the unknown classification.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public ulong Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int64 Value" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Compliance.Classification.DataClassification.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As ULong" />
      <MemberSignature Language="F#" Value="member this.Value : uint64" Usage="Microsoft.Extensions.Compliance.Classification.DataClassification.Value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::UInt64 Value { System::UInt64 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Compliance.Abstractions</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the bit mask representing the data classes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
