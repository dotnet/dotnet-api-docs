<Type Name="IBufferDistributedCache" FullName="Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache">
  <TypeSignature Language="C#" Value="public interface IBufferDistributedCache : Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IBufferDistributedCache implements class Microsoft.Extensions.Caching.Distributed.IDistributedCache" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBufferDistributedCache&#xA;Implements IDistributedCache" />
  <TypeSignature Language="F#" Value="type IBufferDistributedCache = interface&#xA;    interface IDistributedCache" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBufferDistributedCache : Microsoft::Extensions::Caching::Distributed::IDistributedCache" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Caching.Hybrid</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Caching.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Caching.Distributed.IDistributedCache</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a distributed cache of serialized values, with support for low allocation data transfer.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (string key, System.Buffers.ReadOnlySequence&lt;byte&gt; value, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set(string key, valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; value, class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache.Set(System.String,System.Buffers.ReadOnlySequence{System.Byte},Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (key As String, value As ReadOnlySequence(Of Byte), options As DistributedCacheEntryOptions)" />
      <MemberSignature Language="F#" Value="abstract member Set : string * System.Buffers.ReadOnlySequence&lt;byte&gt; * Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions -&gt; unit" Usage="iBufferDistributedCache.Set (key, value, options)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Set(System::String ^ key, System::Buffers::ReadOnlySequence&lt;System::Byte&gt; value, Microsoft::Extensions::Caching::Distributed::DistributedCacheEntryOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Caching.Hybrid</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Caching.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" />
      </Parameters>
      <Docs>
        <param name="key">The key of the entry to create.</param>
        <param name="value">The value for this cache entry.</param>
        <param name="options">The cache options for the entry.</param>
        <summary>
            Sets or overwrites a cache item.
            </summary>
        <remarks>This is functionally similar to <see cref="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.Set(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)" />, but avoids the array allocation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask SetAsync (string key, System.Buffers.ReadOnlySequence&lt;byte&gt; value, Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options, System.Threading.CancellationToken token = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask SetAsync(string key, valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; value, class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions options, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache.SetAsync(System.String,System.Buffers.ReadOnlySequence{System.Byte},Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetAsync (key As String, value As ReadOnlySequence(Of Byte), options As DistributedCacheEntryOptions, Optional token As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member SetAsync : string * System.Buffers.ReadOnlySequence&lt;byte&gt; * Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="iBufferDistributedCache.SetAsync (key, value, options, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Caching.Hybrid</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Caching.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="net-9.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key">The key of the entry to create.</param>
        <param name="value">The value for this cache entry.</param>
        <param name="options">The cache options for the value.</param>
        <param name="token">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Asynchronously sets or overwrites a cache entry.
            </summary>
        <returns>To be added.</returns>
        <remarks>This is functionally similar to <see cref="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.SetAsync(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)" />, but avoids the array allocation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGet">
      <MemberSignature Language="C#" Value="public bool TryGet (string key, System.Buffers.IBufferWriter&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGet(string key, class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache.TryGet(System.String,System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGet (key As String, destination As IBufferWriter(Of Byte)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGet : string * System.Buffers.IBufferWriter&lt;byte&gt; -&gt; bool" Usage="iBufferDistributedCache.TryGet (key, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGet(System::String ^ key, System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Caching.Hybrid</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Caching.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="destination" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="key">The unique key for the cache item.</param>
        <param name="destination">The target to write the cache contents on success.</param>
        <summary>
            Attempt to retrieve an existing cache item.
            </summary>
        <returns>
          <c>true</c> if the cache item is found, <c>false</c> otherwise.</returns>
        <remarks>This is functionally similar to <see cref="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.Get(System.String)" />, but avoids the array allocation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;bool&gt; TryGetAsync (string key, System.Buffers.IBufferWriter&lt;byte&gt; destination, System.Threading.CancellationToken token = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; TryGetAsync(string key, class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; destination, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Caching.Distributed.IBufferDistributedCache.TryGetAsync(System.String,System.Buffers.IBufferWriter{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetAsync (key As String, destination As IBufferWriter(Of Byte), Optional token As CancellationToken = Nothing) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TryGetAsync : string * System.Buffers.IBufferWriter&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="iBufferDistributedCache.TryGetAsync (key, destination, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Caching.Hybrid</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Caching.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-9.0">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="destination" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key">The unique key for the cache entry.</param>
        <param name="destination">The target to write the cache contents on success.</param>
        <param name="token">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Asynchronously attempt to retrieve an existing cache entry.
            </summary>
        <returns>
          <c>true</c> if the cache entry is found, <c>false</c> otherwise.</returns>
        <remarks>This is functionally similar to <see cref="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.GetAsync(System.String,System.Threading.CancellationToken)" />, but avoids the array allocation.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
