<Type Name="ITextProvider" FullName="System.Windows.Automation.Provider.ITextProvider">
  <TypeSignature Language="C#" Value="public interface ITextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITextProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.ITextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITextProvider" />
  <TypeSignature Language="F#" Value="type ITextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("3589c92c-63f3-4367-99bb-ada653b77cf2")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exposes methods and properties to support UI Automation client access to controls that contain text.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.TextPattern> control pattern.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.TextPattern" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md">UI Automation Control Patterns Overview</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">Server-side UI Automation Provider Implementation</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3584c0a1-9cd0-4968-8b63-b06390890ef6">Client-side UI Automation Provider Implementation</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0d635c35-ffa8-4dc8-bbc9-12fcd5445776">Support Control Patterns in a UI Automation Provider</related>
    <related type="Article" href="https://msdn.microsoft.com/library/41787927-df1f-4f4a-aba3-641662854fc4">UI Automation TextPattern Overview</related>
  </Docs>
  <Members>
    <Member MemberName="DocumentRange">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider DocumentRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Provider.ITextRangeProvider DocumentRange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentRange As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Provider::ITextRangeProvider ^ DocumentRange { System::Windows::Automation::Provider::ITextRangeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentRange : System.Windows.Automation.Provider.ITextRangeProvider" Usage="System.Windows.Automation.Provider.ITextProvider.DocumentRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a text range that encloses the main text of a document.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Some auxiliary text such as headers, footnotes, or annotations may not be included.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetSelection">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider[] GetSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider[] GetSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextProvider.GetSelection" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelection () As ITextRangeProvider()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::Provider::ITextRangeProvider ^&gt; ^ GetSelection();" />
      <MemberSignature Language="F#" Value="abstract member GetSelection : unit -&gt; System.Windows.Automation.Provider.ITextRangeProvider[]" Usage="iTextProvider.GetSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a collection of disjoint text ranges associated with the current text selection or selections.</summary>
        <returns>A collection of disjoint text ranges.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For UI Automation providers that support text selection, the provider should implement this method and also return a <xref:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection%2A> value.  
  
 If no text is selected, <xref:System.Windows.Automation.Provider.ITextProvider.GetSelection%2A> returns the degenerate text range (empty range) at the position of the system cursor (text insertion point).  
  
 If the system cursor (text insertion point) is not present, <xref:System.Windows.Automation.Provider.ITextProvider.GetSelection%2A> may return a null reference (`Nothing` in Visual Basic).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">If the UI Automation provider does not support text selection.</exception>
        <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetVisibleRanges">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider[] GetVisibleRanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider[] GetVisibleRanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextProvider.GetVisibleRanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetVisibleRanges () As ITextRangeProvider()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::Provider::ITextRangeProvider ^&gt; ^ GetVisibleRanges();" />
      <MemberSignature Language="F#" Value="abstract member GetVisibleRanges : unit -&gt; System.Windows.Automation.Provider.ITextRangeProvider[]" Usage="iTextProvider.GetVisibleRanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves an array of disjoint text ranges from a text container where each text range begins with the first partially visible line through to the end of the last partially visible line.</summary>
        <returns>The collection of visible text ranges within the container or an empty array. A null reference (<see langword="Nothing" /> in Visual Basic) is never returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 UI Automation providers should ensure that they return, at most, the text ranges that are visible within the container.  
  
 Disjoint text ranges may occur when any content of a text container is obscured by an overlapping window or other object, or when a text container with a multi-column layout has one or more columns partially scrolled out of view.  
  
 If no text is visible, a degenerate (empty) text range is returned. This empty range can be returned if the text container is empty or when all text is scrolled out of view.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
      </Docs>
    </Member>
    <Member MemberName="RangeFromChild">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider RangeFromChild (System.Windows.Automation.Provider.IRawElementProviderSimple childElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider RangeFromChild(class System.Windows.Automation.Provider.IRawElementProviderSimple childElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextProvider.RangeFromChild(System.Windows.Automation.Provider.IRawElementProviderSimple)" />
      <MemberSignature Language="VB.NET" Value="Public Function RangeFromChild (childElement As IRawElementProviderSimple) As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ RangeFromChild(System::Windows::Automation::Provider::IRawElementProviderSimple ^ childElement);" />
      <MemberSignature Language="F#" Value="abstract member RangeFromChild : System.Windows.Automation.Provider.IRawElementProviderSimple -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextProvider.RangeFromChild childElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childElement" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
      </Parameters>
      <Docs>
        <param name="childElement">The enclosed object.</param>
        <summary>Retrieves a text range enclosing a child element such as an image, hyperlink, or other embedded object.</summary>
        <returns>A range that spans the child element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A UI Automation provider should check that the passed element is a child of the text container.  
  
 If there is no text in the range where the child element exists, a degenerate (empty) range is returned.  
  
 The `childElement` parameter is either a child of the <xref:System.Windows.Automation.AutomationElement> associated with a <xref:System.Windows.Automation.TextPattern> or from the array of children of a <xref:System.Windows.Automation.Text.TextPatternRange>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">If the child element is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
      </Docs>
    </Member>
    <Member MemberName="RangeFromPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider RangeFromPoint (System.Windows.Point screenLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider RangeFromPoint(valuetype System.Windows.Point screenLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextProvider.RangeFromPoint(System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function RangeFromPoint (screenLocation As Point) As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ RangeFromPoint(System::Windows::Point screenLocation);" />
      <MemberSignature Language="F#" Value="abstract member RangeFromPoint : System.Windows.Point -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextProvider.RangeFromPoint screenLocation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="screenLocation" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="screenLocation">The location in screen coordinates.</param>
        <summary>Returns the degenerate (empty) text range nearest to the specified screen coordinates.</summary>
        <returns>A degenerate range nearest the specified location. A null reference (<see langword="Nothing" /> in Visual Basic) is never returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A text range that encloses a child object is returned if the screen coordinates are within the coordinates of an image, hyperlink, or other embedded object.  
  
 Because hidden text is not ignored by <xref:System.Windows.Automation.Provider.ITextProvider.RangeFromPoint%2A> a degenerate range from the visible text closest to the given point is returned.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">If a given point is outside the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] element associated with the text pattern.</exception>
        <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
      </Docs>
    </Member>
    <Member MemberName="SupportedTextSelection">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.SupportedTextSelection SupportedTextSelection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.SupportedTextSelection SupportedTextSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportedTextSelection As SupportedTextSelection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::SupportedTextSelection SupportedTextSelection { System::Windows::Automation::SupportedTextSelection get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedTextSelection : System.Windows.Automation.SupportedTextSelection" Usage="System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.SupportedTextSelection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that specifies whether a text provider supports selection and, if so, the type of selection supported.</summary>
        <value>One of <see langword="None" />, <see langword="Single" />, or <see langword="Multiple" /> from <see cref="T:System.Windows.Automation.SupportedTextSelection" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />
      </Docs>
    </Member>
  </Members>
</Type>
