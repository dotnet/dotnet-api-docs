<Type Name="VectorStoreRecordVectorPropertyModel&lt;TInput&gt;" FullName="Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel&lt;TInput&gt;">
  <TypeSignature Language="C#" Value="public sealed class VectorStoreRecordVectorPropertyModel&lt;TInput&gt; : Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit VectorStoreRecordVectorPropertyModel`1&lt;TInput&gt; extends Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VectorStoreRecordVectorPropertyModel(Of TInput)&#xA;Inherits VectorStoreRecordVectorPropertyModel" />
  <TypeSignature Language="F#" Value="type VectorStoreRecordVectorPropertyModel&lt;'Input&gt; = class&#xA;    inherit VectorStoreRecordVectorPropertyModel" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput&gt;&#xA;public ref class VectorStoreRecordVectorPropertyModel sealed : Microsoft::Extensions::VectorData::ConnectorSupport::VectorStoreRecordVectorPropertyModel" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput">
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("MEVD9001")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("MEVD9001")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TInput">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
    <inheritdoc />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VectorStoreRecordVectorPropertyModel (string modelName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string modelName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel`1.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (modelName As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel&lt;'Input&gt; : string -&gt; Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel&lt;'Input&gt;" Usage="new Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel&lt;'Input&gt; modelName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VectorStoreRecordVectorPropertyModel(System::String ^ modelName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="modelName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedInputTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetSupportedInputTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetSupportedInputTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel`1.GetSupportedInputTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSupportedInputTypes () As Type()" />
      <MemberSignature Language="F#" Value="override this.GetSupportedInputTypes : unit -&gt; Type[]" Usage="vectorStoreRecordVectorPropertyModel.GetSupportedInputTypes " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetSupportedInputTypes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TryGenerateEmbedding&lt;TRecord,TEmbedding,TUnwrappedEmbedding&gt;">
      <MemberSignature Language="C#" Value="public override bool TryGenerateEmbedding&lt;TRecord,TEmbedding,TUnwrappedEmbedding&gt; (TRecord record, System.Threading.CancellationToken cancellationToken, out System.Threading.Tasks.Task&lt;TEmbedding&gt;? task) where TEmbedding : Microsoft.Extensions.AI.Embedding;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryGenerateEmbedding&lt;TRecord, (class Microsoft.Extensions.AI.Embedding) TEmbedding, TUnwrappedEmbedding&gt;(!!TRecord record, valuetype System.Threading.CancellationToken cancellationToken, [out] class System.Threading.Tasks.Task`1&lt;!!TEmbedding&gt;&amp; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel`1.TryGenerateEmbedding``3(``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryGenerateEmbedding(Of TRecord, TEmbedding, TUnwrappedEmbedding) (record As TRecord, cancellationToken As CancellationToken, ByRef task As Task(Of TEmbedding)) As Boolean" />
      <MemberSignature Language="F#" Value="override this.TryGenerateEmbedding : 'Record * System.Threading.CancellationToken * Task -&gt; bool (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)" Usage="vectorStoreRecordVectorPropertyModel.TryGenerateEmbedding (record, cancellationToken, task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TRecord, typename TEmbedding, typename TUnwrappedEmbedding&gt;&#xA; where TEmbedding : Microsoft::Extensions::AI::Embedding override bool TryGenerateEmbedding(TRecord record, System::Threading::CancellationToken cancellationToken, [Runtime::InteropServices::Out] System::Threading::Tasks::Task&lt;TEmbedding&gt; ^ % task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRecord" />
        <TypeParameter Name="TEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.AI.Embedding</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TUnwrappedEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="record" Type="TRecord" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;TEmbedding&gt;" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TRecord">To be added.</typeparam>
        <typeparam name="TEmbedding">To be added.</typeparam>
        <typeparam name="TUnwrappedEmbedding">To be added.</typeparam>
        <param name="record">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TryGenerateEmbeddings&lt;TRecord,TEmbedding,TUnwrappedEmbedding&gt;">
      <MemberSignature Language="C#" Value="public override bool TryGenerateEmbeddings&lt;TRecord,TEmbedding,TUnwrappedEmbedding&gt; (System.Collections.Generic.IEnumerable&lt;TRecord&gt; records, System.Threading.CancellationToken cancellationToken, out System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.GeneratedEmbeddings&lt;TEmbedding&gt;&gt;? task) where TEmbedding : Microsoft.Extensions.AI.Embedding;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TryGenerateEmbeddings&lt;TRecord, (class Microsoft.Extensions.AI.Embedding) TEmbedding, TUnwrappedEmbedding&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TRecord&gt; records, valuetype System.Threading.CancellationToken cancellationToken, [out] class System.Threading.Tasks.Task`1&lt;class Microsoft.Extensions.AI.GeneratedEmbeddings`1&lt;!!TEmbedding&gt;&gt;&amp; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel`1.TryGenerateEmbeddings``3(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.Extensions.AI.GeneratedEmbeddings{``1}}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TryGenerateEmbeddings(Of TRecord, TEmbedding, TUnwrappedEmbedding) (records As IEnumerable(Of TRecord), cancellationToken As CancellationToken, ByRef task As Task(Of GeneratedEmbeddings(Of TEmbedding))) As Boolean" />
      <MemberSignature Language="F#" Value="override this.TryGenerateEmbeddings : seq&lt;'Record&gt; * System.Threading.CancellationToken * Task -&gt; bool (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)" Usage="vectorStoreRecordVectorPropertyModel.TryGenerateEmbeddings (records, cancellationToken, task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TRecord, typename TEmbedding, typename TUnwrappedEmbedding&gt;&#xA; where TEmbedding : Microsoft::Extensions::AI::Embedding override bool TryGenerateEmbeddings(System::Collections::Generic::IEnumerable&lt;TRecord&gt; ^ records, System::Threading::CancellationToken cancellationToken, [Runtime::InteropServices::Out] System::Threading::Tasks::Task&lt;Microsoft::Extensions::AI::GeneratedEmbeddings&lt;TEmbedding&gt; ^&gt; ^ % task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRecord" />
        <TypeParameter Name="TEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.AI.Embedding</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TUnwrappedEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="records" Type="System.Collections.Generic.IEnumerable&lt;TRecord&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.GeneratedEmbeddings&lt;TEmbedding&gt;&gt;" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TRecord">To be added.</typeparam>
        <typeparam name="TEmbedding">To be added.</typeparam>
        <typeparam name="TUnwrappedEmbedding">To be added.</typeparam>
        <param name="records">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TrySetupEmbeddingGeneration&lt;TEmbedding,TUnwrappedEmbedding&gt;">
      <MemberSignature Language="C#" Value="public override bool TrySetupEmbeddingGeneration&lt;TEmbedding,TUnwrappedEmbedding&gt; (Microsoft.Extensions.AI.IEmbeddingGenerator embeddingGenerator, Type? embeddingType) where TEmbedding : Microsoft.Extensions.AI.Embedding;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool TrySetupEmbeddingGeneration&lt;(class Microsoft.Extensions.AI.Embedding) TEmbedding, TUnwrappedEmbedding&gt;(class Microsoft.Extensions.AI.IEmbeddingGenerator embeddingGenerator, class System.Type embeddingType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel`1.TrySetupEmbeddingGeneration``2(Microsoft.Extensions.AI.IEmbeddingGenerator,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function TrySetupEmbeddingGeneration(Of TEmbedding As Embedding, TUnwrappedEmbedding As Embedding) (embeddingGenerator As IEmbeddingGenerator, embeddingType As Type) As Boolean" />
      <MemberSignature Language="F#" Value="override this.TrySetupEmbeddingGeneration : Microsoft.Extensions.AI.IEmbeddingGenerator * Type -&gt; bool (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)" Usage="vectorStoreRecordVectorPropertyModel.TrySetupEmbeddingGeneration (embeddingGenerator, embeddingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEmbedding, typename TUnwrappedEmbedding&gt;&#xA; where TEmbedding : Microsoft::Extensions::AI::Embedding override bool TrySetupEmbeddingGeneration(Microsoft::Extensions::AI::IEmbeddingGenerator ^ embeddingGenerator, Type ^ embeddingType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.AI.Embedding</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TUnwrappedEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="embeddingGenerator" Type="Microsoft.Extensions.AI.IEmbeddingGenerator" />
        <Parameter Name="embeddingType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEmbedding">To be added.</typeparam>
        <typeparam name="TUnwrappedEmbedding">To be added.</typeparam>
        <param name="embeddingGenerator">To be added.</param>
        <param name="embeddingType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
