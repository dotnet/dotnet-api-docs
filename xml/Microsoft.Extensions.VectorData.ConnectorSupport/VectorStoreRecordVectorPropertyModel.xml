<Type Name="VectorStoreRecordVectorPropertyModel" FullName="Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel">
  <TypeSignature Language="C#" Value="public class VectorStoreRecordVectorPropertyModel : Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordPropertyModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VectorStoreRecordVectorPropertyModel extends Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordPropertyModel" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel" />
  <TypeSignature Language="VB.NET" Value="Public Class VectorStoreRecordVectorPropertyModel&#xA;Inherits VectorStoreRecordPropertyModel" />
  <TypeSignature Language="F#" Value="type VectorStoreRecordVectorPropertyModel = class&#xA;    inherit VectorStoreRecordPropertyModel" />
  <TypeSignature Language="C++ CLI" Value="public ref class VectorStoreRecordVectorPropertyModel : Microsoft::Extensions::VectorData::ConnectorSupport::VectorStoreRecordPropertyModel" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordPropertyModel</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.Experimental("MEVD9001")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.Experimental("MEVD9001")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a vector property on a vector store record.
            This is an internal support type meant for use by connectors only, and not for use by applications.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VectorStoreRecordVectorPropertyModel (string modelName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string modelName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (modelName As String, type As Type)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel : string * Type -&gt; Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel" Usage="new Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel (modelName, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VectorStoreRecordVectorPropertyModel(System::String ^ modelName, Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="modelName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="modelName">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
            Represents a vector property on a vector store record.
            This is an internal support type meant for use by connectors only, and not for use by applications.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dimensions">
      <MemberSignature Language="C#" Value="public int Dimensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Dimensions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.Dimensions" />
      <MemberSignature Language="VB.NET" Value="Public Property Dimensions As Integer" />
      <MemberSignature Language="F#" Value="member this.Dimensions : int with get, set" Usage="Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.Dimensions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Dimensions { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The number of dimensions that the vector has.
            </summary>
        <value>To be added.</value>
        <remarks>
            This property is required when creating collections, but can be omitted if not using that functionality.
            If not provided when trying to create a collection, create will fail.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DistanceFunction">
      <MemberSignature Language="C#" Value="public string? DistanceFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DistanceFunction" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.DistanceFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property DistanceFunction As String" />
      <MemberSignature Language="F#" Value="member this.DistanceFunction : string with get, set" Usage="Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.DistanceFunction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DistanceFunction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The distance function to use when comparing vectors.
            </summary>
        <value>
            The default varies by database type. See the documentation of your chosen database connector for more information.
            </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.Extensions.VectorData.DistanceFunction" />
      </Docs>
    </Member>
    <Member MemberName="EmbeddingGenerator">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.AI.IEmbeddingGenerator? EmbeddingGenerator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.AI.IEmbeddingGenerator EmbeddingGenerator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Property EmbeddingGenerator As IEmbeddingGenerator" />
      <MemberSignature Language="F#" Value="member this.EmbeddingGenerator : Microsoft.Extensions.AI.IEmbeddingGenerator with get, set" Usage="Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::AI::IEmbeddingGenerator ^ EmbeddingGenerator { Microsoft::Extensions::AI::IEmbeddingGenerator ^ get(); void set(Microsoft::Extensions::AI::IEmbeddingGenerator ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.AI.IEmbeddingGenerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The embedding generator to use for this property.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmbeddingType">
      <MemberSignature Language="C#" Value="public Type EmbeddingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EmbeddingType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingType" />
      <MemberSignature Language="VB.NET" Value="Public Property EmbeddingType As Type" />
      <MemberSignature Language="F#" Value="member this.EmbeddingType : Type with get, set" Usage="Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ EmbeddingType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" /> is set, contains the type representing the embedding stored in the database.
            Otherwise, this property is identical to <see cref="T:System.Type" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedInputTypes">
      <MemberSignature Language="C#" Value="public virtual Type[] GetSupportedInputTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetSupportedInputTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.GetSupportedInputTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSupportedInputTypes () As Type()" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedInputTypes : unit -&gt; Type[]&#xA;override this.GetSupportedInputTypes : unit -&gt; Type[]" Usage="vectorStoreRecordVectorPropertyModel.GetSupportedInputTypes " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetSupportedInputTypes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the types of input that this property model supports.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexKind">
      <MemberSignature Language="C#" Value="public string? IndexKind { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndexKind" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.IndexKind" />
      <MemberSignature Language="VB.NET" Value="Public Property IndexKind As String" />
      <MemberSignature Language="F#" Value="member this.IndexKind : string with get, set" Usage="Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.IndexKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndexKind { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The kind of index to use.
            </summary>
        <value>
            The default varies by database type. See the documentation of your chosen database connector for more information.
            </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.Extensions.VectorData.IndexKind" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="vectorStoreRecordVectorPropertyModel.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TryGenerateEmbedding&lt;TRecord,TEmbedding,TUnwrappedEmbedding&gt;">
      <MemberSignature Language="C#" Value="public virtual bool TryGenerateEmbedding&lt;TRecord,TEmbedding,TUnwrappedEmbedding&gt; (TRecord record, System.Threading.CancellationToken cancellationToken, out System.Threading.Tasks.Task&lt;TEmbedding&gt;? task) where TEmbedding : Microsoft.Extensions.AI.Embedding;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGenerateEmbedding&lt;TRecord, (class Microsoft.Extensions.AI.Embedding) TEmbedding, TUnwrappedEmbedding&gt;(!!TRecord record, valuetype System.Threading.CancellationToken cancellationToken, [out] class System.Threading.Tasks.Task`1&lt;!!TEmbedding&gt;&amp; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.TryGenerateEmbedding``3(``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGenerateEmbedding(Of TRecord, TEmbedding, TUnwrappedEmbedding) (record As TRecord, cancellationToken As CancellationToken, ByRef task As Task(Of TEmbedding)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGenerateEmbedding : 'Record * System.Threading.CancellationToken * Task -&gt; bool (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)&#xA;override this.TryGenerateEmbedding : 'Record * System.Threading.CancellationToken * Task -&gt; bool (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)" Usage="vectorStoreRecordVectorPropertyModel.TryGenerateEmbedding (record, cancellationToken, task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TRecord, typename TEmbedding, typename TUnwrappedEmbedding&gt;&#xA; where TEmbedding : Microsoft::Extensions::AI::Embedding virtual bool TryGenerateEmbedding(TRecord record, System::Threading::CancellationToken cancellationToken, [Runtime::InteropServices::Out] System::Threading::Tasks::Task&lt;TEmbedding&gt; ^ % task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRecord" />
        <TypeParameter Name="TEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.AI.Embedding</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TUnwrappedEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="record" Type="TRecord" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;TEmbedding&gt;" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TRecord">To be added.</typeparam>
        <typeparam name="TEmbedding">To be added.</typeparam>
        <typeparam name="TUnwrappedEmbedding">To be added.</typeparam>
        <param name="record">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <param name="task">To be added.</param>
        <summary>
            Attempts to generate an embedding of type <typeparamref name="TEmbedding" /> from the vector property represented by this instance on the given <paramref name="record" />, using
            the configured <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            If <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" /> supports the given <typeparamref name="TEmbedding" />, returns <see langword="true" /> and sets <paramref name="task" /> to a <see cref="T:System.Threading.Tasks.Task" />
            representing the embedding generation operation. If <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" /> does not support the given <typeparamref name="TEmbedding" />, returns <see langword="false" />.
            </para>
          <para>
            The implementation on this non-generic <see cref="T:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel" /> checks for <see cref="T:System.String" />
            and <see cref="T:Microsoft.Extensions.AI.DataContent" /> as input types for <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" />.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGenerateEmbeddings&lt;TRecord,TEmbedding,TUnwrappedEmbedding&gt;">
      <MemberSignature Language="C#" Value="public virtual bool TryGenerateEmbeddings&lt;TRecord,TEmbedding,TUnwrappedEmbedding&gt; (System.Collections.Generic.IEnumerable&lt;TRecord&gt; records, System.Threading.CancellationToken cancellationToken, out System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.GeneratedEmbeddings&lt;TEmbedding&gt;&gt;? task) where TEmbedding : Microsoft.Extensions.AI.Embedding;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGenerateEmbeddings&lt;TRecord, (class Microsoft.Extensions.AI.Embedding) TEmbedding, TUnwrappedEmbedding&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TRecord&gt; records, valuetype System.Threading.CancellationToken cancellationToken, [out] class System.Threading.Tasks.Task`1&lt;class Microsoft.Extensions.AI.GeneratedEmbeddings`1&lt;!!TEmbedding&gt;&gt;&amp; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.TryGenerateEmbeddings``3(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.Extensions.AI.GeneratedEmbeddings{``1}}@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGenerateEmbeddings(Of TRecord, TEmbedding, TUnwrappedEmbedding) (records As IEnumerable(Of TRecord), cancellationToken As CancellationToken, ByRef task As Task(Of GeneratedEmbeddings(Of TEmbedding))) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGenerateEmbeddings : seq&lt;'Record&gt; * System.Threading.CancellationToken * Task -&gt; bool (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)&#xA;override this.TryGenerateEmbeddings : seq&lt;'Record&gt; * System.Threading.CancellationToken * Task -&gt; bool (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)" Usage="vectorStoreRecordVectorPropertyModel.TryGenerateEmbeddings (records, cancellationToken, task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TRecord, typename TEmbedding, typename TUnwrappedEmbedding&gt;&#xA; where TEmbedding : Microsoft::Extensions::AI::Embedding virtual bool TryGenerateEmbeddings(System::Collections::Generic::IEnumerable&lt;TRecord&gt; ^ records, System::Threading::CancellationToken cancellationToken, [Runtime::InteropServices::Out] System::Threading::Tasks::Task&lt;Microsoft::Extensions::AI::GeneratedEmbeddings&lt;TEmbedding&gt; ^&gt; ^ % task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRecord" />
        <TypeParameter Name="TEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.AI.Embedding</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TUnwrappedEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="records" Type="System.Collections.Generic.IEnumerable&lt;TRecord&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;Microsoft.Extensions.AI.GeneratedEmbeddings&lt;TEmbedding&gt;&gt;" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TRecord">To be added.</typeparam>
        <typeparam name="TEmbedding">To be added.</typeparam>
        <typeparam name="TUnwrappedEmbedding">To be added.</typeparam>
        <param name="records">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <param name="task">To be added.</param>
        <summary>
            Attempts to generate embeddings of type <typeparamref name="TEmbedding" /> from the vector property represented by this instance on the given <paramref name="records" />, using
            the configured <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            If <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" /> supports the given <typeparamref name="TEmbedding" />, returns <see langword="true" /> and sets <paramref name="task" /> to a <see cref="T:System.Threading.Tasks.Task" />
            representing the embedding generation operation. If <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" /> does not support the given <typeparamref name="TEmbedding" />, returns <see langword="false" />.
            </para>
          <para>
            The implementation on this non-generic <see cref="T:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel" /> checks for <see cref="T:System.String" />
            and <see cref="T:Microsoft.Extensions.AI.DataContent" /> as input types for <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" />.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetupEmbeddingGeneration&lt;TEmbedding,TUnwrappedEmbedding&gt;">
      <MemberSignature Language="C#" Value="public virtual bool TrySetupEmbeddingGeneration&lt;TEmbedding,TUnwrappedEmbedding&gt; (Microsoft.Extensions.AI.IEmbeddingGenerator embeddingGenerator, Type? embeddingType) where TEmbedding : Microsoft.Extensions.AI.Embedding;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetupEmbeddingGeneration&lt;(class Microsoft.Extensions.AI.Embedding) TEmbedding, TUnwrappedEmbedding&gt;(class Microsoft.Extensions.AI.IEmbeddingGenerator embeddingGenerator, class System.Type embeddingType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.TrySetupEmbeddingGeneration``2(Microsoft.Extensions.AI.IEmbeddingGenerator,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetupEmbeddingGeneration(Of TEmbedding As Embedding, TUnwrappedEmbedding As Embedding) (embeddingGenerator As IEmbeddingGenerator, embeddingType As Type) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TrySetupEmbeddingGeneration : Microsoft.Extensions.AI.IEmbeddingGenerator * Type -&gt; bool (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)&#xA;override this.TrySetupEmbeddingGeneration : Microsoft.Extensions.AI.IEmbeddingGenerator * Type -&gt; bool (requires 'Embedding :&gt; Microsoft.Extensions.AI.Embedding)" Usage="vectorStoreRecordVectorPropertyModel.TrySetupEmbeddingGeneration (embeddingGenerator, embeddingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEmbedding, typename TUnwrappedEmbedding&gt;&#xA; where TEmbedding : Microsoft::Extensions::AI::Embedding virtual bool TrySetupEmbeddingGeneration(Microsoft::Extensions::AI::IEmbeddingGenerator ^ embeddingGenerator, Type ^ embeddingType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.VectorData.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
          <Constraints>
            <BaseTypeName>Microsoft.Extensions.AI.Embedding</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TUnwrappedEmbedding">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="embeddingGenerator" Type="Microsoft.Extensions.AI.IEmbeddingGenerator" />
        <Parameter Name="embeddingType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="net-10.0-pp;net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEmbedding">To be added.</typeparam>
        <typeparam name="TUnwrappedEmbedding">To be added.</typeparam>
        <param name="embeddingGenerator">To be added.</param>
        <param name="embeddingType">To be added.</param>
        <summary>
            Checks whether the <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" /> configured on this property supports the given embedding type.
            The implementation on this non-generic <see cref="T:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel" /> checks for <see cref="T:System.String" />
            and <see cref="T:Microsoft.Extensions.AI.DataContent" /> as input types for <see cref="P:Microsoft.Extensions.VectorData.ConnectorSupport.VectorStoreRecordVectorPropertyModel.EmbeddingGenerator" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
