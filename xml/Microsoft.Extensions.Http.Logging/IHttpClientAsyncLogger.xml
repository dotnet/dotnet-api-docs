<Type Name="IHttpClientAsyncLogger" FullName="Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger">
  <TypeSignature Language="C#" Value="public interface IHttpClientAsyncLogger : Microsoft.Extensions.Http.Logging.IHttpClientLogger" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IHttpClientAsyncLogger implements class Microsoft.Extensions.Http.Logging.IHttpClientLogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpClientAsyncLogger&#xA;Implements IHttpClientLogger" />
  <TypeSignature Language="F#" Value="type IHttpClientAsyncLogger = interface&#xA;    interface IHttpClientLogger" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpClientAsyncLogger : Microsoft::Extensions::Http::Logging::IHttpClientLogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Http.Logging.IHttpClientLogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An abstraction for asyncronous custom HTTP request logging for a named <see cref="T:System.Net.Http.HttpClient" /> instances returned by <see cref="T:System.Net.Http.IHttpClientFactory" />.
            </summary>
    <remarks>
      <para>
            Asyncronous methods (such as <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStartAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />) would be called from async code paths (such as
            <see cref="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />), and their
            syncronous counterparts inherited from <see cref="T:Microsoft.Extensions.Http.Logging.IHttpClientLogger" /> (such as <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientLogger.LogRequestStart(System.Net.Http.HttpRequestMessage)" />)
            would be called from the corresponding sync code paths.
            </para>
      <para>
            It is up to the user implementing the interface to decide where (to <see cref="T:Microsoft.Extensions.Logging.ILogger" />, or anything else) and what exactly to log.
            However, the implementation should be mindful about potential adverse side effects of accessing some of the <see cref="T:System.Net.Http.HttpRequestMessage" /> or
            <see cref="T:System.Net.Http.HttpResponseMessage" /> properties, such as reading from a content stream; if possible, such behavior should be avoided.
            </para>
      <para>
            Logging implementation also should not throw any exceptions, as an unhandled exception in logging would fail the request.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="LogRequestFailedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask LogRequestFailedAsync (object? context, System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpResponseMessage? response, Exception exception, TimeSpan elapsed, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask LogRequestFailedAsync(object context, class System.Net.Http.HttpRequestMessage request, class System.Net.Http.HttpResponseMessage response, class System.Exception exception, valuetype System.TimeSpan elapsed, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestFailedAsync(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.Exception,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogRequestFailedAsync (context As Object, request As HttpRequestMessage, response As HttpResponseMessage, exception As Exception, elapsed As TimeSpan, Optional cancellationToken As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member LogRequestFailedAsync : obj * System.Net.Http.HttpRequestMessage * System.Net.Http.HttpResponseMessage * Exception * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="iHttpClientAsyncLogger.LogRequestFailedAsync (context, request, response, exception, elapsed, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Object">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="response" Type="System.Net.Http.HttpResponseMessage">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="elapsed" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="context">The context object that was previously returned by <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStartAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />.</param>
        <param name="request">The HTTP request message that was sent.</param>
        <param name="response">If available, the HTTP response message that was received, and <see langword="null" /> otherwise.</param>
        <param name="exception">Exception that happened during processing the HTTP request.</param>
        <param name="elapsed">Time elapsed since calling <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStartAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />.</param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Logs the exception happened while sending an HTTP request.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      </Docs>
    </Member>
    <Member MemberName="LogRequestStartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;object?&gt; LogRequestStartAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; LogRequestStartAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStartAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogRequestStartAsync (request As HttpRequestMessage, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Object)" />
      <MemberSignature Language="F#" Value="abstract member LogRequestStartAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="iHttpClientAsyncLogger.LogRequestStartAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="net-8.0-pp">
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request">The HTTP request message that will be sent.</param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Logs before sending an HTTP request.
            </summary>
        <returns>The task object representing the asynchronous operation. The result of the operation is a context object that will
            be passed to a corresponding <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStopAsync(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.TimeSpan,System.Threading.CancellationToken)" /> or <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestFailedAsync(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.Exception,System.TimeSpan,System.Threading.CancellationToken)" />. Can be <see langword="null" />
            if no context object is needed by the implementation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      </Docs>
    </Member>
    <Member MemberName="LogRequestStopAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask LogRequestStopAsync (object? context, System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpResponseMessage response, TimeSpan elapsed, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask LogRequestStopAsync(object context, class System.Net.Http.HttpRequestMessage request, class System.Net.Http.HttpResponseMessage response, valuetype System.TimeSpan elapsed, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStopAsync(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogRequestStopAsync (context As Object, request As HttpRequestMessage, response As HttpResponseMessage, elapsed As TimeSpan, Optional cancellationToken As CancellationToken = Nothing) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member LogRequestStopAsync : obj * System.Net.Http.HttpRequestMessage * System.Net.Http.HttpResponseMessage * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="iHttpClientAsyncLogger.LogRequestStopAsync (context, request, response, elapsed, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Http</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Object">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0-pp;net-9.0-pp">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="response" Type="System.Net.Http.HttpResponseMessage" />
        <Parameter Name="elapsed" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="context">The context object that was previously returned by <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStartAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />.</param>
        <param name="request">The HTTP request message that was sent.</param>
        <param name="response">The HTTP response message that was received.</param>
        <param name="elapsed">Time elapsed since calling <see cref="M:Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger.LogRequestStartAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />.</param>
        <param name="cancellationToken">The cancellation token to cancel operation.</param>
        <summary>
            Logs after receiving an HTTP response.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
