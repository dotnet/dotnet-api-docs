<Type Name="ValidateSymbolResult&lt;T&gt;" FullName="System.CommandLine.Parsing.ValidateSymbolResult&lt;T&gt;">
  <TypeSignature Language="C#" Value="public delegate void ValidateSymbolResult&lt;in T&gt;(T symbolResult) where T : SymbolResult;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ValidateSymbolResult`1&lt;(class System.CommandLine.Parsing.SymbolResult) - T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.Parsing.ValidateSymbolResult`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ValidateSymbolResult(Of In T)(symbolResult As T)" />
  <TypeSignature Language="F#" Value="type ValidateSymbolResult&lt;'T (requires 'T :&gt; SymbolResult)&gt; = delegate of 'T -&gt; unit" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA; where T : SymbolResultpublic delegate void ValidateSymbolResult(T symbolResult);" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
        <BaseTypeName>System.CommandLine.Parsing.SymbolResult</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="symbolResult" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">The type of the <see cref="T:System.CommandLine.Parsing.SymbolResult" />.</typeparam>
    <param name="symbolResult">The symbol result</param>
    <summary>
            A delegate used to validate symbol results during parsing.
            </summary>
    <remarks>To display an error, set <see cref="P:System.CommandLine.Parsing.SymbolResult.ErrorMessage" />.</remarks>
  </Docs>
</Type>
