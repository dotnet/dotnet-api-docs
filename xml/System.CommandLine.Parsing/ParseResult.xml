<Type Name="ParseResult" FullName="System.CommandLine.Parsing.ParseResult">
  <TypeSignature Language="C#" Value="public class ParseResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParseResult extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.Parsing.ParseResult" />
  <TypeSignature Language="VB.NET" Value="Public Class ParseResult" />
  <TypeSignature Language="F#" Value="type ParseResult = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParseResult" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Describes the results of parsing a command line input based on a specific parser configuration.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CommandResult">
      <MemberSignature Language="C#" Value="public System.CommandLine.Parsing.CommandResult CommandResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.Parsing.CommandResult CommandResult" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Parsing.ParseResult.CommandResult" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandResult As CommandResult" />
      <MemberSignature Language="F#" Value="member this.CommandResult : System.CommandLine.Parsing.CommandResult" Usage="System.CommandLine.Parsing.ParseResult.CommandResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::Parsing::CommandResult ^ CommandResult { System::CommandLine::Parsing::CommandResult ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.CommandResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A result indicating the command specified in the command line input.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Directives">
      <MemberSignature Language="C#" Value="public System.CommandLine.DirectiveCollection Directives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.DirectiveCollection Directives" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Parsing.ParseResult.Directives" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Directives As DirectiveCollection" />
      <MemberSignature Language="F#" Value="member this.Directives : System.CommandLine.DirectiveCollection" Usage="System.CommandLine.Parsing.ParseResult.Directives" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::DirectiveCollection ^ Directives { System::CommandLine::DirectiveCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.DirectiveCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the directives found while parsing command line input.
            </summary>
        <value>To be added.</value>
        <remarks>If <see cref="P:System.CommandLine.CommandLineConfiguration.EnableDirectives" /> is set to <see langword="false" />, then this collection will be empty.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Parsing.ParseError&gt; Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class System.CommandLine.Parsing.ParseError&gt; Errors" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Parsing.ParseResult.Errors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Errors As IReadOnlyList(Of ParseError)" />
      <MemberSignature Language="F#" Value="member this.Errors : System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Parsing.ParseError&gt;" Usage="System.CommandLine.Parsing.ParseResult.Errors" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;System::CommandLine::Parsing::ParseError ^&gt; ^ Errors { System::Collections::Generic::IReadOnlyList&lt;System::CommandLine::Parsing::ParseError ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Parsing.ParseError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the parse errors found while parsing command line input.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindResultFor">
      <MemberSignature Language="C#" Value="public System.CommandLine.Parsing.ArgumentResult? FindResultFor (System.CommandLine.Argument argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CommandLine.Parsing.ArgumentResult FindResultFor(class System.CommandLine.Argument argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.FindResultFor(System.CommandLine.Argument)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResultFor (argument As Argument) As ArgumentResult" />
      <MemberSignature Language="F#" Value="member this.FindResultFor : System.CommandLine.Argument -&gt; System.CommandLine.Parsing.ArgumentResult" Usage="parseResult.FindResultFor argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CommandLine::Parsing::ArgumentResult ^ FindResultFor(System::CommandLine::Argument ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.ArgumentResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument" />
      </Parameters>
      <Docs>
        <param name="argument">The argument for which to find a result.</param>
        <summary>
            Gets the result, if any, for the specified argument.
            </summary>
        <returns>A result for the specified argument, or <see langword="null" /> if it was not provided and no default was configured.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindResultFor">
      <MemberSignature Language="C#" Value="public System.CommandLine.Parsing.CommandResult? FindResultFor (System.CommandLine.Command command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CommandLine.Parsing.CommandResult FindResultFor(class System.CommandLine.Command command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.FindResultFor(System.CommandLine.Command)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResultFor (command As Command) As CommandResult" />
      <MemberSignature Language="F#" Value="member this.FindResultFor : System.CommandLine.Command -&gt; System.CommandLine.Parsing.CommandResult" Usage="parseResult.FindResultFor command" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CommandLine::Parsing::CommandResult ^ FindResultFor(System::CommandLine::Command ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.CommandResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.CommandLine.Command" />
      </Parameters>
      <Docs>
        <param name="command">The command for which to find a result.</param>
        <summary>
            Gets the result, if any, for the specified command.
            </summary>
        <returns>A result for the specified command, or <see langword="null" /> if it was not provided.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindResultFor">
      <MemberSignature Language="C#" Value="public System.CommandLine.Parsing.OptionResult? FindResultFor (System.CommandLine.Option option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CommandLine.Parsing.OptionResult FindResultFor(class System.CommandLine.Option option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.FindResultFor(System.CommandLine.Option)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResultFor (option As Option) As OptionResult" />
      <MemberSignature Language="F#" Value="member this.FindResultFor : System.CommandLine.Option -&gt; System.CommandLine.Parsing.OptionResult" Usage="parseResult.FindResultFor option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CommandLine::Parsing::OptionResult ^ FindResultFor(System::CommandLine::Option ^ option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.OptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option" />
      </Parameters>
      <Docs>
        <param name="option">The option for which to find a result.</param>
        <summary>
            Gets the result, if any, for the specified option.
            </summary>
        <returns>A result for the specified option, or <see langword="null" /> if it was not provided and no default was configured.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindResultFor">
      <MemberSignature Language="C#" Value="public System.CommandLine.Parsing.SymbolResult? FindResultFor (System.CommandLine.Symbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CommandLine.Parsing.SymbolResult FindResultFor(class System.CommandLine.Symbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.FindResultFor(System.CommandLine.Symbol)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResultFor (symbol As Symbol) As SymbolResult" />
      <MemberSignature Language="F#" Value="member this.FindResultFor : System.CommandLine.Symbol -&gt; System.CommandLine.Parsing.SymbolResult" Usage="parseResult.FindResultFor symbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CommandLine::Parsing::SymbolResult ^ FindResultFor(System::CommandLine::Symbol ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.SymbolResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="System.CommandLine.Symbol" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol for which to find a result.</param>
        <summary>
            Gets the result, if any, for the specified symbol.
            </summary>
        <returns>A result for the specified symbol, or <see langword="null" /> if it was not provided and no default was configured.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompletionContext">
      <MemberSignature Language="C#" Value="public System.CommandLine.Completions.CompletionContext GetCompletionContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CommandLine.Completions.CompletionContext GetCompletionContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.GetCompletionContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCompletionContext () As CompletionContext" />
      <MemberSignature Language="F#" Value="member this.GetCompletionContext : unit -&gt; System.CommandLine.Completions.CompletionContext" Usage="parseResult.GetCompletionContext " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CommandLine::Completions::CompletionContext ^ GetCompletionContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Completions.CompletionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the completion context for the parse result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompletions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.CommandLine.Completions.CompletionItem&gt; GetCompletions (int? position = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.CommandLine.Completions.CompletionItem&gt; GetCompletions(valuetype System.Nullable`1&lt;int32&gt; position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.GetCompletions(System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCompletions (Optional position As Nullable(Of Integer) = Nothing) As IEnumerable(Of CompletionItem)" />
      <MemberSignature Language="F#" Value="member this.GetCompletions : Nullable&lt;int&gt; -&gt; seq&lt;System.CommandLine.Completions.CompletionItem&gt;" Usage="parseResult.GetCompletions position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.CommandLine.Completions.CompletionItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="position">The position at which completions are requested.</param>
        <summary>
            Gets completions based on a given parse result.
            </summary>
        <returns>A set of completions for completion.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueForArgument">
      <MemberSignature Language="C#" Value="public object? GetValueForArgument (System.CommandLine.Argument argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValueForArgument(class System.CommandLine.Argument argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.GetValueForArgument(System.CommandLine.Argument)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueForArgument (argument As Argument) As Object" />
      <MemberSignature Language="F#" Value="member this.GetValueForArgument : System.CommandLine.Argument -&gt; obj" Usage="parseResult.GetValueForArgument argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValueForArgument(System::CommandLine::Argument ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument" />
      </Parameters>
      <Docs>
        <param name="argument">The argument for which to get a value.</param>
        <summary>
            Gets the parsed or default value for the specified argument.
            </summary>
        <returns>The parsed value or a configured default.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueForArgument&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetValueForArgument&lt;T&gt; (System.CommandLine.Argument&lt;T&gt; argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetValueForArgument&lt;T&gt;(class System.CommandLine.Argument`1&lt;!!T&gt; argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.GetValueForArgument``1(System.CommandLine.Argument{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueForArgument(Of T) (argument As Argument(Of T)) As T" />
      <MemberSignature Language="F#" Value="member this.GetValueForArgument : System.CommandLine.Argument&lt;'T&gt; -&gt; 'T" Usage="parseResult.GetValueForArgument argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetValueForArgument(System::CommandLine::Argument&lt;T&gt; ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="argument" Type="System.CommandLine.Argument&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="argument">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.CommandLine.Parsing.ParseResult.GetValueForArgument(System.CommandLine.Argument)" />
      </Docs>
    </Member>
    <Member MemberName="GetValueForOption">
      <MemberSignature Language="C#" Value="public object? GetValueForOption (System.CommandLine.Option option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValueForOption(class System.CommandLine.Option option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.GetValueForOption(System.CommandLine.Option)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueForOption (option As Option) As Object" />
      <MemberSignature Language="F#" Value="member this.GetValueForOption : System.CommandLine.Option -&gt; obj" Usage="parseResult.GetValueForOption option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValueForOption(System::CommandLine::Option ^ option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option" />
      </Parameters>
      <Docs>
        <param name="option">The option for which to get a value.</param>
        <summary>
            Gets the parsed or default value for the specified option.
            </summary>
        <returns>The parsed value or a configured default.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueForOption&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T? GetValueForOption&lt;T&gt; (System.CommandLine.Option&lt;T&gt; option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetValueForOption&lt;T&gt;(class System.CommandLine.Option`1&lt;!!T&gt; option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.GetValueForOption``1(System.CommandLine.Option{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueForOption(Of T) (option As Option(Of T)) As T" />
      <MemberSignature Language="F#" Value="member this.GetValueForOption : System.CommandLine.Option&lt;'T&gt; -&gt; 'T" Usage="parseResult.GetValueForOption option" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetValueForOption(System::CommandLine::Option&lt;T&gt; ^ option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="option" Type="System.CommandLine.Option&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="option">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.CommandLine.Parsing.ParseResult.GetValueForOption(System.CommandLine.Option)" />
      </Docs>
    </Member>
    <Member MemberName="Parser">
      <MemberSignature Language="C#" Value="public System.CommandLine.Parsing.Parser Parser { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.Parsing.Parser Parser" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Parsing.ParseResult.Parser" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parser As Parser" />
      <MemberSignature Language="F#" Value="member this.Parser : System.CommandLine.Parsing.Parser" Usage="System.CommandLine.Parsing.ParseResult.Parser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::Parsing::Parser ^ Parser { System::CommandLine::Parsing::Parser ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.Parser</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The parser used to produce the parse result.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootCommandResult">
      <MemberSignature Language="C#" Value="public System.CommandLine.Parsing.CommandResult RootCommandResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.Parsing.CommandResult RootCommandResult" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Parsing.ParseResult.RootCommandResult" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootCommandResult As CommandResult" />
      <MemberSignature Language="F#" Value="member this.RootCommandResult : System.CommandLine.Parsing.CommandResult" Usage="System.CommandLine.Parsing.ParseResult.RootCommandResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::Parsing::CommandResult ^ RootCommandResult { System::CommandLine::Parsing::CommandResult ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.CommandResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the root command result.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Parsing.Token&gt; Tokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype System.CommandLine.Parsing.Token&gt; Tokens" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Parsing.ParseResult.Tokens" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tokens As IReadOnlyList(Of Token)" />
      <MemberSignature Language="F#" Value="member this.Tokens : System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Parsing.Token&gt;" Usage="System.CommandLine.Parsing.ParseResult.Tokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;System::CommandLine::Parsing::Token&gt; ^ Tokens { System::Collections::Generic::IReadOnlyList&lt;System::CommandLine::Parsing::Token&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.CommandLine.Parsing.Token&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the tokens identified while parsing command line input.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Parsing.ParseResult.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="parseResult.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="UnmatchedTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;string&gt; UnmatchedTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; UnmatchedTokens" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Parsing.ParseResult.UnmatchedTokens" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnmatchedTokens As IReadOnlyList(Of String)" />
      <MemberSignature Language="F#" Value="member this.UnmatchedTokens : System.Collections.Generic.IReadOnlyList&lt;string&gt;" Usage="System.CommandLine.Parsing.ParseResult.UnmatchedTokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;System::String ^&gt; ^ UnmatchedTokens { System::Collections::Generic::IReadOnlyList&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of tokens used on the command line that were not matched by the parser.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnparsedTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;string&gt; UnparsedTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;string&gt; UnparsedTokens" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Parsing.ParseResult.UnparsedTokens" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnparsedTokens As IReadOnlyList(Of String)" />
      <MemberSignature Language="F#" Value="member this.UnparsedTokens : System.Collections.Generic.IReadOnlyList&lt;string&gt;" Usage="System.CommandLine.Parsing.ParseResult.UnparsedTokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;System::String ^&gt; ^ UnparsedTokens { System::Collections::Generic::IReadOnlyList&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of tokens used on the command line that were ignored by the parser.
            </summary>
        <value>To be added.</value>
        <remarks>This list will contain all of the tokens following the first occurrence of a <c>--</c> token if <see cref="P:System.CommandLine.CommandLineConfiguration.EnableLegacyDoubleDashBehavior" /> is set to <see langword="true" />.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
