<Type Name="FakeLoggerExtensions" FullName="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions">
  <TypeSignature Language="C#" Value="public static class FakeLoggerExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit FakeLoggerExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module FakeLoggerExtensions" />
  <TypeSignature Language="F#" Value="type FakeLoggerExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class FakeLoggerExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions for configuring fake logging, used in unit tests.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddFakeLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddFakeLogging (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddFakeLogging(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFakeLogging (services As IServiceCollection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddFakeLogging : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging services" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddFakeLogging(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
      </Parameters>
      <Docs>
        <param name="services">Service collection.</param>
        <summary>
            Configure fake logging with default options.
            </summary>
        <returns>Service collection for API chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFakeLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFakeLogging (this Microsoft.Extensions.Logging.ILoggingBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFakeLogging(class Microsoft.Extensions.Logging.ILoggingBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(Microsoft.Extensions.Logging.ILoggingBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFakeLogging (builder As ILoggingBuilder) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddFakeLogging : Microsoft.Extensions.Logging.ILoggingBuilder -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFakeLogging(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">Logging builder.</param>
        <summary>
            Configure fake logging with default options.
            </summary>
        <returns>Logging <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFakeLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddFakeLogging (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfigurationSection section);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddFakeLogging(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Extensions.Configuration.IConfigurationSection section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationSection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFakeLogging (services As IServiceCollection, section As IConfigurationSection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddFakeLogging : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.Configuration.IConfigurationSection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging (services, section)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddFakeLogging(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Microsoft::Extensions::Configuration::IConfigurationSection ^ section);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfigurationSection" />
      </Parameters>
      <Docs>
        <param name="services">Service collection.</param>
        <param name="section">Configuration section that contains <see cref="T:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions" />.</param>
        <summary>
            Configure fake logging.
            </summary>
        <returns>Service collection for API chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFakeLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddFakeLogging (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddFakeLogging(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFakeLogging (services As IServiceCollection, configure As Action(Of FakeLogCollectorOptions)) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddFakeLogging : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging (services, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::DependencyInjection::IServiceCollection ^ AddFakeLogging(Microsoft::Extensions::DependencyInjection::IServiceCollection ^ services, Action&lt;Microsoft::Extensions::Telemetry::Testing::Logging::FakeLogCollectorOptions ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="services">Service collection.</param>
        <param name="configure">Logging configuration options.</param>
        <summary>
            Configure fake logging.
            </summary>
        <returns>Service collection for API chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFakeLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFakeLogging (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Microsoft.Extensions.Configuration.IConfigurationSection section);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFakeLogging(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class Microsoft.Extensions.Configuration.IConfigurationSection section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFakeLogging (builder As ILoggingBuilder, section As IConfigurationSection) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddFakeLogging : Microsoft.Extensions.Logging.ILoggingBuilder * Microsoft.Extensions.Configuration.IConfigurationSection -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging (builder, section)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFakeLogging(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Microsoft::Extensions::Configuration::IConfigurationSection ^ section);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties, typeof(Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed by [DynamicDependency]")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification="Addressed by [DynamicDependency]")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfigurationSection" />
      </Parameters>
      <Docs>
        <param name="builder">Logging builder.</param>
        <param name="section">Configuration section that contains <see cref="T:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions" />.</param>
        <summary>
            Configure fake logging.
            </summary>
        <returns>Logging <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFakeLogging">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILoggingBuilder AddFakeLogging (this Microsoft.Extensions.Logging.ILoggingBuilder builder, Action&lt;Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILoggingBuilder AddFakeLogging(class Microsoft.Extensions.Logging.ILoggingBuilder builder, class System.Action`1&lt;class Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddFakeLogging (builder As ILoggingBuilder, configure As Action(Of FakeLogCollectorOptions)) As ILoggingBuilder" />
      <MemberSignature Language="F#" Value="static member AddFakeLogging : Microsoft.Extensions.Logging.ILoggingBuilder * Action&lt;Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions&gt; -&gt; Microsoft.Extensions.Logging.ILoggingBuilder" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging (builder, configure)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Logging::ILoggingBuilder ^ AddFakeLogging(Microsoft::Extensions::Logging::ILoggingBuilder ^ builder, Action&lt;Microsoft::Extensions::Telemetry::Testing::Logging::FakeLogCollectorOptions ^&gt; ^ configure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILoggingBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.Logging.ILoggingBuilder" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">Logging builder.</param>
        <param name="configure">Logging configuration options.</param>
        <summary>
            Configure fake logging.
            </summary>
        <returns>Logging <paramref name="builder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFakeLogCollector">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector GetFakeLogCollector (this IServiceProvider services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector GetFakeLogCollector(class System.IServiceProvider services) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.GetFakeLogCollector(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFakeLogCollector (services As IServiceProvider) As FakeLogCollector" />
      <MemberSignature Language="F#" Value="static member GetFakeLogCollector : IServiceProvider -&gt; Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.GetFakeLogCollector services" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Extensions::Telemetry::Testing::Logging::FakeLogCollector ^ GetFakeLogCollector(IServiceProvider ^ services);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="System.IServiceProvider" RefType="this" />
      </Parameters>
      <Docs>
        <param name="services">The service provider containing the logger.</param>
        <summary>
            Gets the object that collects log records sent to the fake logger.
            </summary>
        <returns>The collector which tracks records logged to fake loggers.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">When no collector exists in the provider.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
