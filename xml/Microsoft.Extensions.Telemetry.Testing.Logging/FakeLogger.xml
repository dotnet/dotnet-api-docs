<Type Name="FakeLogger" FullName="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger">
  <TypeSignature Language="C#" Value="public class FakeLogger : Microsoft.Extensions.Logging.ILogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FakeLogger extends System.Object implements class Microsoft.Extensions.Logging.ILogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger" />
  <TypeSignature Language="VB.NET" Value="Public Class FakeLogger&#xA;Implements ILogger" />
  <TypeSignature Language="F#" Value="type FakeLogger = class&#xA;    interface ILogger" />
  <TypeSignature Language="C++ CLI" Value="public ref class FakeLogger : Microsoft::Extensions::Logging::ILogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.ILogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A logger which captures everything logged to it and enables inspection.
            </summary>
    <remarks>
            This type is intended for use in unit tests. It captures all the log state to memory and lets you inspect it
            to validate that your code is logging what it should.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FakeLogger (Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector? collector = default, string? category = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector collector, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.#ctor(Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional collector As FakeLogCollector = Nothing, Optional category As String = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger : Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector * string -&gt; Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger" Usage="new Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger (collector, category)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collector" Type="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collector">Where to push all log state.</param>
        <param name="category">The logger's category, which indicates the origin of the logger and is captured in each record.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FakeLogger (Action&lt;string&gt; outputSink, string? category = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;string&gt; outputSink, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.#ctor(System.Action{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outputSink As Action(Of String), Optional category As String = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger : Action&lt;string&gt; * string -&gt; Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger" Usage="new Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger (outputSink, category)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outputSink" Type="System.Action&lt;System.String&gt;" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputSink">Where to emit individual log records.</param>
        <param name="category">The logger's category, which indicates the origin of the logger and is captured in each record.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger" /> class that copies all log records to the given output sink.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginScope&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public IDisposable? BeginScope&lt;TState&gt; (TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable BeginScope&lt;TState&gt;(!!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.BeginScope``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginScope(Of TState) (state As TState) As IDisposable" />
      <MemberSignature Language="F#" Value="abstract member BeginScope : 'State -&gt; IDisposable&#xA;override this.BeginScope : 'State -&gt; IDisposable" Usage="fakeLogger.BeginScope state" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; virtual IDisposable ^ BeginScope(TState state);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="state" Type="TState" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the state to begin scope for.</typeparam>
        <param name="state">The identifier for the scope.</param>
        <summary>
            Begins a logical operation scope.
            </summary>
        <returns>A disposable object that ends the logical operation scope on dispose.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public string? Category { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Category" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.Category" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Category As String" />
      <MemberSignature Language="F#" Value="member this.Category : string" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.Category" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Category { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets this logger's category, as specified when the logger was created.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Collector">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector Collector { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector Collector" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.Collector" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Collector As FakeLogCollector" />
      <MemberSignature Language="F#" Value="member this.Collector : Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.Collector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Telemetry::Testing::Logging::FakeLogCollector ^ Collector { Microsoft::Extensions::Telemetry::Testing::Logging::FakeLogCollector ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the logger collector associated with this logger, as specified when the logger was created.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlLevel">
      <MemberSignature Language="C#" Value="public void ControlLevel (Microsoft.Extensions.Logging.LogLevel logLevel, bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ControlLevel(valuetype Microsoft.Extensions.Logging.LogLevel logLevel, bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.ControlLevel(Microsoft.Extensions.Logging.LogLevel,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ControlLevel (logLevel As LogLevel, enabled As Boolean)" />
      <MemberSignature Language="F#" Value="member this.ControlLevel : Microsoft.Extensions.Logging.LogLevel * bool -&gt; unit" Usage="fakeLogger.ControlLevel (logLevel, enabled)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ControlLevel(Microsoft::Extensions::Logging::LogLevel logLevel, bool enabled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="logLevel">The log level to affect.</param>
        <param name="enabled">Whether the log level is enabled or not.</param>
        <summary>
            Controls the enabled state of a log level.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled (Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEnabled (logLevel As LogLevel) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool&#xA;override this.IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool" Usage="fakeLogger.IsEnabled logLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnabled(Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="logLevel">Level to be checked.</param>
        <summary>
            Checks if the given log level is enabled.
            </summary>
        <returns>
          <see langword="true" /> if enabled; <see langword="false" /> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LatestRecord">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord LatestRecord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord LatestRecord" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.LatestRecord" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LatestRecord As FakeLogRecord" />
      <MemberSignature Language="F#" Value="member this.LatestRecord : Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.LatestRecord" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Telemetry::Testing::Logging::FakeLogRecord ^ LatestRecord { Microsoft::Extensions::Telemetry::Testing::Logging::FakeLogRecord ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the latest record logged to this logger.
            </summary>
        <value>To be added.</value>
        <remarks>
            This is a convenience property that merely returns the latest record from the underlying collector.
            </remarks>
        <exception cref="T:System.InvalidOperationException">When no records have been captured.</exception>
      </Docs>
    </Member>
    <Member MemberName="Log&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public void Log&lt;TState&gt; (Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, Exception? exception, Func&lt;TState,Exception?,string&gt; formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Log&lt;TState&gt;(valuetype Microsoft.Extensions.Logging.LogLevel logLevel, valuetype Microsoft.Extensions.Logging.EventId eventId, !!TState state, class System.Exception exception, class System.Func`3&lt;!!TState, class System.Exception, string&gt; formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Log(Of TState) (logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))" />
      <MemberSignature Language="F#" Value="abstract member Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit&#xA;override this.Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit" Usage="fakeLogger.Log (logLevel, eventId, state, exception, formatter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; virtual void Log(Microsoft::Extensions::Logging::LogLevel logLevel, Microsoft::Extensions::Logging::EventId eventId, TState state, Exception ^ exception, Func&lt;TState, Exception ^, System::String ^&gt; ^ formatter);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="formatter" Type="System.Func&lt;TState,System.Exception,System.String&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TState">The type of the object to be written.</typeparam>
        <param name="logLevel">Entry will be written on this level.</param>
        <param name="eventId">Id of the event.</param>
        <param name="state">The entry to be written. Can be also an object.</param>
        <param name="exception">The exception related to this entry.</param>
        <param name="formatter">Function to create a string message of the state and exception.</param>
        <summary>
            Creates a new log record.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
