<Type Name="FakeLogRecord" FullName="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord">
  <TypeSignature Language="C#" Value="public class FakeLogRecord" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FakeLogRecord extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord" />
  <TypeSignature Language="VB.NET" Value="Public Class FakeLogRecord" />
  <TypeSignature Language="F#" Value="type FakeLogRecord = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class FakeLogRecord" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A single log record tracked by <see cref="T:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FakeLogRecord (Microsoft.Extensions.Logging.LogLevel level, Microsoft.Extensions.Logging.EventId id, object? state, Exception? exception, string message, System.Collections.Generic.IReadOnlyList&lt;object?&gt; scopes, string? category, bool enabled, DateTimeOffset timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Extensions.Logging.LogLevel level, valuetype Microsoft.Extensions.Logging.EventId id, object state, class System.Exception exception, string message, class System.Collections.Generic.IReadOnlyList`1&lt;object&gt; scopes, string category, bool enabled, valuetype System.DateTimeOffset timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.#ctor(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.Object,System.Exception,System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.String,System.Boolean,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (level As LogLevel, id As EventId, state As Object, exception As Exception, message As String, scopes As IReadOnlyList(Of Object), category As String, enabled As Boolean, timestamp As DateTimeOffset)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * obj * Exception * string * System.Collections.Generic.IReadOnlyList&lt;obj&gt; * string * bool * DateTimeOffset -&gt; Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord" Usage="new Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord (level, id, state, exception, message, scopes, category, enabled, timestamp)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FakeLogRecord(Microsoft::Extensions::Logging::LogLevel level, Microsoft::Extensions::Logging::EventId id, System::Object ^ state, Exception ^ exception, System::String ^ message, System::Collections::Generic::IReadOnlyList&lt;System::Object ^&gt; ^ scopes, System::String ^ category, bool enabled, DateTimeOffset timestamp);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="level" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="id" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="scopes" Type="System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="enabled" Type="System.Boolean" />
        <Parameter Name="timestamp" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="level">The level used when producing the log record.</param>
        <param name="id">The id representing the specific log statement.</param>
        <param name="state">The opaque state supplied by the caller when creating the log record.</param>
        <param name="exception">An optional exception associated with the log record.</param>
        <param name="message">The formatted message text for the record.</param>
        <param name="scopes">List of active scopes active for this log record.</param>
        <param name="category">The optional category for this record, which corresponds to the T in <see cref="T:Microsoft.Extensions.Logging.ILogger`1" />.</param>
        <param name="enabled">Whether the log level was enabled or not when the <see cref="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})" /> method was called.</param>
        <param name="timestamp">The time at which the log record was created.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public string? Category { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Category" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Category" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Category As String" />
      <MemberSignature Language="F#" Value="member this.Category : string" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Category" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Category { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the optional category of this record.
            </summary>
        <value>To be added.</value>
        <remarks>
            The category corresponds to the T value in <see cref="T:Microsoft.Extensions.Logging.ILogger`1" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception? Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets an optional exception associated with the log record.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.EventId Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Extensions.Logging.EventId Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As EventId" />
      <MemberSignature Language="F#" Value="member this.Id : Microsoft.Extensions.Logging.EventId" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Id" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Logging::EventId Id { Microsoft::Extensions::Logging::EventId get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.EventId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the id representing the specific log statement.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Level">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.LogLevel Level { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Extensions.Logging.LogLevel Level" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Level" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Level As LogLevel" />
      <MemberSignature Language="F#" Value="member this.Level : Microsoft.Extensions.Logging.LogLevel" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Level" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Logging::LogLevel Level { Microsoft::Extensions::Logging::LogLevel get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.LogLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the level used when producing the log record.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LevelEnabled">
      <MemberSignature Language="C#" Value="public bool LevelEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LevelEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.LevelEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LevelEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.LevelEnabled : bool" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.LevelEnabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LevelEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the log level was enabled or disabled when this record was collected.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As String" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Message { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the formatted message text for the record.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scopes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;object?&gt; Scopes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;object&gt; Scopes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Scopes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scopes As IReadOnlyList(Of Object)" />
      <MemberSignature Language="F#" Value="member this.Scopes : System.Collections.Generic.IReadOnlyList&lt;obj&gt;" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Scopes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;System::Object ^&gt; ^ Scopes { System::Collections::Generic::IReadOnlyList&lt;System::Object ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the logging scopes active when the log record was created.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object? State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.State" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the opaque state supplied by the caller when creating the log record.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructuredState">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.KeyValuePair&lt;string,string?&gt;&gt;? StructuredState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; StructuredState" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.StructuredState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StructuredState As IReadOnlyList(Of KeyValuePair(Of String, String))" />
      <MemberSignature Language="F#" Value="member this.StructuredState : System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt;" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.StructuredState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::String ^&gt;&gt; ^ StructuredState { System::Collections::Generic::IReadOnlyList&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::String ^&gt;&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets the opaque state supplied by the caller when creating the log record as a read-only list.
             </summary>
        <value>To be added.</value>
        <remarks>
             When logging using the R9 logging model, the arguments you supply to the logging method are packaged into
             a single state object which is delivered to the <see cref="M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})" />
             method. This state can be retrieved as a set of name/value pairs encoded in a read-only list.
            
             The object returned by this property is the same as what <see cref="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.State" /> returns, except it has been cast to a
             read-only list.
             </remarks>
        <exception cref="T:System.InvalidCastException">If the state object was not generated by the R9 logging model and is not a read-only list.</exception>
      </Docs>
    </Member>
    <Member MemberName="Timestamp">
      <MemberSignature Language="C#" Value="public DateTimeOffset Timestamp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeOffset Timestamp" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Timestamp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timestamp As DateTimeOffset" />
      <MemberSignature Language="F#" Value="member this.Timestamp : DateTimeOffset" Usage="Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Timestamp" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeOffset Timestamp { DateTimeOffset get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the time at which the log record was created.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="fakeLogRecord.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a string representing this object.
            </summary>
        <returns>A string that helps identity this object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
