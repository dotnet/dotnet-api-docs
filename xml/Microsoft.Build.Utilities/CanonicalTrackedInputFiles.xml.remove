<Type Name="CanonicalTrackedInputFiles" FullName="Microsoft.Build.Utilities.CanonicalTrackedInputFiles">
  <TypeSignature Language="C#" Value="public class CanonicalTrackedInputFiles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CanonicalTrackedInputFiles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Utilities.CanonicalTrackedInputFiles" />
  <TypeSignature Language="VB.NET" Value="Public Class CanonicalTrackedInputFiles" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanonicalTrackedInputFiles" />
  <TypeSignature Language="F#" Value="type CanonicalTrackedInputFiles = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>This class is the filetracking log interpreter for .read. tracking logs in canonical form or those that have been rooted (^) to make them canonical</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Constructor for multiple input source files</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanonicalTrackedInputFiles (Microsoft.Build.Framework.ITaskItem[] tlogFiles, Microsoft.Build.Framework.ITaskItem[] sourceFiles, Microsoft.Build.Utilities.CanonicalTrackedOutputFiles outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Build.Framework.ITaskItem[] tlogFiles, class Microsoft.Build.Framework.ITaskItem[] sourceFiles, class Microsoft.Build.Utilities.CanonicalTrackedOutputFiles outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.#ctor(Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Utilities.CanonicalTrackedOutputFiles,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tlogFiles As ITaskItem(), sourceFiles As ITaskItem(), outputs As CanonicalTrackedOutputFiles, useMinimalRebuildOptimization As Boolean, maintainCompositeRootingMarkers As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CanonicalTrackedInputFiles(cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ tlogFiles, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ sourceFiles, Microsoft::Build::Utilities::CanonicalTrackedOutputFiles ^ outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers);" />
      <MemberSignature Language="F#" Value="new Microsoft.Build.Utilities.CanonicalTrackedInputFiles : Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Utilities.CanonicalTrackedOutputFiles * bool * bool -&gt; Microsoft.Build.Utilities.CanonicalTrackedInputFiles" Usage="new Microsoft.Build.Utilities.CanonicalTrackedInputFiles (tlogFiles, sourceFiles, outputs, useMinimalRebuildOptimization, maintainCompositeRootingMarkers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tlogFiles" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="sourceFiles" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="outputs" Type="Microsoft.Build.Utilities.CanonicalTrackedOutputFiles" />
        <Parameter Name="useMinimalRebuildOptimization" Type="System.Boolean" />
        <Parameter Name="maintainCompositeRootingMarkers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tlogFiles">The .read. tlog files to interpret</param>
        <param name="sourceFiles">The primary source files to interpret dependencies for</param>
        <param name="outputs">The output files produced by compiling this set of sources</param>
        <param name="useMinimalRebuildOptimization">WARNING: Minimal rebuild optimization requires 100% accurate computed outputs to be specified!</param>
        <param name="maintainCompositeRootingMarkers">True to keep composite rooting markers around (many-to-one case) or false to shred them (one-to-one or one-to-many case)</param>
        <summary>Constructor for multiple input source files</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanonicalTrackedInputFiles (Microsoft.Build.Framework.ITaskItem[] tlogFiles, Microsoft.Build.Framework.ITaskItem[] sourceFiles, Microsoft.Build.Framework.ITaskItem[] excludedInputPaths, Microsoft.Build.Utilities.CanonicalTrackedOutputFiles outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Build.Framework.ITaskItem[] tlogFiles, class Microsoft.Build.Framework.ITaskItem[] sourceFiles, class Microsoft.Build.Framework.ITaskItem[] excludedInputPaths, class Microsoft.Build.Utilities.CanonicalTrackedOutputFiles outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.#ctor(Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Utilities.CanonicalTrackedOutputFiles,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tlogFiles As ITaskItem(), sourceFiles As ITaskItem(), excludedInputPaths As ITaskItem(), outputs As CanonicalTrackedOutputFiles, useMinimalRebuildOptimization As Boolean, maintainCompositeRootingMarkers As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CanonicalTrackedInputFiles(cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ tlogFiles, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ sourceFiles, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ excludedInputPaths, Microsoft::Build::Utilities::CanonicalTrackedOutputFiles ^ outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers);" />
      <MemberSignature Language="F#" Value="new Microsoft.Build.Utilities.CanonicalTrackedInputFiles : Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Utilities.CanonicalTrackedOutputFiles * bool * bool -&gt; Microsoft.Build.Utilities.CanonicalTrackedInputFiles" Usage="new Microsoft.Build.Utilities.CanonicalTrackedInputFiles (tlogFiles, sourceFiles, excludedInputPaths, outputs, useMinimalRebuildOptimization, maintainCompositeRootingMarkers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tlogFiles" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="sourceFiles" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="excludedInputPaths" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="outputs" Type="Microsoft.Build.Utilities.CanonicalTrackedOutputFiles" />
        <Parameter Name="useMinimalRebuildOptimization" Type="System.Boolean" />
        <Parameter Name="maintainCompositeRootingMarkers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tlogFiles">The .read. tlog files to interpret</param>
        <param name="sourceFiles">The primary source files to interpret dependencies for</param>
        <param name="excludedInputPaths">The set of paths that contain files that are to be ignored during up to date check</param>
        <param name="outputs">The output files produced by compiling this set of sources</param>
        <param name="useMinimalRebuildOptimization">WARNING: Minimal rebuild optimization requires 100% accurate computed outputs to be specified!</param>
        <param name="maintainCompositeRootingMarkers">True to keep composite rooting markers around (many-to-one case) or false to shred them (one-to-one or one-to-many case)</param>
        <summary>Constructor for multiple input source files</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanonicalTrackedInputFiles (Microsoft.Build.Framework.ITask ownerTask, Microsoft.Build.Framework.ITaskItem[] tlogFiles, Microsoft.Build.Framework.ITaskItem sourceFile, Microsoft.Build.Framework.ITaskItem[] excludedInputPaths, Microsoft.Build.Utilities.CanonicalTrackedOutputFiles outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Build.Framework.ITask ownerTask, class Microsoft.Build.Framework.ITaskItem[] tlogFiles, class Microsoft.Build.Framework.ITaskItem sourceFile, class Microsoft.Build.Framework.ITaskItem[] excludedInputPaths, class Microsoft.Build.Utilities.CanonicalTrackedOutputFiles outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.#ctor(Microsoft.Build.Framework.ITask,Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem,Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Utilities.CanonicalTrackedOutputFiles,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerTask As ITask, tlogFiles As ITaskItem(), sourceFile As ITaskItem, excludedInputPaths As ITaskItem(), outputs As CanonicalTrackedOutputFiles, useMinimalRebuildOptimization As Boolean, maintainCompositeRootingMarkers As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CanonicalTrackedInputFiles(Microsoft::Build::Framework::ITask ^ ownerTask, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ tlogFiles, Microsoft::Build::Framework::ITaskItem ^ sourceFile, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ excludedInputPaths, Microsoft::Build::Utilities::CanonicalTrackedOutputFiles ^ outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers);" />
      <MemberSignature Language="F#" Value="new Microsoft.Build.Utilities.CanonicalTrackedInputFiles : Microsoft.Build.Framework.ITask * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Utilities.CanonicalTrackedOutputFiles * bool * bool -&gt; Microsoft.Build.Utilities.CanonicalTrackedInputFiles" Usage="new Microsoft.Build.Utilities.CanonicalTrackedInputFiles (ownerTask, tlogFiles, sourceFile, excludedInputPaths, outputs, useMinimalRebuildOptimization, maintainCompositeRootingMarkers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ownerTask" Type="Microsoft.Build.Framework.ITask" />
        <Parameter Name="tlogFiles" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="sourceFile" Type="Microsoft.Build.Framework.ITaskItem" />
        <Parameter Name="excludedInputPaths" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="outputs" Type="Microsoft.Build.Utilities.CanonicalTrackedOutputFiles" />
        <Parameter Name="useMinimalRebuildOptimization" Type="System.Boolean" />
        <Parameter Name="maintainCompositeRootingMarkers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ownerTask">The task that is using file tracker</param>
        <param name="tlogFiles">The .read. tlog files to interpret</param>
        <param name="sourceFile">The primary source file to interpret dependencies for</param>
        <param name="excludedInputPaths">The set of paths that contain files that are to be ignored during up to date check</param>
        <param name="outputs">The output files produced by compiling this source</param>
        <param name="useMinimalRebuildOptimization">WARNING: Minimal rebuild optimization requires 100% accurate computed outputs to be specified!</param>
        <param name="maintainCompositeRootingMarkers">True to keep composite rooting markers around (many-to-one case) or false to shred them (one-to-one or one-to-many case)</param>
        <summary>Constructor for a single input source file</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanonicalTrackedInputFiles (Microsoft.Build.Framework.ITask ownerTask, Microsoft.Build.Framework.ITaskItem[] tlogFiles, Microsoft.Build.Framework.ITaskItem[] sourceFiles, Microsoft.Build.Framework.ITaskItem[] excludedInputPaths, Microsoft.Build.Framework.ITaskItem[] outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Build.Framework.ITask ownerTask, class Microsoft.Build.Framework.ITaskItem[] tlogFiles, class Microsoft.Build.Framework.ITaskItem[] sourceFiles, class Microsoft.Build.Framework.ITaskItem[] excludedInputPaths, class Microsoft.Build.Framework.ITaskItem[] outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.#ctor(Microsoft.Build.Framework.ITask,Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem[],System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerTask As ITask, tlogFiles As ITaskItem(), sourceFiles As ITaskItem(), excludedInputPaths As ITaskItem(), outputs As ITaskItem(), useMinimalRebuildOptimization As Boolean, maintainCompositeRootingMarkers As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CanonicalTrackedInputFiles(Microsoft::Build::Framework::ITask ^ ownerTask, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ tlogFiles, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ sourceFiles, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ excludedInputPaths, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers);" />
      <MemberSignature Language="F#" Value="new Microsoft.Build.Utilities.CanonicalTrackedInputFiles : Microsoft.Build.Framework.ITask * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem[] * bool * bool -&gt; Microsoft.Build.Utilities.CanonicalTrackedInputFiles" Usage="new Microsoft.Build.Utilities.CanonicalTrackedInputFiles (ownerTask, tlogFiles, sourceFiles, excludedInputPaths, outputs, useMinimalRebuildOptimization, maintainCompositeRootingMarkers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ownerTask" Type="Microsoft.Build.Framework.ITask" />
        <Parameter Name="tlogFiles" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="sourceFiles" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="excludedInputPaths" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="outputs" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="useMinimalRebuildOptimization" Type="System.Boolean" />
        <Parameter Name="maintainCompositeRootingMarkers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ownerTask">The task that is using file tracker</param>
        <param name="tlogFiles">The .read. tlog files to interpret</param>
        <param name="sourceFiles">The primary source files to interpret dependencies for</param>
        <param name="excludedInputPaths">The set of paths that contain files that are to be ignored during up to date check</param>
        <param name="outputs">The output files produced by compiling this set of sources</param>
        <param name="useMinimalRebuildOptimization">WARNING: Minimal rebuild optimization requires 100% accurate computed outputs to be specified!</param>
        <param name="maintainCompositeRootingMarkers">True to keep composite rooting markers around (many-to-one case) or false to shred them (one-to-one or one-to-many case)</param>
        <summary>Constructor for multiple input source files</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanonicalTrackedInputFiles (Microsoft.Build.Framework.ITask ownerTask, Microsoft.Build.Framework.ITaskItem[] tlogFiles, Microsoft.Build.Framework.ITaskItem[] sourceFiles, Microsoft.Build.Framework.ITaskItem[] excludedInputPaths, Microsoft.Build.Utilities.CanonicalTrackedOutputFiles outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Build.Framework.ITask ownerTask, class Microsoft.Build.Framework.ITaskItem[] tlogFiles, class Microsoft.Build.Framework.ITaskItem[] sourceFiles, class Microsoft.Build.Framework.ITaskItem[] excludedInputPaths, class Microsoft.Build.Utilities.CanonicalTrackedOutputFiles outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.#ctor(Microsoft.Build.Framework.ITask,Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Utilities.CanonicalTrackedOutputFiles,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerTask As ITask, tlogFiles As ITaskItem(), sourceFiles As ITaskItem(), excludedInputPaths As ITaskItem(), outputs As CanonicalTrackedOutputFiles, useMinimalRebuildOptimization As Boolean, maintainCompositeRootingMarkers As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CanonicalTrackedInputFiles(Microsoft::Build::Framework::ITask ^ ownerTask, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ tlogFiles, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ sourceFiles, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ excludedInputPaths, Microsoft::Build::Utilities::CanonicalTrackedOutputFiles ^ outputs, bool useMinimalRebuildOptimization, bool maintainCompositeRootingMarkers);" />
      <MemberSignature Language="F#" Value="new Microsoft.Build.Utilities.CanonicalTrackedInputFiles : Microsoft.Build.Framework.ITask * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Utilities.CanonicalTrackedOutputFiles * bool * bool -&gt; Microsoft.Build.Utilities.CanonicalTrackedInputFiles" Usage="new Microsoft.Build.Utilities.CanonicalTrackedInputFiles (ownerTask, tlogFiles, sourceFiles, excludedInputPaths, outputs, useMinimalRebuildOptimization, maintainCompositeRootingMarkers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ownerTask" Type="Microsoft.Build.Framework.ITask" />
        <Parameter Name="tlogFiles" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="sourceFiles" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="excludedInputPaths" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="outputs" Type="Microsoft.Build.Utilities.CanonicalTrackedOutputFiles" />
        <Parameter Name="useMinimalRebuildOptimization" Type="System.Boolean" />
        <Parameter Name="maintainCompositeRootingMarkers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ownerTask">The task that is using file tracker</param>
        <param name="tlogFiles">The .read. tlog files to interpret</param>
        <param name="sourceFiles">The primary source files to interpret dependencies for</param>
        <param name="excludedInputPaths">The set of paths that contain files that are to be ignored during up to date check</param>
        <param name="outputs">The output files produced by compiling this set of sources</param>
        <param name="useMinimalRebuildOptimization">WARNING: Minimal rebuild optimization requires 100% accurate computed outputs to be specified!</param>
        <param name="maintainCompositeRootingMarkers">True to keep composite rooting markers around (many-to-one case) or false to shred them (one-to-one or one-to-many case)</param>
        <summary>Constructor for multiple input source files</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ComputeSourcesNeedingCompilation">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>This method computes the sources that need to be compiled based on the output files and the full dependency graph of inputs.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ComputeSourcesNeedingCompilation">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Framework.ITaskItem[] ComputeSourcesNeedingCompilation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Build.Framework.ITaskItem[] ComputeSourcesNeedingCompilation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.ComputeSourcesNeedingCompilation" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeSourcesNeedingCompilation () As ITaskItem()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ ComputeSourcesNeedingCompilation();" />
      <MemberSignature Language="F#" Value="member this.ComputeSourcesNeedingCompilation : unit -&gt; Microsoft.Build.Framework.ITaskItem[]" Usage="canonicalTrackedInputFiles.ComputeSourcesNeedingCompilation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.ITaskItem[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method computes the sources that need to be compiled based on the output files and the full dependency graph of inputs.</summary>
        <returns>Array of files that need to be compiled</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeSourcesNeedingCompilation">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Framework.ITaskItem[] ComputeSourcesNeedingCompilation (bool searchForSubRootsInCompositeRootingMarkers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Build.Framework.ITaskItem[] ComputeSourcesNeedingCompilation(bool searchForSubRootsInCompositeRootingMarkers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.ComputeSourcesNeedingCompilation(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeSourcesNeedingCompilation (searchForSubRootsInCompositeRootingMarkers As Boolean) As ITaskItem()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ ComputeSourcesNeedingCompilation(bool searchForSubRootsInCompositeRootingMarkers);" />
      <MemberSignature Language="F#" Value="member this.ComputeSourcesNeedingCompilation : bool -&gt; Microsoft.Build.Framework.ITaskItem[]" Usage="canonicalTrackedInputFiles.ComputeSourcesNeedingCompilation searchForSubRootsInCompositeRootingMarkers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.ITaskItem[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchForSubRootsInCompositeRootingMarkers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="searchForSubRootsInCompositeRootingMarkers">If true, search composite rooting markers for subroots.</param>
        <summary>This method computes the sources that need to be compiled based on the output files and the full dependency graph of inputs, optionally searching composite rooting markers for subroots that may contain input files.</summary>
        <returns>Array of files that need to be compiled</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DependencyTable">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.Dictionary&lt;string,string&gt;&gt; DependencyTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.Dictionary`2&lt;string, string&gt;&gt; DependencyTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.DependencyTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyTable As Dictionary(Of String, Dictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::Dictionary&lt;System::String ^, System::Collections::Generic::Dictionary&lt;System::String ^, System::String ^&gt; ^&gt; ^ DependencyTable { System::Collections::Generic::Dictionary&lt;System::String ^, System::Collections::Generic::Dictionary&lt;System::String ^, System::String ^&gt; ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyTable : System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.Dictionary&lt;string, string&gt;&gt;" Usage="Microsoft.Build.Utilities.CanonicalTrackedInputFiles.DependencyTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.Dictionary&lt;System.String,System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the dependency table.</summary>
        <value>The dependency table.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileIsExcludedFromDependencyCheck">
      <MemberSignature Language="C#" Value="public bool FileIsExcludedFromDependencyCheck (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool FileIsExcludedFromDependencyCheck(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.FileIsExcludedFromDependencyCheck(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileIsExcludedFromDependencyCheck (fileName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FileIsExcludedFromDependencyCheck(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.FileIsExcludedFromDependencyCheck : string -&gt; bool" Usage="canonicalTrackedInputFiles.FileIsExcludedFromDependencyCheck fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Full path of the file to test</param>
        <summary>Tests if the specified file is excluded from tracked dependency checking.</summary>
        <returns>
          <see langword="true" /> if the file is excluded; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveDependenciesFromEntryIfMissing">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remove the output graph entries for the given sources and corresponding outputs.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveDependenciesFromEntryIfMissing">
      <MemberSignature Language="C#" Value="public void RemoveDependenciesFromEntryIfMissing (Microsoft.Build.Framework.ITaskItem source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDependenciesFromEntryIfMissing(class Microsoft.Build.Framework.ITaskItem source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.RemoveDependenciesFromEntryIfMissing(Microsoft.Build.Framework.ITaskItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveDependenciesFromEntryIfMissing (source As ITaskItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveDependenciesFromEntryIfMissing(Microsoft::Build::Framework::ITaskItem ^ source);" />
      <MemberSignature Language="F#" Value="member this.RemoveDependenciesFromEntryIfMissing : Microsoft.Build.Framework.ITaskItem -&gt; unit" Usage="canonicalTrackedInputFiles.RemoveDependenciesFromEntryIfMissing source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Build.Framework.ITaskItem" />
      </Parameters>
      <Docs>
        <param name="source">Source that should be removed from the graph</param>
        <summary>Remove the output graph entries for the given sources and corresponding outputs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDependenciesFromEntryIfMissing">
      <MemberSignature Language="C#" Value="public void RemoveDependenciesFromEntryIfMissing (Microsoft.Build.Framework.ITaskItem[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDependenciesFromEntryIfMissing(class Microsoft.Build.Framework.ITaskItem[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.RemoveDependenciesFromEntryIfMissing(Microsoft.Build.Framework.ITaskItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveDependenciesFromEntryIfMissing (source As ITaskItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveDependenciesFromEntryIfMissing(cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="member this.RemoveDependenciesFromEntryIfMissing : Microsoft.Build.Framework.ITaskItem[] -&gt; unit" Usage="canonicalTrackedInputFiles.RemoveDependenciesFromEntryIfMissing source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Build.Framework.ITaskItem[]" />
      </Parameters>
      <Docs>
        <param name="source">Sources that should be removed from the graph</param>
        <summary>Remove the output graph entries for the given sources and corresponding outputs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDependenciesFromEntryIfMissing">
      <MemberSignature Language="C#" Value="public void RemoveDependenciesFromEntryIfMissing (Microsoft.Build.Framework.ITaskItem source, Microsoft.Build.Framework.ITaskItem correspondingOutput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDependenciesFromEntryIfMissing(class Microsoft.Build.Framework.ITaskItem source, class Microsoft.Build.Framework.ITaskItem correspondingOutput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.RemoveDependenciesFromEntryIfMissing(Microsoft.Build.Framework.ITaskItem,Microsoft.Build.Framework.ITaskItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveDependenciesFromEntryIfMissing (source As ITaskItem, correspondingOutput As ITaskItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveDependenciesFromEntryIfMissing(Microsoft::Build::Framework::ITaskItem ^ source, Microsoft::Build::Framework::ITaskItem ^ correspondingOutput);" />
      <MemberSignature Language="F#" Value="member this.RemoveDependenciesFromEntryIfMissing : Microsoft.Build.Framework.ITaskItem * Microsoft.Build.Framework.ITaskItem -&gt; unit" Usage="canonicalTrackedInputFiles.RemoveDependenciesFromEntryIfMissing (source, correspondingOutput)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Build.Framework.ITaskItem" />
        <Parameter Name="correspondingOutput" Type="Microsoft.Build.Framework.ITaskItem" />
      </Parameters>
      <Docs>
        <param name="source">Source that should be removed from the graph</param>
        <param name="correspondingOutput">Outputs that correspond ot the sources (used for same file processing)</param>
        <summary>Remove the output graph entries for the given sources and corresponding outputs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDependenciesFromEntryIfMissing">
      <MemberSignature Language="C#" Value="public void RemoveDependenciesFromEntryIfMissing (Microsoft.Build.Framework.ITaskItem[] source, Microsoft.Build.Framework.ITaskItem[] correspondingOutputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDependenciesFromEntryIfMissing(class Microsoft.Build.Framework.ITaskItem[] source, class Microsoft.Build.Framework.ITaskItem[] correspondingOutputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.RemoveDependenciesFromEntryIfMissing(Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveDependenciesFromEntryIfMissing (source As ITaskItem(), correspondingOutputs As ITaskItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveDependenciesFromEntryIfMissing(cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ source, cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ correspondingOutputs);" />
      <MemberSignature Language="F#" Value="member this.RemoveDependenciesFromEntryIfMissing : Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem[] -&gt; unit" Usage="canonicalTrackedInputFiles.RemoveDependenciesFromEntryIfMissing (source, correspondingOutputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="correspondingOutputs" Type="Microsoft.Build.Framework.ITaskItem[]" />
      </Parameters>
      <Docs>
        <param name="source">Sources that should be removed from the graph</param>
        <param name="correspondingOutputs">Outputs that correspond ot the sources (used for same file processing)</param>
        <summary>Remove the output graph entries for the given sources and corresponding outputs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveDependencyFromEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Remove the output graph entries for the given source and corresponding outputs.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveDependencyFromEntry">
      <MemberSignature Language="C#" Value="public void RemoveDependencyFromEntry (Microsoft.Build.Framework.ITaskItem source, Microsoft.Build.Framework.ITaskItem dependencyToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDependencyFromEntry(class Microsoft.Build.Framework.ITaskItem source, class Microsoft.Build.Framework.ITaskItem dependencyToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.RemoveDependencyFromEntry(Microsoft.Build.Framework.ITaskItem,Microsoft.Build.Framework.ITaskItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveDependencyFromEntry (source As ITaskItem, dependencyToRemove As ITaskItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveDependencyFromEntry(Microsoft::Build::Framework::ITaskItem ^ source, Microsoft::Build::Framework::ITaskItem ^ dependencyToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveDependencyFromEntry : Microsoft.Build.Framework.ITaskItem * Microsoft.Build.Framework.ITaskItem -&gt; unit" Usage="canonicalTrackedInputFiles.RemoveDependencyFromEntry (source, dependencyToRemove)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Build.Framework.ITaskItem" />
        <Parameter Name="dependencyToRemove" Type="Microsoft.Build.Framework.ITaskItem" />
      </Parameters>
      <Docs>
        <param name="source">Source that should be removed from the graph</param>
        <param name="dependencyToRemove">The dependency to remove.</param>
        <summary>Remove the output graph entries for the given source and corresponding outputs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDependencyFromEntry">
      <MemberSignature Language="C#" Value="public void RemoveDependencyFromEntry (Microsoft.Build.Framework.ITaskItem[] sources, Microsoft.Build.Framework.ITaskItem dependencyToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDependencyFromEntry(class Microsoft.Build.Framework.ITaskItem[] sources, class Microsoft.Build.Framework.ITaskItem dependencyToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.RemoveDependencyFromEntry(Microsoft.Build.Framework.ITaskItem[],Microsoft.Build.Framework.ITaskItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveDependencyFromEntry (sources As ITaskItem(), dependencyToRemove As ITaskItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveDependencyFromEntry(cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ sources, Microsoft::Build::Framework::ITaskItem ^ dependencyToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveDependencyFromEntry : Microsoft.Build.Framework.ITaskItem[] * Microsoft.Build.Framework.ITaskItem -&gt; unit" Usage="canonicalTrackedInputFiles.RemoveDependencyFromEntry (sources, dependencyToRemove)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="Microsoft.Build.Framework.ITaskItem[]" />
        <Parameter Name="dependencyToRemove" Type="Microsoft.Build.Framework.ITaskItem" />
      </Parameters>
      <Docs>
        <param name="sources">Sources that should be removed from the graph</param>
        <param name="dependencyToRemove">The dependency to remove.</param>
        <summary>Remove the output graph entries for the given sources and corresponding outputs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveEntriesForSource">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Removes the output graph entries for the given sources and corresponding outputs.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveEntriesForSource">
      <MemberSignature Language="C#" Value="public void RemoveEntriesForSource (Microsoft.Build.Framework.ITaskItem source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveEntriesForSource(class Microsoft.Build.Framework.ITaskItem source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.RemoveEntriesForSource(Microsoft.Build.Framework.ITaskItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEntriesForSource (source As ITaskItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEntriesForSource(Microsoft::Build::Framework::ITaskItem ^ source);" />
      <MemberSignature Language="F#" Value="member this.RemoveEntriesForSource : Microsoft.Build.Framework.ITaskItem -&gt; unit" Usage="canonicalTrackedInputFiles.RemoveEntriesForSource source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Build.Framework.ITaskItem" />
      </Parameters>
      <Docs>
        <param name="source">Source that should be removed from the graph</param>
        <summary>Remove the output graph entries for the given sources and corresponding outputs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntriesForSource">
      <MemberSignature Language="C#" Value="public void RemoveEntriesForSource (Microsoft.Build.Framework.ITaskItem[] source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveEntriesForSource(class Microsoft.Build.Framework.ITaskItem[] source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.RemoveEntriesForSource(Microsoft.Build.Framework.ITaskItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEntriesForSource (source As ITaskItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEntriesForSource(cli::array &lt;Microsoft::Build::Framework::ITaskItem ^&gt; ^ source);" />
      <MemberSignature Language="F#" Value="member this.RemoveEntriesForSource : Microsoft.Build.Framework.ITaskItem[] -&gt; unit" Usage="canonicalTrackedInputFiles.RemoveEntriesForSource source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Build.Framework.ITaskItem[]" />
      </Parameters>
      <Docs>
        <param name="source">Sources that should be removed from the graph</param>
        <summary>Removes the output graph entries for the given sources and corresponding outputs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEntryForSourceRoot">
      <MemberSignature Language="C#" Value="public void RemoveEntryForSourceRoot (string rootingMarker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveEntryForSourceRoot(string rootingMarker) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.RemoveEntryForSourceRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEntryForSourceRoot (rootingMarker As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEntryForSourceRoot(System::String ^ rootingMarker);" />
      <MemberSignature Language="F#" Value="member this.RemoveEntryForSourceRoot : string -&gt; unit" Usage="canonicalTrackedInputFiles.RemoveEntryForSourceRoot rootingMarker" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootingMarker" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rootingMarker">The root to remove.</param>
        <summary>Removes the entry in the input dependency graph corresponding to a rooting.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SaveTlog">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>This method will re-write the tlogs from the current output table new entries will be tracked.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SaveTlog">
      <MemberSignature Language="C#" Value="public void SaveTlog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveTlog() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.SaveTlog" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveTlog ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveTlog();" />
      <MemberSignature Language="F#" Value="member this.SaveTlog : unit -&gt; unit" Usage="canonicalTrackedInputFiles.SaveTlog " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method will re-write the tlogs from the current output table new entries will be tracked.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveTlog">
      <MemberSignature Language="C#" Value="public void SaveTlog (Microsoft.Build.Utilities.DependencyFilter includeInTLog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveTlog(class Microsoft.Build.Utilities.DependencyFilter includeInTLog) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.CanonicalTrackedInputFiles.SaveTlog(Microsoft.Build.Utilities.DependencyFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveTlog (includeInTLog As DependencyFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveTlog(Microsoft::Build::Utilities::DependencyFilter ^ includeInTLog);" />
      <MemberSignature Language="F#" Value="member this.SaveTlog : Microsoft.Build.Utilities.DependencyFilter -&gt; unit" Usage="canonicalTrackedInputFiles.SaveTlog includeInTLog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeInTLog" Type="Microsoft.Build.Utilities.DependencyFilter" />
      </Parameters>
      <Docs>
        <param name="includeInTLog">Delegate used to determine whether a particular file should be included in the compacted tlog.</param>
        <summary>This method will re-write the tlogs from the current dependency. As the sources are compiled, new entries willbe tracked.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
