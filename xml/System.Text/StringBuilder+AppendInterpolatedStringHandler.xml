<Type Name="StringBuilder+AppendInterpolatedStringHandler" FullName="System.Text.StringBuilder+AppendInterpolatedStringHandler">
  <TypeSignature Language="C#" Value="public struct StringBuilder.AppendInterpolatedStringHandler" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit StringBuilder/AppendInterpolatedStringHandler extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.StringBuilder.AppendInterpolatedStringHandler" />
  <TypeSignature Language="VB.NET" Value="Public Structure StringBuilder.AppendInterpolatedStringHandler" />
  <TypeSignature Language="F#" Value="type StringBuilder.AppendInterpolatedStringHandler = struct" />
  <TypeSignature Language="C++ CLI" Value="public: value class StringBuilder::AppendInterpolatedStringHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="6.0.0.0" FrameworkAlternate="net-6.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="7.0.0.0" FrameworkAlternate="net-7.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.InterpolatedStringHandler]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.InterpolatedStringHandler&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a handler used by the language compiler to append interpolated strings into <see cref="T:System.Text.StringBuilder" /> instances.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppendInterpolatedStringHandler (int literalLength, int formattedCount, System.Text.StringBuilder stringBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 literalLength, int32 formattedCount, class System.Text.StringBuilder stringBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.#ctor(System.Int32,System.Int32,System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (literalLength As Integer, formattedCount As Integer, stringBuilder As StringBuilder)" />
      <MemberSignature Language="F#" Value="new System.Text.StringBuilder.AppendInterpolatedStringHandler : int * int * System.Text.StringBuilder -&gt; System.Text.StringBuilder.AppendInterpolatedStringHandler" Usage="new System.Text.StringBuilder.AppendInterpolatedStringHandler (literalLength, formattedCount, stringBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppendInterpolatedStringHandler(int literalLength, int formattedCount, System::Text::StringBuilder ^ stringBuilder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="literalLength" Type="System.Int32" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="formattedCount" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="stringBuilder" Type="System.Text.StringBuilder" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="literalLength">The number of constant characters outside of interpolation expressions in the interpolated string.</param>
        <param name="formattedCount">The number of interpolation expressions in the interpolated string.</param>
        <param name="stringBuilder">The associated StringBuilder to which to append.</param>
        <summary>Creates a handler used to append an interpolated string into a <see cref="T:System.Text.StringBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This is intended to be called only by compiler-generated code. Arguments are not validated as they'd otherwise be for members intended to be used directly.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppendInterpolatedStringHandler (int literalLength, int formattedCount, System.Text.StringBuilder stringBuilder, IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 literalLength, int32 formattedCount, class System.Text.StringBuilder stringBuilder, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.#ctor(System.Int32,System.Int32,System.Text.StringBuilder,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (literalLength As Integer, formattedCount As Integer, stringBuilder As StringBuilder, provider As IFormatProvider)" />
      <MemberSignature Language="F#" Value="new System.Text.StringBuilder.AppendInterpolatedStringHandler : int * int * System.Text.StringBuilder * IFormatProvider -&gt; System.Text.StringBuilder.AppendInterpolatedStringHandler" Usage="new System.Text.StringBuilder.AppendInterpolatedStringHandler (literalLength, formattedCount, stringBuilder, provider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppendInterpolatedStringHandler(int literalLength, int formattedCount, System::Text::StringBuilder ^ stringBuilder, IFormatProvider ^ provider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="literalLength" Type="System.Int32" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="formattedCount" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="stringBuilder" Type="System.Text.StringBuilder" Index="2" FrameworkAlternate="net-7.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="literalLength">The number of constant characters outside of interpolation expressions in the interpolated string.</param>
        <param name="formattedCount">The number of interpolation expressions in the interpolated string.</param>
        <param name="stringBuilder">The associated StringBuilder to which to append.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Creates a handler used to translate an interpolated string into a <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

This is intended to be called only by compiler-generated code. Arguments are not validated as they'd otherwise be for members intended to be used directly.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFormatted">
      <MemberSignature Language="C#" Value="public void AppendFormatted (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendFormatted(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendFormatted (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="F#" Value="member this.AppendFormatted : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="appendInterpolatedStringHandler.AppendFormatted value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendFormatted(ReadOnlySpan&lt;char&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The span to write.</param>
        <summary>Writes the specified character span to the handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFormatted">
      <MemberSignature Language="C#" Value="public void AppendFormatted (string? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendFormatted(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendFormatted (value As String)" />
      <MemberSignature Language="F#" Value="member this.AppendFormatted : string -&gt; unit" Usage="appendInterpolatedStringHandler.AppendFormatted value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendFormatted(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the specified value to the handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFormatted">
      <MemberSignature Language="C#" Value="public void AppendFormatted (object? value, int alignment = 0, string? format = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendFormatted(object value, int32 alignment, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted(System.Object,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendFormatted (value As Object, Optional alignment As Integer = 0, Optional format As String = Nothing)" />
      <MemberSignature Language="F#" Value="member this.AppendFormatted : obj * int * string -&gt; unit" Usage="appendInterpolatedStringHandler.AppendFormatted (value, alignment, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="alignment" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="format" Type="System.String" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <param name="alignment">The minimum number of characters that should be written for this value.  If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
        <param name="format">The format string.</param>
        <summary>Writes the specified value to the handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFormatted">
      <MemberSignature Language="C#" Value="public void AppendFormatted (ReadOnlySpan&lt;char&gt; value, int alignment = 0, string? format = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendFormatted(valuetype System.ReadOnlySpan`1&lt;char&gt; value, int32 alignment, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted(System.ReadOnlySpan{System.Char},System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendFormatted (value As ReadOnlySpan(Of Char), Optional alignment As Integer = 0, Optional format As String = Nothing)" />
      <MemberSignature Language="F#" Value="member this.AppendFormatted : ReadOnlySpan&lt;char&gt; * int * string -&gt; unit" Usage="appendInterpolatedStringHandler.AppendFormatted (value, alignment, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="alignment" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="format" Type="System.String" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The span to write.</param>
        <param name="alignment">The minimum number of characters that should be written for this value.  If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
        <param name="format">The format string.</param>
        <summary>Writes the specified string of chars to the handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFormatted">
      <MemberSignature Language="C#" Value="public void AppendFormatted (string? value, int alignment = 0, string? format = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendFormatted(string value, int32 alignment, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendFormatted (value As String, Optional alignment As Integer = 0, Optional format As String = Nothing)" />
      <MemberSignature Language="F#" Value="member this.AppendFormatted : string * int * string -&gt; unit" Usage="appendInterpolatedStringHandler.AppendFormatted (value, alignment, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="alignment" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="format" Type="System.String" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <param name="alignment">The minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
        <param name="format">The format string.</param>
        <summary>Writes the specified value to the handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFormatted&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AppendFormatted&lt;T&gt; (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendFormatted&lt;T&gt;(!!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendFormatted(Of T) (value As T)" />
      <MemberSignature Language="F#" Value="member this.AppendFormatted : 'T -&gt; unit" Usage="appendInterpolatedStringHandler.AppendFormatted value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AppendFormatted(T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" Index="0" FrameworkAlternate="net-7.0" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the value to write.</typeparam>
        <param name="value">The value to write.</param>
        <summary>Writes the specified value to the handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFormatted&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AppendFormatted&lt;T&gt; (T value, int alignment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendFormatted&lt;T&gt;(!!T value, int32 alignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendFormatted(Of T) (value As T, alignment As Integer)" />
      <MemberSignature Language="F#" Value="member this.AppendFormatted : 'T * int -&gt; unit" Usage="appendInterpolatedStringHandler.AppendFormatted (value, alignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AppendFormatted(T value, int alignment);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" Index="0" FrameworkAlternate="net-7.0" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="alignment" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the value to write.</typeparam>
        <param name="value">The value to write.</param>
        <param name="alignment">The minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
        <summary>Writes the specified value to the handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFormatted&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AppendFormatted&lt;T&gt; (T value, string? format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendFormatted&lt;T&gt;(!!T value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted``1(``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendFormatted(Of T) (value As T, format As String)" />
      <MemberSignature Language="F#" Value="member this.AppendFormatted : 'T * string -&gt; unit" Usage="appendInterpolatedStringHandler.AppendFormatted (value, format)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AppendFormatted(T value, System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" Index="0" FrameworkAlternate="net-7.0" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the value to write.</typeparam>
        <param name="value">The value to write.</param>
        <param name="format">The format string.</param>
        <summary>Writes the specified value to the handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFormatted&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AppendFormatted&lt;T&gt; (T value, int alignment, string? format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendFormatted&lt;T&gt;(!!T value, int32 alignment, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted``1(``0,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendFormatted(Of T) (value As T, alignment As Integer, format As String)" />
      <MemberSignature Language="F#" Value="member this.AppendFormatted : 'T * int * string -&gt; unit" Usage="appendInterpolatedStringHandler.AppendFormatted (value, alignment, format)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AppendFormatted(T value, int alignment, System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" Index="0" FrameworkAlternate="net-7.0" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="net-7.0" />
        <Parameter Name="alignment" Type="System.Int32" Index="1" FrameworkAlternate="net-7.0" />
        <Parameter Name="format" Type="System.String" Index="2" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the value to write.</typeparam>
        <param name="value">The value to write.</param>
        <param name="alignment">The minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
        <param name="format">The format string.</param>
        <summary>Writes the specified value to the handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendLiteral">
      <MemberSignature Language="C#" Value="public void AppendLiteral (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendLiteral(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendLiteral(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendLiteral (value As String)" />
      <MemberSignature Language="F#" Value="member this.AppendLiteral : string -&gt; unit" Usage="appendInterpolatedStringHandler.AppendLiteral value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendLiteral(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="net-7.0" />
      </Parameters>
      <Docs>
        <param name="value">The string to write.</param>
        <summary>Writes the specified string to the handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
