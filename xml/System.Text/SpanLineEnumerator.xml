<Type Name="SpanLineEnumerator" FullName="System.Text.SpanLineEnumerator">
  <TypeSignature Language="C#" Value="public ref struct SpanLineEnumerator : System.Collections.Generic.IEnumerator&lt;ReadOnlySpan&lt;char&gt;&gt;" FrameworkAlternate="net-10.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpanLineEnumerator extends System.ValueType implements class System.Collections.Generic.IEnumerator`1&lt;valuetype System.ReadOnlySpan`1&lt;char&gt;&gt;, class System.Collections.IEnumerator, class System.IDisposable" FrameworkAlternate="net-10.0" />
  <TypeSignature Language="DocId" Value="T:System.Text.SpanLineEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpanLineEnumerator&#xA;Implements IEnumerator(Of ReadOnlySpan(Of Char))" FrameworkAlternate="net-10.0" />
  <TypeSignature Language="F#" Value="type SpanLineEnumerator = struct&#xA;    interface IEnumerator&lt;ReadOnlySpan&lt;char&gt;&gt;&#xA;    interface IEnumerator&#xA;    interface IDisposable" FrameworkAlternate="net-10.0" />
  <TypeSignature Language="C++ CLI" Value="public value class SpanLineEnumerator : System::Collections::Generic::IEnumerator&lt;ReadOnlySpan&lt;char&gt;&gt;" FrameworkAlternate="net-10.0" />
  <TypeSignature Language="C#" Value="public ref struct SpanLineEnumerator" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpanLineEnumerator extends System.ValueType" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpanLineEnumerator" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
  <TypeSignature Language="F#" Value="type SpanLineEnumerator = struct" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
  <TypeSignature Language="C++ CLI" Value="public value class SpanLineEnumerator" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="net-10.0">
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.ReadOnlySpan&lt;System.Char&gt;&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-10.0">
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-10.0">
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="net-10.0;net-7.0;net-8.0;net-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsByRefLike]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsByRefLike&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enumerates the lines of a <see cref="T:System.ReadOnlySpan`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

To get an instance of this type, use <xref:System.MemoryExtensions.EnumerateLines(System.ReadOnlySpan{System.Char})>.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;char&gt; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;char&gt; Current" />
      <MemberSignature Language="DocId" Value="P:System.Text.SpanLineEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="F#" Value="member this.Current : ReadOnlySpan&lt;char&gt;" Usage="System.Text.SpanLineEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;char&gt; Current { ReadOnlySpan&lt;char&gt; get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0">P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the line at the current position of the enumerator.</summary>
        <value>The line at the current position of the enumerator.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Text.SpanLineEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.SpanLineEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.SpanLineEnumerator.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As SpanLineEnumerator" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Text.SpanLineEnumerator" Usage="spanLineEnumerator.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::SpanLineEnumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.SpanLineEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns this instance as an enumerator.</summary>
        <returns>This instance as an enumerator.</returns>
        <remarks>This method is called automatically by the compiler. It is not intended to be called directly by application code.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" FrameworkAlternate="net-10.0" />
      <MemberSignature Language="DocId" Value="M:System.Text.SpanLineEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="spanLineEnumerator.MoveNext " FrameworkAlternate="net-10.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" FrameworkAlternate="net-10.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="spanLineEnumerator.MoveNext " FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" FrameworkAlternate="net-6.0;net-7.0;net-8.0;net-9.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-10.0">M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Advances the enumerator to the next line of the span.</summary>
        <returns>
          <see langword="true" /> if the enumerator successfully advanced to the next line; <see langword="false" /> if the enumerator has advanced past the end of the span.
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Text.SpanLineEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IEnumerator.Current : obj" Usage="System.Collections.IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-10.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Reset">
      <MemberSignature Language="C#" Value="void IEnumerator.Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IEnumerator.Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.SpanLineEnumerator.System#Collections#IEnumerator#Reset" />
      <MemberSignature Language="VB.NET" Value="Sub Reset () Implements IEnumerator.Reset" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerator.Reset : unit -&gt; unit&#xA;override this.System.Collections.IEnumerator.Reset : unit -&gt; unit" Usage="spanLineEnumerator.System.Collections.IEnumerator.Reset " />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IEnumerator.Reset() = System::Collections::IEnumerator::Reset;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.SpanLineEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="spanLineEnumerator.System.IDisposable.Dispose " />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
