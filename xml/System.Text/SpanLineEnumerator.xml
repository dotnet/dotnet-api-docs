<Type Name="SpanLineEnumerator" FullName="System.Text.SpanLineEnumerator">
  <TypeSignature Language="C#" Value="public ref struct SpanLineEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpanLineEnumerator extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.SpanLineEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpanLineEnumerator" />
  <TypeSignature Language="F#" Value="type SpanLineEnumerator = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class SpanLineEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsByRefLike]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsByRefLike&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-7.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.CompilerFeatureRequired("RefStructs")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enumerates the lines of a <see cref="T:System.ReadOnlySpan`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

To get an instance of this type, use <xref:System.MemoryExtensions.EnumerateLines(System.ReadOnlySpan{System.Char})>.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;char&gt; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;char&gt; Current" />
      <MemberSignature Language="DocId" Value="P:System.Text.SpanLineEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="F#" Value="member this.Current : ReadOnlySpan&lt;char&gt;" Usage="System.Text.SpanLineEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;char&gt; Current { ReadOnlySpan&lt;char&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the line at the current position of the enumerator.</summary>
        <value>The line at the current position of the enumerator.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Text.SpanLineEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.SpanLineEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.SpanLineEnumerator.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As SpanLineEnumerator" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Text.SpanLineEnumerator" Usage="spanLineEnumerator.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::SpanLineEnumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.SpanLineEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns this instance as an enumerator.</summary>
        <returns>This instance as an enumerator.</returns>
        <remarks>This method is called automatically by the compiler. It is not intended to be called directly by application code.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.SpanLineEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="spanLineEnumerator.MoveNext " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Advances the enumerator to the next line of the span.</summary>
        <returns>
          <see langword="true" /> if the enumerator successfully advanced to the next line; <see langword="false" /> if the enumerator has advanced past the end of the span.
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
