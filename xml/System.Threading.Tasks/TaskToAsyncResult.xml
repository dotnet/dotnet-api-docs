<Type Name="TaskToAsyncResult" FullName="System.Threading.Tasks.TaskToAsyncResult">
  <TypeSignature Language="C#" Value="public static class TaskToAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TaskToAsyncResult extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskToAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskToAsyncResult" />
  <TypeSignature Language="F#" Value="type TaskToAsyncResult = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskToAsyncResult abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides methods for using <see cref="T:System.Threading.Tasks.Task" /> to implement the Asynchronous Programming Model pattern based on "Begin" and "End" methods.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public static IAsyncResult Begin (System.Threading.Tasks.Task task, AsyncCallback? callback, object? state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult Begin(class System.Threading.Tasks.Task task, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Begin (task As Task, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="F#" Value="static member Begin : System.Threading.Tasks.Task * AsyncCallback * obj -&gt; IAsyncResult" Usage="System.Threading.Tasks.TaskToAsyncResult.Begin (task, callback, state)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IAsyncResult ^ Begin(System::Threading::Tasks::Task ^ task, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" />
        <Parameter Name="callback" Type="System.AsyncCallback">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="state" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be wrapped in an <see cref="T:System.IAsyncResult" />.</param>
        <param name="callback">The callback to be invoked upon <paramref name="task" />'s completion. If <see langword="null" />, no callback will be invoked.</param>
        <param name="state">The state to be stored in the <see cref="T:System.IAsyncResult" />.</param>
        <summary>Creates a new <see cref="T:System.IAsyncResult" /> from the specified <see cref="T:System.Threading.Tasks.Task" />, optionally invoking <paramref name="callback" /> when the task has completed.</summary>
        <returns>An <see cref="T:System.IAsyncResult" /> to represent the task's asynchronous operation. This instance will also be passed to <paramref name="callback" /> when it's invoked.</returns>
        <remarks>In conjunction with the <see cref="M:System.Threading.Tasks.TaskToAsyncResult.End(System.IAsyncResult)" /> or <see cref="M:System.Threading.Tasks.TaskToAsyncResult.End``1(System.IAsyncResult)" /> methods, this method may be used to implement the Begin/End pattern (also known as the Asynchronous Programming Model pattern, or APM). It is recommended to not expose this pattern in new code; the methods on <see cref="T:System.Threading.Tasks.TaskToAsyncResult" /> are intended only to help implement such Begin/End methods when they must be exposed, for example because a base class provides virtual methods for the pattern, or when they've already been exposed and must remain for compatibility.  These methods enable implementing all of the core asynchronous logic via <see cref="T:System.Threading.Tasks.Task" />s and then easily implementing Begin/End methods around that functionality.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="task" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public static void End (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void End(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskToAsyncResult.End(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub End (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="static member End : IAsyncResult -&gt; unit" Usage="System.Threading.Tasks.TaskToAsyncResult.End asyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void End(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> for which to wait.</param>
        <summary>Waits for the <see cref="T:System.Threading.Tasks.Task" /> wrapped by the <see cref="T:System.IAsyncResult" /> returned by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" /> to complete.</summary>
        <remarks>This will propagate any exception stored in the wrapped <see cref="T:System.Threading.Tasks.Task" />.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> was not produced by a call to <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="End&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult End&lt;TResult&gt; (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult End&lt;TResult&gt;(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskToAsyncResult.End``1(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function End(Of TResult) (asyncResult As IAsyncResult) As TResult" />
      <MemberSignature Language="F#" Value="static member End : IAsyncResult -&gt; 'Result" Usage="System.Threading.Tasks.TaskToAsyncResult.End asyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult End(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the result produced.</typeparam>
        <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> for which to wait.</param>
        <summary>Waits for the <see cref="T:System.Threading.Tasks.Task`1" /> wrapped by the <see cref="T:System.IAsyncResult" /> returned by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" /> to complete.</summary>
        <returns>The result of the <see cref="T:System.Threading.Tasks.Task`1" /> wrapped by the <see cref="T:System.IAsyncResult" />.</returns>
        <remarks>This will propagate any exception stored in the wrapped <see cref="T:System.Threading.Tasks.Task`1" />.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> was not produced by a call to <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Unwrap (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Unwrap(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskToAsyncResult.Unwrap(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unwrap (asyncResult As IAsyncResult) As Task" />
      <MemberSignature Language="F#" Value="static member Unwrap : IAsyncResult -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.TaskToAsyncResult.Unwrap asyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Unwrap(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> created by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" />.</param>
        <summary>Extracts the underlying <see cref="T:System.Threading.Tasks.Task" /> from an <see cref="T:System.IAsyncResult" /> created by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" />.</summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> wrapped by the <see cref="T:System.IAsyncResult" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> was not produced by a call to <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unwrap&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Unwrap&lt;TResult&gt; (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Unwrap&lt;TResult&gt;(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskToAsyncResult.Unwrap``1(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unwrap(Of TResult) (asyncResult As IAsyncResult) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member Unwrap : IAsyncResult -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.TaskToAsyncResult.Unwrap asyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Unwrap(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the result produced by the returned task.</typeparam>
        <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> created by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" />.</param>
        <summary>Extracts the underlying <see cref="T:System.Threading.Tasks.Task`1" /> from an <see cref="T:System.IAsyncResult" /> created by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" />.</summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task`1" /> wrapped by the <see cref="T:System.IAsyncResult" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> was not produced by a call to <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" />,
            or the <see cref="T:System.Threading.Tasks.Task`1" /> provided to <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)" /> was used a generic type parameter
            that's different from the <typeparamref name="TResult" /> supplied to this call.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
