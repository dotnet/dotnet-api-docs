<Type Name="TimeProviderTaskExtensions" FullName="System.Threading.Tasks.TimeProviderTaskExtensions">
  <TypeSignature Language="C#" Value="public static class TimeProviderTaskExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TimeProviderTaskExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TimeProviderTaskExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TimeProviderTaskExtensions" />
  <TypeSignature Language="F#" Value="type TimeProviderTaskExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeProviderTaskExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-8.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-8.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Provide extensions methods for <see cref="T:System.Threading.Tasks.Task" /> operations with <see cref="T:System.TimeProvider" />.
            </summary>
    <remarks>
            The Microsoft.Bcl.TimeProvider library interfaces are intended solely for use in building against pre-.NET 8 surface area.
            If your code is being built against .NET 8 or higher, then this library should not be utilized.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateCancellationTokenSource">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationTokenSource CreateCancellationTokenSource (this TimeProvider timeProvider, TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.CancellationTokenSource CreateCancellationTokenSource(class System.TimeProvider timeProvider, valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TimeProviderTaskExtensions.CreateCancellationTokenSource(System.TimeProvider,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateCancellationTokenSource (timeProvider As TimeProvider, delay As TimeSpan) As CancellationTokenSource" />
      <MemberSignature Language="F#" Value="static member CreateCancellationTokenSource : TimeProvider * TimeSpan -&gt; System.Threading.CancellationTokenSource" Usage="System.Threading.Tasks.TimeProviderTaskExtensions.CreateCancellationTokenSource (timeProvider, delay)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::CancellationTokenSource ^ CreateCancellationTokenSource(TimeProvider ^ timeProvider, TimeSpan delay);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeProvider" Type="System.TimeProvider" RefType="this" />
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeProvider">The <see cref="T:System.TimeProvider" /> with which to interpret the <paramref name="delay" />. </param>
        <param name="delay">The time interval to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />. </param>
        <summary>Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class that will be canceled after the specified <see cref="T:System.TimeSpan" />. </summary>
        <returns>
          <see cref="T:System.Threading.CancellationTokenSource" /> that will be canceled after the specified <paramref name="delay" />.</returns>
        <remarks>
          <para>
            The countdown for the delay starts during the call to the constructor. When the delay expires,
            the constructed <see cref="T:System.Threading.CancellationTokenSource" /> is canceled if it has
            not been canceled already.
            </para>
          <para>
            If running on .NET versions earlier than .NET 8.0, there is a constraint when invoking <see cref="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)" /> on the resultant object.
            This action will not terminate the initial timer indicated by <paramref name="delay" />. However, this restriction does not apply on .NET 8.0 and later versions.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"> The <paramref name="delay" /> is negative and not equal to <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> or greater than maximum allowed timer duration.</exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (this TimeProvider timeProvider, TimeSpan delay, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(class System.TimeProvider timeProvider, valuetype System.TimeSpan delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TimeProviderTaskExtensions.Delay(System.TimeProvider,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Delay (timeProvider As TimeProvider, delay As TimeSpan, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member Delay : TimeProvider * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.TimeProviderTaskExtensions.Delay (timeProvider, delay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeProvider" Type="System.TimeProvider" RefType="this" />
        <Parameter Name="delay" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeProvider">The <see cref="T:System.TimeProvider" /> with which to interpret <paramref name="delay" />.</param>
        <param name="delay">The <see cref="T:System.TimeSpan" /> to wait before completing the returned task, or <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> to wait indefinitely.</param>
        <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
        <summary>Creates a task that completes after a specified time interval.</summary>
        <returns>A task that represents the time delay.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="timeProvider" /> argument is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="delay" /> represents a negative time interval other than <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WaitAsync (this System.Threading.Tasks.Task task, TimeSpan timeout, TimeProvider timeProvider, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WaitAsync(class System.Threading.Tasks.Task task, valuetype System.TimeSpan timeout, class System.TimeProvider timeProvider, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TimeProviderTaskExtensions.WaitAsync(System.Threading.Tasks.Task,System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitAsync (task As Task, timeout As TimeSpan, timeProvider As TimeProvider, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member WaitAsync : System.Threading.Tasks.Task * TimeSpan * TimeProvider * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.TimeProviderTaskExtensions.WaitAsync (task, timeout, timeProvider, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="timeProvider" Type="System.TimeProvider" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="task">The task for which to wait on until completion.</param>
        <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task" /> should be faulted with a <see cref="T:System.TimeoutException" /> if it hasn't otherwise completed.</param>
        <param name="timeProvider">The <see cref="T:System.TimeProvider" /> with which to interpret <paramref name="timeout" />.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for a cancellation request.</param>
        <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that will complete when this <see cref="T:System.Threading.Tasks.Task" /> completes, when the specified timeout expires, or when the specified <see cref="T:System.Threading.CancellationToken" /> has cancellation requested.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="timeProvider" /> argument is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> represents a negative time interval other than <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; WaitAsync&lt;TResult&gt; (this System.Threading.Tasks.Task&lt;TResult&gt; task, TimeSpan timeout, TimeProvider timeProvider, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; WaitAsync&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt; task, valuetype System.TimeSpan timeout, class System.TimeProvider timeProvider, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TimeProviderTaskExtensions.WaitAsync``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitAsync(Of TResult) (task As Task(Of TResult), timeout As TimeSpan, timeProvider As TimeProvider, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member WaitAsync : System.Threading.Tasks.Task&lt;'Result&gt; * TimeSpan * TimeProvider * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.TimeProviderTaskExtensions.WaitAsync (task, timeout, timeProvider, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.TimeProvider</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult">
          <Attributes>
            <Attribute FrameworkAlternate="net-8.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;TResult&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="timeProvider" Type="System.TimeProvider" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="task">The task for which to wait on until completion.</param>
        <param name="timeout">The timeout after which the <see cref="T:System.Threading.Tasks.Task" /> should be faulted with a <see cref="T:System.TimeoutException" /> if it hasn't otherwise completed.</param>
        <param name="timeProvider">The <see cref="T:System.TimeProvider" /> with which to interpret <paramref name="timeout" />.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor for a cancellation request.</param>
        <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that will complete when this <see cref="T:System.Threading.Tasks.Task" /> completes, when the specified timeout expires, or when the specified <see cref="T:System.Threading.CancellationToken" /> has cancellation requested.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous wait.  It may or may not be the same instance as the current instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="timeProvider" /> argument is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> represents a negative time interval other than <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
