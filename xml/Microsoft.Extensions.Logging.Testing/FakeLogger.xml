<Type Name="FakeLogger" FullName="Microsoft.Extensions.Logging.Testing.FakeLogger">
  <TypeSignature Language="C#" Value="public class FakeLogger : Microsoft.Extensions.Logging.ILogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FakeLogger extends System.Object implements class Microsoft.Extensions.Logging.ILogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.Testing.FakeLogger" />
  <TypeSignature Language="VB.NET" Value="Public Class FakeLogger&#xA;Implements ILogger" />
  <TypeSignature Language="F#" Value="type FakeLogger = class&#xA;    interface ILogger" />
  <TypeSignature Language="C++ CLI" Value="public ref class FakeLogger : Microsoft::Extensions::Logging::ILogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.ILogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FakeLogger (Microsoft.Extensions.Logging.Testing.FakeLogCollector? collector = default, string? category = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Logging.Testing.FakeLogCollector collector, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Testing.FakeLogger.#ctor(Microsoft.Extensions.Logging.Testing.FakeLogCollector,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional collector As FakeLogCollector = Nothing, Optional category As String = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Logging.Testing.FakeLogger : Microsoft.Extensions.Logging.Testing.FakeLogCollector * string -&gt; Microsoft.Extensions.Logging.Testing.FakeLogger" Usage="new Microsoft.Extensions.Logging.Testing.FakeLogger (collector, category)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="collector" Type="Microsoft.Extensions.Logging.Testing.FakeLogCollector" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collector">To be added.</param>
        <param name="category">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FakeLogger (Action&lt;string&gt; outputSink, string? category = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;string&gt; outputSink, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Testing.FakeLogger.#ctor(System.Action{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outputSink As Action(Of String), Optional category As String = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Logging.Testing.FakeLogger : Action&lt;string&gt; * string -&gt; Microsoft.Extensions.Logging.Testing.FakeLogger" Usage="new Microsoft.Extensions.Logging.Testing.FakeLogger (outputSink, category)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outputSink" Type="System.Action&lt;System.String&gt;" />
        <Parameter Name="category" Type="System.String">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="outputSink">To be added.</param>
        <param name="category">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginScope&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public IDisposable? BeginScope&lt;TState&gt; (TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable BeginScope&lt;TState&gt;(!!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Testing.FakeLogger.BeginScope``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginScope(Of TState) (state As TState) As IDisposable" />
      <MemberSignature Language="F#" Value="abstract member BeginScope : 'State -&gt; IDisposable&#xA;override this.BeginScope : 'State -&gt; IDisposable" Usage="fakeLogger.BeginScope state" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; virtual IDisposable ^ BeginScope(TState state);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="state" Type="TState" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public string? Category { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Category" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.Testing.FakeLogger.Category" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Category As String" />
      <MemberSignature Language="F#" Value="member this.Category : string" Usage="Microsoft.Extensions.Logging.Testing.FakeLogger.Category" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Category { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Collector">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.Testing.FakeLogCollector Collector { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.Testing.FakeLogCollector Collector" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.Testing.FakeLogger.Collector" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Collector As FakeLogCollector" />
      <MemberSignature Language="F#" Value="member this.Collector : Microsoft.Extensions.Logging.Testing.FakeLogCollector" Usage="Microsoft.Extensions.Logging.Testing.FakeLogger.Collector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Logging::Testing::FakeLogCollector ^ Collector { Microsoft::Extensions::Logging::Testing::FakeLogCollector ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.Testing.FakeLogCollector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlLevel">
      <MemberSignature Language="C#" Value="public void ControlLevel (Microsoft.Extensions.Logging.LogLevel logLevel, bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ControlLevel(valuetype Microsoft.Extensions.Logging.LogLevel logLevel, bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Testing.FakeLogger.ControlLevel(Microsoft.Extensions.Logging.LogLevel,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ControlLevel (logLevel As LogLevel, enabled As Boolean)" />
      <MemberSignature Language="F#" Value="member this.ControlLevel : Microsoft.Extensions.Logging.LogLevel * bool -&gt; unit" Usage="fakeLogger.ControlLevel (logLevel, enabled)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ControlLevel(Microsoft::Extensions::Logging::LogLevel logLevel, bool enabled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="logLevel">To be added.</param>
        <param name="enabled">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled (Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Testing.FakeLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEnabled (logLevel As LogLevel) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool&#xA;override this.IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool" Usage="fakeLogger.IsEnabled logLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnabled(Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="logLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LatestRecord">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.Logging.Testing.FakeLogRecord LatestRecord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.Testing.FakeLogRecord LatestRecord" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.Logging.Testing.FakeLogger.LatestRecord" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LatestRecord As FakeLogRecord" />
      <MemberSignature Language="F#" Value="member this.LatestRecord : Microsoft.Extensions.Logging.Testing.FakeLogRecord" Usage="Microsoft.Extensions.Logging.Testing.FakeLogger.LatestRecord" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::Logging::Testing::FakeLogRecord ^ LatestRecord { Microsoft::Extensions::Logging::Testing::FakeLogRecord ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.Testing.FakeLogRecord</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public void Log&lt;TState&gt; (Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, Exception? exception, Func&lt;TState,Exception?,string&gt; formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Log&lt;TState&gt;(valuetype Microsoft.Extensions.Logging.LogLevel logLevel, valuetype Microsoft.Extensions.Logging.EventId eventId, !!TState state, class System.Exception exception, class System.Func`3&lt;!!TState, class System.Exception, string&gt; formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Testing.FakeLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Log(Of TState) (logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))" />
      <MemberSignature Language="F#" Value="abstract member Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit&#xA;override this.Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit" Usage="fakeLogger.Log (logLevel, eventId, state, exception, formatter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; virtual void Log(Microsoft::Extensions::Logging::LogLevel logLevel, Microsoft::Extensions::Logging::EventId eventId, TState state, Exception ^ exception, Func&lt;TState, Exception ^, System::String ^&gt; ^ formatter);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Telemetry.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Diagnostics.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="state" Type="TState">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="formatter" Type="System.Func&lt;TState,System.Exception,System.String&gt;">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="logLevel">To be added.</param>
        <param name="eventId">To be added.</param>
        <param name="state">To be added.</param>
        <param name="exception">To be added.</param>
        <param name="formatter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
