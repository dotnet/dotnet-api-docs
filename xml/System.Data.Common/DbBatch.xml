<Type Name="DbBatch" FullName="System.Data.Common.DbBatch">
  <TypeSignature Language="C#" Value="public abstract class DbBatch : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbBatch extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbBatch" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbBatch&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type DbBatch = class&#xA;    interface IDisposable&#xA;    interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbBatch abstract : IAsyncDisposable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a batch of commands which can be executed against a data source in a single round trip. Provides a base class for database-specific classes that represent command batches.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

The precise semantics of batch execution vary across ADO.NET providers, especially around error handling. When possible, it's recommended that an error in a command within the batch immediately terminate the batch, skip all subsequent commands, and roll back commands that already executed. However, this behavior may not be supported across databases; consult your ADO.NET provider's documentation.
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbBatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Data.Common.DbBatch" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchCommands">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbBatchCommandCollection BatchCommands { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbBatchCommandCollection BatchCommands" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbBatch.BatchCommands" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BatchCommands As DbBatchCommandCollection" />
      <MemberSignature Language="F#" Value="member this.BatchCommands : System.Data.Common.DbBatchCommandCollection" Usage="System.Data.Common.DbBatch.BatchCommands" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbBatchCommandCollection ^ BatchCommands { System::Data::Common::DbBatchCommandCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbBatchCommandCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of <see cref="T:System.Data.Common.DbBatchCommand" /> objects.</summary>
        <value>The commands contained within the batch.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public abstract void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Cancel ()" />
      <MemberSignature Language="F#" Value="abstract member Cancel : unit -&gt; unit" Usage="dbBatch.Cancel " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Cancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to cancel the execution of a <see cref="T:System.Data.Common.DbBatch" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If there is nothing to cancel, nothing happens. However, if there is a batch in process, and the attempt to cancel fails, no exception is generated.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection? Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbBatch.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As DbConnection" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.Common.DbConnection with get, set" Usage="System.Data.Common.DbBatch.Connection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ Connection { System::Data::Common::DbConnection ^ get(); void set(System::Data::Common::DbConnection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Data.Common.DbConnection" /> used by this <see cref="T:System.Data.Common.DbBatch" />.</summary>
        <value>The connection to the data source.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBatchCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbBatchCommand CreateBatchCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Common.DbBatchCommand CreateBatchCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.CreateBatchCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateBatchCommand () As DbBatchCommand" />
      <MemberSignature Language="F#" Value="member this.CreateBatchCommand : unit -&gt; System.Data.Common.DbBatchCommand" Usage="dbBatch.CreateBatchCommand " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Common::DbBatchCommand ^ CreateBatchCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbBatchCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of a <see cref="T:System.Data.Common.DbBatchCommand" /> object.</summary>
        <returns>A <see cref="T:System.Data.Common.DbBatchCommand" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbBatchCommand">
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.DbBatchCommand CreateDbBatchCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DbBatchCommand CreateDbBatchCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.CreateDbBatchCommand" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateDbBatchCommand () As DbBatchCommand" />
      <MemberSignature Language="F#" Value="abstract member CreateDbBatchCommand : unit -&gt; System.Data.Common.DbBatchCommand" Usage="dbBatch.CreateDbBatchCommand " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Data::Common::DbBatchCommand ^ CreateDbBatchCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbBatchCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, creates a new instance of a <see cref="T:System.Data.Common.DbBatchCommand" /> object.</summary>
        <returns>A <see cref="T:System.Data.Common.DbBatchCommand" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbBatchCommands">
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.DbBatchCommandCollection DbBatchCommands { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbBatchCommandCollection DbBatchCommands" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbBatch.DbBatchCommands" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride ReadOnly Property DbBatchCommands As DbBatchCommandCollection" />
      <MemberSignature Language="F#" Value="member this.DbBatchCommands : System.Data.Common.DbBatchCommandCollection" Usage="System.Data.Common.DbBatch.DbBatchCommands" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract property System::Data::Common::DbBatchCommandCollection ^ DbBatchCommands { System::Data::Common::DbBatchCommandCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbBatchCommandCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets the collection of <see cref="T:System.Data.Common.DbBatchCommand" /> objects.</summary>
        <value>The commands contained within the batch.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.DbConnection? DbConnection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbBatch.DbConnection" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Property DbConnection As DbConnection" />
      <MemberSignature Language="F#" Value="member this.DbConnection : System.Data.Common.DbConnection with get, set" Usage="System.Data.Common.DbBatch.DbConnection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract property System::Data::Common::DbConnection ^ DbConnection { System::Data::Common::DbConnection ^ get(); void set(System::Data::Common::DbConnection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets or sets the <see cref="T:System.Data.Common.DbConnection" /> used by this <see cref="T:System.Data.Common.DbBatch" />.</summary>
        <value>The connection to the data source.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbTransaction">
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.DbTransaction? DbTransaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction DbTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbBatch.DbTransaction" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Property DbTransaction As DbTransaction" />
      <MemberSignature Language="F#" Value="member this.DbTransaction : System.Data.Common.DbTransaction with get, set" Usage="System.Data.Common.DbBatch.DbTransaction" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract property System::Data::Common::DbTransaction ^ DbTransaction { System::Data::Common::DbTransaction ^ get(); void set(System::Data::Common::DbTransaction ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, gets or sets the <see cref="P:System.Data.Common.DbTransaction" /> within which this <see cref="T:System.Data.Common.DbBatch" /> object executes.</summary>
        <value>The transaction within which a batch of a .NET data provider executes. The default value is a null reference (<see langword="Nothing" /> in Visual Basic).</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="dbBatch.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="dbBatch.DisposeAsync " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously diposes the batch object.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default implementation of this asynchronous method delegates to its synchronous counterpart and returns a completed `ValueTask`, potentially blocking the calling thread.
 
 Data providers that support [asynchronous programming](/dotnet/framework/data/adonet/asynchronous-programming) should override the default implementation using asynchronous I/O operations.
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReader">
      <MemberSignature Language="C#" Value="protected abstract System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DbDataReader ExecuteDbDataReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.ExecuteDbDataReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ExecuteDbDataReader (behavior As CommandBehavior) As DbDataReader" />
      <MemberSignature Language="F#" Value="abstract member ExecuteDbDataReader : System.Data.CommandBehavior -&gt; System.Data.Common.DbDataReader" Usage="dbBatch.ExecuteDbDataReader behavior" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Data::Common::DbDataReader ^ ExecuteDbDataReader(System::Data::CommandBehavior behavior);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">An instance of <see cref="T:System.Data.CommandBehavior" />, specifying options for batch execution and data retrieval.</param>
        <summary>When overridden in a derived class, executes the batch against its connection, returning a <see cref="T:System.Data.Common.DbDataReader" /> which can be used to access the results.</summary>
        <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the batch returns multiple result sets from different commands, <xref:System.Data.Common.DbDataReader.NextResult> can be used to advance the reader to the next result set.
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.Common.DbException">An error occurred while executing the batch.</exception>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Data.CommandBehavior" /> value is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReaderAsync">
      <MemberSignature Language="C#" Value="protected abstract System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ExecuteDbDataReaderAsync (behavior As CommandBehavior, cancellationToken As CancellationToken) As Task(Of DbDataReader)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteDbDataReaderAsync : System.Data.CommandBehavior * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;" Usage="dbBatch.ExecuteDbDataReaderAsync (behavior, cancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Threading::Tasks::Task&lt;System::Data::Common::DbDataReader ^&gt; ^ ExecuteDbDataReaderAsync(System::Data::CommandBehavior behavior, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">One of the enumeration values that specifies options for batch execution and data retrieval.</param>
        <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        <summary>Providers should implement this method to provide a non-default implementation for <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> overloads.  
  
 The default implementation invokes the synchronous <see cref="M:System.Data.Common.DbCommand.ExecuteReader" /> method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellation token. Exceptions thrown by ExecuteReader will be communicated via the returned Task Exception property.  
  
 This method accepts a cancellation token that can be used to request the operation to be cancelled early. Implementations may ignore this request.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about asynchronous programming, see [Asynchronous Programming](/dotnet/framework/data/adonet/asynchronous-programming).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQuery">
      <MemberSignature Language="C#" Value="public abstract int ExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.ExecuteNonQuery" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ExecuteNonQuery () As Integer" />
      <MemberSignature Language="F#" Value="abstract member ExecuteNonQuery : unit -&gt; int" Usage="dbBatch.ExecuteNonQuery " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int ExecuteNonQuery();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executes the batch against its connection object, returning the total number of rows affected across all the batch commands.</summary>
        <returns>The total number of rows affected across all the batch commands.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use <xref:System.Data.Common.DbBatch.ExecuteNonQuery%2A> to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database by executing UPDATE, INSERT, or DELETE statements.  
  
 Although <xref:System.Data.Common.DbBatch.ExecuteNonQuery%2A> does not return any rows, any output parameters or return values mapped to parameters are populated with data.  
  
 For UPDATE, INSERT, and DELETE statements, the return value is the total number of rows affected by the batch. If no UPDATE, INSERT, or DELETE statements are included in the batch, the return value is -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQueryAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;int&gt; ExecuteNonQueryAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteNonQueryAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ExecuteNonQueryAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteNonQueryAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="dbBatch.ExecuteNonQueryAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        <summary>This is the asynchronous version of <see cref="M:System.Data.Common.DbBatch.ExecuteNonQuery" />. Providers should override with an appropriate implementation. The cancellation token may optionally be ignored.  
  
 The default implementation invokes the synchronous <see cref="M:System.Data.Common.DbBatch.ExecuteNonQuery" /> method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellation token.  Exceptions thrown by <see cref="M:System.Data.Common.DbBatch.ExecuteNonQuery" /> will be communicated via the returned Task Exception property.  
  
 Do not invoke other methods and properties of the <see langword="DbCommand" /> object until the returned Task is complete.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about asynchronous programming, see [Asynchronous Programming](/dotnet/framework/data/adonet/asynchronous-programming).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.Common.DbException">An error occurred while executing the batch.</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ado-net-overview">ADO.NET Overview</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbDataReader ExecuteReader (System.Data.CommandBehavior behavior = System.Data.CommandBehavior.Default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Common.DbDataReader ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.ExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader (Optional behavior As CommandBehavior = System.Data.CommandBehavior.Default) As DbDataReader" />
      <MemberSignature Language="F#" Value="member this.ExecuteReader : System.Data.CommandBehavior -&gt; System.Data.Common.DbDataReader" Usage="dbBatch.ExecuteReader behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">One of the enumeration values that specifies options for batch execution and data retrieval.</param>
        <summary>Executes the batch against its connection, returning a <see cref="T:System.Data.Common.DbDataReader" /> which can be used to access the results.</summary>
        <returns>A <see cref="T:System.Data.Common.DbDataReader" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the batch returns multiple result sets from different commands, <xref:System.Data.Common.DbDataReader.NextResult> can be used to advance the reader to the next result set.
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ExecuteReaderAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.Common.DbDataReader&gt; ExecuteReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.ExecuteReaderAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReaderAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of DbDataReader)" />
      <MemberSignature Language="F#" Value="member this.ExecuteReaderAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;" Usage="dbBatch.ExecuteReaderAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>An asynchronous version of <see cref="Overload:System.Data.Common.DbBatch.ExecuteReader" />, which executes the batch against its connection, returning a <see cref="T:System.Data.Common.DbDataReader" /> which can be used to access the results.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Managed provider implementers must call <xref:System.Data.Common.DbBatch.ExecuteDbDataReaderAsync%2A> in <xref:System.Data.Common.DbBatch.ExecuteReaderAsync%2A>. For more information about asynchronous programming, see [Asynchronous Programming](/dotnet/framework/data/adonet/asynchronous-programming).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.Common.DbException">An error occurred while executing the batch.</exception>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Data.CommandBehavior" /> value is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.Common.DbDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReaderAsync (behavior As CommandBehavior, Optional cancellationToken As CancellationToken = Nothing) As Task(Of DbDataReader)" />
      <MemberSignature Language="F#" Value="member this.ExecuteReaderAsync : System.Data.CommandBehavior * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;" Usage="dbBatch.ExecuteReaderAsync (behavior, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">One of the enumeration values that specifies options for batch execution and data retrieval.</param>
        <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        <summary>An asynchronous version of <see cref="Overload:System.Data.Common.DbBatch.ExecuteReader" />, which executes the batch against its connection, returning a <see cref="T:System.Data.Common.DbDataReader" /> which can be used to access the results.</summary>
        <returns>A task representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Managed provider implementers must call <xref:System.Data.Common.DbBatch.ExecuteDbDataReaderAsync%2A> in <xref:System.Data.Common.DbBatch.ExecuteReaderAsync%2A>. For more information about asynchronous programming, see [Asynchronous Programming](/dotnet/framework/data/adonet/asynchronous-programming).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.Common.DbException">An error occurred while executing the batch.</exception>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Data.CommandBehavior" /> value is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalar">
      <MemberSignature Language="C#" Value="public abstract object? ExecuteScalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ExecuteScalar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.ExecuteScalar" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ExecuteScalar () As Object" />
      <MemberSignature Language="F#" Value="abstract member ExecuteScalar : unit -&gt; obj" Usage="dbBatch.ExecuteScalar " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ExecuteScalar();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executes the batch and returns the first column of the first row in the first returned result set. All other columns, rows and resultsets are ignored.</summary>
        <returns>The first column of the first row in the first result set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Data.Common.DbException">An error occurred while executing the batch.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalarAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;object?&gt; ExecuteScalarAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ExecuteScalarAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.ExecuteScalarAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ExecuteScalarAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Object)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteScalarAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="dbBatch.ExecuteScalarAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        <summary>An asynchronous version of <see cref="M:System.Data.Common.DbBatch.ExecuteScalar" />, which executes the batch and returns the first column of the first row in the first returned result set. All other columns, rows and result sets are ignored.</summary>
        <returns>The first column of the first row in the first result set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Data.Common.DbException">An error occurred while executing the batch.</exception>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public abstract void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.Prepare" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Prepare ()" />
      <MemberSignature Language="F#" Value="abstract member Prepare : unit -&gt; unit" Usage="dbBatch.Prepare " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Prepare();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a prepared (or compiled) version of the batch, or of each of its commands, on the data source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task PrepareAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task PrepareAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbBatch.PrepareAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function PrepareAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member PrepareAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="dbBatch.PrepareAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">An optional token to cancel the asynchronous operation. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously creates a prepared (or compiled) version of the batch, or of each of its commands, on the data source.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public abstract int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbBatch.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property Timeout As Integer" />
      <MemberSignature Language="F#" Value="member this.Timeout : int with get, set" Usage="System.Data.Common.DbBatch.Timeout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Timeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the wait time (in seconds) before terminating the attempt to execute the batch and generating an error.</summary>
        <value>The time in seconds to wait for the batch to execute.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An <xref:System.ArgumentException> is generated if the assigned <xref:System.Data.Common.DbBatch.Timeout%2A> property value is less than 0.  
  
 Note to implementers: it's recommended that 0 mean no timeout.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbTransaction? Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbBatch.Transaction" />
      <MemberSignature Language="VB.NET" Value="Public Property Transaction As DbTransaction" />
      <MemberSignature Language="F#" Value="member this.Transaction : System.Data.Common.DbTransaction with get, set" Usage="System.Data.Common.DbBatch.Transaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbTransaction ^ Transaction { System::Data::Common::DbTransaction ^ get(); void set(System::Data::Common::DbTransaction ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Data.Common.DbTransaction" /> within which this <see cref="T:System.Data.Common.DbBatch" /> object executes.</summary>
        <value>The transaction within which a batch of a .NET data provider executes. The default value is a null reference (<see langword="Nothing" /> in Visual Basic).</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
