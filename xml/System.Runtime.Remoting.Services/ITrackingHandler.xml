<Type Name="ITrackingHandler" FullName="System.Runtime.Remoting.Services.ITrackingHandler">
  <TypeSignature Language="C#" Value="public interface ITrackingHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITrackingHandler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Services.ITrackingHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITrackingHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITrackingHandler" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indicates that the implementing object must be notified of marshaling, unmarshaling, and disconnection of objects and proxies by the remoting infrastructure.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Every object that is registered with <xref:System.Runtime.Remoting.Services.TrackingServices> is called by remoting when an object or proxy in the current <xref:System.AppDomain> is marshaled, unmarshaled, or disconnected.  
  
 Note that only objects can be disconnected. An exception is thrown when disconnect is called on a proxy.  
  
> [!NOTE]
>  This interface makes a link demand. A SecurityException is thrown if the immediate caller makes the call through a reference to the interface and does not have infrastructure permission. See [Link Demands](~/docs/framework/misc/link-demands.md) for more information.  
  
   
  
## Examples  
 The following code example shows how to implement the methods of the <xref:System.Runtime.Remoting.Services.ITrackingHandler> interface to receive notifications from the remoting infrastructure.  
  
 The following code example shows how to implement this interface.  
  
 [!code-csharp[System.Runtime.Remoting.Services.TrackingServices#30](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Services.TrackingServices/CS/trackinghandler.cs#30)]  
  
 The following code example shows how to implement this interface on a server.  
  
 [!code-csharp[System.Runtime.Remoting.Services.TrackingServices#20](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Services.TrackingServices/CS/server.cs#20)]  
  
 The following code example shows how to implement this interface on a client for the server in the preceding code example.  
  
 [!code-csharp[System.Runtime.Remoting.Services.TrackingServices#0](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Services.TrackingServices/CS/client.cs#0)]  
  
 The following code example shows the remote object that is used by the server and the client.  
  
 [!code-csharp[System.Runtime.Remoting.Services.TrackingServices#10](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Services.TrackingServices/CS/remoteservice.cs#10)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">For operating with infrastructure code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Permission Value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
  </Docs>
  <Members>
    <Member MemberName="DisconnectedObject">
      <MemberSignature Language="C#" Value="public void DisconnectedObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisconnectedObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Services.ITrackingHandler.DisconnectedObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisconnectedObject (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisconnectedObject(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The disconnected object.</param>
        <summary>Notifies the current instance that an object has been disconnected from its proxy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to implement this method. This code example is part of a larger example that is provided for the <xref:System.Runtime.Remoting.Services.ITrackingHandler> interface.  
  
 [!code-csharp[System.Runtime.Remoting.Services.TrackingServices#33](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Services.TrackingServices/CS/trackinghandler.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshaledObject">
      <MemberSignature Language="C#" Value="public void MarshaledObject (object obj, System.Runtime.Remoting.ObjRef or);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MarshaledObject(object obj, class System.Runtime.Remoting.ObjRef or) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Services.ITrackingHandler.MarshaledObject(System.Object,System.Runtime.Remoting.ObjRef)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MarshaledObject (obj As Object, or As ObjRef)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MarshaledObject(System::Object ^ obj, System::Runtime::Remoting::ObjRef ^ or);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="or" Type="System.Runtime.Remoting.ObjRef" />
      </Parameters>
      <Docs>
        <param name="obj">The object that has been marshaled.</param>
        <param name="or">The <see cref="T:System.Runtime.Remoting.ObjRef" /> that results from marshaling and represents the specified object.</param>
        <summary>Notifies the current instance that an object has been marshaled.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to implement this method. This code example is part of a larger example that is provided for the <xref:System.Runtime.Remoting.Services.ITrackingHandler> interface.  
  
 [!code-csharp[System.Runtime.Remoting.Services.TrackingServices#31](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Services.TrackingServices/CS/trackinghandler.cs#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnmarshaledObject">
      <MemberSignature Language="C#" Value="public void UnmarshaledObject (object obj, System.Runtime.Remoting.ObjRef or);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnmarshaledObject(object obj, class System.Runtime.Remoting.ObjRef or) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Services.ITrackingHandler.UnmarshaledObject(System.Object,System.Runtime.Remoting.ObjRef)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnmarshaledObject (obj As Object, or As ObjRef)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnmarshaledObject(System::Object ^ obj, System::Runtime::Remoting::ObjRef ^ or);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="or" Type="System.Runtime.Remoting.ObjRef" />
      </Parameters>
      <Docs>
        <param name="obj">The unmarshaled object.</param>
        <param name="or">The <see cref="T:System.Runtime.Remoting.ObjRef" /> that represents the specified object.</param>
        <summary>Notifies the current instance that an object has been unmarshaled.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to implement this method. This code example is part of a larger example that is provided for the <xref:System.Runtime.Remoting.Services.ITrackingHandler> interface.  
  
 [!code-csharp[System.Runtime.Remoting.Services.TrackingServices#32](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Services.TrackingServices/CS/trackinghandler.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>