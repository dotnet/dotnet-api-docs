<Type Name="BinderBase&lt;T&gt;" FullName="System.CommandLine.Binding.BinderBase&lt;T&gt;">
  <TypeSignature Language="C#" Value="public abstract class BinderBase&lt;T&gt; : System.CommandLine.Binding.IValueDescriptor&lt;T&gt;, System.CommandLine.Binding.IValueSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BinderBase`1&lt;T&gt; extends System.Object implements class System.CommandLine.Binding.IValueDescriptor, class System.CommandLine.Binding.IValueDescriptor`1&lt;!T&gt;, class System.CommandLine.Binding.IValueSource" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.Binding.BinderBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BinderBase(Of T)&#xA;Implements IValueDescriptor(Of T), IValueSource" />
  <TypeSignature Language="F#" Value="type BinderBase&lt;'T&gt; = class&#xA;    interface IValueDescriptor&lt;'T&gt;&#xA;    interface IValueDescriptor&#xA;    interface IValueSource" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class BinderBase abstract : System::CommandLine::Binding::IValueDescriptor&lt;T&gt;, System::CommandLine::Binding::IValueSource" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.CommandLine.Binding.IValueDescriptor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.CommandLine.Binding.IValueDescriptor&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.CommandLine.Binding.IValueSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">The type to be bound.</typeparam>
    <summary>
            Supports binding of custom types.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BinderBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Binding.BinderBase`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BinderBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoundValue">
      <MemberSignature Language="C#" Value="protected abstract T GetBoundValue (System.CommandLine.Binding.BindingContext bindingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !T GetBoundValue(class System.CommandLine.Binding.BindingContext bindingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Binding.BinderBase`1.GetBoundValue(System.CommandLine.Binding.BindingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetBoundValue (bindingContext As BindingContext) As T" />
      <MemberSignature Language="F#" Value="abstract member GetBoundValue : System.CommandLine.Binding.BindingContext -&gt; 'T" Usage="binderBase.GetBoundValue bindingContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract T GetBoundValue(System::CommandLine::Binding::BindingContext ^ bindingContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingContext" Type="System.CommandLine.Binding.BindingContext" />
      </Parameters>
      <Docs>
        <param name="bindingContext" />
        <summary>
            Gets a value from the binding context.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CommandLine.Binding.IValueDescriptor.GetDefaultValue">
      <MemberSignature Language="C#" Value="object? IValueDescriptor.GetDefaultValue ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.CommandLine.Binding.IValueDescriptor.GetDefaultValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Binding.BinderBase`1.System#CommandLine#Binding#IValueDescriptor#GetDefaultValue" />
      <MemberSignature Language="VB.NET" Value="Function GetDefaultValue () As Object Implements IValueDescriptor.GetDefaultValue" />
      <MemberSignature Language="F#" Value="abstract member System.CommandLine.Binding.IValueDescriptor.GetDefaultValue : unit -&gt; obj&#xA;override this.System.CommandLine.Binding.IValueDescriptor.GetDefaultValue : unit -&gt; obj" Usage="binderBase.System.CommandLine.Binding.IValueDescriptor.GetDefaultValue " />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.CommandLine.Binding.IValueDescriptor.GetDefaultValue() = System::CommandLine::Binding::IValueDescriptor::GetDefaultValue;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CommandLine.Binding.IValueDescriptor.GetDefaultValue</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the default value, if any.</summary>
        <returns>An object representing the default value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CommandLine.Binding.IValueDescriptor.HasDefaultValue">
      <MemberSignature Language="C#" Value="bool System.CommandLine.Binding.IValueDescriptor.HasDefaultValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.CommandLine.Binding.IValueDescriptor.HasDefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Binding.BinderBase`1.System#CommandLine#Binding#IValueDescriptor#HasDefaultValue" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property HasDefaultValue As Boolean Implements IValueDescriptor.HasDefaultValue" />
      <MemberSignature Language="F#" Value="member this.System.CommandLine.Binding.IValueDescriptor.HasDefaultValue : bool" Usage="System.CommandLine.Binding.IValueDescriptor.HasDefaultValue" />
      <MemberSignature Language="C++ CLI" Value="property bool System::CommandLine::Binding::IValueDescriptor::HasDefaultValue { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.CommandLine.Binding.IValueDescriptor.HasDefaultValue</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that specifies whether there is a default value.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CommandLine.Binding.IValueDescriptor.ValueName">
      <MemberSignature Language="C#" Value="string System.CommandLine.Binding.IValueDescriptor.ValueName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.CommandLine.Binding.IValueDescriptor.ValueName" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Binding.BinderBase`1.System#CommandLine#Binding#IValueDescriptor#ValueName" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ValueName As String Implements IValueDescriptor.ValueName" />
      <MemberSignature Language="F#" Value="member this.System.CommandLine.Binding.IValueDescriptor.ValueName : string" Usage="System.CommandLine.Binding.IValueDescriptor.ValueName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::CommandLine::Binding::IValueDescriptor::ValueName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.CommandLine.Binding.IValueDescriptor.ValueName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the value.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CommandLine.Binding.IValueDescriptor.ValueType">
      <MemberSignature Language="C#" Value="Type System.CommandLine.Binding.IValueDescriptor.ValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.CommandLine.Binding.IValueDescriptor.ValueType" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Binding.BinderBase`1.System#CommandLine#Binding#IValueDescriptor#ValueType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ValueType As Type Implements IValueDescriptor.ValueType" />
      <MemberSignature Language="F#" Value="member this.System.CommandLine.Binding.IValueDescriptor.ValueType : Type" Usage="System.CommandLine.Binding.IValueDescriptor.ValueType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::CommandLine::Binding::IValueDescriptor::ValueType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.CommandLine.Binding.IValueDescriptor.ValueType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the value.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CommandLine.Binding.IValueSource.TryGetValue">
      <MemberSignature Language="C#" Value="bool IValueSource.TryGetValue (System.CommandLine.Binding.IValueDescriptor valueDescriptor, System.CommandLine.Binding.BindingContext? bindingContext, out object? boundValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.CommandLine.Binding.IValueSource.TryGetValue(class System.CommandLine.Binding.IValueDescriptor valueDescriptor, class System.CommandLine.Binding.BindingContext bindingContext, [out] object&amp; boundValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Binding.BinderBase`1.System#CommandLine#Binding#IValueSource#TryGetValue(System.CommandLine.Binding.IValueDescriptor,System.CommandLine.Binding.BindingContext,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Function TryGetValue (valueDescriptor As IValueDescriptor, bindingContext As BindingContext, ByRef boundValue As Object) As Boolean Implements IValueSource.TryGetValue" />
      <MemberSignature Language="F#" Value="abstract member System.CommandLine.Binding.IValueSource.TryGetValue : System.CommandLine.Binding.IValueDescriptor * System.CommandLine.Binding.BindingContext * obj -&gt; bool&#xA;override this.System.CommandLine.Binding.IValueSource.TryGetValue : System.CommandLine.Binding.IValueDescriptor * System.CommandLine.Binding.BindingContext * obj -&gt; bool" Usage="binderBase.System.CommandLine.Binding.IValueSource.TryGetValue (valueDescriptor, bindingContext, boundValue)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.CommandLine.Binding.IValueSource.TryGetValue(System::CommandLine::Binding::IValueDescriptor ^ valueDescriptor, System::CommandLine::Binding::BindingContext ^ bindingContext, [Runtime::InteropServices::Out] System::Object ^ % boundValue) = System::CommandLine::Binding::IValueSource::TryGetValue;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CommandLine.Binding.IValueSource.TryGetValue(System.CommandLine.Binding.IValueDescriptor,System.CommandLine.Binding.BindingContext,System.Object@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueDescriptor" Type="System.CommandLine.Binding.IValueDescriptor" />
        <Parameter Name="bindingContext" Type="System.CommandLine.Binding.BindingContext" />
        <Parameter Name="boundValue" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="valueDescriptor">The descriptor for the value to be bound.</param>
        <param name="bindingContext">The binding context from which to bind the value.</param>
        <param name="boundValue">When this method returns, contains the bound value.</param>
        <summary>Tries to get a value from a binding context. The return value indicates whether a value matching the specified value descriptor was present.</summary>
        <returns>
          <see langword="true" /> if a matching value was found; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
