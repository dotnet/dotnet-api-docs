<Type Name="TypeWithSupersetConstructors" FullName="Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors">
  <TypeSignature Language="C#" Value="public class TypeWithSupersetConstructors" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeWithSupersetConstructors extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeWithSupersetConstructors" />
  <TypeSignature Language="F#" Value="type TypeWithSupersetConstructors = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeWithSupersetConstructors" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeWithSupersetConstructors (Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService factoryService);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService factoryService) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.#ctor(Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (factoryService As IFactoryService)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors : Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService -&gt; Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors" Usage="new Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors factoryService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeWithSupersetConstructors(Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFactoryService ^ factoryService);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="factoryService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService" />
      </Parameters>
      <Docs>
        <param name="factoryService">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeWithSupersetConstructors (Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService fakeService);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService fakeService) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.#ctor(Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fakeService As IFakeService)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors : Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService -&gt; Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors" Usage="new Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors fakeService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeWithSupersetConstructors(Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeService ^ fakeService);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fakeService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService" />
      </Parameters>
      <Docs>
        <param name="fakeService">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeWithSupersetConstructors (Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService fakeService, Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService factoryService);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService fakeService, class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService factoryService) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.#ctor(Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService,Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fakeService As IFakeService, factoryService As IFactoryService)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors : Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService * Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService -&gt; Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors" Usage="new Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors (fakeService, factoryService)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeWithSupersetConstructors(Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeService ^ fakeService, Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFactoryService ^ factoryService);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fakeService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService" />
        <Parameter Name="factoryService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService" />
      </Parameters>
      <Docs>
        <param name="fakeService">To be added.</param>
        <param name="factoryService">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeWithSupersetConstructors (Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService fakeService, Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService multipleService, Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService factoryService);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService fakeService, class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService multipleService, class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService factoryService) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.#ctor(Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService,Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService,Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fakeService As IFakeService, multipleService As IFakeMultipleService, factoryService As IFactoryService)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors : Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService * Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService * Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService -&gt; Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors" Usage="new Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors (fakeService, multipleService, factoryService)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeWithSupersetConstructors(Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeService ^ fakeService, Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeMultipleService ^ multipleService, Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFactoryService ^ factoryService);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fakeService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService" />
        <Parameter Name="multipleService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService" />
        <Parameter Name="factoryService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService" />
      </Parameters>
      <Docs>
        <param name="fakeService">To be added.</param>
        <param name="multipleService">To be added.</param>
        <param name="factoryService">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeWithSupersetConstructors (Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService multipleService, Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService factoryService, Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService fakeService, Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeScopedService scopedService);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService multipleService, class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService factoryService, class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService fakeService, class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeScopedService scopedService) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.#ctor(Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService,Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService,Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService,Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeScopedService)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (multipleService As IFakeMultipleService, factoryService As IFactoryService, fakeService As IFakeService, scopedService As IFakeScopedService)" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors : Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService * Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService * Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService * Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeScopedService -&gt; Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors" Usage="new Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors (multipleService, factoryService, fakeService, scopedService)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeWithSupersetConstructors(Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeMultipleService ^ multipleService, Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFactoryService ^ factoryService, Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeService ^ fakeService, Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeScopedService ^ scopedService);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="multipleService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService" />
        <Parameter Name="factoryService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService" />
        <Parameter Name="fakeService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService" />
        <Parameter Name="scopedService" Type="Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeScopedService" />
      </Parameters>
      <Docs>
        <param name="multipleService">To be added.</param>
        <param name="factoryService">To be added.</param>
        <param name="fakeService">To be added.</param>
        <param name="scopedService">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactoryService">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService FactoryService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService FactoryService" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.FactoryService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FactoryService As IFactoryService" />
      <MemberSignature Language="F#" Value="member this.FactoryService : Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService" Usage="Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.FactoryService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFactoryService ^ FactoryService { Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFactoryService ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFactoryService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultipleService">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService MultipleService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService MultipleService" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.MultipleService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MultipleService As IFakeMultipleService" />
      <MemberSignature Language="F#" Value="member this.MultipleService : Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService" Usage="Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.MultipleService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeMultipleService ^ MultipleService { Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeMultipleService ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeMultipleService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScopedService">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeScopedService ScopedService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeScopedService ScopedService" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.ScopedService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScopedService As IFakeScopedService" />
      <MemberSignature Language="F#" Value="member this.ScopedService : Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeScopedService" Usage="Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.ScopedService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeScopedService ^ ScopedService { Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeScopedService ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeScopedService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Service">
      <MemberSignature Language="C#" Value="public Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService Service { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService Service" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.Service" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Service As IFakeService" />
      <MemberSignature Language="F#" Value="member this.Service : Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService" Usage="Microsoft.Extensions.DependencyInjection.Specification.Fakes.TypeWithSupersetConstructors.Service" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeService ^ Service { Microsoft::Extensions::DependencyInjection::Specification::Fakes::IFakeService ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.DependencyInjection.Specification.Tests</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
