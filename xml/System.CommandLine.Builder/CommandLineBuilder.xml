<Type Name="CommandLineBuilder" FullName="System.CommandLine.Builder.CommandLineBuilder">
  <TypeSignature Language="C#" Value="public class CommandLineBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandLineBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.Builder.CommandLineBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandLineBuilder" />
  <TypeSignature Language="F#" Value="type CommandLineBuilder = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandLineBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Enables composition of command line configurations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandLineBuilder (System.CommandLine.Command? rootCommand = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CommandLine.Command rootCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilder.#ctor(System.CommandLine.Command)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional rootCommand As Command = Nothing)" />
      <MemberSignature Language="F#" Value="new System.CommandLine.Builder.CommandLineBuilder : System.CommandLine.Command -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="new System.CommandLine.Builder.CommandLineBuilder rootCommand" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rootCommand" Type="System.CommandLine.Command" />
      </Parameters>
      <Docs>
        <param name="rootCommand">The root command of the application.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public System.CommandLine.Parsing.Parser Build ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CommandLine.Parsing.Parser Build() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilder.Build" />
      <MemberSignature Language="VB.NET" Value="Public Function Build () As Parser" />
      <MemberSignature Language="F#" Value="member this.Build : unit -&gt; System.CommandLine.Parsing.Parser" Usage="commandLineBuilder.Build " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CommandLine::Parsing::Parser ^ Build();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.Parser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a parser based on the configuration of the command line builder.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.CommandLine.Command Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CommandLine.Command Command" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Builder.CommandLineBuilder.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As Command" />
      <MemberSignature Language="F#" Value="member this.Command : System.CommandLine.Command" Usage="System.CommandLine.Builder.CommandLineBuilder.Command" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::Command ^ Command { System::CommandLine::Command ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Command</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The command that the builder uses the root of the parser.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDirectives">
      <MemberSignature Language="C#" Value="public bool EnableDirectives { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDirectives" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Builder.CommandLineBuilder.EnableDirectives" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDirectives As Boolean" />
      <MemberSignature Language="F#" Value="member this.EnableDirectives : bool with get, set" Usage="System.CommandLine.Builder.CommandLineBuilder.EnableDirectives" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDirectives { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Determines whether the parser recognizes command line directives.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CommandLine.DirectiveCollection" />
      </Docs>
    </Member>
    <Member MemberName="EnableLegacyDoubleDashBehavior">
      <MemberSignature Language="C#" Value="public bool EnableLegacyDoubleDashBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableLegacyDoubleDashBehavior" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Builder.CommandLineBuilder.EnableLegacyDoubleDashBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableLegacyDoubleDashBehavior As Boolean" />
      <MemberSignature Language="F#" Value="member this.EnableLegacyDoubleDashBehavior : bool with get, set" Usage="System.CommandLine.Builder.CommandLineBuilder.EnableLegacyDoubleDashBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableLegacyDoubleDashBehavior { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Determines the behavior when parsing a double dash (<c>--</c>) in a command line.
            </summary>
        <value>To be added.</value>
        <remarks>When set to <see langword="true" />, all tokens following <c>--</c> will be placed into the <see cref="P:System.CommandLine.Parsing.ParseResult.UnparsedTokens" /> collection. When set to <see langword="false" />, all tokens following <c>--</c> will be treated as command arguments, even if they match an existing option.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePosixBundling">
      <MemberSignature Language="C#" Value="public bool EnablePosixBundling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePosixBundling" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Builder.CommandLineBuilder.EnablePosixBundling" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePosixBundling As Boolean" />
      <MemberSignature Language="F#" Value="member this.EnablePosixBundling : bool with get, set" Usage="System.CommandLine.Builder.CommandLineBuilder.EnablePosixBundling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePosixBundling { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Determines whether the parser recognize and expands POSIX-style bundled options.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseFileHandling">
      <MemberSignature Language="C#" Value="public System.CommandLine.Parsing.ResponseFileHandling ResponseFileHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CommandLine.Parsing.ResponseFileHandling ResponseFileHandling" />
      <MemberSignature Language="DocId" Value="P:System.CommandLine.Builder.CommandLineBuilder.ResponseFileHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseFileHandling As ResponseFileHandling" />
      <MemberSignature Language="F#" Value="member this.ResponseFileHandling : System.CommandLine.Parsing.ResponseFileHandling with get, set" Usage="System.CommandLine.Builder.CommandLineBuilder.ResponseFileHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CommandLine::Parsing::ResponseFileHandling ResponseFileHandling { System::CommandLine::Parsing::ResponseFileHandling get(); void set(System::CommandLine::Parsing::ResponseFileHandling value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Parsing.ResponseFileHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Configures the parser's handling of response files. When enabled, a command line token beginning with <c>@</c> that is a valid file path will be expanded as though inserted into the command line. 
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
