<Type Name="CommandLineBuilderExtensions" FullName="System.CommandLine.Builder.CommandLineBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class CommandLineBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CommandLineBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CommandLine.Builder.CommandLineBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module CommandLineBuilderExtensions" />
  <TypeSignature Language="F#" Value="type CommandLineBuilderExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandLineBuilderExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.CommandLine</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides extension methods for <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMiddleware">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder AddMiddleware (this System.CommandLine.Builder.CommandLineBuilder builder, Action&lt;System.CommandLine.Invocation.InvocationContext&gt; onInvoke, System.CommandLine.Invocation.MiddlewareOrder order = System.CommandLine.Invocation.MiddlewareOrder.Default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder AddMiddleware(class System.CommandLine.Builder.CommandLineBuilder builder, class System.Action`1&lt;class System.CommandLine.Invocation.InvocationContext&gt; onInvoke, valuetype System.CommandLine.Invocation.MiddlewareOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.AddMiddleware(System.CommandLine.Builder.CommandLineBuilder,System.Action{System.CommandLine.Invocation.InvocationContext},System.CommandLine.Invocation.MiddlewareOrder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddMiddleware (builder As CommandLineBuilder, onInvoke As Action(Of InvocationContext), Optional order As MiddlewareOrder = System.CommandLine.Invocation.MiddlewareOrder.Default) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member AddMiddleware : System.CommandLine.Builder.CommandLineBuilder * Action&lt;System.CommandLine.Invocation.InvocationContext&gt; * System.CommandLine.Invocation.MiddlewareOrder -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.AddMiddleware (builder, onInvoke, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="onInvoke" Type="System.Action&lt;System.CommandLine.Invocation.InvocationContext&gt;" />
        <Parameter Name="order" Type="System.CommandLine.Invocation.MiddlewareOrder" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="onInvoke">A delegate that will be invoked before a call to a command handler.</param>
        <param name="order">A value indicating the order in which the added delegate will be invoked relative to others in the pipeline.</param>
        <summary>
            Adds a middleware delegate to the invocation pipeline called before a command handler is invoked.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMiddleware">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder AddMiddleware (this System.CommandLine.Builder.CommandLineBuilder builder, System.CommandLine.Invocation.InvocationMiddleware middleware, System.CommandLine.Invocation.MiddlewareOrder order = System.CommandLine.Invocation.MiddlewareOrder.Default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder AddMiddleware(class System.CommandLine.Builder.CommandLineBuilder builder, class System.CommandLine.Invocation.InvocationMiddleware middleware, valuetype System.CommandLine.Invocation.MiddlewareOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.AddMiddleware(System.CommandLine.Builder.CommandLineBuilder,System.CommandLine.Invocation.InvocationMiddleware,System.CommandLine.Invocation.MiddlewareOrder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddMiddleware (builder As CommandLineBuilder, middleware As InvocationMiddleware, Optional order As MiddlewareOrder = System.CommandLine.Invocation.MiddlewareOrder.Default) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member AddMiddleware : System.CommandLine.Builder.CommandLineBuilder * System.CommandLine.Invocation.InvocationMiddleware * System.CommandLine.Invocation.MiddlewareOrder -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.AddMiddleware (builder, middleware, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="middleware" Type="System.CommandLine.Invocation.InvocationMiddleware" />
        <Parameter Name="order" Type="System.CommandLine.Invocation.MiddlewareOrder" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="middleware">A delegate that will be invoked before a call to a command handler.</param>
        <param name="order">A value indicating the order in which the added delegate will be invoked relative to others in the pipeline.</param>
        <summary>
            Adds a middleware delegate to the invocation pipeline called before a command handler is invoked.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelOnProcessTermination">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder CancelOnProcessTermination (this System.CommandLine.Builder.CommandLineBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder CancelOnProcessTermination(class System.CommandLine.Builder.CommandLineBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.CancelOnProcessTermination(System.CommandLine.Builder.CommandLineBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CancelOnProcessTermination (builder As CommandLineBuilder) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member CancelOnProcessTermination : System.CommandLine.Builder.CommandLineBuilder -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.CancelOnProcessTermination builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Builder::CommandLineBuilder ^ CancelOnProcessTermination(System::CommandLine::Builder::CommandLineBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <summary>
            Enables signaling and handling of process termination via a <see cref="T:System.Threading.CancellationToken" /> that can be passed to a <see cref="T:System.CommandLine.Invocation.ICommandHandler" /> during invocation.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDirectives">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder EnableDirectives (this System.CommandLine.Builder.CommandLineBuilder builder, bool value = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder EnableDirectives(class System.CommandLine.Builder.CommandLineBuilder builder, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.EnableDirectives(System.CommandLine.Builder.CommandLineBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EnableDirectives (builder As CommandLineBuilder, Optional value As Boolean = true) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member EnableDirectives : System.CommandLine.Builder.CommandLineBuilder * bool -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.EnableDirectives (builder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="value">If set to <see langword="true" />, then directives are enabled. Otherwise, they are parsed like any other token.</param>
        <summary>
            Enables the parser to recognize command line directives.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CommandLine.DirectiveCollection" />
      </Docs>
    </Member>
    <Member MemberName="EnableLegacyDoubleDashBehavior">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder EnableLegacyDoubleDashBehavior (this System.CommandLine.Builder.CommandLineBuilder builder, bool value = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder EnableLegacyDoubleDashBehavior(class System.CommandLine.Builder.CommandLineBuilder builder, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.EnableLegacyDoubleDashBehavior(System.CommandLine.Builder.CommandLineBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EnableLegacyDoubleDashBehavior (builder As CommandLineBuilder, Optional value As Boolean = true) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member EnableLegacyDoubleDashBehavior : System.CommandLine.Builder.CommandLineBuilder * bool -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.EnableLegacyDoubleDashBehavior (builder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
            Determines the behavior when parsing a double dash (<c>--</c>) in a command line.
            </summary>
        <returns>To be added.</returns>
        <remarks>When set to <see langword="true" />, all tokens following <c>--</c> will be placed into the <see cref="P:System.CommandLine.Parsing.ParseResult.UnparsedTokens" /> collection. When set to <see langword="false" />, all tokens following <c>--</c> will be treated as command arguments, even if they match an existing option.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePosixBundling">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder EnablePosixBundling (this System.CommandLine.Builder.CommandLineBuilder builder, bool value = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder EnablePosixBundling(class System.CommandLine.Builder.CommandLineBuilder builder, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.EnablePosixBundling(System.CommandLine.Builder.CommandLineBuilder,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EnablePosixBundling (builder As CommandLineBuilder, Optional value As Boolean = true) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member EnablePosixBundling : System.CommandLine.Builder.CommandLineBuilder * bool -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.EnablePosixBundling (builder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="value">If set to <see langword="true" />, then POSIX bundles are parsed. ; otherwise, <see langword="false" />.</param>
        <summary>
             Enables the parser to recognize and expand POSIX-style bundled options.
             </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>
             POSIX conventions recommend that single-character options be allowed to be specified together after a single <c>-</c> prefix. When <see cref="M:System.CommandLine.Builder.CommandLineBuilderExtensions.EnablePosixBundling(System.CommandLine.Builder.CommandLineBuilder,System.Boolean)" /> is set to <see langword="true" />, the following command lines are equivalent:
             
             <code>
                 &gt; myapp -a -b -c
                 &gt; myapp -abc
             </code>
             
             If an argument is provided after an option bundle, it applies to the last option in the bundle. When <see cref="M:System.CommandLine.Builder.CommandLineBuilderExtensions.EnablePosixBundling(System.CommandLine.Builder.CommandLineBuilder,System.Boolean)" /> is set to <see langword="true" />, all of the following command lines are equivalent:
             <code>
                 &gt; myapp -a -b -c arg
                 &gt; myapp -abc arg
                 &gt; myapp -abcarg
             </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseResponseFileAs">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder ParseResponseFileAs (this System.CommandLine.Builder.CommandLineBuilder builder, System.CommandLine.Parsing.ResponseFileHandling responseFileHandling);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder ParseResponseFileAs(class System.CommandLine.Builder.CommandLineBuilder builder, valuetype System.CommandLine.Parsing.ResponseFileHandling responseFileHandling) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.ParseResponseFileAs(System.CommandLine.Builder.CommandLineBuilder,System.CommandLine.Parsing.ResponseFileHandling)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ParseResponseFileAs (builder As CommandLineBuilder, responseFileHandling As ResponseFileHandling) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member ParseResponseFileAs : System.CommandLine.Builder.CommandLineBuilder * System.CommandLine.Parsing.ResponseFileHandling -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.ParseResponseFileAs (builder, responseFileHandling)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Builder::CommandLineBuilder ^ ParseResponseFileAs(System::CommandLine::Builder::CommandLineBuilder ^ builder, System::CommandLine::Parsing::ResponseFileHandling responseFileHandling);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="responseFileHandling" Type="System.CommandLine.Parsing.ResponseFileHandling" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="responseFileHandling">Specifies whether or how response files are parsed.</param>
        <summary>To be added.</summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="P:System.CommandLine.Builder.CommandLineBuilder.ResponseFileHandling" />
      </Docs>
    </Member>
    <Member MemberName="RegisterWithDotnetSuggest">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder RegisterWithDotnetSuggest (this System.CommandLine.Builder.CommandLineBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder RegisterWithDotnetSuggest(class System.CommandLine.Builder.CommandLineBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.RegisterWithDotnetSuggest(System.CommandLine.Builder.CommandLineBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RegisterWithDotnetSuggest (builder As CommandLineBuilder) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member RegisterWithDotnetSuggest : System.CommandLine.Builder.CommandLineBuilder -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.RegisterWithDotnetSuggest builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Builder::CommandLineBuilder ^ RegisterWithDotnetSuggest(System::CommandLine::Builder::CommandLineBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <summary>
            Ensures that the application is registered with the <c>dotnet-suggest</c> tool to enable command line completions.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>For command line completions to work, users must install the <c>dotnet-suggest</c> tool as well as the appropriate shim script for their shell.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaults">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseDefaults (this System.CommandLine.Builder.CommandLineBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseDefaults(class System.CommandLine.Builder.CommandLineBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseDefaults(System.CommandLine.Builder.CommandLineBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseDefaults (builder As CommandLineBuilder) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseDefaults : System.CommandLine.Builder.CommandLineBuilder -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseDefaults builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Builder::CommandLineBuilder ^ UseDefaults(System::CommandLine::Builder::CommandLineBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <summary>
            Uses the default configuration.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>Calling this method is the equivalent to calling:
            <code>
              builder
                .UseVersionOption()
                .UseHelp()
                .UseEnvironmentVariableDirective()
                .UseParseDirective()
                .UseSuggestDirective()
                .RegisterWithDotnetSuggest()
                .UseTypoCorrections()
                .UseParseErrorReporting()
                .UseExceptionHandler()
                .CancelOnProcessTermination();
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="UseEnvironmentVariableDirective">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseEnvironmentVariableDirective (this System.CommandLine.Builder.CommandLineBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseEnvironmentVariableDirective(class System.CommandLine.Builder.CommandLineBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseEnvironmentVariableDirective(System.CommandLine.Builder.CommandLineBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseEnvironmentVariableDirective (builder As CommandLineBuilder) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseEnvironmentVariableDirective : System.CommandLine.Builder.CommandLineBuilder -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseEnvironmentVariableDirective builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Builder::CommandLineBuilder ^ UseEnvironmentVariableDirective(System::CommandLine::Builder::CommandLineBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <summary>
            Enables the use of the <c>[env:key=value]</c> directive, allowing environment variables to be set from the command line during invocation.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseExceptionHandler (this System.CommandLine.Builder.CommandLineBuilder builder, Action&lt;Exception,System.CommandLine.Invocation.InvocationContext&gt;? onException = default, int? errorExitCode = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseExceptionHandler(class System.CommandLine.Builder.CommandLineBuilder builder, class System.Action`2&lt;class System.Exception, class System.CommandLine.Invocation.InvocationContext&gt; onException, valuetype System.Nullable`1&lt;int32&gt; errorExitCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseExceptionHandler(System.CommandLine.Builder.CommandLineBuilder,System.Action{System.Exception,System.CommandLine.Invocation.InvocationContext},System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseExceptionHandler (builder As CommandLineBuilder, Optional onException As Action(Of Exception, InvocationContext) = Nothing, Optional errorExitCode As Nullable(Of Integer) = Nothing) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseExceptionHandler : System.CommandLine.Builder.CommandLineBuilder * Action&lt;Exception, System.CommandLine.Invocation.InvocationContext&gt; * Nullable&lt;int&gt; -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseExceptionHandler (builder, onException, errorExitCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="onException" Type="System.Action&lt;System.Exception,System.CommandLine.Invocation.InvocationContext&gt;" />
        <Parameter Name="errorExitCode" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="onException">A delegate that will be called when an exception is thrown by a command handler.</param>
        <param name="errorExitCode">The exit code to be used when an exception is thrown.</param>
        <summary>
            Enables an exception handler to catch any unhandled exceptions thrown by a command handler during invocation.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHelp">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseHelp (this System.CommandLine.Builder.CommandLineBuilder builder, int? maxWidth = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseHelp(class System.CommandLine.Builder.CommandLineBuilder builder, valuetype System.Nullable`1&lt;int32&gt; maxWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelp(System.CommandLine.Builder.CommandLineBuilder,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHelp (builder As CommandLineBuilder, Optional maxWidth As Nullable(Of Integer) = Nothing) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseHelp : System.CommandLine.Builder.CommandLineBuilder * Nullable&lt;int&gt; -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelp (builder, maxWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="maxWidth" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="maxWidth">Maximum output width for default help builder.</param>
        <summary>
            Configures the application to show help when one of the following options are specified on the command line:
            <code>
               -h
               /h
               --help
               -?
               /?
            </code></summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHelp">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseHelp (this System.CommandLine.Builder.CommandLineBuilder builder, params string[] helpAliases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseHelp(class System.CommandLine.Builder.CommandLineBuilder builder, string[] helpAliases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelp(System.CommandLine.Builder.CommandLineBuilder,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHelp (builder As CommandLineBuilder, ParamArray helpAliases As String()) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseHelp : System.CommandLine.Builder.CommandLineBuilder * string[] -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelp (builder, helpAliases)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Builder::CommandLineBuilder ^ UseHelp(System::CommandLine::Builder::CommandLineBuilder ^ builder, ... cli::array &lt;System::String ^&gt; ^ helpAliases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="helpAliases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="helpAliases">The set of aliases that can be specified on the command line to request help.</param>
        <summary>
            Configures the application to show help when one of the specified option aliases are used on the command line.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>The specified aliases will override the default values.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHelp">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseHelp (this System.CommandLine.Builder.CommandLineBuilder builder, Action&lt;System.CommandLine.Help.HelpContext&gt; customize, int? maxWidth = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseHelp(class System.CommandLine.Builder.CommandLineBuilder builder, class System.Action`1&lt;class System.CommandLine.Help.HelpContext&gt; customize, valuetype System.Nullable`1&lt;int32&gt; maxWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelp(System.CommandLine.Builder.CommandLineBuilder,System.Action{System.CommandLine.Help.HelpContext},System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHelp (builder As CommandLineBuilder, customize As Action(Of HelpContext), Optional maxWidth As Nullable(Of Integer) = Nothing) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseHelp : System.CommandLine.Builder.CommandLineBuilder * Action&lt;System.CommandLine.Help.HelpContext&gt; * Nullable&lt;int&gt; -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelp (builder, customize, maxWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="customize" Type="System.Action&lt;System.CommandLine.Help.HelpContext&gt;" />
        <Parameter Name="maxWidth" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="customize">A delegate that will be called to customize help if help is requested.</param>
        <param name="maxWidth">Maximum output width for default help builder.</param>
        <summary>
            Configures the application to show help when one of the specified option aliases are used on the command line.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>The specified aliases will override the default values.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHelpBuilder&lt;TBuilder&gt;">
      <MemberSignature Language="C#" Value="public static TBuilder UseHelpBuilder&lt;TBuilder&gt; (this TBuilder builder, Func&lt;System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder&gt; getHelpBuilder) where TBuilder : System.CommandLine.Builder.CommandLineBuilder;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TBuilder UseHelpBuilder&lt;(class System.CommandLine.Builder.CommandLineBuilder) TBuilder&gt;(!!TBuilder builder, class System.Func`2&lt;class System.CommandLine.Binding.BindingContext, class System.CommandLine.Help.HelpBuilder&gt; getHelpBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelpBuilder``1(``0,System.Func{System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseHelpBuilder(Of TBuilder As CommandLineBuilder) (builder As TBuilder, getHelpBuilder As Func(Of BindingContext, HelpBuilder)) As TBuilder" />
      <MemberSignature Language="F#" Value="static member UseHelpBuilder : 'Builder * Func&lt;System.CommandLine.Binding.BindingContext, System.CommandLine.Help.HelpBuilder&gt; -&gt; 'Builder (requires 'Builder :&gt; System.CommandLine.Builder.CommandLineBuilder)" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelpBuilder (builder, getHelpBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TBuilder&gt;&#xA; where TBuilder : System::CommandLine::Builder::CommandLineBuilder[System::Runtime::CompilerServices::Extension]&#xA; static TBuilder UseHelpBuilder(TBuilder builder, Func&lt;System::CommandLine::Binding::BindingContext ^, System::CommandLine::Help::HelpBuilder ^&gt; ^ getHelpBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TBuilder">
          <Constraints>
            <BaseTypeName>System.CommandLine.Builder.CommandLineBuilder</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="TBuilder" RefType="this" />
        <Parameter Name="getHelpBuilder" Type="System.Func&lt;System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TBuilder">To be added.</typeparam>
        <param name="builder">A command line builder.</param>
        <param name="getHelpBuilder">A delegate that returns an instance of <see cref="T:System.CommandLine.Help.HelpBuilder" /></param>
        <summary>
            Specifies an <see cref="T:System.CommandLine.Help.HelpBuilder" /> to be used to format help output when help is requested.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLocalizationResources">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseLocalizationResources (this System.CommandLine.Builder.CommandLineBuilder builder, System.CommandLine.LocalizationResources validationMessages);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseLocalizationResources(class System.CommandLine.Builder.CommandLineBuilder builder, class System.CommandLine.LocalizationResources validationMessages) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseLocalizationResources(System.CommandLine.Builder.CommandLineBuilder,System.CommandLine.LocalizationResources)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseLocalizationResources (builder As CommandLineBuilder, validationMessages As LocalizationResources) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseLocalizationResources : System.CommandLine.Builder.CommandLineBuilder * System.CommandLine.LocalizationResources -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseLocalizationResources (builder, validationMessages)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Builder::CommandLineBuilder ^ UseLocalizationResources(System::CommandLine::Builder::CommandLineBuilder ^ builder, System::CommandLine::LocalizationResources ^ validationMessages);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="validationMessages" Type="System.CommandLine.LocalizationResources" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="validationMessages">The localizations resources to use.</param>
        <summary>
            Specifies localization resources to be used when displaying help, error messages, and other user-facing strings.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseParseDirective">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseParseDirective (this System.CommandLine.Builder.CommandLineBuilder builder, int? errorExitCode = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseParseDirective(class System.CommandLine.Builder.CommandLineBuilder builder, valuetype System.Nullable`1&lt;int32&gt; errorExitCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseParseDirective(System.CommandLine.Builder.CommandLineBuilder,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseParseDirective (builder As CommandLineBuilder, Optional errorExitCode As Nullable(Of Integer) = Nothing) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseParseDirective : System.CommandLine.Builder.CommandLineBuilder * Nullable&lt;int&gt; -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseParseDirective (builder, errorExitCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="errorExitCode" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="errorExitCode">If the parse result contains errors, this exit code will be used when the process exits.</param>
        <summary>
            Enables the use of the <c>[parse]</c> directive, which when specified on the command line will short circuit normal command handling and display a diagram explaining the parse result for the command line input.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseParseErrorReporting">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseParseErrorReporting (this System.CommandLine.Builder.CommandLineBuilder builder, int? errorExitCode = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseParseErrorReporting(class System.CommandLine.Builder.CommandLineBuilder builder, valuetype System.Nullable`1&lt;int32&gt; errorExitCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseParseErrorReporting(System.CommandLine.Builder.CommandLineBuilder,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseParseErrorReporting (builder As CommandLineBuilder, Optional errorExitCode As Nullable(Of Integer) = Nothing) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseParseErrorReporting : System.CommandLine.Builder.CommandLineBuilder * Nullable&lt;int&gt; -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseParseErrorReporting (builder, errorExitCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="errorExitCode" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="errorExitCode">The exit code to use when parser errors occur.</param>
        <summary>
            Configures the command line to write error information to standard error when there are errors parsing command line input.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSuggestDirective">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseSuggestDirective (this System.CommandLine.Builder.CommandLineBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseSuggestDirective(class System.CommandLine.Builder.CommandLineBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseSuggestDirective(System.CommandLine.Builder.CommandLineBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseSuggestDirective (builder As CommandLineBuilder) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseSuggestDirective : System.CommandLine.Builder.CommandLineBuilder -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseSuggestDirective builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Builder::CommandLineBuilder ^ UseSuggestDirective(System::CommandLine::Builder::CommandLineBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <summary>
            Enables the use of the <c>[suggest]</c> directive which when specified in command line input short circuits normal command handling and writes a newline-delimited list of suggestions suitable for use by most shells to provide command line completions.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>The <c>dotnet-suggest</c> tool requires the suggest directive to be enabled for an application to provide completions.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTypoCorrections">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseTypoCorrections (this System.CommandLine.Builder.CommandLineBuilder builder, int maxLevenshteinDistance = 3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseTypoCorrections(class System.CommandLine.Builder.CommandLineBuilder builder, int32 maxLevenshteinDistance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseTypoCorrections(System.CommandLine.Builder.CommandLineBuilder,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTypoCorrections (builder As CommandLineBuilder, Optional maxLevenshteinDistance As Integer = 3) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseTypoCorrections : System.CommandLine.Builder.CommandLineBuilder * int -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseTypoCorrections (builder, maxLevenshteinDistance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="maxLevenshteinDistance" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="maxLevenshteinDistance">The maximum Levenshtein distance for suggestions based on detected typos in command line input.</param>
        <summary>
            Configures the application to provide alternative suggestions when a parse error is detected.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseVersionOption">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseVersionOption (this System.CommandLine.Builder.CommandLineBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseVersionOption(class System.CommandLine.Builder.CommandLineBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseVersionOption(System.CommandLine.Builder.CommandLineBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseVersionOption (builder As CommandLineBuilder) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseVersionOption : System.CommandLine.Builder.CommandLineBuilder -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseVersionOption builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Builder::CommandLineBuilder ^ UseVersionOption(System::CommandLine::Builder::CommandLineBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <summary>
            Enables the use of a option (defaulting to the alias <c>--version</c>) which when specified in command line input will short circuit normal command handling and instead write out version information before exiting.
            </summary>
        <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseVersionOption">
      <MemberSignature Language="C#" Value="public static System.CommandLine.Builder.CommandLineBuilder UseVersionOption (this System.CommandLine.Builder.CommandLineBuilder builder, params string[] aliases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CommandLine.Builder.CommandLineBuilder UseVersionOption(class System.CommandLine.Builder.CommandLineBuilder builder, string[] aliases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseVersionOption(System.CommandLine.Builder.CommandLineBuilder,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseVersionOption (builder As CommandLineBuilder, ParamArray aliases As String()) As CommandLineBuilder" />
      <MemberSignature Language="F#" Value="static member UseVersionOption : System.CommandLine.Builder.CommandLineBuilder * string[] -&gt; System.CommandLine.Builder.CommandLineBuilder" Usage="System.CommandLine.Builder.CommandLineBuilderExtensions.UseVersionOption (builder, aliases)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::CommandLine::Builder::CommandLineBuilder ^ UseVersionOption(System::CommandLine::Builder::CommandLineBuilder ^ builder, ... cli::array &lt;System::String ^&gt; ^ aliases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.CommandLine</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CommandLine.Builder.CommandLineBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.CommandLine.Builder.CommandLineBuilder" RefType="this" />
        <Parameter Name="aliases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="builder">A command line builder.</param>
        <param name="aliases">One or more aliases to use instead of the default to signal that version information should be displayed.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseVersionOption(System.CommandLine.Builder.CommandLineBuilder)" />
      </Docs>
    </Member>
  </Members>
</Type>
