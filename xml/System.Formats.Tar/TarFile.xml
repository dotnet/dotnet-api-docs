<Type Name="TarFile" FullName="System.Formats.Tar.TarFile">
  <TypeSignature Language="C#" Value="public static class TarFile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TarFile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Formats.Tar.TarFile" />
  <TypeSignature Language="VB.NET" Value="Public Class TarFile" />
  <TypeSignature Language="F#" Value="type TarFile = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class TarFile abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Formats.Tar</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides static methods for creating and extracting tar archives.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, System.IO.Stream destination, bool includeBaseDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, class System.IO.Stream destination, bool includeBaseDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarFile.CreateFromDirectory(System.String,System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destination As Stream, includeBaseDirectory As Boolean)" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * System.IO.Stream * bool -&gt; unit" Usage="System.Formats.Tar.TarFile.CreateFromDirectory (sourceDirectoryName, destination, includeBaseDirectory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::IO::Stream ^ destination, bool includeBaseDirectory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path of the directory to archive.</param>
        <param name="destination">The destination stream for the archive.</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to include the base directory name as the first segment in all the names of the archive entries. <see langword="false" /> to exclude the base directory name from the archive entry names.</param>
        <summary>Creates a tar stream that contains all the filesystem entries from the specified directory.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destination" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> is empty.

-or-

<paramref name="destination" /> does not support writing.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="sourceDirectoryName" /> directory path is not found.</exception>
        <exception cref="T:System.IO.IOException">An I/O exception occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectory">
      <MemberSignature Language="C#" Value="public static void CreateFromDirectory (string sourceDirectoryName, string destinationFileName, bool includeBaseDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateFromDirectory(string sourceDirectoryName, string destinationFileName, bool includeBaseDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarFile.CreateFromDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateFromDirectory (sourceDirectoryName As String, destinationFileName As String, includeBaseDirectory As Boolean)" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectory : string * string * bool -&gt; unit" Usage="System.Formats.Tar.TarFile.CreateFromDirectory (sourceDirectoryName, destinationFileName, includeBaseDirectory)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateFromDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationFileName, bool includeBaseDirectory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path of the directory to archive.</param>
        <param name="destinationFileName">The path of the destination archive file.</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to include the base directory name as the first path segment in all the names of the archive entries. <see langword="false" /> to exclude the base directory name from the entry name paths.</param>
        <summary>Creates a tar file that contains all the filesystem entries from the specified directory.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationFileName" /> is empty.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="sourceDirectoryName" /> directory path is not found.</exception>
        <exception cref="T:System.IO.IOException">An I/O exception occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateFromDirectoryAsync (string sourceDirectoryName, System.IO.Stream destination, bool includeBaseDirectory, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateFromDirectoryAsync(string sourceDirectoryName, class System.IO.Stream destination, bool includeBaseDirectory, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarFile.CreateFromDirectoryAsync(System.String,System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromDirectoryAsync (sourceDirectoryName As String, destination As Stream, includeBaseDirectory As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectoryAsync : string * System.IO.Stream * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Formats.Tar.TarFile.CreateFromDirectoryAsync (sourceDirectoryName, destination, includeBaseDirectory, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path of the directory to archive.</param>
        <param name="destination">The destination stream of the archive.</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to include the base directory name as the first path segment in all the names of the archive entries. <see langword="false" /> to exclude the base directory name from the entry name paths.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously creates a tar stream that contains all the filesystem entries from the specified directory.</summary>
        <returns>A task that represents the asynchronous creation operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destination" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> is empty.

-or-

<paramref name="destination" /> does not support writing.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="sourceDirectoryName" /> directory path is not found.</exception>
        <exception cref="T:System.IO.IOException">An I/O exception occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateFromDirectoryAsync (string sourceDirectoryName, string destinationFileName, bool includeBaseDirectory, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateFromDirectoryAsync(string sourceDirectoryName, string destinationFileName, bool includeBaseDirectory, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarFile.CreateFromDirectoryAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromDirectoryAsync (sourceDirectoryName As String, destinationFileName As String, includeBaseDirectory As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member CreateFromDirectoryAsync : string * string * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Formats.Tar.TarFile.CreateFromDirectoryAsync (sourceDirectoryName, destinationFileName, includeBaseDirectory, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="includeBaseDirectory" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">The path of the directory to archive.</param>
        <param name="destinationFileName">The path of the destination archive file.</param>
        <param name="includeBaseDirectory">
          <see langword="true" /> to include the base directory name as the first path segment in all the names of the archive entries. <see langword="false" /> to exclude the base directory name from the entry name paths.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously creates a tar archive from the contents of the specified directory, and outputs them into the specified path. Can optionally include the base directory as the prefix for the entry names.</summary>
        <returns>A task that represents the asynchronous creation operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceDirectoryName" /> or <paramref name="destinationFileName" /> is empty.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="sourceDirectoryName" /> directory path is not found.</exception>
        <exception cref="T:System.IO.IOException">An I/O exception occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (System.IO.Stream source, string destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(class System.IO.Stream source, string destinationDirectoryName, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarFile.ExtractToDirectory(System.IO.Stream,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (source As Stream, destinationDirectoryName As String, overwriteFiles As Boolean)" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : System.IO.Stream * string * bool -&gt; unit" Usage="System.Formats.Tar.TarFile.ExtractToDirectory (source, destinationDirectoryName, overwriteFiles)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::IO::Stream ^ source, System::String ^ destinationDirectoryName, bool overwriteFiles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">The stream containing the tar archive.</param>
        <param name="destinationDirectoryName">The path of the destination directory where the filesystem entries should be extracted.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files and directories in <paramref name="destinationDirectoryName" />; <see langword="false" /> to avoid overwriting, and throw if any files or directories are found with existing names.</param>
        <summary>Extracts the contents of a stream that represents a tar archive into the specified directory.</summary>
        <remarks>
          <para>Files of type <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" />, <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" />, or <see cref="F:System.Formats.Tar.TarEntryType.Fifo" /> can only be extracted in Unix platforms.</para>
          <para>Elevation is required to extract a <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" /> or <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" /> to disk.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> or <paramref name="destinationDirectoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="destinationDirectoryName" /> directory path is not found.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Permissions are insufficient.</exception>
        <exception cref="T:System.ArgumentException">
Extracting one of the tar entries would have resulted in a file outside the specified destination directory.

-or-

<paramref name="destinationDirectoryName" /> is empty.

-or-

<paramref name="source" /> does not support reading.</exception>
        <exception cref="T:System.IO.IOException">An I/O exception occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectory">
      <MemberSignature Language="C#" Value="public static void ExtractToDirectory (string sourceFileName, string destinationDirectoryName, bool overwriteFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExtractToDirectory(string sourceFileName, string destinationDirectoryName, bool overwriteFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarFile.ExtractToDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExtractToDirectory (sourceFileName As String, destinationDirectoryName As String, overwriteFiles As Boolean)" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectory : string * string * bool -&gt; unit" Usage="System.Formats.Tar.TarFile.ExtractToDirectory (sourceFileName, destinationDirectoryName, overwriteFiles)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExtractToDirectory(System::String ^ sourceFileName, System::String ^ destinationDirectoryName, bool overwriteFiles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">The path of the tar file to extract.</param>
        <param name="destinationDirectoryName">The path of the destination directory where the filesystem entries should be extracted.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files and directories in <paramref name="destinationDirectoryName" />; <see langword="false" /> to avoid overwriting, and throw if any files or directories are found with existing names.</param>
        <summary>Extracts the contents of a tar file into the specified directory.</summary>
        <remarks>
          <para>Files of type <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" />, <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" />, or <see cref="F:System.Formats.Tar.TarEntryType.Fifo" /> can only be extracted in Unix platforms.</para>
          <para>Elevation is required to extract a <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" /> or <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" /> to disk.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceFileName" /> or <paramref name="destinationDirectoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="destinationDirectoryName" /> directory path is not found.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <paramref name="sourceFileName" /> file path is not found.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Permissions are insufficient.</exception>
        <exception cref="T:System.ArgumentException">
Extracting one of the tar entries would have resulted in a file outside the specified destination directory.

-or-

<paramref name="sourceFileName" /> or <paramref name="destinationDirectoryName" /> is empty.</exception>
        <exception cref="T:System.IO.IOException">An I/O exception occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExtractToDirectoryAsync (System.IO.Stream source, string destinationDirectoryName, bool overwriteFiles, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExtractToDirectoryAsync(class System.IO.Stream source, string destinationDirectoryName, bool overwriteFiles, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarFile.ExtractToDirectoryAsync(System.IO.Stream,System.String,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractToDirectoryAsync (source As Stream, destinationDirectoryName As String, overwriteFiles As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectoryAsync : System.IO.Stream * string * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Formats.Tar.TarFile.ExtractToDirectoryAsync (source, destinationDirectoryName, overwriteFiles, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">The stream containing the tar archive.</param>
        <param name="destinationDirectoryName">The path of the destination directory where the filesystem entries should be extracted.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files and directories in <paramref name="destinationDirectoryName" />; <see langword="false" /> to avoid overwriting, and throw if any files or directories are found with existing names.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously extracts the contents of a stream that represents a tar archive into the specified directory.</summary>
        <returns>A task that represents the asynchronous extraction operation.</returns>
        <remarks>
          <para>Files of type <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" />, <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" />, or <see cref="F:System.Formats.Tar.TarEntryType.Fifo" /> can only be extracted in Unix platforms.</para>
          <para>Elevation is required to extract a <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" /> or <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" /> to disk.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> or <paramref name="destinationDirectoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="destinationDirectoryName" /> directory path is not found.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Permissions are insufficient.</exception>
        <exception cref="T:System.ArgumentException">
Extracting one of the tar entries would have resulted in a file outside the specified destination directory.

-or-

<paramref name="destinationDirectoryName" /> is empty.

-or-

<paramref name="source" /> does not support reading.</exception>
        <exception cref="T:System.IO.IOException">An I/O exception occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExtractToDirectoryAsync (string sourceFileName, string destinationDirectoryName, bool overwriteFiles, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExtractToDirectoryAsync(string sourceFileName, string destinationDirectoryName, bool overwriteFiles, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarFile.ExtractToDirectoryAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExtractToDirectoryAsync (sourceFileName As String, destinationDirectoryName As String, overwriteFiles As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member ExtractToDirectoryAsync : string * string * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Formats.Tar.TarFile.ExtractToDirectoryAsync (sourceFileName, destinationDirectoryName, overwriteFiles, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwriteFiles" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">The path of the tar file to extract.</param>
        <param name="destinationDirectoryName">The path of the destination directory where the filesystem entries should be extracted.</param>
        <param name="overwriteFiles">
          <see langword="true" /> to overwrite files and directories in <paramref name="destinationDirectoryName" />; <see langword="false" /> to avoid overwriting, and throw if any files or directories are found with existing names.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously extracts the contents of a tar file into the specified directory.</summary>
        <returns>A task that represents the asynchronous extraction operation.</returns>
        <remarks>
          <para>Files of type <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" />, <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" />, or <see cref="F:System.Formats.Tar.TarEntryType.Fifo" /> can only be extracted in Unix platforms.</para>
          <para>Elevation is required to extract a <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" /> or <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" /> to disk.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceFileName" /> or <paramref name="destinationDirectoryName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="destinationDirectoryName" /> directory path is not found.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The <paramref name="sourceFileName" /> file path is not found.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Permissions are insufficient.</exception>
        <exception cref="T:System.ArgumentException">
Extracting one of the tar entries would have resulted in a file outside the specified destination directory.

-or-

<paramref name="sourceFileName" /> or <paramref name="destinationDirectoryName" /> is empty.</exception>
        <exception cref="T:System.IO.IOException">An I/O exception occurred.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
