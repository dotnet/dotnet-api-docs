<Type Name="TarReader" FullName="System.Formats.Tar.TarReader">
  <TypeSignature Language="C#" Value="public sealed class TarReader : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TarReader extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Formats.Tar.TarReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TarReader&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type TarReader = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TarReader sealed : IAsyncDisposable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Formats.Tar</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reads a tar archive from a stream.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TarReader (System.IO.Stream archiveStream, bool leaveOpen = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream archiveStream, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarReader.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (archiveStream As Stream, Optional leaveOpen As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Formats.Tar.TarReader : System.IO.Stream * bool -&gt; System.Formats.Tar.TarReader" Usage="new System.Formats.Tar.TarReader (archiveStream, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="archiveStream" Type="System.IO.Stream" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="archiveStream">The stream to read from.</param>
        <param name="leaveOpen">
          <see langword="false" /> to dispose the <paramref name="archiveStream" /> when this instance is disposed; <see langword="true" /> to leave the stream open.</param>
        <summary>Initializes a <see cref="T:System.Formats.Tar.TarReader" /> instance that can read tar entries from the specified stream, and can optionally leave the stream open upon disposal of this instance.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveStream" /> does not support reading.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveStream" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="tarReader.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the current <see cref="T:System.Formats.Tar.TarReader" /> instance, and disposes the streams of all the entries that were read from the archive if the <c>leaveOpen</c> argument was set to <see langword="false" /> in the constructor.</summary>
        <remarks>The <see cref="P:System.Formats.Tar.TarEntry.DataStream" /> property of any entry can be replaced with a new stream. If the user decides to replace it on a <see cref="T:System.Formats.Tar.TarEntry" /> instance that was obtained using a <see cref="T:System.Formats.Tar.TarReader" />, the underlying stream gets disposed immediately, freeing the <see cref="T:System.Formats.Tar.TarReader" /> of origin from the responsibility of having to dispose it.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarReader.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="tarReader.DisposeAsync " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously disposes the current <see cref="T:System.Formats.Tar.TarReader" /> instance, and closes the streams of all the entries that were read from the archive if the <c>leaveOpen</c> argument was set to <see langword="false" /> in the constructor.</summary>
        <returns>A value task that represents the asynchronous dispose operation.</returns>
        <remarks>The <see cref="P:System.Formats.Tar.TarEntry.DataStream" /> property of any entry can be replaced with a new stream. If the user decides to replace it on a <see cref="T:System.Formats.Tar.TarEntry" /> instance that was obtained using a <see cref="T:System.Formats.Tar.TarReader" />, the underlying stream gets disposed immediately, freeing the <see cref="T:System.Formats.Tar.TarReader" /> of origin from the responsibility of having to dispose it.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextEntry">
      <MemberSignature Language="C#" Value="public System.Formats.Tar.TarEntry? GetNextEntry (bool copyData = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Formats.Tar.TarEntry GetNextEntry(bool copyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarReader.GetNextEntry(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextEntry (Optional copyData As Boolean = false) As TarEntry" />
      <MemberSignature Language="F#" Value="member this.GetNextEntry : bool -&gt; System.Formats.Tar.TarEntry" Usage="tarReader.GetNextEntry copyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Tar.TarEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copyData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="copyData">
          <para>
            <see langword="true" /> to copy the data of the entry into a new <see cref="T:System.IO.MemoryStream" />. This is helpful when the underlying archive stream is unseekable, and the data needs to be accessed later.</para>
          <para>
            <see langword="false" /> if the data should not be copied into a new stream. If the underlying stream is unseekable, the user has the responsibility of reading and processing the <see cref="P:System.Formats.Tar.TarEntry.DataStream" /> immediately after calling this method.</para>
          <para>The default value is <see langword="false" />.</para>
        </param>
        <summary>Retrieves the next entry from the archive stream.</summary>
        <returns>A <see cref="T:System.Formats.Tar.TarEntry" /> instance if a valid entry was found, or <see langword="null" /> if the end of the archive has been reached.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.InvalidDataException">
The entry's data is malformed.

-or-

The archive contains entries in different formats.

-or-

More than one global extended attributes entry was found in the current <see cref="F:System.Formats.Tar.TarEntryFormat.Pax" /> archive.

-or-

Two or more extended attributes entries were found consecutively in the current <see cref="F:System.Formats.Tar.TarEntryFormat.Pax" /> archive.</exception>
        <exception cref="T:System.IO.IOException">An I/O problem occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNextEntryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;System.Formats.Tar.TarEntry?&gt; GetNextEntryAsync (bool copyData = false, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Formats.Tar.TarEntry&gt; GetNextEntryAsync(bool copyData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarReader.GetNextEntryAsync(System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextEntryAsync (Optional copyData As Boolean = false, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of TarEntry)" />
      <MemberSignature Language="F#" Value="member this.GetNextEntryAsync : bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;System.Formats.Tar.TarEntry&gt;" Usage="tarReader.GetNextEntryAsync (copyData, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Formats.Tar.TarEntry&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copyData" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="copyData">
          <para>
            <see langword="true" /> to copy the data of the entry into a new <see cref="T:System.IO.MemoryStream" />. This is helpful when the underlying archive stream does not support seeking, and the data needs to be accessed later.</para>
          <para>
            <see langword="false" /> if the data should not be copied into a new stream. If the underlying stream does not support seeking, the user has the responsibility of reading and processing the <see cref="P:System.Formats.Tar.TarEntry.DataStream" /> immediately after calling this method.</para>
          <para>The default value is <see langword="false" />.</para>
        </param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously retrieves the next entry from the archive stream.</summary>
        <returns>A value task containing a <see cref="T:System.Formats.Tar.TarEntry" /> instance if a valid entry was found, or <see langword="null" /> if the end of the archive has been reached.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.InvalidDataException">
The archive is malformed.

-or-

The archive contains entries in different formats.

-or-

More than one Global Extended Attributes Entry was found in the current <see cref="F:System.Formats.Tar.TarEntryFormat.Pax" /> archive.

-or-

Two or more Extended Attributes entries were found consecutively in the current <see cref="F:System.Formats.Tar.TarEntryFormat.Pax" /> archive.</exception>
        <exception cref="T:System.IO.IOException">An I/O problem occurred.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
