<Type Name="TarWriter" FullName="System.Formats.Tar.TarWriter">
  <TypeSignature Language="C#" Value="public sealed class TarWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TarWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Formats.Tar.TarWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TarWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type TarWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TarWriter sealed : IAsyncDisposable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Formats.Tar</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Writes a tar archive into a stream.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TarWriter (System.IO.Stream archiveStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream archiveStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarWriter.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (archiveStream As Stream)" />
      <MemberSignature Language="F#" Value="new System.Formats.Tar.TarWriter : System.IO.Stream -&gt; System.Formats.Tar.TarWriter" Usage="new System.Formats.Tar.TarWriter archiveStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TarWriter(System::IO::Stream ^ archiveStream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="archiveStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="archiveStream">The stream to write to.</param>
        <summary>Initializes a <see cref="T:System.Formats.Tar.TarWriter" /> instance that can write tar entries to the specified stream and closes the <paramref name="archiveStream" /> upon disposal of this instance.</summary>
        <remarks>When using this constructor, <see cref="F:System.Formats.Tar.TarEntryFormat.Pax" /> is used as the default format of the entries written to the archive using the <see cref="M:System.Formats.Tar.TarWriter.WriteEntry(System.String,System.String)" /> method.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveStream" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveStream" /> does not support writing.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TarWriter (System.IO.Stream archiveStream, bool leaveOpen = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream archiveStream, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarWriter.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (archiveStream As Stream, Optional leaveOpen As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Formats.Tar.TarWriter : System.IO.Stream * bool -&gt; System.Formats.Tar.TarWriter" Usage="new System.Formats.Tar.TarWriter (archiveStream, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="archiveStream" Type="System.IO.Stream" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="archiveStream">The stream to write to.</param>
        <param name="leaveOpen">
          <see langword="false" /> to dispose the <paramref name="archiveStream" /> when this instance is disposed; <see langword="true" /> to leave the stream open.</param>
        <summary>Initializes a <see cref="T:System.Formats.Tar.TarWriter" /> instance that can write tar entries to the specified stream and optionally leaves the stream open upon disposal of this instance. When using this constructor, the format of the resulting archive is <see cref="F:System.Formats.Tar.TarEntryFormat.Pax" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveStream" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveStream" /> does not support writing.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TarWriter (System.IO.Stream archiveStream, System.Formats.Tar.TarEntryFormat format = System.Formats.Tar.TarEntryFormat.Pax, bool leaveOpen = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream archiveStream, valuetype System.Formats.Tar.TarEntryFormat format, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarWriter.#ctor(System.IO.Stream,System.Formats.Tar.TarEntryFormat,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (archiveStream As Stream, Optional format As TarEntryFormat = System.Formats.Tar.TarEntryFormat.Pax, Optional leaveOpen As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Formats.Tar.TarWriter : System.IO.Stream * System.Formats.Tar.TarEntryFormat * bool -&gt; System.Formats.Tar.TarWriter" Usage="new System.Formats.Tar.TarWriter (archiveStream, format, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="archiveStream" Type="System.IO.Stream" />
        <Parameter Name="format" Type="System.Formats.Tar.TarEntryFormat" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="archiveStream">The stream to write to.</param>
        <param name="format">The format to use when calling <see cref="M:System.Formats.Tar.TarWriter.WriteEntry(System.String,System.String)" />. The default value is <see cref="F:System.Formats.Tar.TarEntryFormat.Pax" />.</param>
        <param name="leaveOpen">
          <see langword="false" /> to dispose the <paramref name="archiveStream" /> when this instance is disposed; <see langword="true" /> to leave the stream open.</param>
        <summary>Initializes a <see cref="T:System.Formats.Tar.TarWriter" /> instance that can write tar entries to the specified stream, optionally leaving the stream open upon disposal of this instance, and optionally specifying the format when writing entries using the <see cref="M:System.Formats.Tar.TarWriter.WriteEntry(System.String,System.String)" /> method.</summary>
        <remarks>The recommended format is <see cref="F:System.Formats.Tar.TarEntryFormat.Pax" /> for its flexibility.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="archiveStream" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="archiveStream" /> does not support writing.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="format" /> is either <see cref="F:System.Formats.Tar.TarEntryFormat.Unknown" /> or not one of the other enum values.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="tarWriter.Dispose " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes the current <see cref="T:System.Formats.Tar.TarWriter" /> instance, and closes the archive stream if the <c>leaveOpen</c> argument was set to <see langword="false" /> in the constructor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="tarWriter.DisposeAsync " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously disposes the current <see cref="T:System.Formats.Tar.TarWriter" /> instance, and closes the archive stream if the <c>leaveOpen</c> argument was set to <see langword="false" /> in the constructor.</summary>
        <returns>A value task that represents the asynchronous dispose operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public System.Formats.Tar.TarEntryFormat Format { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Formats.Tar.TarEntryFormat Format" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarWriter.Format" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Format As TarEntryFormat" />
      <MemberSignature Language="F#" Value="member this.Format : System.Formats.Tar.TarEntryFormat" Usage="System.Formats.Tar.TarWriter.Format" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Formats::Tar::TarEntryFormat Format { System::Formats::Tar::TarEntryFormat get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Tar.TarEntryFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the format of the entries when writing them to the archive using the <see cref="M:System.Formats.Tar.TarWriter.WriteEntry(System.String,System.String)" /> method.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (System.Formats.Tar.TarEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(class System.Formats.Tar.TarEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarWriter.WriteEntry(System.Formats.Tar.TarEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (entry As TarEntry)" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : System.Formats.Tar.TarEntry -&gt; unit" Usage="tarWriter.WriteEntry entry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::Formats::Tar::TarEntry ^ entry);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Formats.Tar.TarEntry" />
      </Parameters>
      <Docs>
        <param name="entry">The tar entry to write.</param>
        <summary>Writes the specified entry into the archive stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Before writing an entry to the archive, if you wrote data into the entry's <xref:System.Formats.Tar.TarEntry.DataStream>, make sure to rewind it to the desired start position.

These are the entry types supported for writing on each format:

- <xref:System.Formats.Tar.TarEntryFormat.V7>:

   - <xref:System.Formats.Tar.TarEntryType.Directory>.
   - <xref:System.Formats.Tar.TarEntryType.HardLink>.
   - <xref:System.Formats.Tar.TarEntryType.SymbolicLink>.
   - <xref:System.Formats.Tar.TarEntryType.V7RegularFile>.

- <xref:System.Formats.Tar.TarEntryFormat.Ustar>, <xref:System.Formats.Tar.TarEntryFormat.Pax>, and <xref:System.Formats.Tar.TarEntryFormat.Gnu>:

   - <xref:System.Formats.Tar.TarEntryType.BlockDevice>.
   - <xref:System.Formats.Tar.TarEntryType.CharacterDevice>.
   - <xref:System.Formats.Tar.TarEntryType.Directory>.
   - <xref:System.Formats.Tar.TarEntryType.Fifo>.
   - <xref:System.Formats.Tar.TarEntryType.HardLink>.
   - <xref:System.Formats.Tar.TarEntryType.RegularFile>.
   - <xref:System.Formats.Tar.TarEntryType.SymbolicLink>.

           ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The entry type is <see cref="F:System.Formats.Tar.TarEntryType.HardLink" /> or <see cref="F:System.Formats.Tar.TarEntryType.SymbolicLink" /> and the <see cref="P:System.Formats.Tar.TarEntry.LinkName" /> is <see langword="null" /> or empty.</exception>
        <exception cref="T:System.ObjectDisposedException">The archive stream is disposed.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entry" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O problem occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string fileName, string? entryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string fileName, string entryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarWriter.WriteEntry(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (fileName As String, entryName As String)" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * string -&gt; unit" Usage="tarWriter.WriteEntry (fileName, entryName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ fileName, System::String ^ entryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="entryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The path to the file to write to the archive.</param>
        <param name="entryName">The name of the file as it should be represented in the archive. It should include the optional relative path and the filename.</param>
        <summary>Writes the specified file into the archive stream as a tar entry.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">The archive stream is disposed.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileName" /> or <paramref name="entryName" /> is <see langword="null" /> or empty.</exception>
        <exception cref="T:System.IO.IOException">An I/O problem occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteEntryAsync (System.Formats.Tar.TarEntry entry, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteEntryAsync(class System.Formats.Tar.TarEntry entry, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarWriter.WriteEntryAsync(System.Formats.Tar.TarEntry,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteEntryAsync (entry As TarEntry, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.WriteEntryAsync : System.Formats.Tar.TarEntry * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="tarWriter.WriteEntryAsync (entry, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Formats.Tar.TarEntry" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="entry">The tar entry to write.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously writes the specified entry into the archive stream.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Before writing an entry to the archive, if you wrote data into the entry's <xref:System.Formats.Tar.TarEntry.DataStream>, make sure to rewind it to the desired start position.

These are the entry types supported for writing on each format:

- <xref:System.Formats.Tar.TarEntryFormat.V7>:

   - <xref:System.Formats.Tar.TarEntryType.Directory>
   - <xref:System.Formats.Tar.TarEntryType.HardLink>
   - <xref:System.Formats.Tar.TarEntryType.SymbolicLink>
   - <xref:System.Formats.Tar.TarEntryType.V7RegularFile>

- <xref:System.Formats.Tar.TarEntryFormat.Ustar>, <xref:System.Formats.Tar.TarEntryFormat.Pax>, and <xref:System.Formats.Tar.TarEntryFormat.Gnu>:

   - <xref:System.Formats.Tar.TarEntryType.BlockDevice>
   - <xref:System.Formats.Tar.TarEntryType.CharacterDevice>
   - <xref:System.Formats.Tar.TarEntryType.Directory>
   - <xref:System.Formats.Tar.TarEntryType.Fifo>
   - <xref:System.Formats.Tar.TarEntryType.HardLink>
   - <xref:System.Formats.Tar.TarEntryType.RegularFile>
   - <xref:System.Formats.Tar.TarEntryType.SymbolicLink>

           ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The entry type is <see cref="F:System.Formats.Tar.TarEntryType.HardLink" /> or <see cref="F:System.Formats.Tar.TarEntryType.SymbolicLink" /> and the <see cref="P:System.Formats.Tar.TarEntry.LinkName" /> is <see langword="null" /> or empty.</exception>
        <exception cref="T:System.ObjectDisposedException">The archive stream is disposed.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entry" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O problem occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteEntryAsync (string fileName, string? entryName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteEntryAsync(string fileName, string entryName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarWriter.WriteEntryAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteEntryAsync (fileName As String, entryName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.WriteEntryAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="tarWriter.WriteEntryAsync (fileName, entryName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">The path to the file to write to the archive.</param>
        <param name="entryName">The name of the file as it should be represented in the archive. It should include the optional relative path and the filename.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously writes the specified file into the archive stream as a tar entry.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">The archive stream is disposed.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileName" /> or <paramref name="entryName" /> is <see langword="null" /> or empty.</exception>
        <exception cref="T:System.IO.IOException">An I/O problem occurred.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
