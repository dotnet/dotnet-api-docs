<Type Name="TarEntry" FullName="System.Formats.Tar.TarEntry">
  <TypeSignature Language="C#" Value="public abstract class TarEntry" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TarEntry extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Formats.Tar.TarEntry" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TarEntry" />
  <TypeSignature Language="F#" Value="type TarEntry = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class TarEntry abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Formats.Tar</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines the core behavior of a tar entry from an archive.</summary>
    <remarks>All the properties exposed by this class are supported by the <see cref="F:System.Formats.Tar.TarEntryFormat.V7" />, <see cref="F:System.Formats.Tar.TarEntryFormat.Ustar" />, <see cref="F:System.Formats.Tar.TarEntryFormat.Pax" />, and <see cref="F:System.Formats.Tar.TarEntryFormat.Gnu" /> formats.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Checksum">
      <MemberSignature Language="C#" Value="public int Checksum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Checksum" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.Checksum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Checksum As Integer" />
      <MemberSignature Language="F#" Value="member this.Checksum : int" Usage="System.Formats.Tar.TarEntry.Checksum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Checksum { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The checksum of all the fields in this entry. The value is non-zero either when the entry is read from an existing archive, or after the entry is written to a new archive.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream? DataStream { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream DataStream" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.DataStream" />
      <MemberSignature Language="VB.NET" Value="Public Property DataStream As Stream" />
      <MemberSignature Language="F#" Value="member this.DataStream : System.IO.Stream with get, set" Usage="System.Formats.Tar.TarEntry.DataStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ DataStream { System::IO::Stream ^ get(); void set(System::IO::Stream ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data section of this entry. If the <see cref="P:System.Formats.Tar.TarEntry.EntryType" /> does not support containing data, then returns <see langword="null" />.</summary>
        <value>
          <para>Gets a stream that represents the data section of this entry.</para>
          <para>Sets a new stream that represents the data section, if it makes sense for the <see cref="P:System.Formats.Tar.TarEntry.EntryType" /> to contain data. If a stream already exists, the old stream is disposed before substituting it with the new stream. Setting a <see langword="null" /> stream is allowed.</para>
        </value>
        <remarks>If you write data to this data stream, make sure to rewind it to the desired start position before writing this entry into an archive using <see cref="M:System.Formats.Tar.TarWriter.WriteEntry(System.Formats.Tar.TarEntry)" />.</remarks>
        <exception cref="T:System.InvalidOperationException">Setting a data section is not supported because the <see cref="P:System.Formats.Tar.TarEntry.EntryType" /> is not <see cref="F:System.Formats.Tar.TarEntryType.RegularFile" /> (or <see cref="F:System.Formats.Tar.TarEntryType.V7RegularFile" /> for an archive of <see cref="F:System.Formats.Tar.TarEntryFormat.V7" /> format).</exception>
        <exception cref="T:System.ArgumentException">The stream does not support reading.</exception>
        <exception cref="T:System.IO.IOException">An I/O problem occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Formats.Tar.TarEntryType EntryType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Formats.Tar.TarEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntryType As TarEntryType" />
      <MemberSignature Language="F#" Value="member this.EntryType : System.Formats.Tar.TarEntryType" Usage="System.Formats.Tar.TarEntry.EntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Formats::Tar::TarEntryType EntryType { System::Formats::Tar::TarEntryType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Tar.TarEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of filesystem object represented by this entry.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractToFile">
      <MemberSignature Language="C#" Value="public void ExtractToFile (string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExtractToFile(string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarEntry.ExtractToFile(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExtractToFile (destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="F#" Value="member this.ExtractToFile : string * bool -&gt; unit" Usage="tarEntry.ExtractToFile (destinationFileName, overwrite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExtractToFile(System::String ^ destinationFileName, bool overwrite);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="destinationFileName">The path to the destination file.</param>
        <param name="overwrite">
          <see langword="true" /> if this method should overwrite any existing filesystem object located in the <paramref name="destinationFileName" /> path; <see langword="false" /> to prevent overwriting.</param>
        <summary>Extracts the current file or directory to the filesystem. Symbolic links and hard links are not extracted.</summary>
        <remarks>
          <para>Files of type <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" />, <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" />, or <see cref="F:System.Formats.Tar.TarEntryType.Fifo" /> can only be extracted in Unix platforms.</para>
          <para>Elevation is required to extract a <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" /> or <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" /> to disk.</para>
          <para>Symbolic links can be recreated using <see cref="M:System.IO.File.CreateSymbolicLink(System.String,System.String)" />, <see cref="M:System.IO.Directory.CreateSymbolicLink(System.String,System.String)" />, or <see cref="M:System.IO.FileSystemInfo.CreateAsSymbolicLink(System.String)" />.</para>
          <para>Hard links can only be extracted when using <see cref="M:System.Formats.Tar.TarFile.ExtractToDirectory(System.IO.Stream,System.String,System.Boolean)" /> or <see cref="M:System.Formats.Tar.TarFile.ExtractToDirectory(System.String,System.String,System.Boolean)" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> is empty.</exception>
        <exception cref="T:System.IO.IOException">
The parent directory of <paramref name="destinationFileName" /> does not exist.

-or-

<paramref name="overwrite" /> is <see langword="false" /> and a file already exists in <paramref name="destinationFileName" />.

-or-

A directory exists with the same name as <paramref name="destinationFileName" />.

-or-

An I/O problem occurred.</exception>
        <exception cref="T:System.InvalidOperationException">Attempted to extract a symbolic link, a hard link, or an unsupported entry type.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Operation not permitted due to insufficient permissions.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtractToFileAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ExtractToFileAsync (string destinationFileName, bool overwrite, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ExtractToFileAsync(string destinationFileName, bool overwrite, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarEntry.ExtractToFileAsync(System.String,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExtractToFileAsync (destinationFileName As String, overwrite As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.ExtractToFileAsync : string * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="tarEntry.ExtractToFileAsync (destinationFileName, overwrite, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destinationFileName">The path to the destination file.</param>
        <param name="overwrite">
          <see langword="true" /> if this method should overwrite any existing filesystem object located in the <paramref name="destinationFileName" /> path; <see langword="false" /> to prevent overwriting.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>Asynchronously extracts the current entry to the filesystem.</summary>
        <returns>A task that represents the asynchronous extraction operation.</returns>
        <remarks>
          <para>Files of type <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" />, <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" />, or <see cref="F:System.Formats.Tar.TarEntryType.Fifo" /> can only be extracted in Unix platforms.</para>
          <para>Elevation is required to extract a <see cref="F:System.Formats.Tar.TarEntryType.BlockDevice" /> or <see cref="F:System.Formats.Tar.TarEntryType.CharacterDevice" /> to disk.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> is empty.</exception>
        <exception cref="T:System.IO.IOException">
The parent directory of <paramref name="destinationFileName" /> does not exist.

-or-

<paramref name="overwrite" /> is <see langword="false" /> and a file already exists in <paramref name="destinationFileName" />.

-or-

A directory exists with the same name as <paramref name="destinationFileName" />.

-or-

An I/O problem occurred.</exception>
        <exception cref="T:System.InvalidOperationException">The entry type is unsupported.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Permissions are insufficient.</exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public System.Formats.Tar.TarEntryFormat Format { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Formats.Tar.TarEntryFormat Format" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.Format" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Format As TarEntryFormat" />
      <MemberSignature Language="F#" Value="member this.Format : System.Formats.Tar.TarEntryFormat" Usage="System.Formats.Tar.TarEntry.Format" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Formats::Tar::TarEntryFormat Format { System::Formats::Tar::TarEntryFormat get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Tar.TarEntryFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The format of the entry.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gid">
      <MemberSignature Language="C#" Value="public int Gid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Gid" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.Gid" />
      <MemberSignature Language="VB.NET" Value="Public Property Gid As Integer" />
      <MemberSignature Language="F#" Value="member this.Gid : int with get, set" Usage="System.Formats.Tar.TarEntry.Gid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Gid { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ID of the group that owns the file represented by this entry.</summary>
        <value>To be added.</value>
        <remarks>The value in this field has no effect on Windows platforms.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Long" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Formats.Tar.TarEntry.Length" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When the <see cref="P:System.Formats.Tar.TarEntry.EntryType" /> indicates an entry that can contain data, gets the length in bytes of such data.</summary>
        <value>To be added.</value>
        <remarks>The entry type that commonly contains data is <see cref="F:System.Formats.Tar.TarEntryType.RegularFile" /> (or <see cref="F:System.Formats.Tar.TarEntryType.V7RegularFile" /> in the <see cref="F:System.Formats.Tar.TarEntryFormat.V7" /> format). Other uncommon entry types that can also contain data are: <see cref="F:System.Formats.Tar.TarEntryType.ContiguousFile" />, <see cref="F:System.Formats.Tar.TarEntryType.DirectoryList" />, <see cref="F:System.Formats.Tar.TarEntryType.MultiVolume" />, and <see cref="F:System.Formats.Tar.TarEntryType.SparseFile" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkName">
      <MemberSignature Language="C#" Value="public string LinkName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LinkName" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.LinkName" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkName As String" />
      <MemberSignature Language="F#" Value="member this.LinkName : string with get, set" Usage="System.Formats.Tar.TarEntry.LinkName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LinkName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When the <see cref="P:System.Formats.Tar.TarEntry.EntryType" /> indicates a <see cref="F:System.Formats.Tar.TarEntryType.SymbolicLink" /> or a <see cref="F:System.Formats.Tar.TarEntryType.HardLink" />, gets or sets the link target path of the link.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The entry type is not <see cref="F:System.Formats.Tar.TarEntryType.HardLink" /> or <see cref="F:System.Formats.Tar.TarEntryType.SymbolicLink" />.</exception>
        <exception cref="T:System.ArgumentNullException">The specified value is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The specified value is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.IO.UnixFileMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.UnixFileMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As UnixFileMode" />
      <MemberSignature Language="F#" Value="member this.Mode : System.IO.UnixFileMode with get, set" Usage="System.Formats.Tar.TarEntry.Mode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::UnixFileMode Mode { System::IO::UnixFileMode get(); void set(System::IO::UnixFileMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.UnixFileMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the Unix file permissions of the file represented by this entry.</summary>
        <value>To be added.</value>
        <remarks>The value in this field has no effect on Windows platforms.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModificationTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ModificationTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeOffset ModificationTime" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.ModificationTime" />
      <MemberSignature Language="VB.NET" Value="Public Property ModificationTime As DateTimeOffset" />
      <MemberSignature Language="F#" Value="member this.ModificationTime : DateTimeOffset with get, set" Usage="System.Formats.Tar.TarEntry.ModificationTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeOffset ModificationTime { DateTimeOffset get(); void set(DateTimeOffset value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the last time the contents of the file represented by this entry were modified.</summary>
        <value>To be added.</value>
        <remarks>In Unix platforms, this timestamp is commonly known as <c>mtime</c>.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value is larger than <see cref="F:System.DateTimeOffset.UnixEpoch" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Formats.Tar.TarEntry.Name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the entry, which includes the relative path and the filename.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Tar.TarEntry.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tarEntry.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current entry.</summary>
        <returns>The <see cref="P:System.Formats.Tar.TarEntry.Name" /> of the current entry.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public int Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Uid" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Tar.TarEntry.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As Integer" />
      <MemberSignature Language="F#" Value="member this.Uid : int with get, set" Usage="System.Formats.Tar.TarEntry.Uid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Uid { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Tar</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the ID of the user that owns the file represented by this entry.</summary>
        <value>To be added.</value>
        <remarks>The value in this field has no effect on Windows platforms.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
