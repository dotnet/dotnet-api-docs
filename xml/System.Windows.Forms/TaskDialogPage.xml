<Type Name="TaskDialogPage" FullName="System.Windows.Forms.TaskDialogPage">
  <TypeSignature Language="C#" Value="public class TaskDialogPage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskDialogPage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TaskDialogPage" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskDialogPage" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskDialogPage" />
  <TypeSignature Language="F#" Value="type TaskDialogPage = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a page of content of a task dialog.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

 It is possible to navigate a task dialog while it is shown by invoking the <xref:System.Windows.Forms.TaskDialogPage.Navigate(System.Windows.Forms.TaskDialogPage)> method with a target <xref:System.Windows.Forms.TaskDialogPage> instance.

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskDialogPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TaskDialogPage.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskDialogPage();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.TaskDialogPage" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowCancel">
      <MemberSignature Language="C#" Value="public bool AllowCancel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCancel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.AllowCancel" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowCancel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowCancel { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowCancel : bool with get, set" Usage="System.Windows.Forms.TaskDialogPage.AllowCancel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the task dialog can be closed with <see cref="P:System.Windows.Forms.TaskDialogButton.Cancel" /> as resulting button by pressing ESC or Alt+F4 or by clicking the title bar's close button, even if a <see cref="P:System.Windows.Forms.TaskDialogButton.Cancel" /> button isn't added to the <see cref="P:System.Windows.Forms.TaskDialogPage.Buttons" /> collection.</summary>
        <value>
          <see langword="true" /> to allow to close the dialog by pressing ESC or Alt+F4 or by clicking the title bar's close button; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 You can intercept cancellation of the dialog without displaying a "Cancel" button by adding the <xref:System.Windows.Forms.TaskDialogButton.Cancel> button that has its <xref:System.Windows.Forms.TaskDialogButton.Visible> property set to `false`.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and this page instance is currently bound to a task dialog.</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowMinimize">
      <MemberSignature Language="C#" Value="public bool AllowMinimize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMinimize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.AllowMinimize" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowMinimize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowMinimize { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowMinimize : bool with get, set" Usage="System.Windows.Forms.TaskDialogPage.AllowMinimize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the task dialog can be minimized when it is shown modeless.</summary>
        <value>
          <see langword="true" /> to specify that the task dialog can be minimized; otherwise, <see langword="false" />.
              The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 When setting this property to `true`, <xref:System.Windows.Forms.TaskDialogPage.AllowCancel> is automatically implied.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and this page instance is currently bound to a task dialog.</exception>
      </Docs>
    </Member>
    <Member MemberName="BoundDialog">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TaskDialog BoundDialog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TaskDialog BoundDialog" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.BoundDialog" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BoundDialog As TaskDialog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TaskDialog ^ BoundDialog { System::Windows::Forms::TaskDialog ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BoundDialog : System.Windows.Forms.TaskDialog" Usage="System.Windows.Forms.TaskDialogPage.BoundDialog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TaskDialog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Windows.Forms.TaskDialog" /> instance which this page is currently bound to.</summary>
        <value>The <see cref="T:System.Windows.Forms.TaskDialog" /> instance which this page is bound to, or <see langword="null" /> if this page is not currently bound.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 A page will be bound while it is being displayed, which is indicated by the events <xref:System.Windows.Forms.TaskDialogPage.Created> and <xref:System.Windows.Forms.TaskDialogPage.Destroyed>.

 While a page is bound to a task dialog, you cannot show that page instance using a different <xref:System.Windows.Forms.TaskDialog> instance at the same time.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buttons">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TaskDialogButtonCollection? Buttons { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TaskDialogButtonCollection Buttons" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.Buttons" />
      <MemberSignature Language="VB.NET" Value="Public Property Buttons As TaskDialogButtonCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TaskDialogButtonCollection ^ Buttons { System::Windows::Forms::TaskDialogButtonCollection ^ get(); void set(System::Windows::Forms::TaskDialogButtonCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Buttons : System.Windows.Forms.TaskDialogButtonCollection with get, set" Usage="System.Windows.Forms.TaskDialogPage.Buttons" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TaskDialogButtonCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the collection of push buttons to be shown in this page.</summary>
        <value>The collection of custom buttons to be shown in this page.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and this page instance is currently bound to a task dialog.</exception>
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Caption : string with get, set" Usage="System.Windows.Forms.TaskDialogPage.Caption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text to display in the title bar of the task dialog.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 This property can be set while the dialog is shown.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and the task dialog has started navigating to this page instance, but the <see cref="E:System.Windows.Forms.TaskDialogPage.Created" /> event has not been raised yet.
              - or - The property is set on a page instance that is currently bound to a task dialog, but the dialog has just started navigating to a different page.</exception>
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public event EventHandler Created;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Created" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TaskDialogPage.Created" />
      <MemberSignature Language="VB.NET" Value="Public Event Created As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Created;" />
      <MemberSignature Language="F#" Value="member this.Created : EventHandler " Usage="member this.Created : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after this instance is bound to a task dialog and the task dialog has created the GUI elements represented by this <see cref="T:System.Windows.Forms.TaskDialogPage" /> instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 This will happen after showing or navigating the dialog.

 When this event occurs, the <xref:System.Windows.Forms.TaskDialogPage.BoundDialog> property will return the <xref:System.Windows.Forms.TaskDialog> instance which this page is bound to.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultButton">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TaskDialogButton DefaultButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TaskDialogButton DefaultButton" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.DefaultButton" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultButton As TaskDialogButton" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TaskDialogButton ^ DefaultButton { System::Windows::Forms::TaskDialogButton ^ get(); void set(System::Windows::Forms::TaskDialogButton ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultButton : System.Windows.Forms.TaskDialogButton with get, set" Usage="System.Windows.Forms.TaskDialogPage.DefaultButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TaskDialogButton</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default button in the task dialog.</summary>
        <value>The default button in the task dialog.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Destroyed">
      <MemberSignature Language="C#" Value="public event EventHandler Destroyed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Destroyed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TaskDialogPage.Destroyed" />
      <MemberSignature Language="VB.NET" Value="Public Event Destroyed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Destroyed;" />
      <MemberSignature Language="F#" Value="member this.Destroyed : EventHandler " Usage="member this.Destroyed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the task dialog is about to destroy the GUI elements represented by this <see cref="T:System.Windows.Forms.TaskDialogPage" /> instance and it is about to be unbound from the task dialog.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 This will happen when closing or navigating the dialog.

 After this event occurs, the <xref:System.Windows.Forms.TaskDialogPage.BoundDialog> property will return `null`.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expander">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TaskDialogExpander Expander { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TaskDialogExpander Expander" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.Expander" />
      <MemberSignature Language="VB.NET" Value="Public Property Expander As TaskDialogExpander" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TaskDialogExpander ^ Expander { System::Windows::Forms::TaskDialogExpander ^ get(); void set(System::Windows::Forms::TaskDialogExpander ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Expander : System.Windows.Forms.TaskDialogExpander with get, set" Usage="System.Windows.Forms.TaskDialogPage.Expander" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TaskDialogExpander</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the dialog expander to be shown in this page.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 The expander button (and the expanded area) will only be shown if its <xref:System.Windows.Forms.TaskDialogExpander.Text> property is not `null` or an empty string.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and this page instance is currently bound to a task dialog.</exception>
      </Docs>
    </Member>
    <Member MemberName="Footnote">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TaskDialogFootnote Footnote { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TaskDialogFootnote Footnote" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.Footnote" />
      <MemberSignature Language="VB.NET" Value="Public Property Footnote As TaskDialogFootnote" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TaskDialogFootnote ^ Footnote { System::Windows::Forms::TaskDialogFootnote ^ get(); void set(System::Windows::Forms::TaskDialogFootnote ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Footnote : System.Windows.Forms.TaskDialogFootnote with get, set" Usage="System.Windows.Forms.TaskDialogPage.Footnote" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TaskDialogFootnote</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the footnote to be shown in this page.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 The footnote will only be shown if its <xref:System.Windows.Forms.TaskDialogFootnote.Text> property is not `null` or an empty string.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and this page instance is currently bound to a task dialog.</exception>
      </Docs>
    </Member>
    <Member MemberName="Heading">
      <MemberSignature Language="C#" Value="public string Heading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Heading" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.Heading" />
      <MemberSignature Language="VB.NET" Value="Public Property Heading As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Heading { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Heading : string with get, set" Usage="System.Windows.Forms.TaskDialogPage.Heading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the heading (main instruction).</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 This property can be set while the dialog is shown.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set on a page instance that is currently bound to a task dialog, but the dialog has just started navigating to a different page.</exception>
      </Docs>
    </Member>
    <Member MemberName="HelpRequest">
      <MemberSignature Language="C#" Value="public event EventHandler HelpRequest;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HelpRequest" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TaskDialogPage.HelpRequest" />
      <MemberSignature Language="VB.NET" Value="Public Event HelpRequest As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HelpRequest;" />
      <MemberSignature Language="F#" Value="member this.HelpRequest : EventHandler " Usage="member this.HelpRequest : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user presses F1 while the task dialog has focus, or when the user clicks the <see cref="P:System.Windows.Forms.TaskDialogButton.Help" /> button.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TaskDialogIcon Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TaskDialogIcon Icon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.Icon" />
      <MemberSignature Language="VB.NET" Value="Public Property Icon As TaskDialogIcon" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TaskDialogIcon ^ Icon { System::Windows::Forms::TaskDialogIcon ^ get(); void set(System::Windows::Forms::TaskDialogIcon ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Icon : System.Windows.Forms.TaskDialogIcon with get, set" Usage="System.Windows.Forms.TaskDialogPage.Icon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TaskDialogIcon</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the main icon.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 This property can be set while the dialog is shown, however, it cannot be switched between instances created from an <xref:System.Drawing.Icon> (or from a handle pointer) and standard icon instances.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and the task dialog has started navigating to this page instance, but the <see cref="E:System.Windows.Forms.TaskDialogPage.Created" /> event has not been raised yet.
              - or - The property is set on a page instance that is currently bound to a task dialog, but the dialog has just started navigating to a different page.</exception>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (System.Windows.Forms.TaskDialogPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Windows.Forms.TaskDialogPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TaskDialogPage.Navigate(System.Windows.Forms.TaskDialogPage)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (page As TaskDialogPage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::Windows::Forms::TaskDialogPage ^ page);" />
      <MemberSignature Language="F#" Value="member this.Navigate : System.Windows.Forms.TaskDialogPage -&gt; unit" Usage="taskDialogPage.Navigate page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Windows.Forms.TaskDialogPage" />
      </Parameters>
      <Docs>
        <param name="page">The page instance that contains the contents which this task dialog will display.</param>
        <summary>Shows the new content in the current task dialog.
            <paramref name="page" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 During the navigation the dialog will recreate the dialog from the specified `page` and its controls, and unbind and destroy the currently shown page.

 You can't manipulate the page or its controls immediately after navigating the dialog (except for calling <xref:System.Windows.Forms.TaskDialog.Close> or navigating the dialog again).
              You will need to wait for the <xref:System.Windows.Forms.TaskDialogPage.Created> event to occur before you can manipulate the page or its controls.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The page instance is not currently bound to a dialog, <see cref="P:System.Windows.Forms.TaskDialogPage.BoundDialog" /> is <see langword="null" />.
              - or - This page instance contains an invalid configuration.
              - or - This method is called from within the <see cref="E:System.Windows.Forms.TaskDialogRadioButton.CheckedChanged" /> event of one of the radio buttons of the current task dialog.
              - or - The task dialog has already been closed.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnCreated">
      <MemberSignature Language="C#" Value="protected internal void OnCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void OnCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TaskDialogPage.OnCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub OnCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void OnCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnCreated : EventArgs -&gt; unit" Usage="taskDialogPage.OnCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TaskDialogPage.Created" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDestroyed">
      <MemberSignature Language="C#" Value="protected internal void OnDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void OnDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TaskDialogPage.OnDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub OnDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void OnDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnDestroyed : EventArgs -&gt; unit" Usage="taskDialogPage.OnDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TaskDialogPage.Destroyed" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHelpRequest">
      <MemberSignature Language="C#" Value="protected internal void OnHelpRequest (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void OnHelpRequest(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TaskDialogPage.OnHelpRequest(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub OnHelpRequest (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void OnHelpRequest(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnHelpRequest : EventArgs -&gt; unit" Usage="taskDialogPage.OnHelpRequest e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.TaskDialogPage.HelpRequest" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProgressBar">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TaskDialogProgressBar ProgressBar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TaskDialogProgressBar ProgressBar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.ProgressBar" />
      <MemberSignature Language="VB.NET" Value="Public Property ProgressBar As TaskDialogProgressBar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TaskDialogProgressBar ^ ProgressBar { System::Windows::Forms::TaskDialogProgressBar ^ get(); void set(System::Windows::Forms::TaskDialogProgressBar ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProgressBar : System.Windows.Forms.TaskDialogProgressBar with get, set" Usage="System.Windows.Forms.TaskDialogPage.ProgressBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TaskDialogProgressBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the progress bar to be shown in this page.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 The progress bar will only be shown if its <xref:System.Windows.Forms.TaskDialogProgressBar.State> property is not <xref:System.Windows.Forms.TaskDialogProgressBarState.None>.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and this page instance is currently bound to a task dialog.</exception>
      </Docs>
    </Member>
    <Member MemberName="RadioButtons">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TaskDialogRadioButtonCollection? RadioButtons { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TaskDialogRadioButtonCollection RadioButtons" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.RadioButtons" />
      <MemberSignature Language="VB.NET" Value="Public Property RadioButtons As TaskDialogRadioButtonCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TaskDialogRadioButtonCollection ^ RadioButtons { System::Windows::Forms::TaskDialogRadioButtonCollection ^ get(); void set(System::Windows::Forms::TaskDialogRadioButtonCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RadioButtons : System.Windows.Forms.TaskDialogRadioButtonCollection with get, set" Usage="System.Windows.Forms.TaskDialogPage.RadioButtons" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TaskDialogRadioButtonCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the collection of radio buttons to be shown in this page.</summary>
        <value>The collection of radio buttons to be shown in this page.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and this page instance is currently bound to a task dialog.</exception>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.RightToLeftLayout" />
      <MemberSignature Language="VB.NET" Value="Public Property RightToLeftLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeftLayout { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeftLayout : bool with get, set" Usage="System.Windows.Forms.TaskDialogPage.RightToLeftLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether text and controls are displayed reading right to left.</summary>
        <value>
          <see langword="true" /> to display text and controls reading right to left; <see langword="false" /> to display controls reading left to right. The default value is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 Note that once a task dialog has been opened with or has navigated to a <xref:System.Windows.Forms.TaskDialogPage> where this flag is set, it will keep on subsequent navigations to a new <xref:System.Windows.Forms.TaskDialogPage> even when it doesn't have this flag set.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and this page instance is currently bound to a task dialog.</exception>
      </Docs>
    </Member>
    <Member MemberName="SizeToContent">
      <MemberSignature Language="C#" Value="public bool SizeToContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SizeToContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.SizeToContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SizeToContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SizeToContent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SizeToContent : bool with get, set" Usage="System.Windows.Forms.TaskDialogPage.SizeToContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the width of the task dialog is determined by the width of its content area (similar to Message Box sizing behavior).</summary>
        <value>
          <see langword="true" /> to determine the width of the task dialog by the width of its content area; otherwise, <see langword="false" />. The default value is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and this page instance is currently bound to a task dialog.</exception>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.TaskDialogPage.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the dialog's primary text content.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 This property can be set while the dialog is shown.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set on a page instance that is currently bound to a task dialog, but the dialog has just started navigating to a different page.</exception>
      </Docs>
    </Member>
    <Member MemberName="Verification">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TaskDialogVerificationCheckBox Verification { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TaskDialogVerificationCheckBox Verification" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TaskDialogPage.Verification" />
      <MemberSignature Language="VB.NET" Value="Public Property Verification As TaskDialogVerificationCheckBox" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TaskDialogVerificationCheckBox ^ Verification { System::Windows::Forms::TaskDialogVerificationCheckBox ^ get(); void set(System::Windows::Forms::TaskDialogVerificationCheckBox ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Verification : System.Windows.Forms.TaskDialogVerificationCheckBox with get, set" Usage="System.Windows.Forms.TaskDialogPage.Verification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TaskDialogVerificationCheckBox</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the verification checkbox to be shown in this page.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 The verification checkbox will only be shown if its <xref:System.Windows.Forms.TaskDialogVerificationCheckBox.Text> property is not `null` or an empty string.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The property is set and this page instance is currently bound to a task dialog.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
