<Type Name="ControlEventArgs" FullName="System.Windows.Forms.ControlEventArgs">
  <TypeSignature Language="C#" Value="public class ControlEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ControlEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="F#" Value="type ControlEventArgs = class&#xA;    inherit EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides data for the <see cref="E:System.Windows.Forms.Control.ControlAdded" /> and <see cref="E:System.Windows.Forms.Control.ControlRemoved" /> events.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Handling and Raising Events](/dotnet/standard/events/).  
  
   
  
## Examples  
 The following code example demonstrates the use of the <xref:System.Windows.Forms.Control.ControlAdded> and <xref:System.Windows.Forms.Control.ControlRemoved> events. The example requires that two <xref:System.Windows.Forms.Button> controls are added to the form and connected to the `addControl_Click` and `removeControl_Click` event handling methods.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System.Windows.Forms/Control/ControlAdded/form1.cs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb" id="Snippet1":::  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ControlEventHandler" />
    <altmember cref="E:System.Windows.Forms.Control.ControlAdded" />
    <altmember cref="E:System.Windows.Forms.Control.ControlRemoved" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlEventArgs (System.Windows.Forms.Control control);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;windowsdesktop-3.0;windowsdesktop-3.1;windowsdesktop-5.0;windowsdesktop-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlEventArgs.#ctor(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (control As Control)" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ControlEventArgs : System.Windows.Forms.Control -&gt; System.Windows.Forms.ControlEventArgs" Usage="new System.Windows.Forms.ControlEventArgs control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlEventArgs(System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="C#" Value="public ControlEventArgs (System.Windows.Forms.Control? control);" FrameworkAlternate="windowsdesktop-7.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">The <see cref="T:System.Windows.Forms.Control" /> to store in this event.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ControlEventArgs" /> class for the specified control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of the <xref:System.Windows.Forms.Control.ControlAdded> and <xref:System.Windows.Forms.Control.ControlRemoved> events. The example requires that two <xref:System.Windows.Forms.Button> controls are added to the form and connected to the `addControl_Click` and `removeControl_Click` event handling methods.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System.Windows.Forms/Control/ControlAdded/form1.cs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ControlEventArgs.Control" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;windowsdesktop-3.0;windowsdesktop-3.1;windowsdesktop-5.0;windowsdesktop-6.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ControlEventArgs.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Control" />
      <MemberSignature Language="F#" Value="member this.Control : System.Windows.Forms.Control" Usage="System.Windows.Forms.ControlEventArgs.Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Control { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control? Control { get; }" FrameworkAlternate="windowsdesktop-7.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the control object used by this event.</summary>
        <value>The <see cref="T:System.Windows.Forms.Control" /> used by this event.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of the <xref:System.Windows.Forms.Control.ControlAdded> and <xref:System.Windows.Forms.Control.ControlRemoved> events. The example requires that two <xref:System.Windows.Forms.Button> controls are added to the form and connected to the `addControl_Click` and `removeControl_Click` event handling methods.  
  
 :::code language="cpp" source="~/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/snippets/csharp/System.Windows.Forms/Control/ControlAdded/form1.cs" id="Snippet1":::
 :::code language="vb" source="~/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb" id="Snippet1":::  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control" />
      </Docs>
    </Member>
  </Members>
</Type>
