<Type Name="ControlEventHandler" FullName="System.Windows.Forms.ControlEventHandler">
  <TypeSignature Language="C#" Value="public delegate void ControlEventHandler(object sender, ControlEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ControlEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ControlEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ControlEventHandler(sender As Object, e As ControlEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ControlEventHandler(System::Object ^ sender, ControlEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ControlEventHandler = delegate of obj * ControlEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">The source of the event.</param>
    <param name="e">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</param>
    <summary>Represents the method that will handle the <see cref="E:System.Windows.Forms.Control.ControlAdded" /> and <see cref="E:System.Windows.Forms.Control.ControlRemoved" /> events of the <see cref="T:System.Windows.Forms.Control" /> class.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you create a <xref:System.Windows.Forms.ControlEventArgs> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 The following code example creates a <xref:System.Windows.Forms.Binding>, adds a <xref:System.Windows.Forms.ConvertEventHandler> delegate to both the <xref:System.Windows.Forms.Binding.Parse> and <xref:System.Windows.Forms.Binding.Format> events, and adds the <xref:System.Windows.Forms.Binding> to the <xref:System.Windows.Forms.BindingsCollection> of a <xref:System.Windows.Forms.TextBox> control through the <xref:System.Windows.Forms.Control.DataBindings%2A> property. The `DecimalToCurrencyString` event delegate, added to the <xref:System.Windows.Forms.Binding.Format> event, formats the bound value (a <xref:System.Decimal> type) as currency using the <xref:System.Decimal.ToString%2A> method. The `CurrencyStringToDecimal` event delegate, added to the <xref:System.Windows.Forms.Binding.Parse> event, converts the value displayed by the control back to the <xref:System.Decimal> type.  
  
 [!code-cpp[Classic ControlEventHandler Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ControlEventHandler Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ControlEventHandler Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ControlEventHandler Example/CS/source.cs#1)]
 [!code-vb[Classic ControlEventHandler Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ControlEventHandler Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Binding" />
    <altmember cref="T:System.Windows.Forms.ControlEventArgs" />
    <altmember cref="E:System.Windows.Forms.Control.ControlAdded" />
    <altmember cref="E:System.Windows.Forms.Control.ControlRemoved" />
  </Docs>
</Type>
